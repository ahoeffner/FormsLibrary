{"hash":"fade0983c4614eee9811c27ebef7a49bdb1feba4","fesm2020":{"code":"import * as i0 from '@angular/core';\nimport { Injectable, ElementRef, Component, ChangeDetectionStrategy, ViewChild, Input, NgModule } from '@angular/core';\nimport * as i1 from '@angular/common/http';\nimport { HttpErrorResponse, HttpClientModule } from '@angular/common/http';\nimport * as i1$1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\n\nclass Utils {\n    getName(component) {\n        if (component == null)\n            return (null);\n        let name = component.constructor.name;\n        if (name == \"String\")\n            name = component;\n        if (name == \"Function\")\n            name = component.name;\n        return (name.toLowerCase());\n    }\n    clone(obj) {\n        let clone = {};\n        if (obj == null)\n            return (null);\n        Object.keys(obj).forEach((key) => { clone[key] = obj[key]; });\n        return (clone);\n    }\n    getType(component) {\n        let type = null;\n        let code = component.toString();\n        if (code == \"[object Object]\")\n            code = component.constructor.toString();\n        if (code.startsWith(\"class\")) {\n            code = code.substring(0, code.indexOf(\"{\"));\n            let pos = code.indexOf(\"extends\");\n            if (pos > 0) {\n                let pos1 = code.indexOf(\"[\", pos);\n                let pos2 = code.indexOf(\"]\", pos1);\n                type = code.substring(pos1 + 2, pos2 - 1);\n            }\n        }\n        return (type);\n    }\n    getParams(func) {\n        let code = func.toString();\n        code = code.replace(/\\/\\*[\\s\\S]*?\\*\\//g, '')\n            .replace(/\\/\\/(.)*/g, '')\n            .replace(/{[\\s\\S]*}/, '')\n            .replace(/=>/g, '')\n            .trim();\n        let end = code.length - 1;\n        let start = code.indexOf(\"(\") + 1;\n        let params = [];\n        let tokens = code.substring(start, end).split(\", \");\n        tokens.forEach((element) => {\n            // Removing any default value\n            element = element.replace(/=[\\s\\S]*/g, '').trim();\n            if (element.length > 0)\n                params.push(element);\n        });\n        return (params);\n    }\n}\n\nclass BlockDefinitions {\n    static setDefaultAlias(block, alias) {\n        if (alias == null)\n            alias = block;\n        BlockDefinitions.alias.set(block, alias);\n    }\n    static getDefaultAlias(alias) {\n        alias = alias.toLowerCase();\n        let bname = BlockDefinitions.alias.get(alias);\n        if (bname == null)\n            bname = alias;\n        return (bname);\n    }\n    static setBlock(form, def) {\n        let blocks = BlockDefinitions.blocks.get(form.toLowerCase());\n        if (blocks == null) {\n            blocks = [];\n            BlockDefinitions.blocks.set(form.toLowerCase(), blocks);\n        }\n        if (def.prop != null)\n            blocks.push(def);\n        else\n            blocks.unshift(def);\n    }\n    static getBlocks(form) {\n        let blocks = BlockDefinitions.blocks.get(form.toLowerCase());\n        if (blocks == null)\n            blocks = [];\n        return (blocks);\n    }\n    static setKey(block, def) {\n        let keys = BlockDefinitions.keys.get(block.toLowerCase());\n        if (keys == null) {\n            keys = [];\n            BlockDefinitions.keys.set(block.toLowerCase(), keys);\n        }\n        keys.unshift(def);\n    }\n    static getKeys(block) {\n        let keys = BlockDefinitions.keys.get(block.toLowerCase());\n        if (keys == null)\n            keys = [];\n        return (keys);\n    }\n}\nBlockDefinitions.alias = new Map();\nBlockDefinitions.blocks = new Map();\nBlockDefinitions.keys = new Map();\n\nconst key = (name, unique, columns) => {\n    function define(comp) {\n        let utils = new Utils();\n        let cname = utils.getName(comp);\n        let ctype = utils.getType(comp);\n        if (ctype != \"Block\") {\n            console.log(\"@key(\" + name + \") can only be used on blocks\");\n            return;\n        }\n        let arr = true;\n        let cols = [];\n        if (columns.constructor.name == \"String\")\n            arr = false;\n        if (arr)\n            cols = columns;\n        else\n            cols.push(columns);\n        let lccols = [];\n        cols.forEach((col) => { lccols.push(col.toLowerCase()); });\n        let def = { name: name.toLowerCase(), unique: unique, columns: lccols };\n        BlockDefinitions.setKey(cname, def);\n    }\n    return (define);\n};\n\nclass FormDefinitions {\n    static setForm(def) {\n        FormDefinitions.forms.unshift(def);\n    }\n    static getForms() {\n        return (FormDefinitions.forms);\n    }\n    static getWindowOpts(form) {\n        let wopts = FormDefinitions.windowopts.get(form);\n        if (wopts == null) {\n            wopts = {};\n            FormDefinitions.windowopts.set(form, wopts);\n        }\n        return (wopts);\n    }\n    static setOnInit(form, func) {\n        let funcs = FormDefinitions.oninit.get(form);\n        if (funcs == null)\n            funcs = [];\n        funcs.push(func);\n        FormDefinitions.oninit.set(form, funcs);\n    }\n    static setOnShow(form, func) {\n        let funcs = FormDefinitions.onshow.get(form);\n        if (funcs == null)\n            funcs = [];\n        funcs.push(func);\n        FormDefinitions.onshow.set(form, funcs);\n    }\n    static setOnHide(form, func) {\n        let funcs = FormDefinitions.onhide.get(form);\n        if (funcs == null)\n            funcs = [];\n        funcs.push(func);\n        FormDefinitions.onhide.set(form, funcs);\n    }\n    static setOnConnect(form, func) {\n        let funcs = FormDefinitions.onconn.get(form);\n        if (funcs == null)\n            funcs = [];\n        funcs.push(func);\n        FormDefinitions.onconn.set(form, funcs);\n    }\n    static setOnDisconnect(form, func) {\n        let funcs = FormDefinitions.ondisc.get(form);\n        if (funcs == null)\n            funcs = [];\n        funcs.push(func);\n        FormDefinitions.ondisc.set(form, funcs);\n    }\n    static setOnDestroy(form, func) {\n        let funcs = FormDefinitions.ondest.get(form);\n        if (funcs == null)\n            funcs = [];\n        funcs.push(func);\n        FormDefinitions.ondest.set(form, funcs);\n    }\n    static getOnInit(form) {\n        let funcs = FormDefinitions.oninit.get(form);\n        if (funcs == null)\n            funcs = [];\n        return (funcs);\n    }\n    static getOnShow(form) {\n        let funcs = FormDefinitions.onshow.get(form);\n        if (funcs == null)\n            funcs = [];\n        return (funcs);\n    }\n    static getOnHide(form) {\n        let funcs = FormDefinitions.onhide.get(form);\n        if (funcs == null)\n            funcs = [];\n        return (funcs);\n    }\n    static getOnConnect(form) {\n        let funcs = FormDefinitions.onconn.get(form);\n        if (funcs == null)\n            funcs = [];\n        return (funcs);\n    }\n    static getOnDisconnect(form) {\n        let funcs = FormDefinitions.ondisc.get(form);\n        if (funcs == null)\n            funcs = [];\n        return (funcs);\n    }\n    static getOnDestroy(form) {\n        let funcs = FormDefinitions.ondest.get(form);\n        if (funcs == null)\n            funcs = [];\n        return (funcs);\n    }\n}\nFormDefinitions.forms = [];\nFormDefinitions.oninit = new Map();\nFormDefinitions.onshow = new Map();\nFormDefinitions.onhide = new Map();\nFormDefinitions.onconn = new Map();\nFormDefinitions.ondisc = new Map();\nFormDefinitions.ondest = new Map();\nFormDefinitions.windowopts = new Map();\n\nconst form = (component, title, path, navigable) => {\n    function define(_comp) {\n        let def = {\n            path: path,\n            title: title,\n            component: component,\n        };\n        if (navigable != undefined)\n            def[\"navigable\"] = navigable;\n        FormDefinitions.setForm(def);\n    }\n    return (define);\n};\n\nconst init = (form, func) => {\n    let utils = new Utils();\n    let fname = utils.getName(form);\n    let ctype = utils.getType(form);\n    if (ctype != \"Form\") {\n        console.log(\"@init can only be used on forms, found on '\" + fname + \"'\");\n        return;\n    }\n    FormDefinitions.setOnInit(fname, func);\n};\n\nconst show = (form, func) => {\n    let utils = new Utils();\n    let fname = utils.getName(form);\n    let ctype = utils.getType(form);\n    if (ctype != \"Form\") {\n        console.log(\"@show can only be used on forms, found on '\" + fname + \"'\");\n        return;\n    }\n    FormDefinitions.setOnShow(fname, func);\n};\n\nconst hide = (form, func) => {\n    let utils = new Utils();\n    let fname = utils.getName(form);\n    let ctype = utils.getType(form);\n    if (ctype != \"Form\") {\n        console.log(\"@hide can only be used on forms, found on '\" + fname + \"'\");\n        return;\n    }\n    FormDefinitions.setOnHide(fname, func);\n};\n\nclass JOINDefinitions {\n    static add(form, def) {\n        let joins = JOINDefinitions.defs.get(form);\n        if (joins == null) {\n            joins = [];\n            JOINDefinitions.defs.set(form, joins);\n        }\n        joins.unshift(def);\n    }\n    static get(form) {\n        return (JOINDefinitions.defs.get(form.toLowerCase()));\n    }\n}\nJOINDefinitions.defs = new Map();\n\nconst join = (definition) => {\n    function define(comp) {\n        let utils = new Utils();\n        let form = utils.getName(comp);\n        let ctype = utils.getType(comp);\n        if (ctype != \"Form\") {\n            console.log(\"@join(\" + JSON.stringify(definition) + \") can only be used on forms\");\n            return;\n        }\n        definition.master.key = definition.master.key.toLowerCase();\n        definition.master.alias = definition.master.alias.toLowerCase();\n        definition.detail.key = definition.detail.key.toLowerCase();\n        definition.detail.alias = definition.detail.alias.toLowerCase();\n        JOINDefinitions.add(form.toLowerCase(), definition);\n    }\n    return (define);\n};\n\nconst block = (definition) => {\n    function define(comp, prop) {\n        let utils = new Utils();\n        let name = utils.getName(comp);\n        let type = utils.getType(comp);\n        if (type != \"Form\" && prop == null) {\n            console.log(\"@block can only be used with forms\");\n            return;\n        }\n        if (definition.alias != null)\n            definition.alias = definition.alias.toLowerCase();\n        let def = {\n            prop: prop,\n            alias: definition.alias,\n            component: definition.component,\n            databaseopts: definition.databaseopts\n        };\n        BlockDefinitions.setBlock(name, def);\n    }\n    return (define);\n};\n\nconst alias = (alias) => {\n    function define(comp) {\n        let utils = new Utils();\n        let cname = utils.getName(comp);\n        let ctype = utils.getType(comp);\n        if (ctype != \"Block\") {\n            console.log(\"@alias(\" + alias + \") can only be used on blocks\");\n            return;\n        }\n        if (alias == null) {\n            console.log(\"@alias(\" + alias + \") cannot be null\");\n            return;\n        }\n        BlockDefinitions.setDefaultAlias(cname, alias.toLowerCase());\n    }\n    return (define);\n};\n\nclass TableDefinitions {\n    static set(block, table) {\n        let def = TableDefinitions.index.get(block.toLowerCase());\n        if (def != null) {\n            if (table.hasOwnProperty(\"name\"))\n                def.name = table.name;\n            if (table.hasOwnProperty(\"order\"))\n                def.order = table.order;\n        }\n        else {\n            TableDefinitions.index.set(block.toLowerCase(), table);\n        }\n    }\n    static get(block) {\n        return (TableDefinitions.index.get(block.toLowerCase()));\n    }\n}\nTableDefinitions.index = new Map();\n\nconst table = (definition) => {\n    function define(comp) {\n        let utils = new Utils();\n        let cname = utils.getName(comp);\n        let ctype = utils.getType(comp);\n        if (ctype != \"Block\") {\n            console.log(\"@table(\" + definition.name + \") can only be used on blocks\");\n            return;\n        }\n        TableDefinitions.set(cname, definition);\n    }\n    return (define);\n};\n\nclass FieldDefinitions {\n    static add(form, comp, def) {\n        let parts = FieldDefinitions.split(def.name);\n        if (form) {\n            if (parts.length < 2 || parts.length > 3) {\n                console.log(\"Form field \" + def.name + \" must be on the form block.field[.id], field definition ignored\");\n                return;\n            }\n            def.name = parts[1];\n            let id = null;\n            let block = parts[0];\n            if (parts.length > 2)\n                id = parts[2];\n            if (id != null)\n                FieldDefinitions.addformid(comp, block, id, def);\n            else\n                FieldDefinitions.addformfield(comp, block, def);\n        }\n        else {\n            if (parts.length > 2) {\n                console.log(\"Block field \" + def.name + \" must be on the form field[.id], field definition ignored\");\n                return;\n            }\n            let id = null;\n            if (parts.length > 1) {\n                id = parts[1];\n                def.name = parts[0];\n            }\n            if (id != null)\n                FieldDefinitions.addblockid(comp, id, def);\n            else\n                FieldDefinitions.addblockfield(comp, def);\n        }\n    }\n    static addformfield(form, block, def) {\n        let formbfd = FieldDefinitions.ffd.get(form);\n        let formbfx = FieldDefinitions.ffx.get(form);\n        let formbcx = FieldDefinitions.fcx.get(form);\n        if (formbfd == null) {\n            formbfd = new Map();\n            FieldDefinitions.ffd.set(form, formbfd);\n            formbfx = new Map();\n            FieldDefinitions.ffx.set(form, formbfx);\n            formbcx = new Map();\n            FieldDefinitions.fcx.set(form, formbcx);\n        }\n        let fields = formbfd.get(block);\n        let index = formbfx.get(block);\n        let columns = formbcx.get(block);\n        if (fields == null) {\n            fields = [];\n            formbfd.set(block, fields);\n            index = new Map();\n            formbfx.set(block, index);\n            columns = new Map();\n            formbcx.set(block, columns);\n        }\n        if (index.get(def.name) != null) {\n            console.log(\"Field \" + def.name + \" defined twice on block '\" + form + \".\" + block + \"', ignored\");\n            return;\n        }\n        if (columns.get(def.name) != null) {\n            console.log(\"Column \" + def.column + \" bound to more than 1 field on block '\" + form + \".\" + block + \"', ignored\");\n            def.column = null;\n        }\n        fields.unshift(def);\n        index.set(def.name, def);\n        if (def.column != null)\n            columns.set(def.column, def);\n    }\n    static addblockfield(block, def) {\n        let fields = FieldDefinitions.bfd.get(block);\n        let index = FieldDefinitions.bfx.get(block);\n        let columns = FieldDefinitions.bcx.get(block);\n        if (fields == null) {\n            fields = [];\n            FieldDefinitions.bfd.set(block, fields);\n            index = new Map();\n            FieldDefinitions.bfx.set(block, index);\n            columns = new Map();\n            FieldDefinitions.bcx.set(block, columns);\n        }\n        if (def.hasOwnProperty(\"column\")) {\n            if (def.column != null)\n                def.column = def.column.toLowerCase();\n        }\n        if (index.get(def.name) != null) {\n            console.log(\"Field \" + def.name + \" defined twice on block '\" + block + \"', ignored\");\n            return;\n        }\n        if (columns.get(def.name) != null) {\n            console.log(\"Column \" + def.column + \" bound to more than 1 field on block '\" + block + \"', ignored\");\n            def.column = null;\n        }\n        fields.unshift(def);\n        index.set(def.name, def);\n        if (def.column != null)\n            columns.set(def.column, def);\n    }\n    static addformid(form, block, id, def) {\n        let formids = FieldDefinitions.fidx.get(form);\n        if (formids == null) {\n            formids = new Map();\n            FieldDefinitions.fidx.set(form, formids);\n        }\n        let blockids = formids.get(block);\n        if (blockids == null) {\n            blockids = new Map();\n            formids.set(block, blockids);\n        }\n        if (blockids.get(def.name + \".\" + id) != null) {\n            console.log(\"Field \" + form + \".\" + def.name + \".\" + id + \" defined twice, ignored\");\n            return;\n        }\n        if (def.column != null) {\n            console.log(\"Field \" + form + \".\" + def.name + \".\" + id + \" cannot override column definition, ignored\");\n            def.column = null;\n        }\n        blockids.set(def.name + \".\" + id, def);\n    }\n    static addblockid(block, id, def) {\n        let blockids = FieldDefinitions.bidx.get(block);\n        if (blockids == null) {\n            blockids = new Map();\n            FieldDefinitions.bidx.set(block, blockids);\n        }\n        if (blockids.get(def.name + \".\" + id) != null) {\n            console.log(\"Field \" + def.name + \".\" + id + \" defined twice, ignored\");\n            return;\n        }\n        if (def.column != null) {\n            console.log(\"Field \" + def.name + \".\" + id + \" cannot override column definition, ignored\");\n            def.column = null;\n        }\n        blockids.set(def.name + \".\" + id, def);\n    }\n    static getFormFieldOverride(form, block, fldid) {\n        let formids = FieldDefinitions.fidx.get(form);\n        if (formids == null)\n            return (null);\n        let blockids = formids.get(block.toLowerCase());\n        if (blockids != null)\n            return (blockids.get(fldid.toLowerCase()));\n        return (null);\n    }\n    static getFieldOverride(block, fldid) {\n        let blockids = FieldDefinitions.bidx.get(block.toLowerCase());\n        if (blockids != null)\n            return (blockids.get(fldid.toLowerCase()));\n        return (null);\n    }\n    static getFormFields(form, block) {\n        let formbfd = FieldDefinitions.ffd.get(form.toLowerCase());\n        if (formbfd == null)\n            return ([]);\n        let fields = formbfd.get(block.toLowerCase());\n        if (fields == null)\n            return ([]);\n        return (fields);\n    }\n    static getFields(block) {\n        let fields = FieldDefinitions.bfd.get(block.toLowerCase());\n        if (fields == null)\n            return ([]);\n        return (fields);\n    }\n    static getFormFieldIndex(form, block) {\n        let formbfx = FieldDefinitions.ffx.get(form.toLowerCase());\n        if (formbfx == null)\n            return (new Map());\n        let index = formbfx.get(block.toLowerCase());\n        if (index == null)\n            return (new Map());\n        return (new Map(index));\n    }\n    static getFieldIndex(block) {\n        let index = FieldDefinitions.bfx.get(block.toLowerCase());\n        if (index == null)\n            return (new Map());\n        return (new Map(index));\n    }\n    static getFormColumnIndex(form, block) {\n        let formbcx = FieldDefinitions.fcx.get(form.toLowerCase());\n        if (formbcx == null)\n            return (new Map());\n        let index = formbcx.get(block.toLowerCase());\n        if (index == null)\n            return (new Map());\n        return (new Map(index));\n    }\n    static getColumnIndex(block) {\n        let index = FieldDefinitions.bcx.get(block.toLowerCase());\n        if (index == null)\n            index = new Map();\n        return (new Map(index));\n    }\n    static split(name) {\n        let tokens = name.split(\".\");\n        for (let i = 0; i < tokens.length; i++)\n            tokens[i] = tokens[i].trim().toLowerCase();\n        return (tokens);\n    }\n}\n// List and indexes for fields, columns and fields with id, respectively for form\nFieldDefinitions.bfd = new Map();\nFieldDefinitions.bfx = new Map();\nFieldDefinitions.bcx = new Map();\nFieldDefinitions.bidx = new Map();\nFieldDefinitions.ffd = new Map();\nFieldDefinitions.ffx = new Map();\nFieldDefinitions.fcx = new Map();\nFieldDefinitions.fidx = new Map();\n\nconst field = (definition) => {\n    function define(comp) {\n        let form = false;\n        let utils = new Utils();\n        let cname = utils.getName(comp);\n        let ctype = utils.getType(comp);\n        if (ctype != \"Block\" && ctype != \"Form\") {\n            console.log(\"@field(\" + JSON.stringify(definition) + \") can only be used on blocks and forms\");\n            return;\n        }\n        if (ctype == \"Form\")\n            form = true;\n        FieldDefinitions.add(form, cname, definition);\n    }\n    return (define);\n};\n\nclass ColumnDefinitions {\n    static add(block, def) {\n        let columns = ColumnDefinitions.bcols.get(block);\n        let index = ColumnDefinitions.bcidx.get(block);\n        if (columns == null) {\n            columns = [];\n            ColumnDefinitions.bcols.set(block, columns);\n            index = new Map();\n            ColumnDefinitions.bcidx.set(block, index);\n        }\n        if (index.get(def.name) != null) {\n            console.log(\"Block \" + block + \" column \" + def.name + \" defined twice, ignored\");\n            return;\n        }\n        columns.unshift(def);\n        index.set(def.name, def);\n    }\n    static get(block) {\n        let columns = ColumnDefinitions.bcols.get(block.toLowerCase());\n        if (columns == null)\n            columns = [];\n        return (columns);\n    }\n    static getIndex(block) {\n        let index = ColumnDefinitions.bcidx.get(block.toLowerCase());\n        if (index == null)\n            index = new Map();\n        return (index);\n    }\n}\nColumnDefinitions.bcols = new Map();\nColumnDefinitions.bcidx = new Map();\n\nconst column = (definition) => {\n    function define(comp) {\n        let utils = new Utils();\n        let cname = utils.getName(comp);\n        let ctype = utils.getType(comp);\n        if (ctype != \"Block\") {\n            console.log(\"@column(\" + definition.name + \",\" + definition.type + \") can only be used on blocks\");\n            return;\n        }\n        ColumnDefinitions.add(cname, definition);\n        definition.name = definition.name.toLowerCase();\n    }\n    return (define);\n};\n\nconst wizard = () => {\n    function define(form) {\n        let utils = new Utils();\n        let fname = utils.getName(form);\n        let ctype = utils.getType(form);\n        if (ctype != \"Form\") {\n            console.log(\"@wizard can only be used on forms\");\n            return;\n        }\n        let wopt = FormDefinitions.getWindowOpts(fname);\n        wopt.wizard = true;\n    }\n    return (define);\n};\n\nconst window$1 = (inherit, width, height, top, left) => {\n    function define(form) {\n        let utils = new Utils();\n        let fname = utils.getName(form);\n        let ctype = utils.getType(form);\n        if (ctype != \"Form\") {\n            console.log(\"@window can only be used on forms\");\n            return;\n        }\n        if (top != null && top.constructor.name == \"Number\")\n            top += \"px\";\n        if (left != null && left.constructor.name == \"Number\")\n            left += \"px\";\n        if (width != null && width.constructor.name == \"Number\")\n            width += \"px\";\n        if (height != null && height.constructor.name == \"Number\")\n            height += \"px\";\n        let wopt = FormDefinitions.getWindowOpts(fname);\n        wopt.inherit = inherit;\n        wopt.offsetTop = \"\" + top;\n        wopt.width = \"\" + width;\n        wopt.height = \"\" + height;\n        wopt.offsetLeft = \"\" + left;\n    }\n    return (define);\n};\n\nconst connect = (form, func) => {\n    let utils = new Utils();\n    let fname = utils.getName(form);\n    let ctype = utils.getType(form);\n    if (ctype != \"Form\") {\n        console.log(\"@connect can only be used on forms, found on '\" + fname + \"'\");\n        return;\n    }\n    FormDefinitions.setOnConnect(fname, func);\n};\n\nconst destroy = (form, func) => {\n    let utils = new Utils();\n    let fname = utils.getName(form);\n    let ctype = utils.getType(form);\n    if (ctype != \"Form\") {\n        console.log(\"@destroy can only be used on forms, found on '\" + fname + \"'\");\n        return;\n    }\n    FormDefinitions.setOnDestroy(fname, func);\n};\n\nvar keymap;\n(function (keymap) {\n    keymap[keymap[\"enter\"] = 0] = \"enter\";\n    keymap[keymap[\"escape\"] = 1] = \"escape\";\n    keymap[keymap[\"undo\"] = 2] = \"undo\";\n    keymap[keymap[\"paste\"] = 3] = \"paste\";\n    keymap[keymap[\"close\"] = 4] = \"close\";\n    keymap[keymap[\"listval\"] = 5] = \"listval\";\n    keymap[keymap[\"delete\"] = 6] = \"delete\";\n    keymap[keymap[\"dublicate\"] = 7] = \"dublicate\";\n    keymap[keymap[\"insertafter\"] = 8] = \"insertafter\";\n    keymap[keymap[\"insertbefore\"] = 9] = \"insertbefore\";\n    keymap[keymap[\"commit\"] = 10] = \"commit\";\n    keymap[keymap[\"rollback\"] = 11] = \"rollback\";\n    keymap[keymap[\"connect\"] = 12] = \"connect\";\n    keymap[keymap[\"disconnect\"] = 13] = \"disconnect\";\n    keymap[keymap[\"nextfield\"] = 14] = \"nextfield\";\n    keymap[keymap[\"prevfield\"] = 15] = \"prevfield\";\n    keymap[keymap[\"nextblock\"] = 16] = \"nextblock\";\n    keymap[keymap[\"prevblock\"] = 17] = \"prevblock\";\n    keymap[keymap[\"nextrecord\"] = 18] = \"nextrecord\";\n    keymap[keymap[\"prevrecord\"] = 19] = \"prevrecord\";\n    keymap[keymap[\"pageup\"] = 20] = \"pageup\";\n    keymap[keymap[\"pagedown\"] = 21] = \"pagedown\";\n    keymap[keymap[\"clearform\"] = 22] = \"clearform\";\n    keymap[keymap[\"clearblock\"] = 23] = \"clearblock\";\n    keymap[keymap[\"enterquery\"] = 24] = \"enterquery\";\n    keymap[keymap[\"executequery\"] = 25] = \"executequery\";\n    keymap[keymap[\"zoom\"] = 26] = \"zoom\";\n})(keymap || (keymap = {}));\nclass KeyMapper {\n    static index(map) {\n        Object.keys(map).forEach((key) => {\n            let val = map[key];\n            let km = keymap[key];\n            KeyMapper.keys.set(val, km);\n        });\n    }\n    static keymap(key) {\n        return (KeyMapper.keys.get(key));\n    }\n    static map(key) {\n        let sig = key.code + \":\";\n        sig += key.shift ? \"t\" : \"f\";\n        sig += key.ctrl ? \"t\" : \"f\";\n        sig += key.alt ? \"t\" : \"f\";\n        sig += key.meta ? \"t\" : \"f\";\n        return (sig);\n    }\n    static parse(key) {\n        let pos = key.indexOf(\":\");\n        let shf = key[pos + 1] == 't';\n        let ctl = key[pos + 2] == 't';\n        let alt = key[pos + 3] == 't';\n        let mta = key[pos + 4] == 't';\n        let code = +key.substring(0, pos);\n        return ({ code: code, shift: shf, ctrl: ctl, alt: alt, meta: mta });\n    }\n}\nKeyMapper.keys = new Map();\n\nclass TriggerEvents {\n    constructor() {\n        this.types = new Map();\n        this.fields = new Map();\n    }\n}\n\nvar Trigger;\n(function (Trigger) {\n    Trigger[Trigger[\"Key\"] = 0] = \"Key\";\n    Trigger[Trigger[\"Lock\"] = 1] = \"Lock\";\n    Trigger[Trigger[\"Typing\"] = 2] = \"Typing\";\n    Trigger[Trigger[\"MouseClick\"] = 3] = \"MouseClick\";\n    Trigger[Trigger[\"MouseDoubleClick\"] = 4] = \"MouseDoubleClick\";\n    Trigger[Trigger[\"PreField\"] = 5] = \"PreField\";\n    Trigger[Trigger[\"PostField\"] = 6] = \"PostField\";\n    Trigger[Trigger[\"PostChange\"] = 7] = \"PostChange\";\n    Trigger[Trigger[\"KeyPrevField\"] = 8] = \"KeyPrevField\";\n    Trigger[Trigger[\"KeyNextField\"] = 9] = \"KeyNextField\";\n    Trigger[Trigger[\"KeyPrevBlock\"] = 10] = \"KeyPrevBlock\";\n    Trigger[Trigger[\"KeyNextBlock\"] = 11] = \"KeyNextBlock\";\n    Trigger[Trigger[\"KeyEnterQuery\"] = 12] = \"KeyEnterQuery\";\n    Trigger[Trigger[\"KeyExecuteQuery\"] = 13] = \"KeyExecuteQuery\";\n    Trigger[Trigger[\"WhenValidateField\"] = 14] = \"WhenValidateField\";\n    Trigger[Trigger[\"WhenValidateRecord\"] = 15] = \"WhenValidateRecord\";\n    Trigger[Trigger[\"PreQuery\"] = 16] = \"PreQuery\";\n    Trigger[Trigger[\"PostQuery\"] = 17] = \"PostQuery\";\n    Trigger[Trigger[\"PreInsert\"] = 18] = \"PreInsert\";\n    Trigger[Trigger[\"PreUpdate\"] = 19] = \"PreUpdate\";\n    Trigger[Trigger[\"PreDelete\"] = 20] = \"PreDelete\";\n})(Trigger || (Trigger = {}));\nvar FieldTrigger;\n(function (FieldTrigger) {\n    FieldTrigger[FieldTrigger[\"Key\"] = 0] = \"Key\";\n    FieldTrigger[FieldTrigger[\"Typing\"] = 1] = \"Typing\";\n    FieldTrigger[FieldTrigger[\"MouseClick\"] = 2] = \"MouseClick\";\n    FieldTrigger[FieldTrigger[\"MouseDoubleClick\"] = 3] = \"MouseDoubleClick\";\n    FieldTrigger[FieldTrigger[\"PreField\"] = 4] = \"PreField\";\n    FieldTrigger[FieldTrigger[\"PostField\"] = 5] = \"PostField\";\n    FieldTrigger[FieldTrigger[\"PostChange\"] = 6] = \"PostChange\";\n    FieldTrigger[FieldTrigger[\"WhenValidateField\"] = 7] = \"WhenValidateField\";\n    FieldTrigger[FieldTrigger[\"WhenValidateRecord\"] = 8] = \"WhenValidateRecord\";\n})(FieldTrigger || (FieldTrigger = {}));\nclass Triggers {\n    constructor() {\n        this.triggers = new TriggerEvents();\n    }\n    static init() {\n        if (Triggers.fieldtriggers == null) {\n            Triggers.fieldtriggers = new Set();\n            Object.keys(FieldTrigger).forEach((type) => {\n                if (isNaN(Number(type)))\n                    Triggers.fieldtriggers.add(type);\n            });\n        }\n    }\n    addTrigger(instance, func, ttypes, tfields, tkeys) {\n        let keys = [];\n        let fields = [];\n        let types = [];\n        let tasa = false;\n        if (ttypes.constructor.name == \"Array\")\n            tasa = true;\n        if (tasa)\n            types = ttypes;\n        else\n            types.push(ttypes);\n        if (tfields != null) {\n            let fasa = false;\n            if (tfields.constructor.name == \"Array\")\n                fasa = true;\n            if (fasa)\n                fields = tfields;\n            else\n                fields.push(tfields);\n        }\n        if (tkeys != null) {\n            let kasa = false;\n            if (tkeys.constructor.name == \"Array\")\n                kasa = true;\n            if (kasa)\n                keys = tkeys;\n            else\n                keys.push(tkeys);\n        }\n        if (fields.length > 0) {\n            fields.forEach((field) => {\n                field = field.toLowerCase();\n                let triggers = this.triggers.fields.get(field);\n                if (triggers == null) {\n                    triggers = new Map();\n                    this.triggers.fields.set(field, triggers);\n                }\n                types.forEach((type) => {\n                    if (type == Trigger.Key) {\n                        keys.forEach((key) => {\n                            let code = this.keycode(key);\n                            let lsnrs = triggers.get(code);\n                            if (lsnrs == null) {\n                                lsnrs = [];\n                                triggers.set(code, lsnrs);\n                            }\n                            lsnrs.push({ inst: instance, func: func });\n                        });\n                    }\n                    else if (this.isFieldTrigger(type)) {\n                        let name = this.trgname(type);\n                        let lsnrs = triggers.get(name);\n                        if (lsnrs == null) {\n                            lsnrs = [];\n                            triggers.set(name, lsnrs);\n                        }\n                        lsnrs.push({ inst: instance, func: func });\n                    }\n                });\n            });\n        }\n        else {\n            types.forEach((type) => {\n                if (type == Trigger.Key) {\n                    keys.forEach((key) => {\n                        let code = this.keycode(key);\n                        let lsnrs = this.triggers.types.get(code);\n                        if (lsnrs == null) {\n                            lsnrs = [];\n                            this.triggers.types.set(code, lsnrs);\n                        }\n                        lsnrs.push({ inst: instance, func: func });\n                    });\n                }\n                else {\n                    let name = this.trgname(type);\n                    let lsnrs = this.triggers.types.get(name);\n                    if (lsnrs == null) {\n                        lsnrs = [];\n                        this.triggers.types.set(name, lsnrs);\n                    }\n                    lsnrs.push({ inst: instance, func: func });\n                }\n            });\n        }\n    }\n    async invokeTriggers(type, event, key) {\n        event[\"type$\"] = type;\n        if (type == Trigger.Key && key != null) {\n            let code = this.keycode(key);\n            let lsnrs = this.triggers.types.get(code);\n            if (lsnrs != null) {\n                for (let i = 0; i < lsnrs.length; i++)\n                    if (!await this.execfunc(lsnrs[i], event))\n                        return (false);\n            }\n        }\n        else {\n            let name = this.trgname(type);\n            let lsnrs = this.triggers.types.get(name);\n            if (lsnrs != null) {\n                for (let i = 0; i < lsnrs.length; i++)\n                    if (!await this.execfunc(lsnrs[i], event))\n                        return (false);\n            }\n        }\n        return (true);\n    }\n    async invokeFieldTriggers(type, field, event, key) {\n        let triggers = this.triggers.fields.get(field);\n        if (triggers == null)\n            return (this.invokeTriggers(type, event, key));\n        event[\"type$\"] = type;\n        if (type == Trigger.Key && key != null) {\n            let code = this.keycode(key);\n            let lsnrs = triggers.get(code);\n            if (lsnrs != null) {\n                for (let i = 0; i < lsnrs.length; i++)\n                    if (!await this.execfunc(lsnrs[i], event))\n                        return (false);\n            }\n        }\n        else {\n            let name = this.trgname(type);\n            let lsnrs = triggers.get(name);\n            if (lsnrs != null) {\n                for (let i = 0; i < lsnrs.length; i++)\n                    if (!await this.execfunc(lsnrs[i], event))\n                        return (false);\n            }\n        }\n        return (this.invokeTriggers(type, event, key));\n    }\n    async execfunc(lsnr, event) {\n        try {\n            return (await lsnr.inst[lsnr.func.name](event));\n        }\n        catch (error) {\n            console.log(error);\n            return (false);\n        }\n    }\n    isFieldTrigger(trigger) {\n        Triggers.init();\n        return (Triggers.fieldtriggers.has(Trigger[trigger]));\n    }\n    trgname(trigger) {\n        return (Trigger[trigger].toLowerCase());\n    }\n    keycode(key) {\n        return (keymap[key].toLowerCase());\n    }\n}\nTriggers.fieldtriggers = null;\n\nclass TriggerDefinitions {\n    static add(isblock, cname, def) {\n        if (def.key == null)\n            this.addft(isblock, cname, def);\n        else\n            this.addkt(isblock, cname, def);\n    }\n    static addkt(isblock, cname, def) {\n        if (isblock)\n            TriggerDefinitions.addKeyTrigger(cname, def);\n        else\n            TriggerDefinitions.addFormKeyTrigger(cname, def);\n    }\n    static addft(isblock, cname, def) {\n        let parts = TriggerDefinitions.split(def.field);\n        if (isblock && parts.length > 1) {\n            console.log(\"trigger must specify field without '.' or ' '\");\n            return;\n        }\n        if (!isblock && parts.length > 2) {\n            console.log(\"trigger must specify blockalias.field without ' '\");\n            return;\n        }\n        let form = null;\n        let block = null;\n        let field = null;\n        if (isblock) {\n            block = cname;\n            if (parts.length > 0)\n                field = parts.shift();\n        }\n        else {\n            form = cname;\n            block = parts.shift();\n            def.block = block;\n            if (parts.length > 0)\n                field = parts.shift();\n        }\n        def.field = field;\n        if (isblock)\n            TriggerDefinitions.addFieldTrigger(block, field, def);\n        else\n            TriggerDefinitions.addFormFieldTrigger(form, block, field, def);\n    }\n    static addFieldTrigger(block, field, def) {\n        let triggers = TriggerDefinitions.bftriggers.get(block);\n        if (triggers == null) {\n            triggers = new Map();\n            TriggerDefinitions.bftriggers.set(block, triggers);\n        }\n        triggers.set(field + \"[\" + Trigger[def.trigger] + \"]\", def);\n    }\n    static addKeyTrigger(block, def) {\n        let triggers = TriggerDefinitions.bktriggers.get(block);\n        if (triggers == null) {\n            triggers = new Map();\n            TriggerDefinitions.bktriggers.set(block, triggers);\n        }\n        triggers.set(keymap[def.key] + \"[\" + Trigger[def.trigger] + \"]\", def);\n    }\n    static addFormFieldTrigger(form, block, field, def) {\n        if (block == null)\n            block = \"\";\n        let ftriggers = TriggerDefinitions.fftriggers.get(form);\n        if (ftriggers == null) {\n            ftriggers = new Map();\n            TriggerDefinitions.fftriggers.set(form, ftriggers);\n        }\n        let triggers = ftriggers.get(block);\n        if (triggers == null) {\n            triggers = new Map();\n            ftriggers.set(block, triggers);\n        }\n        triggers.set(field + \"[\" + Trigger[def.trigger] + \"]\", def);\n    }\n    static addFormKeyTrigger(form, def) {\n        let triggers = TriggerDefinitions.fktriggers.get(form);\n        if (triggers == null) {\n            triggers = new Map();\n            TriggerDefinitions.fktriggers.set(form, triggers);\n        }\n        triggers.set(keymap[def.key] + \"[\" + Trigger[def.trigger] + \"]\", def);\n    }\n    static getFieldTriggers(block) {\n        return (new Map(TriggerDefinitions.bftriggers.get(block.toLowerCase())));\n    }\n    static getKeyTriggers(block) {\n        return (new Map(TriggerDefinitions.bktriggers.get(block.toLowerCase())));\n    }\n    static getFormFieldTriggers(form, block) {\n        if (block == null)\n            block = \"\";\n        let triggers = TriggerDefinitions.fftriggers.get(form.toLowerCase());\n        if (triggers != null)\n            return (new Map(triggers.get(block.toLowerCase())));\n        return (new Map());\n    }\n    static getFormKeyTriggers(form) {\n        return (new Map(TriggerDefinitions.fktriggers.get(form.toLowerCase())));\n    }\n    static split(name) {\n        if (name == null)\n            return ([]);\n        let tokens = name.trim().split(\".\");\n        for (let i = 0; i < tokens.length; i++)\n            tokens[i] = tokens[i].trim().toLowerCase();\n        return (tokens);\n    }\n}\nTriggerDefinitions.bftriggers = new Map();\nTriggerDefinitions.bktriggers = new Map();\nTriggerDefinitions.fktriggers = new Map();\nTriggerDefinitions.fftriggers = new Map();\n\nconst trigger = (trigger, field) => {\n    function define(comp, func) {\n        let utils = new Utils();\n        let cname = utils.getName(comp);\n        let ctype = utils.getType(comp);\n        let params = utils.getParams(comp[func]);\n        if (params.length != 1) {\n            console.log(\"function \" + func + \" must take 1 TriggerEvent argument\");\n            return;\n        }\n        if (ctype != \"Block\" && ctype != \"Form\") {\n            console.log(\"@trigger can only be applied on Block or Form\");\n            return;\n        }\n        let blktrg = false;\n        if (ctype == \"Block\")\n            blktrg = true;\n        let fields = [];\n        if (field == null)\n            field = [null];\n        if (field.constructor.name == \"Array\")\n            fields = field;\n        else\n            fields.push(field);\n        fields.forEach((fld) => {\n            let trg = {\n                field: fld,\n                block: null,\n                blktrg: blktrg,\n                params: params,\n                func: comp[func],\n                trigger: trigger\n            };\n            TriggerDefinitions.add(blktrg, cname, trg);\n        });\n    }\n    return (define);\n};\n\nclass DBUsage {\n    static merge(changes, base) {\n        let utils = new Utils();\n        if (changes == null)\n            return (base);\n        let merged = utils.clone(base);\n        if (changes.hasOwnProperty(\"query\"))\n            merged.query = changes.query;\n        if (changes.hasOwnProperty(\"insert\"))\n            merged.insert = changes.insert;\n        if (changes.hasOwnProperty(\"update\"))\n            merged.update = changes.update;\n        if (changes.hasOwnProperty(\"delete\"))\n            merged.delete = changes.delete;\n        return (merged);\n    }\n    static override(overide, base) {\n        let utils = new Utils();\n        if (overide == null)\n            return (base);\n        let merged = utils.clone(base);\n        if (overide.hasOwnProperty(\"query\") && !overide.query)\n            merged.query = false;\n        if (overide.hasOwnProperty(\"insert\") && !overide.insert)\n            merged.insert = false;\n        if (overide.hasOwnProperty(\"update\") && !overide.update)\n            merged.update = false;\n        if (overide.hasOwnProperty(\"delete\") && !overide.delete)\n            merged.delete = false;\n        return (merged);\n    }\n    static complete(base) {\n        let utils = new Utils();\n        if (base == null)\n            base = {};\n        else\n            base = utils.clone(base);\n        if (!base.hasOwnProperty(\"query\"))\n            base.query = true;\n        if (!base.hasOwnProperty(\"insert\"))\n            base.insert = true;\n        if (!base.hasOwnProperty(\"update\"))\n            base.update = true;\n        if (!base.hasOwnProperty(\"delete\"))\n            base.delete = true;\n        return (base);\n    }\n}\n\nclass DatabaseDefinitions {\n    static setFormUsage(form, usage) {\n        DatabaseDefinitions.fdefault.set(form, usage);\n    }\n    static getFormUsage(form) {\n        let usage = DatabaseDefinitions.fdefault.get(form.toLowerCase());\n        return (usage);\n    }\n    static setBlockDefault(block, usage) {\n        DatabaseDefinitions.bdefault.set(block, usage);\n    }\n    static getBlockDefault(block) {\n        let usage = null;\n        let base = {\n            query: true,\n            insert: true,\n            update: true,\n            delete: true\n        };\n        if (block != null)\n            usage = DatabaseDefinitions.bdefault.get(block.toLowerCase());\n        return (DBUsage.merge(usage, base));\n    }\n}\nDatabaseDefinitions.bdefault = new Map();\nDatabaseDefinitions.fdefault = new Map();\n\nconst database = (usage) => {\n    function define(component) {\n        let utils = new Utils();\n        let comp = utils.getName(component);\n        let type = utils.getType(component);\n        if (type == \"Form\") {\n            DatabaseDefinitions.setFormUsage(comp, usage);\n            return;\n        }\n        if (type == \"Block\") {\n            DatabaseDefinitions.setBlockDefault(comp, usage);\n            return;\n        }\n        console.log(\"@database can only be used in conjunction with Form or Block\");\n    }\n    return (define);\n};\n\nconst keytrigger = (key) => {\n    function define(comp, func) {\n        let utils = new Utils();\n        let cname = utils.getName(comp);\n        let ctype = utils.getType(comp);\n        let params = utils.getParams(comp[func]);\n        if (params.length != 1) {\n            console.log(\"function \" + func + \" must take 1 TriggerEvent argument\");\n            return;\n        }\n        if (ctype != \"Block\" && ctype != \"Form\") {\n            console.log(\"@keytrigger can only be applied on Block or Form\");\n            return;\n        }\n        let block = false;\n        if (ctype == \"Block\")\n            block = true;\n        let keys = [];\n        if (key.constructor.name == \"Array\")\n            keys = key;\n        else\n            keys.push(key);\n        keys.forEach((key) => {\n            let trg = {\n                key: key,\n                block: null,\n                blktrg: block,\n                params: params,\n                func: comp[func],\n                trigger: Trigger.Key\n            };\n            TriggerDefinitions.add(block, cname, trg);\n        });\n    }\n    return (define);\n};\n\nconst disconnect = (form, func) => {\n    let utils = new Utils();\n    let fname = utils.getName(form);\n    let ctype = utils.getType(form);\n    if (ctype != \"Form\") {\n        console.log(\"@disconnect can only be used on forms, found on '\" + fname + \"'\");\n        return;\n    }\n    FormDefinitions.setOnDisconnect(fname, func);\n};\n\nclass LOVDefinitions {\n    static add(isblock, cname, fieldspec, inst, func, params) {\n        let form = null;\n        let block = null;\n        let field = null;\n        let id = false;\n        let parts = LOVDefinitions.split(fieldspec);\n        if (isblock) {\n            block = cname;\n        }\n        else {\n            form = cname;\n            block = parts.shift();\n        }\n        if (parts.length == 0 || parts.length > 2) {\n            console.log(\"@listofvalues must specify [alias.]field[.id], not '\" + fieldspec + \"'\");\n            return;\n        }\n        field = parts.shift();\n        if (parts.length > 0) {\n            id = true;\n            field += \".\" + parts.shift();\n        }\n        let def = {\n            inst: inst,\n            func: func,\n            params: params\n        };\n        if (form != null) {\n            if (!id)\n                LOVDefinitions.addFormLov(form, block, field, def);\n            else\n                LOVDefinitions.addFormIdLov(form, block, field, def);\n        }\n        else {\n            if (!id)\n                LOVDefinitions.addBlockLov(block, field, def);\n            else\n                LOVDefinitions.addBlockIdLov(block, field, def);\n        }\n    }\n    static addFormLov(form, block, field, def) {\n        let fdefs = LOVDefinitions.fdefs.get(form);\n        if (fdefs == null) {\n            fdefs = new Map();\n            LOVDefinitions.fdefs.set(form, fdefs);\n        }\n        let bdefs = fdefs.get(block);\n        if (bdefs == null) {\n            bdefs = new Map();\n            fdefs.set(block, bdefs);\n        }\n        bdefs.set(field, def);\n    }\n    static addFormIdLov(form, block, field, def) {\n        let fdefs = LOVDefinitions.fiddefs.get(form);\n        if (fdefs == null) {\n            fdefs = new Map();\n            LOVDefinitions.fiddefs.set(form, fdefs);\n        }\n        let bdefs = fdefs.get(block);\n        if (bdefs == null) {\n            bdefs = new Map();\n            fdefs.set(block, bdefs);\n        }\n        bdefs.set(field, def);\n    }\n    static addBlockLov(block, field, def) {\n        let bdefs = LOVDefinitions.bdefs.get(block);\n        if (bdefs == null) {\n            bdefs = new Map();\n            LOVDefinitions.bdefs.set(block, bdefs);\n        }\n        bdefs.set(field, def);\n    }\n    static addBlockIdLov(block, field, def) {\n        let bdefs = LOVDefinitions.biddefs.get(block);\n        if (bdefs == null) {\n            bdefs = new Map();\n            LOVDefinitions.biddefs.set(block, bdefs);\n        }\n        bdefs.set(field, def);\n    }\n    static getblock(block) {\n        return (new Map(LOVDefinitions.bdefs.get(block.toLowerCase())));\n    }\n    static getblockid(block) {\n        return (new Map(LOVDefinitions.biddefs.get(block.toLowerCase())));\n    }\n    static getform(form, block) {\n        let fdefs = LOVDefinitions.fdefs.get(form.toLowerCase());\n        if (fdefs != null)\n            return (new Map(fdefs.get(block.toLowerCase())));\n        return (new Map());\n    }\n    static getidform(form, block) {\n        let fdefs = LOVDefinitions.fiddefs.get(form.toLowerCase());\n        if (fdefs != null)\n            return (new Map(fdefs.get(block.toLowerCase())));\n        return (new Map());\n    }\n    static split(name) {\n        let tokens = name.trim().split(\".\");\n        for (let i = 0; i < tokens.length; i++)\n            tokens[i] = tokens[i].trim().toLowerCase();\n        return (tokens);\n    }\n}\nLOVDefinitions.bdefs = new Map();\nLOVDefinitions.biddefs = new Map();\nLOVDefinitions.fdefs = new Map();\nLOVDefinitions.fiddefs = new Map();\n\nconst listofvalues = (field) => {\n    function define(comp, func) {\n        let utils = new Utils();\n        let cname = utils.getName(comp);\n        let ctype = utils.getType(comp);\n        let params = utils.getParams(comp[func]);\n        if (ctype != \"Block\" && ctype != \"Form\") {\n            console.log(\"@listofvalues can only be applied on Block or Form\");\n            return;\n        }\n        let block = false;\n        if (ctype == \"Block\")\n            block = true;\n        let fields = [];\n        if (field.constructor.name == \"Array\")\n            fields = field;\n        else\n            fields.push(field);\n        fields.forEach((fld) => { LOVDefinitions.add(block, cname, fld, comp, func, params); });\n    }\n    return (define);\n};\n\nvar Origin;\n(function (Origin) {\n    Origin[Origin[\"Form\"] = 0] = \"Form\";\n    Origin[Origin[\"Block\"] = 1] = \"Block\";\n    Origin[Origin[\"Field\"] = 2] = \"Field\";\n})(Origin || (Origin = {}));\nclass TriggerEvent {\n    constructor(block, record, jsevent) {\n        this.block$ = block;\n        this.record$ = record;\n        this.event$ = jsevent;\n    }\n    get block() {\n        return (this.block$);\n    }\n    get type() {\n        return (this.type$);\n    }\n    get event() {\n        return (this.event$);\n    }\n    get record() {\n        return (this.record$);\n    }\n}\nclass KeyTriggerEvent extends TriggerEvent {\n    constructor(origin, block, field, key, jsevent) {\n        super(block, 0, jsevent);\n        this.key$ = key;\n        this.origin$ = origin;\n        if (field != null) {\n            this.field$ = field.name;\n            this[\"record$\"] = field.row;\n        }\n    }\n    get key() {\n        return (this.key$);\n    }\n    get field() {\n        return (this.field$);\n    }\n    get origin() {\n        return (this.origin$);\n    }\n}\nclass FieldTriggerEvent extends TriggerEvent {\n    constructor(block, field, id, row, value, previous, jsevent) {\n        super(block, row, jsevent);\n        this.id$ = id;\n        this.field$ = field;\n        this.value$ = value;\n        this.previous$ = previous;\n    }\n    get value() {\n        return (this.value$);\n    }\n    get field() {\n        return (this.field$);\n    }\n    get id() {\n        return (this.id$);\n    }\n    get previous() {\n        return (this.previous$);\n    }\n}\nclass SQLTriggerEvent extends TriggerEvent {\n    constructor(block, row, stmt) {\n        super(block, row, null);\n        this.stmt$ = stmt;\n    }\n    get stmt() {\n        return (this.stmt$);\n    }\n    set stmt(stmt) {\n        this.stmt$ = stmt;\n    }\n}\n\nclass Context {\n}\nContext.ɵfac = function Context_Factory(t) { return new (t || Context)(); };\nContext.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: Context, factory: Context.ɵfac, providedIn: 'root' });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(Context, [{\n        type: Injectable,\n        args: [{\n                providedIn: 'root',\n            }]\n    }], null, null); })();\n\nconst _c0$b = [\"menu\"];\nclass MenuArea {\n    constructor(ctx, change) {\n        this.change = change;\n        this.app = ctx.app[\"_impl_\"];\n    }\n    remove() {\n        if (this.element != null) {\n            let menuelem = this.menu.firstElementChild;\n            if (menuelem != null)\n                this.menu.removeChild(menuelem);\n            this.app.builder.getAppRef().detachView(this.menuref.hostView);\n        }\n        this.change.detectChanges();\n    }\n    display(menu) {\n        if (menu == null) {\n            this.remove();\n            return;\n        }\n        if (this.menu == null) {\n            setTimeout(() => { this.display(menu); }, 10);\n            return;\n        }\n        if (this.element != null) {\n            let menuelem = this.menu.firstElementChild;\n            if (menuelem != null)\n                this.menu.removeChild(menuelem);\n            this.app.builder.getAppRef().detachView(this.menuref.hostView);\n        }\n        this.menuref = menu;\n        this.element = menu.hostView.rootNodes[0];\n        this.app.builder.getAppRef().attachView(this.menuref.hostView);\n        this.menu.appendChild(this.element);\n        this.change.detectChanges();\n    }\n    ngAfterViewInit() {\n        this.menu = this.elem?.nativeElement;\n        this.app.setMenuArea(this);\n    }\n}\nMenuArea.ɵfac = function MenuArea_Factory(t) { return new (t || MenuArea)(i0.ɵɵdirectiveInject(Context), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };\nMenuArea.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: MenuArea, selectors: [[\"menuarea\"]], viewQuery: function MenuArea_Query(rf, ctx) { if (rf & 1) {\n        i0.ɵɵviewQuery(_c0$b, 5, ElementRef);\n    } if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.elem = _t.first);\n    } }, decls: 2, vars: 0, consts: [[\"menu\", \"\"]], template: function MenuArea_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelement(0, \"div\", null, 0);\n    } }, encapsulation: 2, changeDetection: 0 });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MenuArea, [{\n        type: Component,\n        args: [{\n                selector: 'menuarea',\n                template: `\n\t\t<div #menu></div>\n\t`,\n                changeDetection: ChangeDetectionStrategy.OnPush\n            }]\n    }], function () { return [{ type: Context }, { type: i0.ChangeDetectorRef }]; }, { elem: [{\n            type: ViewChild,\n            args: [\"menu\", { read: ElementRef }]\n        }] }); })();\n\nclass MenuHandler {\n    // dont rename __menu__ as it is set behind the scenes\n    constructor() {\n        this.__menu__ = null;\n        this.guid$ = MenuHandler._id++;\n    }\n    get guid() {\n        return (this.guid$);\n    }\n    get ready() {\n        return (this.__menu__ != null);\n    }\n    get app() {\n        return (this.__menu__.app);\n    }\n    enable(menu) {\n        this.__menu__.enable(menu);\n    }\n    disable(menu) {\n        this.__menu__.disable(menu);\n    }\n    get connected() {\n        return (this.__menu__.isConnected());\n    }\n    get transaction() {\n        return (this.app.transaction);\n    }\n    // For overwrite by application menus\n    onFormChange(form) {\n    }\n}\nMenuHandler._id = 0;\n\nclass DefaultMenuHandler extends MenuHandler {\n    onInit() {\n        this.init();\n    }\n    onConnect() {\n        this.init();\n    }\n    onDisconnect() {\n        this.init();\n    }\n    onFormChange(form) {\n        this.form = form;\n        if (this.ready)\n            this.init();\n    }\n    onTransactionChange() {\n        if (this.transaction)\n            this.enable(\"/transaction\");\n        else\n            this.disable(\"/transaction\");\n    }\n    init() {\n        this.disable();\n        this.enable(\"/form/shortkeys\");\n        if (this.form != null) {\n            this.enable(\"/form/close\");\n            this.enable(\"/section/next\");\n            this.enable(\"/section/previous\");\n            if (this.connected) {\n                this.enable(\"/form\");\n                this.enable(\"/section\");\n                this.enable(\"/record\");\n                this.enable(\"/connection/disconnect\");\n            }\n            else {\n                this.enable(\"/connection/connect\");\n            }\n        }\n        else {\n            if (this.connected) {\n                this.enable(\"/connection/disconnect\");\n            }\n            else {\n                this.enable(\"/connection/connect\");\n            }\n        }\n        this.onTransactionChange();\n    }\n    connect() {\n        this.app.connect();\n        this.init();\n    }\n    disconnect() {\n        this.app.disconnect();\n        this.init();\n    }\n    commit() {\n        this.app.commit();\n    }\n    rollback() {\n        this.app.rollback();\n    }\n    clear() {\n        this.form?.sendKey(keymap.clearform);\n    }\n    cancel() {\n        this.form?.block?.cancel();\n    }\n    enterFormQuery() {\n        this.form?.enterquery();\n    }\n    executeFormQuery() {\n        this.form?.executequery();\n    }\n    enterQuery() {\n        this.form?.block?.sendKey(keymap.enterquery);\n    }\n    executeQuery() {\n        this.form?.block?.sendKey(keymap.executequery);\n    }\n    deleteRecord() {\n        this.form?.block?.delete();\n    }\n    insertRecordAfter() {\n        this.form?.block?.insert(false);\n    }\n    insertRecordBefore() {\n        this.form?.block?.insert(true);\n    }\n    nextRecord() {\n        this.form?.block?.nextrecord();\n    }\n    prevRecord() {\n        this.form?.block?.prevrecord();\n    }\n    nextBlock() {\n        this.form?.block?.nextblock();\n    }\n    prevBlock() {\n        this.form?.block?.prevblock();\n    }\n    pageUp() {\n        this.form?.block?.pageup();\n    }\n    pageDown() {\n        this.form?.block?.pagedown();\n    }\n    close() {\n        this.form?.close(false);\n        this.init();\n    }\n    showkeymap() {\n        this.app.showKeyMap();\n    }\n}\n\nclass DefaultMenu {\n    constructor() {\n        this.entries =\n            [\n                {\n                    name: \"Form\", title: \"Form actions\", options: [\n                        { name: \"enter query\", action: \"enterFormQuery\" },\n                        { name: \"execute query\", action: \"executeFormQuery\" },\n                        { name: \"clear\", action: \"clear\" },\n                        { name: \"close\", action: \"close\" },\n                        { name: \"shortkeys\", action: \"showkeymap\" },\n                    ]\n                },\n                {\n                    name: \"Section\", title: \"Block actions\", options: [\n                        { name: \"enter query\", action: \"enterQuery\" },\n                        { name: \"execute query\", action: \"executeQuery\" },\n                        { name: \"clear filter\", action: \"executeQuery\" },\n                        { name: \"next\", action: \"nextBlock\" },\n                        { name: \"previous\", action: \"prevBlock\" },\n                    ]\n                },\n                {\n                    name: \"Record\", title: \"Record actions\", options: [\n                        { name: \"insert below\", action: \"insertRecordAfter\" },\n                        { name: \"insert above\", action: \"insertRecordBefore\" },\n                        { name: \"delete\", action: \"deleteRecord\" },\n                        { name: \"next\", action: \"nextRecord\" },\n                        { name: \"previous\", action: \"prevRecord\" },\n                        { name: \"pagedown\", action: \"pageDown\" },\n                        { name: \"pageup\", action: \"pageUp\" },\n                    ]\n                },\n                {\n                    name: \"Transaction\", title: \"Transaction Menu\", options: [\n                        { name: \"commit\", action: \"commit\" },\n                        { name: \"rollback\", action: \"rollback\" },\n                    ]\n                },\n                {\n                    name: \"Connection\", title: \"Connection to database\", options: [\n                        { name: \"connect\", action: \"connect\" },\n                        { name: \"disconnect\", action: \"disconnect\" },\n                    ]\n                }\n            ];\n        this.handler = new DefaultMenuHandler();\n    }\n    getHandler() {\n        return (this.handler);\n    }\n    getEntries() {\n        return (this.entries);\n    }\n}\n\nclass Key {\n    constructor(name) {\n        this.name = name;\n        this.values$ = [];\n        this.columns$ = [];\n        this.index = new Map();\n    }\n    get(part) {\n        let col = -1;\n        if (part.constructor.name == \"Number\")\n            col = +part;\n        else\n            col = this.index.get(\"\" + part);\n        return (this.values$[col]);\n    }\n    partof(part) {\n        return (this.columns$.includes(part, 0));\n    }\n    set(name, value) {\n        let col = -1;\n        if (name.constructor.name == \"Number\")\n            col = +name;\n        else\n            col = this.index.get(\"\" + name);\n        this.values$[col] = value;\n    }\n    addColumn(name) {\n        this.index.set(name, this.columns$.length);\n        this.values$.push(name);\n        this.columns$.push(name);\n    }\n    columns() {\n        return (this.columns$);\n    }\n    get values() {\n        let map = [];\n        for (let i = 0; i < this.columns$.length; i++)\n            map.push({ name: this.columns$[i], value: this.values$[i] });\n        return (map);\n    }\n    toString() {\n        let str = this.name + \" [\";\n        for (let i = 0; i < this.columns$.length; i++)\n            str += this.columns$[i] + \" = \" + this.values$[i] + \", \";\n        return (str.substring(0, str.length - 2) + \"]\");\n    }\n}\n\nvar RecordState;\n(function (RecordState) {\n    RecordState[RecordState[\"na\"] = 0] = \"na\";\n    RecordState[RecordState[\"qmode\"] = 1] = \"qmode\";\n    RecordState[RecordState[\"insert\"] = 2] = \"insert\";\n    RecordState[RecordState[\"update\"] = 3] = \"update\";\n})(RecordState || (RecordState = {}));\nclass Record {\n    constructor(row, fields, index) {\n        this.row$ = 0;\n        this.fields$ = [];\n        this.current$ = false;\n        this.enabled$ = false;\n        this.state$ = RecordState.na;\n        this.index = new Map();\n        this.row$ = row;\n        this.index = index;\n        this.fields$ = fields;\n    }\n    set row(row) {\n        this.row$ = row;\n    }\n    get row() {\n        return (this.row$);\n    }\n    get fields() {\n        return (this.fields$);\n    }\n    focus() {\n        for (let i = 0; i < this.fields$.length; i++)\n            if (this.fields$[i].focus())\n                return;\n    }\n    set current(flag) {\n        this.current$ = flag;\n        this.fields$.forEach((field) => { field.current = flag; });\n    }\n    get current() {\n        return (this.current$);\n    }\n    clear() {\n        this.fields$.forEach((field) => { field.value = null; field.disable(); });\n        if (this.current)\n            this.fields$.forEach((field) => { field.current = true; field.disable(); });\n    }\n    set state(state) {\n        this.state$ = state;\n        this.fields$.forEach((field) => { field.state = state; });\n    }\n    get state() {\n        return (this.state$);\n    }\n    get enabled() {\n        return (this.enabled$);\n    }\n    get readonly() {\n        for (let i = 0; i < this.fields$.length; i++)\n            if (!this.fields$[i].readonly)\n                return (false);\n        return (true);\n    }\n    enable(readonly) {\n        this.enabled$ = true;\n        this.fields$.forEach((field) => {\n            field.state = this.state$;\n            field.enable(readonly);\n        });\n    }\n    disable() {\n        this.enabled$ = false;\n        this.fields$.forEach((field) => { field.disable(); });\n    }\n    getField(name) {\n        if (name == null)\n            return (null);\n        return (this.index.get(name.toLowerCase()));\n    }\n    getFieldByGuid(name, guid) {\n        let field = this.index.get(name.toLowerCase());\n        if (field != null)\n            return (field.getInstance(guid));\n        return (null);\n    }\n}\n\nclass TextField {\n    get html() {\n        return (\"<input type='text'></input>\");\n    }\n    set size(size) {\n        this.element$.size = size;\n    }\n    get tabindex() {\n        return (this.element$.tabIndex);\n    }\n    get element() {\n        return (this.element$);\n    }\n    set tabindex(seq) {\n        this.element$.tabIndex = seq;\n    }\n    set element(element) {\n        this.element$ = element;\n    }\n    get enable() {\n        return (!this.element$.disabled);\n    }\n    set enable(flag) {\n        this.element$.disabled = !flag;\n    }\n    get readonly() {\n        return (this.element$.readOnly);\n    }\n    set readonly(flag) {\n        this.element$.readOnly = flag;\n    }\n    get value() {\n        return (this.element$.value);\n    }\n    set value(value) {\n        this.element$.value = value;\n    }\n    focus() {\n        this.element$.focus();\n        this.element$.select();\n    }\n    validate() {\n        return (true);\n    }\n}\n\nclass DropDown extends TextField {\n    get html() {\n        return (\"<select></select>\");\n    }\n    focus() {\n        this.element$.focus();\n    }\n}\n\nclass Password extends TextField {\n    get html() {\n        return (\"<input type='password'></input>\");\n    }\n}\n\nclass CheckBox extends TextField {\n    constructor() {\n        super(...arguments);\n        this.actvalue = null;\n        this.chkvalue = null;\n    }\n    get html() {\n        return (\"<input type='checkbox'></input>\");\n    }\n    get value() {\n        return (this.actvalue);\n    }\n    set value(value) {\n        if (this.chkvalue == null) {\n            this.chkvalue = value;\n            return;\n        }\n        this.actvalue = value;\n        // cheat compiler\n        let checkbox = this.element;\n        if (value == this.chkvalue)\n            checkbox.checked = true;\n        else\n            checkbox.checked = false;\n    }\n}\n\nconst token = /d{1,4}|M{1,4}|YY(?:YY)?|S{1,3}|Do|ZZ|Z|([HhMsDm])\\1?|[aA]|\"[^\"]*\"|'[^']*'/g;\nconst twoDigitsOptional = \"[1-9]\\\\d?\";\nconst twoDigits = \"\\\\d\\\\d\";\nconst threeDigits = \"\\\\d{3}\";\nconst fourDigits = \"\\\\d{4}\";\nconst word = \"[^\\\\s]+\";\nconst literal = /\\[([^]*?)\\]/gm;\nfunction shorten(arr, sLen) {\n    const newArr = [];\n    for (let i = 0, len = arr.length; i < len; i++) {\n        newArr.push(arr[i].substr(0, sLen));\n    }\n    return newArr;\n}\nconst monthUpdate = (arrName) => (v, i18n) => {\n    const lowerCaseArr = i18n[arrName].map(v => v.toLowerCase());\n    const index = lowerCaseArr.indexOf(v.toLowerCase());\n    if (index > -1) {\n        return index;\n    }\n    return null;\n};\nfunction assign(origObj, ...args) {\n    for (const obj of args) {\n        for (const key in obj) {\n            // @ts-ignore ex\n            origObj[key] = obj[key];\n        }\n    }\n    return origObj;\n}\nconst dayNames = [\n    \"Sunday\",\n    \"Monday\",\n    \"Tuesday\",\n    \"Wednesday\",\n    \"Thursday\",\n    \"Friday\",\n    \"Saturday\"\n];\nconst monthNames = [\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n    \"December\"\n];\nconst monthNamesShort = shorten(monthNames, 3);\nconst dayNamesShort = shorten(dayNames, 3);\nconst defaultI18n = {\n    dayNamesShort,\n    dayNames,\n    monthNamesShort,\n    monthNames,\n    amPm: [\"am\", \"pm\"],\n    DoFn(dayOfMonth) {\n        return (dayOfMonth +\n            [\"th\", \"st\", \"nd\", \"rd\"][dayOfMonth % 10 > 3\n                ? 0\n                : ((dayOfMonth - (dayOfMonth % 10) !== 10 ? 1 : 0) * dayOfMonth) % 10]);\n    }\n};\nlet globalI18n = assign({}, defaultI18n);\nconst setGlobalDateI18n = (i18n) => (globalI18n = assign(globalI18n, i18n));\nconst regexEscape = (str) => str.replace(/[|\\\\{()[^$+*?.-]/g, \"\\\\$&\");\nconst pad = (val, len = 2) => {\n    val = String(val);\n    while (val.length < len) {\n        val = \"0\" + val;\n    }\n    return val;\n};\nconst formatFlags = {\n    D: (dateObj) => String(dateObj.getDate()),\n    DD: (dateObj) => pad(dateObj.getDate()),\n    Do: (dateObj, i18n) => i18n.DoFn(dateObj.getDate()),\n    d: (dateObj) => String(dateObj.getDay()),\n    dd: (dateObj) => pad(dateObj.getDay()),\n    ddd: (dateObj, i18n) => i18n.dayNamesShort[dateObj.getDay()],\n    dddd: (dateObj, i18n) => i18n.dayNames[dateObj.getDay()],\n    M: (dateObj) => String(dateObj.getMonth() + 1),\n    MM: (dateObj) => pad(dateObj.getMonth() + 1),\n    MMM: (dateObj, i18n) => i18n.monthNamesShort[dateObj.getMonth()],\n    MMMM: (dateObj, i18n) => i18n.monthNames[dateObj.getMonth()],\n    YY: (dateObj) => pad(String(dateObj.getFullYear()), 4).substr(2),\n    YYYY: (dateObj) => pad(dateObj.getFullYear(), 4),\n    h: (dateObj) => String(dateObj.getHours() % 12 || 12),\n    hh: (dateObj) => pad(dateObj.getHours() % 12 || 12),\n    H: (dateObj) => String(dateObj.getHours()),\n    HH: (dateObj) => pad(dateObj.getHours()),\n    m: (dateObj) => String(dateObj.getMinutes()),\n    mm: (dateObj) => pad(dateObj.getMinutes()),\n    s: (dateObj) => String(dateObj.getSeconds()),\n    ss: (dateObj) => pad(dateObj.getSeconds()),\n    S: (dateObj) => String(Math.round(dateObj.getMilliseconds() / 100)),\n    SS: (dateObj) => pad(Math.round(dateObj.getMilliseconds() / 10), 2),\n    SSS: (dateObj) => pad(dateObj.getMilliseconds(), 3),\n    a: (dateObj, i18n) => dateObj.getHours() < 12 ? i18n.amPm[0] : i18n.amPm[1],\n    A: (dateObj, i18n) => dateObj.getHours() < 12\n        ? i18n.amPm[0].toUpperCase()\n        : i18n.amPm[1].toUpperCase(),\n    ZZ(dateObj) {\n        const offset = dateObj.getTimezoneOffset();\n        return ((offset > 0 ? \"-\" : \"+\") +\n            pad(Math.floor(Math.abs(offset) / 60) * 100 + (Math.abs(offset) % 60), 4));\n    },\n    Z(dateObj) {\n        const offset = dateObj.getTimezoneOffset();\n        return ((offset > 0 ? \"-\" : \"+\") +\n            pad(Math.floor(Math.abs(offset) / 60), 2) +\n            \":\" +\n            pad(Math.abs(offset) % 60, 2));\n    }\n};\nconst monthParse = (v) => +v - 1;\nconst emptyDigits = [null, twoDigitsOptional];\nconst emptyWord = [null, word];\nconst amPm = [\n    \"isPm\",\n    word,\n    (v, i18n) => {\n        const val = v.toLowerCase();\n        if (val === i18n.amPm[0]) {\n            return 0;\n        }\n        else if (val === i18n.amPm[1]) {\n            return 1;\n        }\n        return null;\n    }\n];\nconst timezoneOffset = [\n    \"timezoneOffset\",\n    \"[^\\\\s]*?[\\\\+\\\\-]\\\\d\\\\d:?\\\\d\\\\d|[^\\\\s]*?Z?\",\n    (v) => {\n        const parts = (v + \"\").match(/([+-]|\\d\\d)/gi);\n        if (parts) {\n            const minutes = +parts[1] * 60 + parseInt(parts[2], 10);\n            return parts[0] === \"+\" ? minutes : -minutes;\n        }\n        return 0;\n    }\n];\nconst parseFlags = {\n    D: [\"day\", twoDigitsOptional],\n    DD: [\"day\", twoDigits],\n    Do: [\"day\", twoDigitsOptional + word, (v) => parseInt(v, 10)],\n    M: [\"month\", twoDigitsOptional, monthParse],\n    MM: [\"month\", twoDigits, monthParse],\n    YY: [\n        \"year\",\n        twoDigits,\n        (v) => {\n            const now = new Date();\n            const cent = +(\"\" + now.getFullYear()).substr(0, 2);\n            return +(\"\" + (+v > 68 ? cent - 1 : cent) + v);\n        }\n    ],\n    h: [\"hour\", twoDigitsOptional, undefined, \"isPm\"],\n    hh: [\"hour\", twoDigits, undefined, \"isPm\"],\n    H: [\"hour\", twoDigitsOptional],\n    HH: [\"hour\", twoDigits],\n    m: [\"minute\", twoDigitsOptional],\n    mm: [\"minute\", twoDigits],\n    s: [\"second\", twoDigitsOptional],\n    ss: [\"second\", twoDigits],\n    YYYY: [\"year\", fourDigits],\n    S: [\"millisecond\", \"\\\\d\", (v) => +v * 100],\n    SS: [\"millisecond\", twoDigits, (v) => +v * 10],\n    SSS: [\"millisecond\", threeDigits],\n    d: emptyDigits,\n    dd: emptyDigits,\n    ddd: emptyWord,\n    dddd: emptyWord,\n    MMM: [\"month\", word, monthUpdate(\"monthNamesShort\")],\n    MMMM: [\"month\", word, monthUpdate(\"monthNames\")],\n    a: amPm,\n    A: amPm,\n    ZZ: timezoneOffset,\n    Z: timezoneOffset\n};\n// Some common format strings\nconst globalMasks = {\n    default: \"ddd MMM DD YYYY HH:mm:ss\",\n    shortDate: \"M/D/YY\",\n    mediumDate: \"MMM D, YYYY\",\n    longDate: \"MMMM D, YYYY\",\n    fullDate: \"dddd, MMMM D, YYYY\",\n    isoDate: \"YYYY-MM-DD\",\n    isoDateTime: \"YYYY-MM-DDTHH:mm:ssZ\",\n    shortTime: \"HH:mm\",\n    mediumTime: \"HH:mm:ss\",\n    longTime: \"HH:mm:ss.SSS\"\n};\nconst setGlobalDateMasks = (masks) => assign(globalMasks, masks);\n/***\n * Format a date\n * @method format\n * @param {Date|number} dateObj\n * @param {string} mask Format of the date, i.e. 'mm-dd-yy' or 'shortDate'\n * @returns {string} Formatted date string\n */\nconst format = (dateObj, mask = globalMasks[\"default\"], i18n = {}) => {\n    if (typeof dateObj === \"number\") {\n        dateObj = new Date(dateObj);\n    }\n    if (Object.prototype.toString.call(dateObj) !== \"[object Date]\" ||\n        isNaN(dateObj.getTime())) {\n        throw new Error(\"Invalid Date pass to format\");\n    }\n    mask = globalMasks[mask] || mask;\n    const literals = [];\n    // Make literals inactive by replacing them with @@@\n    mask = mask.replace(literal, function ($0, $1) {\n        literals.push($1);\n        return \"@@@\";\n    });\n    const combinedI18nSettings = assign(assign({}, globalI18n), i18n);\n    // Apply formatting rules\n    mask = mask.replace(token, $0 => formatFlags[$0](dateObj, combinedI18nSettings));\n    // Inline literal values back into the formatted value\n    return mask.replace(/@@@/g, () => literals.shift());\n};\n/**\n * Parse a date string into a Javascript Date object /\n * @method parse\n * @param {string} dateStr Date string\n * @param {string} format Date parse format\n * @param {i18n} I18nSettingsOptional Full or subset of I18N settings\n * @returns {Date|null} Returns Date object. Returns null what date string is invalid or doesn't match format\n */\nfunction parse(dateStr, format, i18n = {}) {\n    if (typeof format !== \"string\") {\n        throw new Error(\"Invalid format in fecha parse\");\n    }\n    // Check to see if the format is actually a mask\n    format = globalMasks[format] || format;\n    // Avoid regular expression denial of service, fail early for really long strings\n    // https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS\n    if (dateStr.length > 1000) {\n        return null;\n    }\n    // Default to the beginning of the year.\n    const today = new Date();\n    const dateInfo = {\n        year: today.getFullYear(),\n        month: 0,\n        day: 1,\n        hour: 0,\n        minute: 0,\n        second: 0,\n        millisecond: 0,\n        isPm: null,\n        timezoneOffset: null\n    };\n    const parseInfo = [];\n    const literals = [];\n    // Replace all the literals with @@@. Hopefully a string that won't exist in the format\n    let newFormat = format.replace(literal, ($0, $1) => {\n        literals.push(regexEscape($1));\n        return \"@@@\";\n    });\n    const specifiedFields = {};\n    const requiredFields = {};\n    // Change every token that we find into the correct regex\n    newFormat = regexEscape(newFormat).replace(token, $0 => {\n        const info = parseFlags[$0];\n        const [field, regex, , requiredField] = info;\n        // Check if the person has specified the same field twice. This will lead to confusing results.\n        if (specifiedFields[field]) {\n            throw new Error(`Invalid format. ${field} specified twice in format`);\n        }\n        specifiedFields[field] = true;\n        // Check if there are any required fields. For instance, 12 hour time requires AM/PM specified\n        if (requiredField) {\n            requiredFields[requiredField] = true;\n        }\n        parseInfo.push(info);\n        return \"(\" + regex + \")\";\n    });\n    // Check all the required fields are present\n    Object.keys(requiredFields).forEach(field => {\n        if (!specifiedFields[field]) {\n            throw new Error(`Invalid format. ${field} is required in specified format`);\n        }\n    });\n    // Add back all the literals after\n    newFormat = newFormat.replace(/@@@/g, () => literals.shift());\n    // Check if the date string matches the format. If it doesn't return null\n    const matches = dateStr.match(new RegExp(newFormat, \"i\"));\n    if (!matches) {\n        return null;\n    }\n    const combinedI18nSettings = assign(assign({}, globalI18n), i18n);\n    // For each match, call the parser function for that date part\n    for (let i = 1; i < matches.length; i++) {\n        const [field, , parser] = parseInfo[i - 1];\n        const value = parser\n            ? parser(matches[i], combinedI18nSettings)\n            : +matches[i];\n        // If the parser can't make sense of the value, return null\n        if (value == null) {\n            return null;\n        }\n        dateInfo[field] = value;\n    }\n    if (dateInfo.isPm === 1 && dateInfo.hour != null && +dateInfo.hour !== 12) {\n        dateInfo.hour = +dateInfo.hour + 12;\n    }\n    else if (dateInfo.isPm === 0 && +dateInfo.hour === 12) {\n        dateInfo.hour = 0;\n    }\n    const dateWithoutTZ = new Date(dateInfo.year, dateInfo.month, dateInfo.day, dateInfo.hour, dateInfo.minute, dateInfo.second, dateInfo.millisecond);\n    const validateFields = [\n        [\"month\", \"getMonth\"],\n        [\"day\", \"getDate\"],\n        [\"hour\", \"getHours\"],\n        [\"minute\", \"getMinutes\"],\n        [\"second\", \"getSeconds\"]\n    ];\n    for (let i = 0, len = validateFields.length; i < len; i++) {\n        // Check to make sure the date field is within the allowed range. Javascript dates allows values\n        // outside the allowed range. If the values don't match the value was invalid\n        if (specifiedFields[validateFields[i][0]] &&\n            dateInfo[validateFields[i][0]] !== dateWithoutTZ[validateFields[i][1]]()) {\n            return null;\n        }\n    }\n    if (dateInfo.timezoneOffset == null) {\n        return dateWithoutTZ;\n    }\n    return new Date(Date.UTC(dateInfo.year, dateInfo.month, dateInfo.day, dateInfo.hour, dateInfo.minute - dateInfo.timezoneOffset, dateInfo.second, dateInfo.millisecond));\n}\nvar fecha = {\n    format,\n    parse,\n    defaultI18n,\n    setGlobalDateI18n,\n    setGlobalDateMasks\n};\n\nclass dates {\n    static init(format) {\n        dates.deffmt = format;\n        this.tokens$ = dates.split(format, \"-/:. \");\n        for (let i = 0; i < this.tokens$.length; i++) {\n            if (this.tokens$[i].delim != \" \") {\n                dates.delim = this.tokens$[i].delim;\n                break;\n            }\n        }\n        dates.formattokens = new Set();\n        dates.formattokens.add(\"m\");\n        dates.formattokens.add(\"d\");\n        dates.formattokens.add(\"o\");\n        dates.formattokens.add(\"d\");\n        dates.formattokens.add(\"y\");\n        dates.formattokens.add(\"a\");\n        dates.formattokens.add(\"h\");\n        dates.formattokens.add(\"s\");\n        dates.formattokens.add(\"z\");\n    }\n    static setFormat(format) {\n        dates.init(format);\n    }\n    static parse(datestr, format) {\n        if (format == null)\n            format = dates.deffmt;\n        if (datestr == null || datestr.trim().length == 0)\n            return (null);\n        let date = parse(datestr, format);\n        if (date == null)\n            datestr = dates.reformat(datestr);\n        if (datestr == null)\n            return (null);\n        return (parse(datestr, format));\n    }\n    static format(date, format$1) {\n        if (format$1 == null)\n            format$1 = dates.deffmt;\n        return (format(date, format$1));\n    }\n    static reformat(datestr) {\n        let ndate = \"\";\n        if (!isNaN(+datestr)) {\n            let pos = 0;\n            for (let i = 0; i < 3; i++) {\n                let len = dates.tokens$[i].token.length;\n                ndate += datestr.substring(pos, pos + len) + dates.tokens$[i].delim;\n                pos += len;\n            }\n            return (ndate);\n        }\n        if (dates.delim != \"-\")\n            datestr = dates.replaceAll(datestr, \"-\", dates.delim);\n        if (dates.delim != \"/\")\n            datestr = dates.replaceAll(datestr, \"/\", dates.delim);\n        if (dates.delim != \".\")\n            datestr = dates.replaceAll(datestr, \".\", dates.delim);\n        let parts = dates.split(datestr, dates.delim + \": \");\n        for (let i = 0; i < parts.length; i++) {\n            let numeric = !isNaN(+parts[i].token);\n            if (numeric && parts[i].token.length == 1)\n                parts[i].token = \"0\" + parts[i].token;\n        }\n        parts.forEach((part) => { ndate += part.token + part.delim; });\n        return (ndate);\n    }\n    static split(str, splitter) {\n        let parts = [];\n        let delimiters = new Set();\n        for (let i = 0; i < splitter.length; i++)\n            delimiters.add(splitter[i] + \"\");\n        let pos = 0;\n        for (let i = 0; i < str.length; i++) {\n            if (delimiters.has(str[i] + \"\")) {\n                parts.push({ token: str.substring(pos, i), delim: str[i] });\n                pos = i + 1;\n            }\n        }\n        if (pos < str.length)\n            parts.push({ token: str.substring(pos, str.length), delim: \"\" });\n        return (parts);\n    }\n    static replaceAll(str, search, replace) {\n        while (str.indexOf(search) >= 0)\n            str = str.replace(search, replace);\n        return (str);\n    }\n}\n// Current implementation from\n// https://github.com/taylorhakes/fecha/blob/master/README.md\ndates.delim = null;\ndates.deffmt = null;\ndates.tokens$ = null;\ndates.formattokens = null;\n\nclass DateField extends TextField {\n    constructor() {\n        super(...arguments);\n        this.dateval = null;\n        this.formatted = null;\n    }\n    get value() {\n        if (this.element$.value == this.formatted) {\n            // Invalid date\n            if (this.formatted.length > 0 && this.dateval == null)\n                return (this.formatted);\n            return (this.dateval);\n        }\n        return (this.element$.value);\n    }\n    set value(value) {\n        if (value == null || value.constructor.name != \"Date\") {\n            if (value != this.formatted || value != this.element$.value) {\n                this.dateval = null;\n                this.formatted = value;\n                this.element$.value = value;\n            }\n        }\n        else {\n            this.dateval = value;\n            this.formatted = dates.format(value);\n            this.element$.value = this.formatted;\n        }\n    }\n    validate() {\n        let strval = this.element$.value;\n        if (strval == this.formatted) {\n            if (strval != null && dates.parse(strval) == null)\n                return (false);\n            return (true);\n        }\n        this.formatted = null;\n        this.dateval = dates.parse(strval);\n        if (this.dateval == null && strval != null)\n            return (false);\n        if (this.dateval != null)\n            this.formatted = dates.format(this.dateval);\n        this.element$.value = this.formatted;\n        return (true);\n    }\n}\n\nclass RadioButton extends TextField {\n    constructor() {\n        super(...arguments);\n        this.actvalue = null;\n        this.chkvalue = null;\n    }\n    get html() {\n        return (\"<input type='radio'></input>\");\n    }\n    get value() {\n        return (this.actvalue);\n    }\n    set value(value) {\n        if (this.chkvalue == null) {\n            this.chkvalue = value;\n            return;\n        }\n        this.actvalue = value;\n        // cheat compiler\n        let radio = this.element;\n        if (value == this.chkvalue)\n            radio.checked = true;\n        else\n            radio.checked = false;\n    }\n}\n\nvar Column$1;\n(function (Column) {\n    Column[Column[\"int\"] = 0] = \"int\";\n    Column[Column[\"date\"] = 1] = \"date\";\n    Column[Column[\"decimal\"] = 2] = \"decimal\";\n    Column[Column[\"integer\"] = 3] = \"integer\";\n    Column[Column[\"varchar\"] = 4] = \"varchar\";\n    Column[Column[\"datetime\"] = 5] = \"datetime\";\n})(Column$1 || (Column$1 = {}));\n\nvar FieldType;\n(function (FieldType) {\n    FieldType[FieldType[\"date\"] = 0] = \"date\";\n    FieldType[FieldType[\"text\"] = 1] = \"text\";\n    FieldType[FieldType[\"radio\"] = 2] = \"radio\";\n    FieldType[FieldType[\"integer\"] = 3] = \"integer\";\n    FieldType[FieldType[\"decimal\"] = 4] = \"decimal\";\n    FieldType[FieldType[\"checkbox\"] = 5] = \"checkbox\";\n    FieldType[FieldType[\"datetime\"] = 6] = \"datetime\";\n    FieldType[FieldType[\"password\"] = 7] = \"password\";\n    FieldType[FieldType[\"dropdown\"] = 8] = \"dropdown\";\n})(FieldType || (FieldType = {}));\nclass FieldImplementation {\n    static init() {\n        if (FieldImplementation.impl != null)\n            return;\n        FieldImplementation.impl = new Map();\n        Object.keys(FieldType).forEach((type) => {\n            if (isNaN(Number(type)))\n                FieldImplementation.impl.set(type, TextField);\n        });\n        FieldImplementation.impl.set(FieldType[FieldType.date], DateField);\n        FieldImplementation.impl.set(FieldType[FieldType.radio], RadioButton);\n        FieldImplementation.impl.set(FieldType[FieldType.checkbox], CheckBox);\n        FieldImplementation.impl.set(FieldType[FieldType.password], Password);\n        FieldImplementation.impl.set(FieldType[FieldType.dropdown], DropDown);\n        FieldImplementation.impl.set(FieldType[FieldType.datetime], DateField);\n    }\n    static getClass(type) {\n        FieldImplementation.init();\n        return (FieldImplementation.impl.get(type));\n    }\n    static guess(type) {\n        let ftype = FieldType.text;\n        if (type != null) {\n            ftype = FieldType.text;\n            if (type == Column$1.date)\n                ftype = FieldType.date;\n            if (type == Column$1.integer)\n                ftype = FieldType.integer;\n            if (type == Column$1.decimal)\n                ftype = FieldType.decimal;\n            if (type == Column$1.datetime)\n                ftype = FieldType.datetime;\n        }\n        return (ftype);\n    }\n}\nFieldImplementation.impl = null;\n\nvar FormState;\n(function (FormState) {\n    FormState[FormState[\"normal\"] = 0] = \"normal\";\n    FormState[FormState[\"entqry\"] = 1] = \"entqry\";\n    FormState[FormState[\"exeqry\"] = 2] = \"exeqry\";\n})(FormState || (FormState = {}));\n\nclass KeyCodes {\n}\nKeyCodes.backspace = 8;\nKeyCodes.tab = 9;\nKeyCodes.enter = 13;\nKeyCodes.escape = 27;\nKeyCodes.pageup = 33;\nKeyCodes.pagedown = 34;\nKeyCodes.end = 35;\nKeyCodes.home = 36;\nKeyCodes.up = 38;\nKeyCodes.down = 40;\nKeyCodes.left = 37;\nKeyCodes.right = 39;\nKeyCodes.insert = 45;\nKeyCodes.delete = 46;\nKeyCodes.f1 = 112;\nKeyCodes.f2 = 113;\nKeyCodes.f3 = 114;\nKeyCodes.f4 = 115;\nKeyCodes.f5 = 116;\nKeyCodes.f6 = 117;\nKeyCodes.f7 = 118;\nKeyCodes.f8 = 119;\nKeyCodes.f9 = 120;\nKeyCodes.f10 = 121;\nKeyCodes.f11 = 122;\nKeyCodes.f12 = 123;\n\nclass WindowListener {\n    constructor() { }\n    static add(id, clazz, event) {\n        let events = WindowListener.events.get(event);\n        if (events == null) {\n            events = new Map();\n            WindowListener.events.set(event, events);\n            let listener = new WindowListener();\n            listener.start(event);\n        }\n        events.set(id, clazz);\n    }\n    static remove(id, event) {\n        let events = WindowListener.events.get(event);\n        events.delete(id);\n    }\n    start(eventtype) {\n        window.addEventListener(eventtype, (event) => { this.onEvent(event); });\n    }\n    onEvent(event) {\n        let events = WindowListener.events.get(event.type);\n        events.forEach((clazz) => { clazz.onEvent(event); });\n    }\n}\nWindowListener.events = new Map();\n\nconst _c0$a = [\"title\"];\nconst _c1$4 = [\"window\"];\nconst _c2$1 = [\"topbar\"];\nconst _c3$1 = [\"content\"];\nclass PopupWindow {\n    constructor(ctx, change) {\n        this.change = change;\n        this.top = null;\n        this.left = null;\n        this.width = \"300px\";\n        this.height = \"200px\";\n        this.tmargin = \"8px\";\n        this.minw = 0;\n        this.minh = 0;\n        this.offx = 0;\n        this.offy = 0;\n        this.move = false;\n        this.resz = false;\n        this.resizex = false;\n        this.resizey = false;\n        this.app = ctx.app[\"_impl_\"];\n    }\n    get tcolor() {\n        return (this.app.config.colors.title);\n    }\n    get bcolor() {\n        return (this.app.config.colors.topbar);\n    }\n    get btncolor() {\n        return (this.app.config.colors.buttontext);\n    }\n    set title(title) {\n        this.title$ = title;\n    }\n    setPopup(pinst) {\n        this.pinst = pinst;\n        this.popup = pinst.popupref.instance;\n        this.popup.setWin(this);\n        this.title$ = this.popup.title;\n        if (this.popup.hasOwnProperty(\"top\"))\n            this.top = this.popup.top;\n        if (this.popup.hasOwnProperty(\"left\"))\n            this.left = this.popup.left;\n        if (this.popup.hasOwnProperty(\"width\"))\n            this.width = this.popup.width;\n        if (this.popup.hasOwnProperty(\"height\"))\n            this.height = this.popup.height;\n    }\n    resize(width, height) {\n        this.width = width;\n        this.height = height;\n        this.change.detectChanges();\n    }\n    setWinRef(winref) {\n        this.winref = winref;\n    }\n    close(cancel) {\n        this.closeWindow();\n        this.popup.close(cancel);\n    }\n    closeWindow() {\n        if (this.winref == null)\n            return;\n        WindowListener.remove(\"modal\", \"mouseup\");\n        WindowListener.remove(\"modal\", \"mousemove\");\n        WindowListener.remove(\"modal\", \"mousedown\");\n        let formelem = this.content.firstElementChild;\n        if (formelem != null)\n            this.content.removeChild(formelem);\n        this.app.builder.getAppRef().detachView(this.pinst.popupref.hostView);\n        let element = this.winref.hostView.rootNodes[0];\n        document.body.removeChild(element);\n        this.app.builder.getAppRef().detachView(this.winref.hostView);\n        this.winref.destroy();\n        this.winref = null;\n    }\n    display() {\n        if (this.pinst == null) {\n            setTimeout(() => { this.display(); }, 10);\n            return;\n        }\n        this.element = this.pinst.popupref.hostView.rootNodes[0];\n        this.app.builder.getAppRef().attachView(this.pinst.popupref.hostView);\n        this.content.appendChild(this.element);\n        this.minh = 150;\n        this.minw = 250;\n        this.titlebar.innerHTML = this.title$;\n        this.change.detectChanges();\n        this.posy = this.window.offsetTop;\n        this.posx = this.window.offsetLeft;\n        this.sizex = this.window.offsetWidth;\n        this.sizey = this.window.offsetHeight;\n        let resize = false;\n        if (this.sizex < this.minw) {\n            resize = true;\n            this.sizex = this.minw;\n            this.width = this.sizex + \"px\";\n        }\n        if (this.sizey < this.minh) {\n            resize = true;\n            this.sizey = this.minh;\n            this.height = this.sizey + \"px\";\n        }\n        if (this.top == null || this.top.trim.length == 0) {\n            resize = true;\n            this.top = ((+window.innerHeight - this.sizey) / 3) + \"px\";\n        }\n        if (this.left == null || this.left.trim.length == 0) {\n            resize = true;\n            this.left = ((+window.innerWidth - this.sizex) / 1.5) + \"px\";\n        }\n        if (resize) {\n            this.change.detectChanges();\n            this.posy = this.window.offsetTop;\n            this.posx = this.window.offsetLeft;\n            this.sizex = this.window.offsetWidth;\n            this.sizey = this.window.offsetHeight;\n        }\n    }\n    ngAfterViewInit() {\n        this.window = this.windowElement?.nativeElement;\n        this.topbar = this.topbarElement?.nativeElement;\n        this.content = this.contentElement?.nativeElement;\n        this.titlebar = this.titlebarElement?.nativeElement;\n        this.display();\n        WindowListener.add(\"modal\", this, \"mouseup\");\n        WindowListener.add(\"modal\", this, \"mousemove\");\n        WindowListener.add(\"modal\", this, \"mousedown\");\n        this.topbar.addEventListener(\"mousedown\", (event) => { this.startmove(event); });\n    }\n    onEvent(event) {\n        switch (event.type) {\n            case \"mouseup\":\n                this.mouseup();\n                break;\n            case \"mousemove\":\n                this.movePopup(event);\n                this.resizePopup(event);\n                this.resizemousemove(event);\n                break;\n            case \"mousedown\":\n                this.startresize(event);\n                break;\n        }\n    }\n    startmove(event) {\n        if (this.resizexy)\n            return;\n        this.move = true;\n        event = event || window.event;\n        event.preventDefault();\n        this.offy = +event.clientY - this.posy;\n        this.offx = +event.clientX - this.posx;\n    }\n    mouseup() {\n        if (!this.move && !this.resz)\n            return;\n        this.move = false;\n        this.resz = false;\n        this.resizexy = false;\n        this.window.style.cursor = \"default\";\n        document.body.style.cursor = \"default\";\n    }\n    movePopup(event) {\n        if (!this.move)\n            return;\n        event = event || window.event;\n        let deltay = +event.clientY - this.posy;\n        let deltax = +event.clientX - this.posx;\n        this.posy += (deltay - this.offy);\n        this.posx += (deltax - this.offx);\n        if (this.posy > 0)\n            this.top = this.posy + \"px\";\n        if (this.posx > 0)\n            this.left = this.posx + \"px\";\n        this.change.detectChanges();\n    }\n    resizemousemove(event) {\n        if (this.resz)\n            return;\n        event = event || window.event;\n        let posx = +event.clientX;\n        let posy = +event.clientY;\n        let offx = this.posx + this.sizex - posx;\n        let offy = this.posy + this.sizey - posy;\n        let before = false;\n        if (this.resizex || this.resizey)\n            before = true;\n        this.resizex = false;\n        this.resizey = false;\n        if (offx > -7 && offx < 10 && posy > this.posy - 7 && posy < this.posy + this.sizey + 7)\n            this.resizex = true;\n        if (offy > -7 && offy < 10 && posx > this.posx - 7 && posx < this.posx + this.sizex + 7)\n            this.resizey = true;\n        if (this.resizex && this.resizey) {\n            this.resizex = true;\n            this.resizey = true;\n        }\n        if (this.resizex && !this.resizey) {\n            this.window.style.cursor = \"e-resize\";\n            document.body.style.cursor = \"e-resize\";\n        }\n        if (this.resizey && !this.resizex) {\n            this.window.style.cursor = \"s-resize\";\n            document.body.style.cursor = \"s-resize\";\n        }\n        if (this.resizex && this.resizey) {\n            this.window.style.cursor = \"se-resize\";\n            document.body.style.cursor = \"se-resize\";\n        }\n        if (before && !this.resizexy) {\n            this.window.style.cursor = \"default\";\n            document.body.style.cursor = \"default\";\n        }\n    }\n    startresize(event) {\n        if (!this.resizexy)\n            return;\n        this.resz = true;\n        event = event || window.event;\n        event.preventDefault();\n        this.offy = +event.clientY;\n        this.offx = +event.clientX;\n    }\n    resizePopup(event) {\n        if (!this.resz)\n            return;\n        event = event || window.event;\n        let deltay = +event.clientY - this.offy;\n        let deltax = +event.clientX - this.offx;\n        if (this.resizex && (this.sizex > this.minw || deltax > 0)) {\n            this.sizex += deltax;\n            this.width = this.sizex + \"px\";\n        }\n        if (this.resizey && (this.sizey > this.minh || deltay > 0)) {\n            this.sizey += deltay;\n            this.height = this.sizey + \"px\";\n        }\n        this.offy = +event.clientY;\n        this.offx = +event.clientX;\n        this.change.detectChanges();\n    }\n    get resizexy() {\n        if (this.resizex || this.resizey)\n            return (true);\n        return (false);\n    }\n    set resizexy(on) {\n        this.resizex = on;\n        this.resizey = on;\n    }\n}\nPopupWindow.ɵfac = function PopupWindow_Factory(t) { return new (t || PopupWindow)(i0.ɵɵdirectiveInject(Context), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };\nPopupWindow.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PopupWindow, selectors: [[\"popupwindow\"]], viewQuery: function PopupWindow_Query(rf, ctx) { if (rf & 1) {\n        i0.ɵɵviewQuery(_c0$a, 5, ElementRef);\n        i0.ɵɵviewQuery(_c1$4, 5, ElementRef);\n        i0.ɵɵviewQuery(_c2$1, 5, ElementRef);\n        i0.ɵɵviewQuery(_c3$1, 5, ElementRef);\n    } if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.titlebarElement = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.windowElement = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.topbarElement = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.contentElement = _t.first);\n    } }, decls: 16, vars: 21, consts: [[1, \"popupwindow\"], [1, \"popupwindow-modal-block\"], [\"window\", \"\"], [1, \"popupwindow-container\"], [1, \"popupwindow-topbar\"], [\"topbar\", \"\"], [1, \"popupwindow-center\"], [1, \"popupwindow-corner\"], [\"title\", \"\"], [1, \"popupwindow-close\"], [1, \"popupwindow-button\", 3, \"click\"], [1, \"popupwindow-block\"], [\"content\", \"\"]], template: function PopupWindow_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1, 2);\n        i0.ɵɵelementStart(3, \"div\", 3);\n        i0.ɵɵelementStart(4, \"div\", 4, 5);\n        i0.ɵɵelementStart(6, \"span\", 6);\n        i0.ɵɵelement(7, \"span\", 7);\n        i0.ɵɵelement(8, \"div\", null, 8);\n        i0.ɵɵelementStart(10, \"span\", 9);\n        i0.ɵɵelementStart(11, \"button\", 10);\n        i0.ɵɵlistener(\"click\", function PopupWindow_Template_button_click_11_listener() { return ctx.close(true); });\n        i0.ɵɵtext(12, \"X\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(13, \"div\", 11);\n        i0.ɵɵelement(14, \"div\", null, 12);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n    } if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵstyleMapInterpolate2(\"top: \", ctx.top, \"; left: \", ctx.left, \"\");\n        i0.ɵɵadvance(2);\n        i0.ɵɵstyleMapInterpolate2(\"width: \", ctx.width, \"; height: \", ctx.height, \";\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵstyleMapInterpolate2(\"color: \", ctx.tcolor, \"; background-color: \", ctx.bcolor, \"\");\n        i0.ɵɵadvance(2);\n        i0.ɵɵstyleMapInterpolate1(\"color: \", ctx.tcolor, \";\");\n        i0.ɵɵadvance(5);\n        i0.ɵɵstyleMapInterpolate1(\"color: \", ctx.btncolor, \";\");\n        i0.ɵɵadvance(2);\n        i0.ɵɵstyleMapInterpolate1(\"margin-top: \", ctx.tmargin, \";\");\n    } }, styles: [\".popupwindow[_ngcontent-%COMP%]{top:0;left:0;z-index:1;width:100%;height:100%;display:block;overflow:auto;position:fixed}.popupwindow-modal-block[_ngcontent-%COMP%]{position:absolute;background-color:#fefefe}.popupwindow-container[_ngcontent-%COMP%]{position:relative;border:2px solid black}.popupwindow-topbar[_ngcontent-%COMP%]{height:1.7em;margin-left:0;margin-right:0;cursor:default;justify-content:center;border-bottom:2px solid black}.popupwindow-corner[_ngcontent-%COMP%]{width:1.5em;display:block;position:relative}.popupwindow-close[_ngcontent-%COMP%]{top:0;right:0;width:1.75em;height:1.7em;position:absolute;border-left:1px solid black}.popupwindow-button[_ngcontent-%COMP%]{top:50%;width:100%;height:100%;outline:none;font-size:.75em;font-weight:bold;position:relative;background:transparent;transform:translateY(-50%);border:0px solid transparent;box-shadow:0 0 0 transparent;text-shadow:0px 0px 0px transparent}.popupwindow-center[_ngcontent-%COMP%]{top:0;bottom:0;width:93%;height:100%;display:flex;align-items:center;justify-content:center}.popupwindow-block[_ngcontent-%COMP%]{left:0;top:3vh;right:0;bottom:0;display:flex;overflow:auto;position:absolute;justify-content:center}\"], changeDetection: 0 });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PopupWindow, [{\n        type: Component,\n        args: [{\n                selector: 'popupwindow',\n                template: `\n    <div class=\"popupwindow\">\n      <div #window class=\"popupwindow-modal-block\" style=\"top: {{top}}; left: {{left}}\">\n        <div class=\"popupwindow-container\" style=\"width: {{width}}; height: {{height}};\">\n\t\t  <div #topbar class=\"popupwindow-topbar\" style=\"color: {{tcolor}}; background-color: {{bcolor}}\">\n\t\t    <span class=\"popupwindow-center\" style=\"color: {{tcolor}};\">\n\t\t\t\t<span class=\"popupwindow-corner\"></span>\n\t\t\t\t<div #title></div>\n                <span class=\"popupwindow-close\">\n                    <button class=\"popupwindow-button\" style=\"color: {{btncolor}};\" (click)=\"close(true)\">X</button>\n                </span>\n\t\t\t</span>\n\t\t   </div>\n          <div class=\"popupwindow-block\" style=\"margin-top: {{tmargin}};\"><div #content></div></div>\n        </div>\n      </div>\n    </div>\n  `,\n                styles: [`\n    .popupwindow\n    {\n        top: 0;\n        left: 0;\n        z-index: 1;\n        width: 100%;\n        height: 100%;\n        display: block;\n        overflow: auto;\n        position: fixed;\n    }\n\n    .popupwindow-modal-block\n    {\n      position: absolute;\n      background-color: #fefefe;\n    }\n\n    .popupwindow-container\n    {\n        position: relative;\n        border: 2px solid black;\n    }\n\n    .popupwindow-topbar\n    {\n        height: 1.70em;\n        margin-left: 0;\n        margin-right: 0;\n        cursor:default;\n\t\tjustify-content: center;\n        border-bottom: 2px solid black;\n    }\n\n\t.popupwindow-corner\n\t{\n\t\twidth: 1.5em;\n\t\tdisplay: block;\n\t\tposition: relative;\n\t}\n\n\t.popupwindow-close\n\t{\n\t\ttop: 0;\n\t\tright: 0;\n\t\twidth: 1.75em;\n\t\theight: 1.70em;\n\t\tposition: absolute;\n\t\tborder-left: 1px solid black;\n\t}\n\n\t.popupwindow-button\n\t{\n\t\ttop: 50%;\n\t\twidth: 100%;\n\t\theight: 100%;\n\t\toutline:none;\n\t\tfont-size: 0.75em;\n\t\tfont-weight: bold;\n\t\tposition: relative;\n\t\tbackground: transparent;\n\t\ttransform: translateY(-50%);\n\t\tborder: 0px solid transparent;\n\t\tbox-shadow: 0px 0px 0px transparent;\n\t\ttext-shadow: 0px 0px 0px transparent;\n\t}\n\n\t.popupwindow-center\n\t{\n\t\ttop: 0;\n\t\tbottom: 0;\n\t\twidth: 93%;\n\t\theight: 100%;\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tjustify-content: center;\n\t}\n\n    .popupwindow-block\n    {\n        left: 0;\n        top: 3vh;\n        right: 0;\n        bottom: 0;\n\t\tdisplay: flex;\n        overflow: auto;\n        position: absolute;\n\t\tjustify-content: center;\n    }\n`],\n                changeDetection: ChangeDetectionStrategy.OnPush\n            }]\n    }], function () { return [{ type: Context }, { type: i0.ChangeDetectorRef }]; }, { titlebarElement: [{\n            type: ViewChild,\n            args: [\"title\", { read: ElementRef }]\n        }], windowElement: [{\n            type: ViewChild,\n            args: [\"window\", { read: ElementRef }]\n        }], topbarElement: [{\n            type: ViewChild,\n            args: [\"topbar\", { read: ElementRef }]\n        }], contentElement: [{\n            type: ViewChild,\n            args: ['content', { read: ElementRef }]\n        }] }); })();\n\nclass PopupInstance {\n    display(app, popup) {\n        this.popupref = app.builder.createComponent(popup);\n        let winref = app.builder.createComponent(PopupWindow);\n        let win = winref.instance;\n        win.setPopup(this);\n        win.setWinRef(winref);\n        let element = winref.hostView.rootNodes[0];\n        app.builder.getAppRef().attachView(winref.hostView);\n        document.body.appendChild(element);\n    }\n    popup() {\n        return (this.popupref.instance);\n    }\n}\n\nconst _c0$9 = [\"calendar\"];\nclass DatePicker {\n    constructor(ctx) {\n        this.ctx = ctx;\n        this.top = null;\n        this.left = null;\n        this.title = null;\n        this.width = \"256px\";\n        this.height = \"256px\";\n        this.cdate = null;\n        this.win = null;\n        this.cal = null;\n        this.days = null;\n        this.years = null;\n        this.months = null;\n        this.app = ctx.app[\"_impl_\"];\n        this.title = ctx.conf.calendarname;\n    }\n    static show(app, impl, record, field, date) {\n        let pinst = new PopupInstance();\n        pinst.display(app, DatePicker);\n        let datepicker = pinst.popup();\n        datepicker.date = date;\n        datepicker.setDestination(impl, record, field);\n    }\n    close(_cancel) {\n        this.win.closeWindow();\n    }\n    set date(date) {\n        if (date == null)\n            date = new Date();\n        this.cdate = date;\n    }\n    setDestination(impl, record, field) {\n        this.impl = impl;\n        this.field = field;\n        this.record = record;\n    }\n    pick(event) {\n        let year = +this.years.value;\n        let month = +this.months.value;\n        let day = +event.target.innerHTML;\n        let cday = this.cdate.getUTCDate();\n        let cmonth = this.cdate.getUTCMonth();\n        let cyear = this.cdate.getUTCFullYear();\n        if (year != cyear || month != cmonth || day != cday) {\n            this.cdate = new Date(Date.UTC(year, month - 1, day));\n            // Truncate\n            this.cdate = new Date(this.cdate.toDateString());\n            this.impl.setValue(this.record, this.field, this.cdate);\n            this.impl.focus();\n        }\n        this.close(false);\n    }\n    setWin(win) {\n        this.win = win;\n    }\n    ngAfterViewInit() {\n        this.cal = this.calelem?.nativeElement;\n        this.build(this.cdate, 75, 75);\n    }\n    navigate(event) {\n        if (event.keyCode == KeyCodes.tab) {\n            event.preventDefault();\n            if (event.target.name == \"months\")\n                this.years.focus();\n            else\n                this.months.focus();\n            return;\n        }\n        if (event.keyCode == KeyCodes.escape)\n            this.close(true);\n    }\n    weekdays(locale) {\n        let fmt = new Intl.DateTimeFormat(locale, { weekday: \"short\" }).format;\n        let names = [...Array(7).keys()].map((d) => fmt(new Date(Date.UTC(2021, 1, d))));\n        for (let i = 0; i < 7; i++) {\n            if (names[i].endsWith(\".\"))\n                names[i] = names[i].substring(0, names[i].length - 1);\n        }\n        let sun = names[0];\n        names.shift();\n        names.push(sun);\n        return (names);\n    }\n    monthnames(locale) {\n        let fmt = new Intl.DateTimeFormat(locale, { month: \"short\" }).format;\n        let names = [...Array(12).keys()].map((m) => fmt(new Date(Date.UTC(2021, m))));\n        for (let i = 0; i < 12; i++) {\n            if (names[i].endsWith(\".\"))\n                names[i] = names[i].substring(0, names[i].length - 1);\n        }\n        return (names);\n    }\n    build(date, bef, aft) {\n        this.styles();\n        let month = date.getUTCMonth();\n        let year = date.getUTCFullYear();\n        let months = this.monthnames(this.ctx.conf.locale);\n        this.years = document.createElement(\"select\");\n        this.months = document.createElement(\"select\");\n        this.years.name = \"years\";\n        this.months.name = \"months\";\n        this.addFieldTriggers(this.years);\n        this.addFieldTriggers(this.months);\n        this.months.classList.add(\"datepicker-month\");\n        for (let i = 0; i < 12; i++) {\n            let option = document.createElement(\"option\");\n            option.text = months[i];\n            option.value = (i + 1) + \"\";\n            this.months.appendChild(option);\n        }\n        this.months.selectedIndex = month;\n        this.cal.appendChild(this.months);\n        this.years.classList.add(\"datepicker-year\");\n        for (let i = year - bef; i < year + aft; i++) {\n            let option = document.createElement(\"option\");\n            option.text = i + \"\";\n            option.value = i + \"\";\n            this.years.appendChild(option);\n        }\n        this.years.selectedIndex = bef;\n        this.cal.appendChild(this.years);\n        this.days = document.createElement(\"div\");\n        this.days.classList.add(\"datepicker-days\");\n        this.cal.appendChild(this.days);\n        this.draw();\n        let width = (1.25 * this.cal.offsetWidth) + \"px\";\n        let height = (1.10 * this.cal.offsetHeight + 32) + \"px\";\n        this.win.resize(width, height);\n        this.months.focus();\n    }\n    draw() {\n        let cday = this.cdate.getDate();\n        let cmonth = this.cdate.getMonth();\n        let cyear = this.cdate.getFullYear();\n        let year = +this.years.value;\n        let month = +this.months.value;\n        if (year != cyear || month != +cmonth + +1)\n            cday = 0;\n        let days = new Date(Date.UTC(year, month, 0)).getUTCDate();\n        let first = new Date(Date.UTC(year, month - 1, 1)).getUTCDay();\n        let last = new Date(Date.UTC(year, month - 1, days)).getUTCDay();\n        last = last == 0 ? 7 : last;\n        first = first == 0 ? 7 : first;\n        let squares = [];\n        for (let i = 1; i < first; i++)\n            squares.push([false, 0]);\n        for (let i = 0; i < days; i++)\n            squares.push([true, i]);\n        while (squares.length % 7 != 0)\n            squares.push([false, 0]);\n        let names = this.weekdays(this.ctx.conf.locale);\n        let table = document.createElement(\"table\");\n        table.classList.add(\"datepicker-table\");\n        let row = table.insertRow();\n        names.forEach((day) => {\n            let cell = row.insertCell();\n            cell.classList.add(\"datepicker-head\");\n            cell.innerHTML = day;\n        });\n        for (let i = 0; i < squares.length; i++) {\n            if (i % 7 == 0)\n                row = table.insertRow();\n            let cell = row.insertCell();\n            if (squares[i][0]) {\n                let dom = +squares[i][1] + +1;\n                cell.innerHTML = dom + \"\";\n                cell.classList.add(\"datepicker-day\");\n                if (dom == cday)\n                    cell.classList.add(\"datepicker-current\");\n                this.addDayTriggers(cell);\n            }\n            else {\n                cell.classList.add(\"datepicker-blank\");\n            }\n        }\n        this.days.innerHTML = \"\";\n        this.days.appendChild(table);\n        return (table);\n    }\n    addDayTriggers(cell) {\n        cell.addEventListener(\"click\", (event) => { this.pick(event); });\n    }\n    addFieldTriggers(change) {\n        change.addEventListener(\"change\", () => { this.draw(); });\n        change.addEventListener(\"keydown\", (event) => { this.navigate(event); });\n    }\n    styles() {\n        this.cal.innerHTML =\n            `\n        <style>\n            .datepicker-month\n            {\n                font-size: 15px;\n                margin-top: 16px;\n                margin-left: 16px;\n                width: fit-content;\n            }\n\n            .datepicker-year\n            {\n                font-size: 15px;\n                margin-top: 16px;\n                margin-left: 32px;\n                width: fit-content;\n            }\n\n            .datepicker-table\n            {\n                width: 100%;\n                margin-top: 14px;\n                border-collapse: separate;\n            }\n\n            .datepicker-head\n            {\n                font-weight: bold;\n                text-align: center;\n                color: ` + this.app.config.colors.text + `;\n            }\n\n            .datepicker-day\n            {\n                color: ` + this.app.config.colors.buttontext + `;\n                padding: 5px;\n                width: 14.28%;\n                text-align: center;\n                background: ` + this.app.config.colors.topbar + `;\n            }\n\n            .datepicker-blank\n            {\n                background: #ddd;\n            }\n\n            .datepicker-current\n            {\n                font-size: 16px;\n                font-weight: bold;\n            }\n\n            .datepicker-day:hover\n            {\n                cursor: pointer;\n                font-weight: bold;\n                font-style: italic;\n            }\n        </style>\n        `;\n    }\n}\nDatePicker.ɵfac = function DatePicker_Factory(t) { return new (t || DatePicker)(i0.ɵɵdirectiveInject(Context)); };\nDatePicker.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: DatePicker, selectors: [[\"ng-component\"]], viewQuery: function DatePicker_Query(rf, ctx) { if (rf & 1) {\n        i0.ɵɵviewQuery(_c0$9, 5, ElementRef);\n    } if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.calelem = _t.first);\n    } }, decls: 2, vars: 0, consts: [[\"calendar\", \"\"]], template: function DatePicker_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelement(0, \"div\", null, 0);\n    } }, encapsulation: 2 });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DatePicker, [{\n        type: Component,\n        args: [{\n                template: `\n        <div #calendar></div>\n    `\n            }]\n    }], function () { return [{ type: Context }]; }, { calelem: [{\n            type: ViewChild,\n            args: [\"calendar\", { read: ElementRef }]\n        }] }); })();\n\nconst _c0$8 = [\"msg\"];\nconst _c1$3 = [\"accept\"];\nclass MessageBox {\n    constructor(ctx) {\n        this.top = \"20%\";\n        this.left = \"25%\";\n        this.width$ = \"100px\";\n        this.height$ = \"100px\";\n        this.title$ = \"alert\";\n        this.message = \"the message\";\n        this.msg = null;\n        this.btn = null;\n        this.app = ctx.app[\"_impl_\"];\n    }\n    static show(app, message, title, width, height) {\n        let pinst = new PopupInstance();\n        pinst.display(app, MessageBox);\n        let mbox = pinst.popup();\n        mbox.title = title;\n        mbox.message = message;\n        if (width != null)\n            mbox.width = width;\n        if (height != null)\n            mbox.height = height;\n    }\n    get bcolor() {\n        return (this.app.config.colors.topbar);\n    }\n    get tcolor() {\n        return (this.app.config.colors.buttontext);\n    }\n    set width(width) {\n        this.width$ = width;\n    }\n    get width() {\n        return (this.width$);\n    }\n    set height(height) {\n        this.height$ = height;\n    }\n    get height() {\n        return (this.height$);\n    }\n    set title(title) {\n        this.title$ = title;\n        this.win.title = this.title;\n    }\n    get title() {\n        return (this.title$);\n    }\n    setWin(win) {\n        this.win = win;\n    }\n    close(_cancel) {\n        this.btn.removeEventListener(\"click\", () => { this.close(false); });\n        this.btn.removeEventListener(\"keydown\", () => { this.close(false); });\n        this.win.closeWindow();\n        this.app.getCurrentForm()?.focus();\n    }\n    ngAfterViewInit() {\n        this.msg = this.msgelem?.nativeElement;\n        this.btn = this.acceptelem?.nativeElement;\n        setTimeout(() => { this.addTriggers(); }, 1);\n        this.msg.innerHTML = this.message;\n        this.keepFocus(0);\n    }\n    addTriggers() {\n        this.btn.addEventListener(\"click\", () => { this.close(false); });\n        this.btn.addEventListener(\"keydown\", () => { this.close(false); });\n    }\n    keepFocus(delay) {\n        this.btn.focus();\n        setTimeout(() => { this.keepFocus(delay + 1); }, delay);\n    }\n}\nMessageBox.ɵfac = function MessageBox_Factory(t) { return new (t || MessageBox)(i0.ɵɵdirectiveInject(Context)); };\nMessageBox.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: MessageBox, selectors: [[\"ng-component\"]], viewQuery: function MessageBox_Query(rf, ctx) { if (rf & 1) {\n        i0.ɵɵviewQuery(_c0$8, 5, ElementRef);\n        i0.ɵɵviewQuery(_c1$3, 5, ElementRef);\n    } if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.msgelem = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.acceptelem = _t.first);\n    } }, decls: 7, vars: 4, consts: [[1, \"messagebox\"], [1, \"messagebox-msg\"], [\"msg\", \"\"], [1, \"messagebox-buttom\"], [1, \"messagebox-btn\"], [\"accept\", \"\"]], template: function MessageBox_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelement(1, \"div\", 1, 2);\n        i0.ɵɵelementStart(3, \"div\", 3);\n        i0.ɵɵelementStart(4, \"button\", 4, 5);\n        i0.ɵɵtext(6, \"Ok\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n    } if (rf & 2) {\n        i0.ɵɵadvance(4);\n        i0.ɵɵstyleMapInterpolate2(\"color: \", ctx.tcolor, \"; background-color: \", ctx.bcolor, \";\");\n    } }, styles: [\".messagebox[_ngcontent-%COMP%]{top:0px;left:1px;right:1px;bottom:0px;display:block;position:absolute}.messagebox-msg[_ngcontent-%COMP%]{height:80px;display:flex;text-align:center;word-wrap:break-all;justify-content:center}.messagebox-buttom[_ngcontent-%COMP%]{right:1px;bottom:4px;witdh:35px;height:35px;display:block;position:absolute}.messagebox-btn[_ngcontent-%COMP%]{border:none;padding:10px;outline:none;font-size:15px;cursor:pointer;text-align:center;border-radius:100%;display:inline-block;text-decoration:none}\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MessageBox, [{\n        type: Component,\n        args: [{\n                selector: '',\n                template: `\n        <div class=\"messagebox\">\n            <div #msg class=\"messagebox-msg\"></div>\n            <div class=\"messagebox-buttom\">\n                <button #accept class=\"messagebox-btn\" style=\"color: {{tcolor}}; background-color: {{bcolor}};\">Ok</button>\n            </div>\n        </div>\n        `,\n                styles: [`\n        .messagebox\n        {\n            top: 0px;\n            left: 1px;\n            right: 1px;\n            bottom: 0px;\n            display: block;\n            position: absolute;\n        }\n\n        .messagebox-msg\n        {\n            height: 80px;\n            display: flex;\n            text-align: center;\n            word-wrap: break-all;\n            justify-content: center;\n        }\n\n        .messagebox-buttom\n        {\n            right: 1px;\n            bottom: 4px;\n            witdh: 35px;\n            height: 35px;\n            display: block;\n            position: absolute;\n        }\n\n        .messagebox-btn\n        {\n            border: none;\n            padding: 10px;\n            outline: none;\n            font-size: 15px;\n            cursor: pointer;\n            text-align: center;\n            border-radius: 100%;\n            display: inline-block;\n            text-decoration: none;\n        }\n    `]\n            }]\n    }], function () { return [{ type: Context }]; }, { msgelem: [{\n            type: ViewChild,\n            args: [\"msg\", { read: ElementRef }]\n        }], acceptelem: [{\n            type: ViewChild,\n            args: [\"accept\", { read: ElementRef }]\n        }] }); })();\n\nclass Condition {\n    constructor(column, value, datatype) {\n        this.level$ = 0;\n        this.type$ = \"and\";\n        this.prev$ = null;\n        this.next$ = null;\n        this.bindvalues$ = [];\n        this.error$ = null;\n        this.column$ = column;\n        this.datatype$ = datatype;\n        this.placeholder$ = column + Condition.ubid();\n        if (this.column$ == null) {\n            this.error$ = \"cannot construct condition on unspecified column. Value = \" + value;\n            return;\n        }\n        if (value != null) {\n            let type = value.constructor.name.toLowerCase();\n            if (type == \"date\") {\n                this.datatype$ = Column$1.date;\n                this.value$ = value.getTime();\n                this.datebtwn();\n                this.bindvalues$.push({ name: this.placeholder$[0], value: this.value$[0], type: this.datatype$ });\n                this.bindvalues$.push({ name: this.placeholder$[1], value: this.value$[1], type: this.datatype$ });\n                return;\n            }\n            if (type == \"number\") {\n                this.value$ = value;\n                this.operator$ = \"=\";\n                this.datatype$ = Column$1.decimal;\n                this.bindvalues$.push({ name: this.placeholder$, value: this.value$, type: this.datatype$ });\n                return;\n            }\n        }\n        if (value != null && (value + \"\").trim().length > 0 && this.datatype$ == null) {\n            value = (value + \"\").trim();\n            let numeric = !isNaN(+value);\n            if (numeric)\n                this.datatype$ = Column$1.decimal;\n        }\n        if (value == null) {\n            this.operator$ = \"is null\";\n            return;\n        }\n        if (this.datatype$ == null)\n            this.datatype$ = Column$1.varchar;\n        this.operator$ = \"\";\n        let quoted = false;\n        if (value.startsWith(\"<\"))\n            this.operator$ = \"<\";\n        else if (value.startsWith(\">\"))\n            this.operator$ = \">\";\n        if (this.operator$.length == 1) {\n            value = value.substring(1).trim();\n            if (value.startsWith(\"=\"))\n                this.operator$ += \"=\";\n        }\n        if (this.operator$.length == 2)\n            value = value.substring(1).trim();\n        if (value.startsWith('\"') && value.endsWith('\"')) {\n            quoted = true;\n            value = value.substring(1, value.length - 1);\n        }\n        if (value.startsWith(\"'\") && value.endsWith(\"'\")) {\n            quoted = true;\n            value = value.substring(1, value.length - 1);\n        }\n        if (!quoted) {\n            let like = false;\n            if (value.indexOf(\"%\") >= 0)\n                like = true;\n            if (value.indexOf(\"_\") >= 0)\n                like = true;\n            if (like)\n                this.operator$ = \"like\";\n        }\n        this.value$ = value.trim();\n        if (this.operator$.length == 0)\n            this.operator$ = \"=\";\n        if (this.datatype$ == Column$1.decimal && isNaN(+this.value$)) {\n            this.error$ = \"Unable to parse \" + this.value$ + \" as number\";\n            return;\n        }\n        if (this.datatype$ == Column$1.integer && isNaN(+this.value$)) {\n            this.error$ = \"Unable to parse \" + this.value$ + \" as number\";\n            return;\n        }\n        if (this.datatype$ == Column$1.date) {\n            let date = dates.parse(this.value$);\n            if (date == null) {\n                this.error$ = \"Unable to parse '\" + this.value$ + \"' as date\";\n                return;\n            }\n            this.value$ = date.getTime();\n            if (this.operator$ == \"=\")\n                this.datebtwn();\n        }\n        if (this.operator$ != \"between\") {\n            this.bindvalues$.push({ name: this.placeholder$, value: this.value$, type: this.datatype$ });\n        }\n        else {\n            this.bindvalues$.push({ name: this.placeholder$[0], value: this.value$[0], type: this.datatype$ });\n            this.bindvalues$.push({ name: this.placeholder$[1], value: this.value$[1], type: this.datatype$ });\n        }\n    }\n    static ubid() {\n        if (++Condition.id > 9999)\n            Condition.id = 1;\n        let ubid = \"\" + Condition.id;\n        while (ubid.length < 4)\n            ubid = \"0\" + ubid;\n        return (\"_\" + ubid);\n    }\n    static where(column, value, datatype) {\n        let condition = new Condition(column, value, datatype);\n        condition.type$ = \"where\";\n        return (condition);\n    }\n    datebtwn() {\n        this.operator$ = \"between\";\n        let sdate = this.value$;\n        // add 24 hours - minus 1 sec\n        let edate = sdate + 60 * 60 * 24 * 1000 - 1000;\n        this.value$ = [sdate, edate];\n        this.placeholder$ = [this.placeholder$ + \"_0\", this.placeholder$ + \"_1\"];\n    }\n    get column() {\n        return (this.column$);\n    }\n    get placeholder() {\n        return (this.placeholder$);\n    }\n    getValue() {\n        if (this.bindvalues$.length == 0)\n            return (null);\n        if (this.bindvalues$.length == 1)\n            return (this.bindvalues$[0].value);\n        if (this.bindvalues$.length > 1) {\n            let vals = [];\n            this.bindvalues$.forEach((bv) => { vals.push(bv.value); });\n            return (vals);\n        }\n    }\n    setValue(value) {\n        for (let i = 0; i < this.bindvalues$.length; i++)\n            this.bindvalues$[i].value = value;\n    }\n    setCondition(condition) {\n        this.error$ = null;\n        this.condition$ = condition;\n    }\n    error() {\n        return (this.error$);\n    }\n    or() {\n        this.type$ = \"or\";\n        return (this);\n    }\n    and() {\n        this.type$ = \"and\";\n        return (this);\n    }\n    where() {\n        this.type$ = \"where\";\n        return (this);\n    }\n    next(next) {\n        if (next == null)\n            return (this.next$);\n        if (this.next$ != null)\n            this.next$.prev$ = next;\n        this.next$ = next;\n        next.prev$ = this;\n        return (next);\n    }\n    prev(prev) {\n        if (prev == null)\n            return (this.prev$);\n        if (this.prev$ != null)\n            this.prev$.next$ = prev;\n        this.prev$ = prev;\n        prev.next$ = this;\n        return (prev);\n    }\n    first() {\n        let pc = this;\n        while (pc.prev$ != null)\n            pc = pc.prev$;\n        return (pc);\n    }\n    last() {\n        let nc = this;\n        while (nc.next$ != null)\n            nc = nc.next$;\n        return (nc);\n    }\n    pop() {\n        this.level$ = -1;\n        return (this);\n    }\n    push() {\n        this.level$ = +1;\n        return (this);\n    }\n    errors() {\n        let errors = [];\n        let cd = this.first();\n        while (cd != null) {\n            if (cd.error() != null)\n                errors.push(cd.error());\n            cd = cd.next$;\n        }\n        return (errors);\n    }\n    getAllBindvalues() {\n        let bindvalues = [];\n        let cd = this.first();\n        while (cd != null) {\n            cd.bindvalues$.forEach((bindvalue) => { bindvalues.push(bindvalue); });\n            cd = cd.next$;\n        }\n        return (bindvalues);\n    }\n    split() {\n        let conditions = [];\n        let cd = this.first();\n        while (cd != null) {\n            conditions.push(cd);\n            cd = cd.next$;\n        }\n        return (conditions);\n    }\n    toString() {\n        let nc = this;\n        while (nc.prev$ != null)\n            nc = nc.prev$;\n        if (nc.next$ == null)\n            return (nc.type$ + \" \" + this.clause(nc));\n        let str = (nc.level$ == 0) ? \"where \" : \"where (\";\n        str += this.clause(nc);\n        if (nc.next$ != null)\n            str += \" \" + nc.type$ + \" \";\n        while (nc.next$ != null) {\n            nc = nc.next$;\n            if (+nc.level$ > 0)\n                str += \"(\";\n            str += this.clause(nc);\n            if (+nc.level$ < 0)\n                str += \")\";\n            if (nc.next$ != null)\n                str += \" \" + nc.type$ + \" \";\n        }\n        return (str);\n    }\n    clause(cond) {\n        if (cond.condition$ != null)\n            return (cond.condition$);\n        if (cond.operator$.startsWith(\"is\"))\n            return (cond.column$ + \" \" + cond.operator$);\n        else if (cond.operator$ == \"between\")\n            return (cond.column$ + \" between :\" + cond.placeholder$[0] + \" and :\" + cond.placeholder$[1]);\n        else\n            return (cond.column$ + \" \" + cond.operator$ + \" :\" + cond.placeholder$);\n    }\n}\nCondition.id = 1;\n\nvar SQLType;\n(function (SQLType) {\n    SQLType[SQLType[\"call\"] = 0] = \"call\";\n    SQLType[SQLType[\"lock\"] = 1] = \"lock\";\n    SQLType[SQLType[\"select\"] = 2] = \"select\";\n    SQLType[SQLType[\"insert\"] = 3] = \"insert\";\n    SQLType[SQLType[\"update\"] = 4] = \"update\";\n    SQLType[SQLType[\"delete\"] = 5] = \"delete\";\n})(SQLType || (SQLType = {}));\nclass Statement {\n    constructor(sql) {\n        this.sql$ = null;\n        this.rows$ = null;\n        this.subquery$ = null;\n        this.table$ = null;\n        this.order$ = null;\n        this.limit$ = null;\n        this.type$ = null;\n        this.cursor$ = null;\n        this.columns$ = [];\n        this.errors = null;\n        this.override = false;\n        this.constraint$ = null;\n        this.updates$ = [];\n        this.condition$ = null;\n        this.bindvalues = [];\n        if (sql != null) {\n            if (sql.constructor.name == \"String\")\n                this.sql$ = \"\" + sql;\n            else\n                this.type$ = sql;\n        }\n        this.findtype();\n    }\n    findtype() {\n        if (this.sql$ != null) {\n            this.type$ = SQLType.call;\n            let test = this.sql$.trim().substring(0, 7).trim().toLowerCase();\n            if (test == \"select\")\n                this.type$ = SQLType.select;\n            if (test == \"insert\")\n                this.type$ = SQLType.insert;\n            if (test == \"update\")\n                this.type$ = SQLType.update;\n            if (test == \"delete\")\n                this.type$ = SQLType.delete;\n        }\n    }\n    set type(type) {\n        this.type$ = type;\n    }\n    get type() {\n        return (this.type$);\n    }\n    get sql() {\n        return (this.build().sql);\n    }\n    set sql(sql) {\n        this.sql$ = sql;\n        this.findtype();\n        this.override = true;\n    }\n    rows(rows) {\n        this.rows$ = rows;\n        return (this);\n    }\n    isFunction() {\n        return (this.type == SQLType.call);\n    }\n    isSelect() {\n        return (this.type == SQLType.select);\n    }\n    isInsert() {\n        return (this.type == SQLType.insert);\n    }\n    isUpdate() {\n        return (this.type == SQLType.update);\n    }\n    isDelete() {\n        return (this.type == SQLType.delete);\n    }\n    set table(table) {\n        this.table$ = table;\n    }\n    set limit(limit) {\n        this.limit$ = limit;\n    }\n    set constraint(where) {\n        this.constraint$ = where;\n    }\n    set order(order) {\n        this.order$ = order;\n    }\n    set cursor(cursor) {\n        this.cursor$ = cursor;\n    }\n    get cursor() {\n        return (this.cursor$);\n    }\n    update(name, value, datatype) {\n        if (value != null && datatype == null) {\n            let type = value.constructor.name.toLowerCase();\n            if (type == \"date\") {\n                datatype = Column$1.date;\n                value = value.getTime();\n            }\n            if (type == \"number\")\n                datatype = Column$1.decimal;\n        }\n        if (value != null && (value + \"\").trim().length > 0 && datatype == null) {\n            value = (value + \"\").trim();\n            let numeric = !isNaN(+value);\n            if (numeric)\n                datatype = Column$1.decimal;\n        }\n        if (datatype == null)\n            datatype = Column$1.varchar;\n        this.updates$.push({ name: name, value: value, type: datatype });\n    }\n    set columns(columns) {\n        this.columns$ = [];\n        if (columns.constructor.name == \"String\") {\n            this.columns$.push(\"\" + columns);\n        }\n        else {\n            columns.forEach((column) => {\n                this.columns$.push(\"\" + column);\n            });\n        }\n    }\n    setCondition(condition) {\n        if (condition.constructor.name == \"Array\") {\n            let arr = condition;\n            this.condition$ = arr[0];\n            for (let i = 1; i < arr.length; i++)\n                this.condition$ = this.condition$.and().next(arr[i]);\n            this.condition$ = this.condition$.first();\n        }\n        else {\n            this.condition$ = condition;\n        }\n    }\n    pop() {\n        if (this.condition$ != null)\n            this.condition$.pop();\n        return (this);\n    }\n    push() {\n        if (this.condition$ != null)\n            this.condition$.push();\n        return (this);\n    }\n    where(column, value, datatype) {\n        if (this.condition$ == null) {\n            this.condition$ = new Condition(column, value, datatype);\n            this.condition$.where();\n        }\n        else {\n            let cd = new Condition(column, value, datatype);\n            this.condition$ = this.condition$.where().next(cd);\n        }\n        return (this);\n    }\n    whand(column, value, datatype) {\n        if (this.condition$ != null)\n            return (this.and(column, value, datatype));\n        else\n            return (this.where(column, value, datatype));\n    }\n    and(column, value, datatype) {\n        if (this.condition$ == null) {\n            this.condition$ = new Condition(column, value, datatype);\n        }\n        else {\n            let cd = new Condition(column, value, datatype);\n            this.condition$ = this.condition$.and().next(cd);\n        }\n        return (this);\n    }\n    or(column, value, datatype) {\n        if (this.condition$ == null) {\n            this.condition$ = new Condition(column, value, datatype);\n        }\n        else {\n            let cd = new Condition(column, value, datatype);\n            this.condition$ = this.condition$.or().next(cd);\n        }\n        return (this);\n    }\n    returnvalue(column, datatype) {\n        this.bindvalues.unshift({ name: column, value: null, type: datatype });\n        return (this);\n    }\n    bind(column, value, datatype) {\n        if (value != null && datatype == null) {\n            let type = value.constructor.name.toLowerCase();\n            if (type == \"date\") {\n                datatype = Column$1.date;\n                value = value.getTime();\n            }\n            if (type == \"number\")\n                datatype = Column$1.decimal;\n        }\n        if (value != null && (value + \"\").trim().length > 0 && datatype == null) {\n            value = (value + \"\").trim();\n            let numeric = !isNaN(+value);\n            if (numeric)\n                datatype = Column$1.decimal;\n        }\n        if (datatype == null)\n            datatype = Column$1.varchar;\n        this.bindvalues.push({ name: column, value: value, type: datatype });\n        return (this);\n    }\n    get subquery() {\n        return (this.subquery$);\n    }\n    set subquery(subquery) {\n        this.subquery$ = subquery;\n    }\n    validate() {\n        if (this.errors != null)\n            return (this.errors);\n        this.errors = [];\n        if (this.condition$ != null)\n            this.errors = this.condition$.errors();\n        return (this.errors);\n    }\n    getCondition() {\n        return (this.condition$);\n    }\n    build() {\n        switch (this.type) {\n            case SQLType.call: return (this.buildcall());\n            case SQLType.lock: return (this.buildselect());\n            case SQLType.select: return (this.buildselect());\n            case SQLType.insert: return (this.buildinsert());\n            case SQLType.update: return (this.buildupdate());\n            case SQLType.delete: return (this.builddelete());\n            default: console.log(\"don't know how to build \" + SQLType[this.type]);\n        }\n    }\n    buildcall() {\n        let bindvals = [];\n        this.bindvalues.forEach((bindv) => {\n            bindvals.push({\n                name: bindv.name,\n                type: Column$1[bindv.type].toLowerCase(),\n                value: bindv.value\n            });\n        });\n        return ({ sql: this.sql$, bindvalues: bindvals });\n    }\n    buildinsert() {\n        let bindvals = [];\n        this.bindvalues.forEach((bindv) => {\n            bindvals.push({\n                name: bindv.name,\n                type: Column$1[bindv.type].toLowerCase(),\n                value: bindv.value\n            });\n        });\n        this.sql$ = \"insert into \" + this.table$ + \" (\";\n        for (let i = 0; i < bindvals.length; i++) {\n            this.sql$ += bindvals[i].name;\n            if (i < bindvals.length - 1)\n                this.sql$ += \",\";\n        }\n        this.sql$ += \") values (\";\n        for (let i = 0; i < bindvals.length; i++) {\n            this.sql$ += \":\" + bindvals[i].name;\n            if (i < bindvals.length - 1)\n                this.sql$ += \",\";\n        }\n        this.sql$ += \")\";\n        return ({ sql: this.sql$, bindvalues: bindvals });\n    }\n    buildupdate() {\n        let updates = [];\n        let bindvals = [];\n        for (let i = 0; i < this.updates$.length; i++) {\n            updates.push({\n                name: this.updates$[i].name,\n                type: Column$1[this.updates$[i].type].toLowerCase(),\n                value: this.updates$[i].value\n            });\n        }\n        // Bindvalues for the update\n        updates.forEach((bindv) => { bindvals.push(bindv); });\n        let bindvalues = this.bindvalues;\n        if (this.condition$ != null)\n            this.condition$.getAllBindvalues().forEach((bind) => { bindvalues.push(bind); });\n        // Bindvalues for the whereclause\n        this.bindvalues.forEach((bindv) => {\n            bindvals.push({\n                name: bindv.name,\n                type: Column$1[bindv.type].toLowerCase(),\n                value: bindv.value\n            });\n        });\n        this.sql$ = \"update \" + this.table$ + \" set \";\n        for (let i = 0; i < updates.length; i++) {\n            this.sql$ += updates[i].name + \" = :\" + updates[i].name;\n            if (i < updates.length - 1)\n                this.sql$ += \", \";\n        }\n        if (this.constraint$ != null)\n            this.sql$ += \" \" + this.constraint$;\n        if (this.condition$ != null)\n            this.sql$ += \" \" + this.condition$.toString();\n        return ({ sql: this.sql$, bindvalues: bindvals });\n    }\n    builddelete() {\n        let sql = this.sql$;\n        if (sql == null)\n            sql = \"delete from \" + this.table$;\n        if (this.constraint$ != null)\n            sql += \" \" + this.constraint$;\n        let bindvalues = this.bindvalues;\n        if (this.condition$ != null) {\n            sql += \" \" + this.condition$.toString();\n            this.condition$.getAllBindvalues().forEach((bind) => { bindvalues.push(bind); });\n        }\n        let bindvals = [];\n        bindvalues.forEach((bindv) => {\n            bindvals.push({\n                name: bindv.name,\n                type: Column$1[bindv.type].toLowerCase(),\n                value: bindv.value\n            });\n        });\n        return ({ sql: sql, bindvalues: bindvals });\n    }\n    buildselect() {\n        let sql = this.sql$;\n        if (sql == null) {\n            sql = \"select \";\n            if (this.columns$ != null) {\n                for (let i = 0; i < this.columns$.length - 1; i++)\n                    sql += this.columns$[i] + \", \";\n                sql += this.columns$[this.columns$.length - 1];\n            }\n            if (this.table$ != null)\n                sql += \" from \" + this.table$;\n        }\n        if (!this.override) {\n            let whand = \" where \";\n            if (this.condition$ != null) {\n                sql += \" \" + this.condition$.toString();\n                whand = \" and \";\n            }\n            if (this.constraint$ != null) {\n                sql += whand + this.constraint$;\n                whand = \" and \";\n            }\n            if (this.subquery$ != null) {\n                sql += whand + this.subquery$.sql;\n                whand = \" and \";\n            }\n            // Don't order by if lock\n            if (this.type$ == SQLType.select && this.order$ != null)\n                sql += \" order by \" + this.order$;\n            if (this.limit$ != null)\n                sql += \" \" + this.limit$;\n        }\n        let bindvalues = this.bindvalues;\n        if (this.condition$ != null)\n            this.condition$.getAllBindvalues().forEach((bind) => { bindvalues.push(bind); });\n        let bindvals = [];\n        bindvalues.forEach((bindv) => {\n            bindvals.push({\n                name: bindv.name,\n                type: Column$1[bindv.type].toLowerCase(),\n                value: bindv.value\n            });\n        });\n        if (this.subquery$ != null) {\n            this.subquery$.bindvalues.forEach((bindv) => { bindvals.push(bindv); });\n        }\n        let sqlstmt = { sql: sql, bindvalues: bindvals };\n        if (this.rows$ != null)\n            sqlstmt[\"rows\"] = this.rows$;\n        return (sqlstmt);\n    }\n}\n\nclass Table {\n    constructor(conn, table, key, columns, fielddef, rows) {\n        this.keys = [];\n        this.dates = [];\n        this.index = new Map();\n        this.key = key;\n        this.conn = conn;\n        this.table = table;\n        this.fetch$ = rows;\n        this.criterias = [];\n        this.columns$ = columns;\n        this.fielddef = fielddef;\n        this.cursor = table.name + Date.now();\n        if (this.key == null) {\n            this.key = new Key(\"primary\");\n            this.columns$.forEach((col) => { this.key.addColumn(col.name); });\n        }\n        if (this.table.where != null) {\n            this.table.where = this.table.where.trim();\n            if (this.table.where.startsWith(\"where \"))\n                this.table.where = this.table.where.substring(6);\n            if (this.table.where.startsWith(\"and \"))\n                this.table.where = this.table.where.substring(4);\n            if (this.table.where.length == 0)\n                this.table.where = null;\n        }\n        this.fetch$ *= 4;\n        if (this.fetch$ < 10)\n            this.fetch$ = 10;\n        this.cnames = [];\n        this.columns$.forEach((column) => {\n            this.cnames.push(column.name);\n            this.index.set(column.name, column);\n            let date = false;\n            if (column.type == Column$1.date)\n                date = true;\n            this.dates.push(date);\n        });\n    }\n    get name() {\n        return (this.table.name);\n    }\n    get tabdef() {\n        return (this.table);\n    }\n    get columns() {\n        return (this.cnames);\n    }\n    mandatory(column) {\n        let def = this.index.get(column);\n        if (def == null || def.mandatory == null)\n            return (false);\n        return (def.mandatory);\n    }\n    databasecolumn(column) {\n        return (this.index.has(column.toLowerCase()));\n    }\n    set fielddata(fielddata) {\n        this.fielddata$ = fielddata;\n    }\n    get fielddata() {\n        return (this.fielddata$);\n    }\n    get searchfilter() {\n        return (this.criterias);\n    }\n    set searchfilter(filter) {\n        this.criterias = filter;\n    }\n    async lock(record, data) {\n        let cols = [];\n        for (let i = 0; i < this.columns.length; i++)\n            cols.push({ name: this.columns[i], value: data[i] });\n        let where = true;\n        let stmt = new Statement(SQLType.lock);\n        stmt.columns = this.columns;\n        stmt.table = this.table.name;\n        for (let i = 0; i < this.keys[record].length; i++) {\n            let type = this.index.get(this.columns[i]).type;\n            if (!where)\n                stmt.and(this.columns[i], this.keys[record][i], type);\n            else\n                stmt.where(this.columns[i], this.keys[record][i], type);\n            where = false;\n        }\n        let lock = stmt.build();\n        let response = await this.conn.invoke(\"lock\", lock);\n        if (response[\"status\"] == \"failed\") {\n            console.log(JSON.stringify(response));\n            return ({ status: \"failed\", message: \"Row is locked by another user. Try later\" });\n        }\n        let rows = response[\"rows\"];\n        if (rows.length == 0) {\n            console.log(\"Row[\" + record + \"] has been deleted by another user. Requery to see changes\");\n            return ({ status: \"failed\", message: \"Row[\" + record + \"] has been deleted by another user. Requery to see changes\" });\n        }\n        let row = rows[0];\n        for (let i = 0; i < this.columns.length; i++) {\n            let cval = cols[i].value;\n            if (cval != null && this.dates[i])\n                cval = cval.getTime();\n            if (row[this.columns[i]] != cval) {\n                let problem = cols[i].name + \"[\" + record + \"], db: \" + row[this.columns[i]] + \" != \" + cval;\n                console.log(\"Row has been changed by another user. Requery to see changes\");\n                return ({ status: \"failed\", message: \"Row has been changed by another user. Requery to see changes\" });\n            }\n        }\n        return ({ status: \"ok\" });\n    }\n    async insert(record, data) {\n        let cols = [];\n        for (let i = 0; i < this.columns.length; i++)\n            cols.push({ name: this.columns[i], value: data[i] });\n        let stmt = new Statement(SQLType.insert);\n        stmt.columns = this.columns;\n        stmt.table = this.table.name;\n        let keyval = [];\n        for (let i = 0; i < this.columns.length; i++) {\n            let cval = cols[i].value;\n            let type = this.index.get(this.columns[i]).type;\n            if (cval != null && this.dates[i])\n                cval = cval.getTime();\n            if (i < this.key.columns().length)\n                keyval.push(cval);\n            stmt.bind(cols[i].name, cval, type);\n        }\n        let insert = stmt.build();\n        this.keys.splice(+record, 0, keyval);\n        let response = await this.conn.invoke(\"insert\", insert);\n        return (response);\n    }\n    async update(record, data) {\n        let keyupd = [];\n        let keyval = this.keys[+record];\n        let stmt = new Statement(SQLType.update);\n        for (let i = 0; i < data.length; i++) {\n            if (i < this.key.columns().length)\n                keyupd.push(keyval[i]);\n            if (data[i].value.updated) {\n                let val = data[i].value.newvalue;\n                let type = this.index.get(data[i].name).type;\n                if (val != null && this.dates[i])\n                    val = val.getTime();\n                if (i < this.key.columns().length)\n                    keyupd[i] = val;\n                stmt.update(data[i].name, val, type);\n            }\n        }\n        let where = true;\n        if (this.table.where != null && this.table.where.trim.length > 0) {\n            where = false;\n            stmt.constraint = this.table.where;\n        }\n        for (let i = 0; i < keyval.length; i++) {\n            let type = this.index.get(this.columns[i]).type;\n            if (!where)\n                stmt.and(this.columns[i], keyval[i], type);\n            else\n                stmt.where(this.columns[i], keyval[i], type);\n            where = false;\n        }\n        stmt.table = this.table.name;\n        let update = stmt.build();\n        let response = await this.conn.invoke(\"update\", update);\n        if (response[\"status\"] != \"failed\")\n            this.keys[+record] = keyupd;\n        return (response);\n    }\n    async delete(record) {\n        let keyval = this.keys[+record];\n        let stmt = new Statement(SQLType.delete);\n        let where = true;\n        if (this.table.where != null && this.table.where.trim.length > 0) {\n            where = false;\n            stmt.constraint = this.table.where;\n        }\n        for (let i = 0; i < keyval.length; i++) {\n            let type = this.index.get(this.columns[i]).type;\n            if (!where)\n                stmt.and(this.columns[i], keyval[i], type);\n            else\n                stmt.where(this.columns[i], keyval[i], type);\n            where = false;\n        }\n        stmt.table = this.table.name;\n        let delrow = stmt.build();\n        let response = await this.conn.invoke(\"delete\", delrow);\n        if (response[\"status\"] == \"failed\")\n            return (response);\n        let keys = this.keys.slice(0, record);\n        keys = keys.concat(this.keys.slice(+record + 1, this.keys.length));\n        this.keys = keys;\n        return (response);\n    }\n    parseQuery(keys, subquery, fields) {\n        let stmt = new Statement(SQLType.select);\n        stmt.cursor = this.cursor;\n        stmt.columns = this.cnames;\n        stmt.table = this.table.name;\n        stmt.order = this.table.order;\n        let where = true;\n        if (this.table.limit != null)\n            stmt.limit = this.table.limit;\n        if (this.table.where != null) {\n            where = false;\n            stmt.constraint = this.table.where;\n        }\n        if (fields.length > 0) {\n            this.criterias = [];\n            fields.forEach((field) => {\n                if (field.value != null && (\"\" + field.value).trim() != \"\")\n                    this.criterias.push({ name: field.name, value: field.value });\n            });\n        }\n        keys.forEach((key) => {\n            key.values.forEach((part) => {\n                let col = part.name;\n                // Check if key column is mapped to diff. name\n                let def = this.fielddef.get(col);\n                if (def != null)\n                    col = def.column;\n                let type = this.index.get(col).type;\n                if (!where)\n                    stmt.and(col, part.value, type);\n                else\n                    stmt.where(col, part.value, type);\n                where = false;\n            });\n        });\n        this.criterias.forEach((field) => {\n            let def = this.fielddef.get(field.name);\n            if (def.column != null) {\n                let type = this.index.get(def.column).type;\n                if (!where)\n                    stmt.and(def.column, field.value, type);\n                else\n                    stmt.where(def.column, field.value, type);\n                where = false;\n            }\n        });\n        if (subquery != null)\n            stmt.subquery = subquery;\n        return (stmt);\n    }\n    async executequery(stmt) {\n        this.keys = [];\n        this.eof = false;\n        this.fielddata.clear();\n        this.select = stmt.build();\n        this.select.rows = this.fetch$;\n        this.select.cursor = stmt.cursor;\n        let response = await this.conn.invoke(\"select\", this.select);\n        if (response[\"status\"] == \"failed\")\n            return (response);\n        this.addRows(response[\"rows\"]);\n        return (response);\n    }\n    async fetch(stmt) {\n        if (this.eof)\n            return ({ status: \"ok\" });\n        let fetch = { cursor: stmt.cursor, rows: this.fetch$ };\n        let response = await this.conn.invoke(\"fetch\", fetch);\n        if (response[\"status\"] == \"failed\")\n            return (response);\n        this.addRows(response[\"rows\"]);\n        return (response);\n    }\n    addRows(rows) {\n        let klen = this.key.values.length;\n        if (rows.length < this.fetch$)\n            this.eof = true;\n        rows.forEach((row) => {\n            // Table is not defined\n            if (this.cnames.length == 0) {\n                let keys = Object.keys(row);\n                let flds = this.fielddata.fields;\n                for (let i = 0; i < keys.length; i++)\n                    this.cnames.push(keys[i]);\n                for (let i = 0; i < keys.length - flds.length; i++)\n                    flds.unshift(keys[i]);\n                this.fielddata.fields = flds;\n            }\n            let col = 0;\n            let keyval = [];\n            let drow = this.fielddata.newrow();\n            Object.keys(row).forEach((key) => {\n                let val = row[key];\n                if (this.dates[col] && (\"\" + val).length > 0)\n                    val = new Date(+val);\n                drow.setValue(col++, val);\n                if (keyval.length < klen)\n                    keyval.push(val);\n            });\n            this.keys.push(keyval);\n            this.fielddata.add(drow);\n        });\n    }\n}\n\nclass FieldData {\n    constructor(block, table, fields, fielddef) {\n        this.data = [];\n        this.index = new Map();\n        this.block = block;\n        this.table$ = table;\n        this.fields$ = fields;\n        this.fielddef = fielddef;\n        if (table != null)\n            this.table$.fielddata = this;\n        if (fields != null) {\n            for (let i = 0; i < fields.length; i++)\n                this.index.set(fields[i].toLowerCase(), i);\n        }\n    }\n    get table() {\n        return (this.table$);\n    }\n    get tabdef() {\n        return (this.table$?.tabdef);\n    }\n    get database() {\n        return (this.table != null);\n    }\n    databasecolumn(column) {\n        if (this.table == null)\n            return (false);\n        return (this.table.databasecolumn(column));\n    }\n    get fields() {\n        return (this.fields$);\n    }\n    set fields(fields) {\n        this.index.clear();\n        this.fields$ = fields;\n        for (let i = 0; i < fields.length; i++)\n            this.index.set(fields[i].toLowerCase(), i);\n    }\n    get columns() {\n        if (this.table == null)\n            return (null);\n        else\n            return (this.table.columns);\n    }\n    get fetched() {\n        return (this.data.length);\n    }\n    removeLocks() {\n        this.data.forEach((row) => { row.locked = false; });\n    }\n    async lock(record) {\n        if (record < 0 || record >= this.data.length)\n            return ({ status: \"failed\", message: \"row \" + record + \" does not exist\" });\n        if (this.data[record].locked)\n            return ({ status: \"failed\", message: \"row \" + record + \" already locked\" });\n        if (this.table == null)\n            return ({ status: \"ok\" });\n        let response = { status: \"ok\" };\n        if (this.table != null) {\n            response = await this.table.lock(record, this.data[+record].values);\n            if (response[\"status\"] == \"failed\")\n                return (response);\n        }\n        this.data[record].locked = true;\n        return (response);\n    }\n    locked(record) {\n        if (record < 0 || record >= this.data.length)\n            return (false);\n        if (this.data[+record].state == RecordState.insert)\n            return (true);\n        return (this.data[+record].locked);\n    }\n    mandatory(column) {\n        let md = false;\n        if (this.table != null)\n            md = this.table.mandatory(column);\n        if (!md) {\n            md = this.fielddef.get(column)?.mandatory;\n            if (md == null)\n                md = false;\n        }\n        return (md);\n    }\n    getNonValidated(record) {\n        if (record < 0 || record >= this.data.length)\n            return ([]);\n        let row = this.data[record];\n        let cols = [];\n        for (let i = 0; i < row.fields.length; i++) {\n            if (this.mandatory(this.fields[i]) && row.fields[i].value$ == null) {\n                cols.push(this.columns[i]);\n            }\n            else if (!row.fields[i].validated) {\n                cols.push(this.columns[i]);\n            }\n        }\n        return (cols);\n    }\n    validated(record, fields) {\n        if (record < 0 || record >= this.data.length)\n            return (true);\n        let row = this.data[record];\n        if (fields) {\n            for (let i = 0; i < row.fields.length; i++) {\n                if (this.mandatory(this.fields[i]) && row.fields[i].value$ == null)\n                    return (false);\n                if (!row.fields[i].validated)\n                    return (false);\n            }\n            return (true);\n        }\n        return (row.validated);\n    }\n    newrow() {\n        let row = new Row(0, this);\n        return (row);\n    }\n    add(row) {\n        this.data.push(row);\n    }\n    column(fname) {\n        return (this.index.get(fname.toLowerCase()));\n    }\n    clear() {\n        this.data = [];\n    }\n    getValue(record, column) {\n        if (+record < 0 || +record >= +this.data.length) {\n            console.log(\"get \" + column + \"[\" + record + \"] record does not exist\");\n            return (null);\n        }\n        let colno = this.index.get(column.toLowerCase());\n        if (colno == null) {\n            console.log(\"get \" + column + \"[\" + record + \"] column does not exist\");\n            return (null);\n        }\n        let rec = this.data[+record];\n        return (rec.fields[+colno].value$);\n    }\n    getValidated(record, column) {\n        if (record < 0 || record >= this.data.length) {\n            console.log(\"set \" + column + \"[\" + record + \"] row does not exist\");\n            return (true);\n        }\n        let rec = this.data[+record];\n        if (column == null)\n            return (rec.validated);\n        let colno = this.index.get(column.toLowerCase());\n        if (colno == null) {\n            console.log(\"set \" + column + \"[\" + record + \"] column does not exist\");\n            return;\n        }\n        return (rec.fields[+colno].validated);\n    }\n    async setValidated(record, column) {\n        if (record < 0 || record >= this.data.length)\n            return ({ status: \"failed\", message: \"set \" + column + \"[\" + record + \"] validated failed, row does not exist\" });\n        let rec = this.data[+record];\n        if (column == null) {\n            if (rec.validated)\n                return ({ status: \"failed\", message: \"Record already validated\" });\n            if (rec.state == RecordState.insert) {\n                if (this.table != null) {\n                    let scn = rec.scn;\n                    let response = await this.table.insert(record, this.data[+record].values);\n                    if (response[\"status\"] == \"failed\")\n                        return (response);\n                    rec.dbn = scn;\n                }\n            }\n            else if (this.table != null) {\n                let scn = rec.scn;\n                let columns = [];\n                for (let i = 0; i < this.columns.length; i++) {\n                    let status = { updated: false };\n                    if (+rec.fields[i].scn > +rec.dbn) {\n                        status.updated = true;\n                        status.newvalue = rec.fields[i].value$;\n                    }\n                    columns.push({ name: this.columns[i], value: status });\n                }\n                let response = await this.table.update(record, columns);\n                if (response[\"status\"] == \"failed\")\n                    return (response);\n                rec.dbn = scn;\n            }\n            rec.validated = true;\n            if (rec.state == RecordState.insert)\n                rec.state = RecordState.update;\n            return ({ status: \"ok\" });\n        }\n        let colno = this.index.get(column.toLowerCase());\n        if (colno == null)\n            return ({ status: \"failed\", message: \"set \" + column + \"[\" + record + \"] validated failed, column does not exist\" });\n        if (this.table != null && +colno < this.table.columns.length)\n            rec.fields[+colno].validated = true;\n        return ({ status: \"ok\" });\n    }\n    setValue(record, column, value) {\n        if (record < 0 || record >= this.data.length) {\n            console.log(\"set \" + column + \"[\" + record + \"] row does not exist\");\n            return (false);\n        }\n        let colno = this.index.get(column.toLowerCase());\n        if (colno == null) {\n            console.log(\"set \" + column + \"[\" + record + \"] column does not exist\");\n            return (false);\n        }\n        let rec = this.data[+record];\n        if (rec.fields[+colno].value$ == value)\n            return (false);\n        let scn = +rec.scn + 1;\n        if (this.table != null && +colno < this.table.columns.length) {\n            rec.validated = false;\n            rec.fields[+colno].validated = false;\n        }\n        rec.scn = scn;\n        rec.fields[+colno].setValue(scn, value);\n        return (true);\n    }\n    state(record, state) {\n        if (record >= this.data.length)\n            return (RecordState.na);\n        if (state != null)\n            this.data[record].state = state;\n        return (this.data[record].state);\n    }\n    get searchfilter() {\n        if (this.table == null)\n            return (null);\n        return (this.table.searchfilter);\n    }\n    set searchfilter(filter) {\n        if (this.table != null)\n            this.table.searchfilter = filter;\n    }\n    parseQuery(keys, subquery, fields) {\n        if (this.table == null)\n            return (null);\n        return (this.table.parseQuery(keys, subquery, fields));\n    }\n    async executequery(stmt) {\n        this.query = stmt;\n        if (this.table == null)\n            return ({ status: \"ok\" });\n        let response = await this.table.executequery(stmt);\n        if (response[\"status\"] != \"failed\") {\n            let rows = response[\"rows\"];\n            for (let i = 0; i < rows.length; i++) {\n                let event = new SQLTriggerEvent(this.block.alias, i, null);\n                this.block.invokeTriggers(Trigger.PostQuery, event);\n            }\n        }\n        return (response);\n    }\n    insert(record) {\n        let data = [];\n        if (record > this.data.length)\n            record = this.data.length;\n        data = this.data.slice(0, record);\n        data[+record] = new Row(0, this);\n        data[+record].locked = true;\n        data[+record].state = RecordState.insert;\n        data = data.concat(this.data.slice(record, this.data.length));\n        this.data = data;\n        return (true);\n    }\n    async delete(record) {\n        let data = [];\n        let response = { status: \"ok\" };\n        if (record < 0 || record >= this.data.length)\n            return (response);\n        if (this.data[+record].state == RecordState.insert) {\n            data = this.data.slice(0, record);\n            data = data.concat(this.data.slice(+record + 1, this.data.length));\n            this.data = data;\n            return (response);\n        }\n        if (this.table != null) {\n            response = await this.table.delete(record);\n            if (response[\"status\"] == \"failed\")\n                return (response);\n        }\n        data = this.data.slice(0, record);\n        data = data.concat(this.data.slice(+record + 1, this.data.length));\n        this.data = data;\n        return (response);\n    }\n    get rows() {\n        return (this.data.length);\n    }\n    async fetch(offset, rows) {\n        if (this.data.length <= +offset + rows && this.query != null) {\n            let response = await this.table.fetch(this.query);\n            if (response[\"status\"] == \"failed\") {\n                this.block.alert(JSON.stringify(response), \"Database\");\n                return (0);\n            }\n            else {\n                let rows = response[\"rows\"];\n                if (rows != null) {\n                    for (let i = 1; i <= rows.length; i++) {\n                        let event = new SQLTriggerEvent(this.block.alias, +i + +offset, null);\n                        this.block.invokeTriggers(Trigger.PostQuery, event);\n                    }\n                }\n            }\n        }\n        let avail = this.data.length - offset - 1;\n        if (avail < 0)\n            avail = 0;\n        return (avail);\n    }\n    get(start, rows) {\n        let values = [];\n        if (start < 0)\n            start = 0;\n        let end = +start + rows;\n        if (end > this.data.length)\n            end = this.data.length;\n        for (let i = start; i < end; i++)\n            values.push(this.data[i].values);\n        return (values);\n    }\n}\nclass Row {\n    constructor(scn, table, values) {\n        this.scn = 0;\n        this.dbn = 0;\n        this.fields = [];\n        this.locked = false;\n        this.validated = true;\n        this.state = RecordState.na;\n        this.scn = scn;\n        for (let i = 0; i < table.fields.length; i++)\n            this.fields.push(new Column(scn));\n        let i = 0;\n        if (values != null)\n            this.fields.forEach((column) => { column.setValue(scn, values[i++]); });\n    }\n    setValue(col, value) {\n        // Used by table\n        this.fields[col].value$ = value;\n    }\n    get values() {\n        let values = [];\n        this.fields.forEach((col) => {\n            values.push(col.value$);\n        });\n        return (values);\n    }\n    print() {\n        let i = 0;\n        let values = \"\";\n        this.fields.forEach((col) => {\n            let val = col.value$;\n            if (val == null)\n                val = \"\";\n            values += i + \" \" + col.value$ + \", \";\n            i++;\n        });\n        values = values.substring(0, values.length - 2);\n        console.log(values);\n    }\n}\nclass Column {\n    constructor(scn, value) {\n        this.scn = 0;\n        this.validated = true;\n        this.scn = scn;\n        this.value$ = value;\n        if (value == undefined)\n            this.value$ = null;\n    }\n    setValue(scn, value) {\n        this.scn = scn;\n        this.value$ = value;\n        if (value == undefined)\n            this.value$ = null;\n    }\n}\n\nfunction ListOfValuesImpl_tr_6_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\");\n    i0.ɵɵelementStart(1, \"td\");\n    i0.ɵɵelement(2, \"field\", 5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const row_r2 = ctx.index;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵpropertyInterpolate(\"size\", ctx_r0.size);\n    i0.ɵɵpropertyInterpolate(\"row\", row_r2);\n} }\nconst _c0$7 = function () { return []; };\nclass ListOfValuesImpl {\n    constructor(ctx) {\n        this.last = \"\";\n        this.minlen = 0;\n        this.prefix = \"\";\n        this.postfix = \"\";\n        this.wait = false;\n        this.rows = 10;\n        this.size = 20;\n        this.top = null;\n        this.left = null;\n        this.width = null;\n        this.height = null;\n        this.title = null;\n        this.app = ctx.app[\"_impl_\"];\n    }\n    static show(app, impl, lov) {\n        let pinst = new PopupInstance();\n        pinst.display(app, ListOfValuesImpl);\n        let lovwin = pinst.popup();\n        lovwin.setDefinition(lov);\n        lovwin.setBlockImpl(impl);\n    }\n    setDefinition(lov) {\n        this.lov = lov;\n        this.title = lov.title;\n        this.width = lov.width;\n        this.height = lov.height;\n        this.rows = lov.rows ? lov.rows : 12;\n        this.fetch = lov.rows ? lov.rows : 12;\n        if (this.size == null)\n            this.size = 25;\n        let width = this.size * 12;\n        let height = this.rows * 28 + 16;\n        if (this.width == null)\n            this.width = width + \"px\";\n        if (this.height == null)\n            this.height = height + \"px\";\n        this.win.title = this.title;\n        this.win.width = this.width;\n        this.win.height = this.height;\n        if (this.lov.minlen != null)\n            this.minlen = this.lov.minlen;\n        if (this.lov.prefix != null)\n            this.prefix = this.lov.prefix;\n        if (this.lov.postfix != null)\n            this.postfix = this.lov.postfix;\n    }\n    setBlockImpl(impl) {\n        this.iblock = impl[0];\n        this.sblock = impl[1];\n        this.rblock = impl[2];\n    }\n    close(_cancel) {\n        this.app.enable();\n        this.win.closeWindow();\n        this.app.getCurrentForm()?.focus();\n    }\n    setWin(win) {\n        this.win = win;\n    }\n    ngOnInit() {\n        this.app.disable();\n        this.app.setContainer();\n    }\n    ngAfterViewInit() {\n        let container = this.app.getContainer();\n        container.finish();\n        this.sblock.setFields(container.getBlock(\"search\").fields);\n        this.rblock.setFields(container.getBlock(\"result\").fields);\n        this.rblock.usage = { query: true };\n        container.getBlock(\"search\").records.forEach((rec) => {\n            this.sblock.addRecord(new Record(rec.row, rec.fields, rec.index));\n            this.filter = this.sblock.getField(rec.row, \"filter\");\n            let filtdef = { name: \"filter\", type: FieldType.text };\n            if (this.lov.case != null)\n                filtdef.case = this.lov.case;\n            this.filter.setDefinition(filtdef, true);\n            this.filter.enable(false);\n        });\n        let fielddef = new Map();\n        let descdef = { name: \"description\", type: FieldType.text, fieldoptions: { update: false } };\n        fielddef.set(\"description\", descdef);\n        container.getBlock(\"result\").records.forEach((rec) => {\n            this.rblock.addRecord(new Record(rec.row, rec.fields, rec.index));\n            this.description = this.rblock.getField(rec.row, \"description\");\n            this.description.setDefinition(descdef, true);\n            this.description.enable(true);\n        });\n        let conn = this.app.appstate.connection;\n        let table = new Table(conn, { name: \"none\" }, null, [], null, this.fetch);\n        this.rblock.setApplication(this.app);\n        this.rblock.data = new FieldData(this.rblock, table, [\"description\"], fielddef);\n        this.app.dropContainer();\n        let keys = [\n            keymap.enter,\n            keymap.escape,\n            keymap.nextrecord,\n            keymap.prevrecord,\n            keymap.nextfield,\n            keymap.prevfield\n        ];\n        this.sblock.addKeyTrigger(this, this.onkey, keys);\n        this.rblock.addKeyTrigger(this, this.onkey, keys);\n        this.sblock.addTrigger(this, this.search, Trigger.Typing);\n        this.rblock.addTrigger(this, this.prequery, Trigger.PreQuery);\n        this.rblock.addTrigger(this, this.onMouse, Trigger.MouseDoubleClick);\n        this.rblock.navigable = false;\n        this.filter.focus();\n        this.filter.value = this.lov.value;\n        if (this.lov.autoquery) {\n            this.last = \" \";\n            this.search(this.filter.value);\n        }\n    }\n    async search(_event) {\n        this.execute();\n        return (true);\n    }\n    async execute() {\n        if (this.wait) {\n            setTimeout(() => { this.execute(); }, 200);\n            return;\n        }\n        if (this.filter.value == this.last)\n            return;\n        this.wait = true;\n        this.last = this.filter.value;\n        if (this.last == null)\n            this.last = \"\";\n        if (this.last.length < this.minlen)\n            this.rblock.clear();\n        else\n            await this.rblock.keyexeqry();\n        this.wait = false;\n    }\n    async prequery(event) {\n        let stmt = new Statement(this.lov.sql);\n        stmt.cursor = event.stmt.cursor;\n        if (this.lov.bindvalues != null)\n            this.lov.bindvalues.forEach((bv) => { stmt.bind(bv.name, bv.value, bv.type); });\n        let filter = this.filter.value;\n        if (this.lov.modfunc != null)\n            filter = this.lov.modfunc(this.filter.value);\n        if (filter == null)\n            filter = \"\";\n        stmt.bind(\"filter\", this.prefix + filter + this.postfix);\n        event.stmt = stmt;\n        return (true);\n    }\n    async onMouse(event) {\n        this.picked(event.record);\n        return (true);\n    }\n    async onkey(event) {\n        if (event.type == Trigger.Key && event.field == \"filter\") {\n            if (event.key == keymap.prevfield)\n                event.event.preventDefault();\n            if (event.key == keymap.nextfield || event.key == keymap.nextrecord) {\n                this.rblock.navigable = true;\n                this.rblock.focus(0);\n            }\n        }\n        if (event.type == Trigger.Key && event.field == \"description\") {\n            if (event.key == keymap.nextfield || event.key == keymap.prevfield) {\n                this.sblock.focus();\n                event.event.preventDefault();\n                this.rblock.navigable = false;\n            }\n        }\n        if (event.type == Trigger.Key && event.key == keymap.escape)\n            this.close(false);\n        if (event.type == Trigger.Key && event.key == keymap.enter) {\n            let record = -1;\n            if (event.field == \"filter\" && this.rblock.fetched == 1)\n                record = 0;\n            if (event.field == \"description\")\n                record = event.record;\n            if (record >= 0)\n                this.picked(record);\n        }\n        return (true);\n    }\n    picked(record) {\n        this.lov.fieldmap.forEach((col, fld) => {\n            let val = this.rblock.getValue(record, fld);\n            this.iblock.setValue(this.iblock.record, col, val);\n        });\n        this.close(false);\n    }\n}\nListOfValuesImpl.ɵfac = function ListOfValuesImpl_Factory(t) { return new (t || ListOfValuesImpl)(i0.ɵɵdirectiveInject(Context)); };\nListOfValuesImpl.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: ListOfValuesImpl, selectors: [[\"ng-component\"]], decls: 8, vars: 2, consts: [[1, \"lov\"], [1, \"lov-center\"], [\"size\", \"15\", \"name\", \"filter\", \"block\", \"search\", 1, \"lov-search\"], [1, \"lov-spacer\"], [4, \"ngFor\", \"ngForOf\"], [\"name\", \"description\", \"block\", \"result\", 1, \"lov-result\", 3, \"size\", \"row\"]], template: function ListOfValuesImpl_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"table\");\n        i0.ɵɵelementStart(2, \"tr\");\n        i0.ɵɵelementStart(3, \"td\", 1);\n        i0.ɵɵelement(4, \"field\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(5, \"tr\", 3);\n        i0.ɵɵtemplate(6, ListOfValuesImpl_tr_6_Template, 3, 2, \"tr\", 4);\n        i0.ɵɵelement(7, \"tr\", 3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n    } if (rf & 2) {\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpureFunction0(1, _c0$7).constructor(ctx.rows));\n    } }, styles: [\".lov-spacer[_ngcontent-%COMP%]{height:8px}.lov-center[_ngcontent-%COMP%]{border:none;display:flex;justify-content:center}\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ListOfValuesImpl, [{\n        type: Component,\n        args: [{\n                template: `\n        <div class=\"lov\">\n        <table>\n            <tr>\n                <td class=\"lov-center\"><field class=\"lov-search\" size=\"15\" name=\"filter\" block=\"search\"></field></td>\n            </tr>\n\n            <tr class=\"lov-spacer\"></tr>\n\n            <tr *ngFor=\"let item of [].constructor(rows); let row = index\">\n                <td><field class=\"lov-result\" size=\"{{size}}\" name=\"description\" row=\"{{row}}\" block=\"result\"></field></td>\n            </tr>\n\n            <tr class=\"lov-spacer\"></tr>\n        </table>\n        </div>\n    `,\n                styles: [\n                    `\n            .lov-spacer\n            {\n                height: 8px;\n            }\n\n            .lov-center\n            {\n                border: none;\n                display: flex;\n                justify-content: center;\n            }\n        `\n                ]\n            }]\n    }], function () { return [{ type: Context }]; }, null); })();\n\nclass BlockImpl {\n    constructor(block) {\n        this.block = block;\n        this.row$ = 0;\n        this.offset = 0;\n        this.form$ = null;\n        this.ready$ = false;\n        this.records$ = [];\n        this.querying$ = false;\n        this.disabled$ = false;\n        this.navigable$ = true;\n        this.lastqry = [];\n        this.fields$ = [];\n        this.triggers = new Triggers();\n        this.state = FormState.normal;\n        this.fieldidx$ = new Map();\n        this.dbusage$ =\n            {\n                query: false,\n                update: true,\n                insert: false,\n                delete: false\n            };\n        if (block != null) {\n            this.name$ = block.constructor.name;\n            if (this.name$ == \"Block\")\n                this.name$ = \"anonymous\";\n        }\n    }\n    get name() {\n        return (this.name$);\n    }\n    set alias(alias) {\n        this.alias$ = alias;\n    }\n    get alias() {\n        return (this.alias$);\n    }\n    get table() {\n        return (this.data?.tabdef);\n    }\n    set row(row) {\n        this.row$ = row;\n    }\n    get row() {\n        return (this.row$);\n    }\n    exists(record) {\n        if (+record < +this.data.rows)\n            return (true);\n        return (false);\n    }\n    displayed(record) {\n        if (+record < +this.offset)\n            return (false);\n        if (+record > +this.sum(this.offset, this.rows))\n            return (false);\n        let row = +record - +this.offset;\n        let state = this.records[+row].state;\n        if (state == RecordState.na || state == RecordState.qmode)\n            return (false);\n        return (true);\n    }\n    get rows() {\n        return (this.records$.length);\n    }\n    database() {\n        return (this.data?.database);\n    }\n    get datarows() {\n        if (this.data == null)\n            return (0);\n        return (this.data.rows);\n    }\n    get columns() {\n        if (this.data == null)\n            return (null);\n        else\n            return (this.data.columns);\n    }\n    get ready() {\n        return (this.ready$);\n    }\n    set ready(ready) {\n        this.ready$ = ready;\n        let rec = this.getRecord(0);\n        if (rec != null) {\n            rec.enable(true);\n            rec.current = true;\n        }\n    }\n    get navigable() {\n        return (this.navigable$);\n    }\n    set navigable(navigable) {\n        this.navigable$ = navigable;\n    }\n    get record() {\n        return (this.sum(this.row, this.offset));\n    }\n    get fetched() {\n        if (this.data == null)\n            return (0);\n        return (this.data.fetched);\n    }\n    get field() {\n        return (this.field$);\n    }\n    get fields() {\n        if (this.data == null)\n            return (null);\n        else\n            return (this.data.fields);\n    }\n    get clazz() {\n        if (this.block == null)\n            return (null);\n        return (this.block.constructor.name.toLowerCase());\n    }\n    get data() {\n        return (this.data$);\n    }\n    set data(data) {\n        this.data$ = data;\n    }\n    set form(form) {\n        this.form$ = form;\n    }\n    get form() {\n        return (this.form$);\n    }\n    setFieldDefinition(def) {\n        let inst = this.fieldidx$.get(def.name);\n        if (inst != null) {\n            let fields = inst.parent.fields;\n            let cfields = inst.parent.cfields;\n            fields.forEach((fld) => { if (fld.id == inst.id)\n                fld.definition = def; });\n            cfields.forEach((fld) => { if (fld.id == inst.id)\n                fld.definition = def; });\n            return (true);\n        }\n        return (false);\n    }\n    setPossibleValues(field, values, enforce) {\n        let inst = this.fieldidx$.get(field);\n        if (inst != null) {\n            let fields = inst.parent.fields;\n            let cfields = inst.parent.cfields;\n            fields.forEach((fld) => { if (fld.id == inst.id)\n                fld.setPossibleValues(values, enforce); });\n            cfields.forEach((fld) => { if (fld.id == inst.id)\n                fld.setPossibleValues(values, enforce); });\n            return (true);\n        }\n        return (false);\n    }\n    setFields(fields) {\n        this.fields$ = fields;\n        fields.forEach((inst) => {\n            let name = inst.name;\n            if (inst.id != null && inst.id.length > 0)\n                name += \".\" + inst.id;\n            this.fieldidx$.set(name, inst);\n        });\n    }\n    setMasterDetail(md) {\n        this.masterdetail = md;\n    }\n    setListOfValues(lovs) {\n        this.lovs = lovs;\n    }\n    setIdListOfValues(lovs) {\n        this.idlovs = lovs;\n    }\n    addListOfValues(form, func, field, id) {\n        let utils = new Utils();\n        let lovdef = null;\n        let params = utils.getParams(func);\n        if (!form)\n            lovdef = { inst: this.block, func: func.name, params: params };\n        else\n            lovdef = { inst: this.form.form, func: func.name, params: params };\n        if (id == null)\n            this.lovs.set(field.toLowerCase(), lovdef);\n        else\n            this.idlovs.set(field.toLowerCase(), lovdef);\n    }\n    removeListOfValues(field, id) {\n        if (id == null)\n            this.lovs.delete(field.toLowerCase());\n        else\n            this.idlovs.delete(field.toLowerCase() + \".\" + id.toLowerCase());\n    }\n    get querymode() {\n        return (this.state == FormState.entqry);\n    }\n    focus(row) {\n        if (!this.navigable)\n            return;\n        if (row != null && row >= 0 && row < this.rows) {\n            if (this.records[+row]?.enabled) {\n                this.row = row;\n                this.records[+row].current = true;\n            }\n        }\n        let rec = this.records[+this.row];\n        if (this.field != null) {\n            let field = rec.getField(this.field.name);\n            let inst = rec.getFieldByGuid(this.field.name, this.field.guid);\n            if (inst?.focus())\n                return;\n            if (field?.focus())\n                return;\n        }\n        for (let i = 0; i < this.fields$.length; i++) {\n            if (this.fields$[i].row == this.row)\n                if (this.fields$[i].focus())\n                    return;\n        }\n        rec?.focus();\n    }\n    getValue(record, column) {\n        if (this.state == FormState.entqry) {\n            let field = this.records[0].getField(column);\n            return (field?.value);\n        }\n        if (this.data == null)\n            return (null);\n        return (this.data.getValue(+record, column));\n    }\n    async setValue(record, column, value) {\n        if (this.data == null)\n            return (false);\n        if (this.state == FormState.entqry) {\n            let field = this.records[0].getField(column);\n            if (field != null)\n                field.value = value;\n            return (true);\n        }\n        let previous = this.data.getValue(+record, column);\n        if (!await this.lockrecord(record, column))\n            return (false);\n        if (!this.data.setValue(+record, column, value))\n            return (false);\n        this.data.setValidated(record, column);\n        let trgevent = new FieldTriggerEvent(this.alias, column, null, +record, value, previous);\n        this.invokeFieldTriggers(Trigger.PostChange, column, trgevent);\n        if (+record >= +this.offset && +record < this.sum(this.offset, this.rows)) {\n            let field = this.records[record - this.offset].getField(column);\n            if (field != null)\n                field.value = value;\n        }\n        if (record == this.record && this.masterdetail != null && value != previous)\n            this.masterdetail.sync(this, column);\n    }\n    get records() {\n        return (this.records$);\n    }\n    getRecord(row) {\n        if (+row < +this.records$.length)\n            return (this.records$[+row]);\n        return (null);\n    }\n    getField(row, name) {\n        return (this.records[+row]?.getField(name));\n    }\n    addRecord(record) {\n        this.records.push(record);\n        record.fields.forEach((inst) => { inst.block = this; });\n        if (this.records.length == 1) {\n            record.current = true;\n            this.field$ = record.fields[0].getFirstInstance();\n        }\n    }\n    set usage(usage) {\n        this.dbusage$ = usage;\n    }\n    get usage() {\n        return (this.dbusage$);\n    }\n    setApplication(app) {\n        this.app = app;\n    }\n    async sendkey(event, key) {\n        if (event == null)\n            event = new KeyTriggerEvent(Origin.Block, this.alias, null, key, null);\n        return (await this.onEvent(event, this.field, \"key\", key));\n    }\n    get searchfilter() {\n        if (this.data == null)\n            return (null);\n        return (this.data.searchfilter);\n    }\n    set searchfilter(filter) {\n        if (this.data != null)\n            this.data.searchfilter = filter;\n    }\n    removeLocks() {\n        if (this.data != null)\n            this.data.removeLocks();\n    }\n    async execute(stmt, firstrow, firstcolumn) {\n        if (stmt == null)\n            return (null);\n        let errors = stmt.validate();\n        if (errors.length > 0) {\n            let msg = \"<table>\";\n            errors.forEach((err) => { msg += \"<tr><td>\" + err + \"</td></tr>\"; });\n            msg += \"</table>\";\n            this.alert(msg, \"Execute\");\n            return (null);\n        }\n        let response = await this.app.appstate.connection.invokestmt(stmt);\n        if (response[\"status\"] == \"failed\")\n            this.alert(JSON.stringify(response), \"Execute SQL Failed\");\n        let rows = response[\"rows\"];\n        if (rows == null) {\n            if (firstcolumn)\n                return (null);\n            return ([]);\n        }\n        if (!firstrow)\n            return (rows);\n        let row = [];\n        if (rows.length > 0)\n            row = rows[0];\n        if (!firstcolumn)\n            return (row);\n        let columns = Object.keys(row);\n        if (columns.length == 0)\n            return (null);\n        return (row[columns[0]]);\n    }\n    showDatePicker(field, row) {\n        if (row == null || row == -1)\n            row = this.row;\n        let record = this.sum(this.offset, row);\n        if (record >= this.records.length)\n            return;\n        if (this.records[record].state == RecordState.na)\n            return;\n        if (this.records[record].state == RecordState.update && !this.usage.update)\n            return;\n        let fld = this.records[+record].getField(field);\n        let value = new Date();\n        if (fld != null)\n            value = fld.value;\n        DatePicker.show(this.app, this, record, field, value);\n    }\n    showListOfValues(field, id, row) {\n        if (field == null)\n            return;\n        if (row == null || row == -1)\n            row = this.row;\n        if (!this.app.connected)\n            return;\n        if (!this.records[+row].enabled)\n            return;\n        if (this.records[+row].state == RecordState.na)\n            return;\n        let ldef = null;\n        field = field.trim().toLowerCase();\n        if (this.idlovs != null && id != null && id.trim().length > 0) {\n            id = id.trim().toLowerCase();\n            ldef = this.idlovs.get(field + \".\" + id);\n        }\n        else if (this.lovs != null) {\n            ldef = this.lovs.get(field);\n        }\n        if (ldef != null) {\n            let lov = null;\n            let record = this.sum(row, this.offset);\n            if (ldef.params.length == 0)\n                lov = ldef.inst[ldef.func]();\n            else\n                lov = ldef.inst[ldef.func](record);\n            let blocks = [this, new BlockImpl(), new BlockImpl()];\n            if (!lov.force && this.records[+row].getField(field)?.readonly)\n                return;\n            ListOfValuesImpl.show(this.app, blocks, lov);\n        }\n    }\n    async keyinsert(after) {\n        if (this.data == null)\n            return (false);\n        if (!this.usage.insert)\n            return (false);\n        if (this.data.database && !this.app.connected)\n            return (false);\n        return (await this.insert(after));\n    }\n    async keydelete() {\n        if (this.data == null)\n            return (false);\n        if (this.row >= this.data.rows)\n            return (true);\n        if (this.state == FormState.entqry)\n            return (true);\n        let rec = this.records[+this.row];\n        if (rec.state == RecordState.na)\n            return (true);\n        if (this.data.database && !this.app.connected)\n            return (false);\n        if (!this.usage.delete && rec.state != RecordState.insert)\n            return (false);\n        return (await this.delete());\n    }\n    async keyentqry(force) {\n        if (force == null)\n            force = false;\n        if (!force) {\n            if (this.data == null)\n                return (false);\n            if (!this.usage.query)\n                return (false);\n            if (this.data.database && !this.app.connected)\n                return (false);\n        }\n        let event = new KeyTriggerEvent(Origin.Block, this.alias, null, keymap.enterquery, null);\n        this.invokeTriggers(Trigger.Key, event, keymap.enterquery);\n        if (!await this.enterqry())\n            return (false);\n        if (this.masterdetail != null)\n            this.masterdetail.enterquery(this);\n        this.focus(0);\n        return (true);\n    }\n    async keyexeqry(force) {\n        if (this.masterdetail != null) {\n            if (this.masterdetail.master != null && this.masterdetail.master != this)\n                return (this.masterdetail.master.keyexeqry(force));\n            if (this.state != FormState.entqry)\n                this.masterdetail.clearfilters(this);\n        }\n        if (force == null)\n            force = false;\n        if (!force) {\n            if (this.data == null || !this.usage.query) {\n                if (this.masterdetail != null)\n                    this.masterdetail.master = null;\n                return (false);\n            }\n            if (this.data.database && !this.app.connected) {\n                if (this.masterdetail != null)\n                    this.masterdetail.master = null;\n                return (false);\n            }\n        }\n        let subquery = null;\n        if (this.masterdetail != null) {\n            subquery = await this.masterdetail.getDetailQuery();\n            this.masterdetail.querydetails(this, true, false);\n        }\n        let status = await this.executeqry(subquery);\n        this.focus(0);\n        return (status);\n    }\n    cancelqry() {\n        this.records[0].current = true;\n        this.records[0].clear();\n        this.records[0].disable();\n        this.state = FormState.normal;\n        this.records[0].state = RecordState.na;\n        this.records[0].enable(true);\n    }\n    async enterqry() {\n        if (this.data.database && !this.app.connected)\n            return (false);\n        if (!await this.validate())\n            return (false);\n        await this.clear();\n        this.row = 0;\n        this.searchfilter = [];\n        this.state = FormState.entqry;\n        this.records[0].state = RecordState.qmode;\n        this.records[0].enable(false);\n        return (true);\n    }\n    get querying() {\n        return (this.querying$);\n    }\n    // Public because of master-detail. Dont call direct\n    async executeqry(subquery) {\n        if (this.data.database && !this.app.connected)\n            return (false);\n        if (!await this.validate())\n            return (false);\n        let keys = [];\n        let fields = [];\n        if (this.querying$) {\n            if (this.masterdetail != null)\n                this.masterdetail.done(this, false);\n            return (false);\n        }\n        this.querying$ = true;\n        if (this.state == FormState.entqry) {\n            fields = this.records[0].fields;\n            this.records[0].disable();\n        }\n        if (this.masterdetail != null)\n            keys = this.masterdetail.getKeys(this);\n        let stmt = this.data.parseQuery(keys, subquery, fields);\n        this.lastqry = this.searchfilter;\n        await this.clear();\n        let errors = stmt.validate();\n        if (errors.length > 0) {\n            let msg = \"<table>\";\n            errors.forEach((err) => { msg += \"<tr><td>\" + err + \"</td></tr>\"; });\n            msg += \"</table>\";\n            this.alert(msg, \"Query Condition\");\n            this.querying$ = false;\n            if (this.masterdetail != null)\n                this.masterdetail.done(this, false);\n            return (false);\n        }\n        let event = new SQLTriggerEvent(this.alias, 0, stmt);\n        if (!await this.invokeTriggers(Trigger.PreQuery, event)) {\n            this.querying$ = false;\n            if (this.masterdetail != null)\n                this.masterdetail.done(this, false);\n            return (false);\n        }\n        this.state = FormState.exeqry;\n        stmt = event.stmt; // could be replaced by trigger\n        let response = await this.data.executequery(stmt);\n        if (response[\"status\"] == \"failed\") {\n            this.alert(JSON.stringify(response), \"Database Query\");\n            this.querying$ = false;\n            if (this.masterdetail != null)\n                this.masterdetail.done(this, false);\n            this.state = FormState.normal;\n            return (false);\n        }\n        if (this.masterdetail != null)\n            this.masterdetail.querydetails(this, false, true);\n        this.row = 0;\n        await this.display(0);\n        this.querying$ = false;\n        this.state = FormState.normal;\n        this.records[0].current = true;\n        if (this.masterdetail != null)\n            this.masterdetail.done(this, true);\n        return (true);\n    }\n    async createControlRecord() {\n        if (!this.data.database) {\n            if (!this.data.insert(this.sum(this.row, this.offset, 1)))\n                return (-1);\n            this.records[+this.row].state = RecordState.update;\n            this.records[+this.row].enable(false);\n            return (this.record);\n        }\n        return (-1);\n    }\n    async insert(after) {\n        if (this.data.database && !this.app.connected)\n            return (false);\n        if (!await this.validate())\n            return (false);\n        let off = after ? 1 : 0;\n        if (!this.data.insert(this.sum(this.row, this.offset, off)))\n            return (false);\n        if (this.masterdetail != null)\n            this.masterdetail.cleardetails(this);\n        // Is first row\n        if (this.data.rows == 1) {\n            await this.display(this.offset);\n            if (this.form == null)\n                this.disableall();\n            else\n                this.form.disableall();\n            this.records[0].enable(false);\n            this.focus(0);\n            return (true);\n        }\n        let scroll = 0;\n        let row = this.row;\n        if (after && this.row == this.rows - 1)\n            scroll = 1;\n        if (!after && this.row == 0)\n            scroll = -1;\n        let move = 0;\n        if (scroll == 0)\n            move = after ? 1 : 0;\n        await this.display(this.sum(this.offset, scroll));\n        row = this.sum(row, move);\n        let rec = this.records[+row];\n        rec.current = true;\n        if (this.form == null)\n            this.disableall();\n        else\n            this.form.disableall();\n        this.records[+row].enable(false);\n        this.focus(row);\n        return (true);\n    }\n    async delete() {\n        if (this.data == null)\n            return (false);\n        if (this.data.database && !this.app.connected)\n            return (false);\n        let record = this.sum(this.row, this.offset);\n        // Lock the record\n        if (!this.data.locked(record)) {\n            let response = await this.data.lock(record);\n            if (response[\"status\"] == \"failed\") {\n                this.alert(response[\"message\"], \"Lock Failure\");\n                return (false);\n            }\n        }\n        let response = await this.data.delete(this.sum(this.row, this.offset));\n        if (response[\"status\"] == \"failed\") {\n            this.alert(JSON.stringify(response), \"Delete Failed\");\n            return (false);\n        }\n        if (this.masterdetail != null)\n            this.masterdetail.cleardetails(this);\n        // current view is not full\n        if (+this.data.rows - this.offset < this.rows) {\n            this.offset--;\n            if (this.offset < 0)\n                this.offset = 0;\n        }\n        let row = this.row;\n        await this.display(this.offset);\n        // no records at current position\n        if (this.sum(row, this.offset) >= this.data.rows)\n            row = this.data.rows - this.offset - 1;\n        if (row < 0)\n            this.row = 0;\n        this.focus(row);\n        if (this.masterdetail != null)\n            this.masterdetail.querydetails(this, true, true);\n    }\n    async lockrecord(record, field) {\n        if (this.data == null)\n            return (true);\n        if (this.state != FormState.normal)\n            return (true);\n        if (!this.data.databasecolumn(field))\n            return (true);\n        if (this.data.locked(record))\n            return (true);\n        let trgevent = new TriggerEvent(this.alias, record, null);\n        if (!await this.invokeTriggers(Trigger.Lock, trgevent))\n            return (false);\n        let response = await this.data.lock(record);\n        if (response[\"status\"] == \"failed\") {\n            let row = +record - +this.offset;\n            this.alert(response[\"message\"], \"Lock Failure\");\n            let value = this.getValue(record, field);\n            let ffield = this.records[+row].getField(field);\n            if (ffield != null)\n                ffield.value = value;\n            return (false);\n        }\n        return (true);\n    }\n    async validate() {\n        if (!await this.validatefield(this.field))\n            return (false);\n        return (await this.validaterecord());\n    }\n    async validatefield(field) {\n        if (field == null)\n            return (true);\n        if (this.data == null)\n            return (true);\n        if (this.row >= this.data.rows)\n            return (true);\n        if (this.state != FormState.normal)\n            return (true);\n        if (this.records[+this.row].state == RecordState.na)\n            return (true);\n        let previous = this.data.getValue(this.sum(field.row, this.offset), field.name);\n        // Nothing has changed\n        if (field.value == previous)\n            return (this.data.getValidated(this.sum(field.row, this.offset), field.name));\n        if (!await this.lockrecord(this.sum(field.row, this.offset), field.name))\n            return (true);\n        if (!field.validate()) {\n            field.valid = false;\n            this.data.setValue(this.sum(field.row, this.offset), field.name, field.value);\n            return (false);\n        }\n        this.data.setValue(+field.row + this.offset, field.name, field.value);\n        let trgevent = new FieldTriggerEvent(this.alias, field.name, field.id, this.sum(field.row, this.offset), field.value, previous, null);\n        if (!await this.invokeFieldTriggers(Trigger.WhenValidateField, field.name, trgevent)) {\n            field.valid = false;\n            return (false);\n        }\n        field.parent.valid = true;\n        this.data.setValidated(this.sum(field.row, this.offset), field.name);\n        if (field.value != previous) {\n            if (this.sum(field.row, this.offset) == this.record && this.masterdetail != null)\n                this.masterdetail.sync(this, field.name);\n            if (!await this.invokeFieldTriggers(Trigger.PostChange, field.name, trgevent))\n                return (false);\n            if (this.records[+this.row].state == RecordState.insert) {\n                if (this.data.validated(this.record, true))\n                    this.validaterecord();\n            }\n        }\n        return (true);\n    }\n    async validaterecord() {\n        if (this.data == null)\n            return (true);\n        if (this.row >= this.data.rows)\n            return (true);\n        if (this.state == FormState.entqry)\n            return (true);\n        let rec = this.records[+this.row];\n        if (rec.state == RecordState.na)\n            return (true);\n        // Check fields is validated\n        if (!this.data.validated(this.record, true)) {\n            let cols = this.data.getNonValidated(this.record);\n            this.alert(\"The following columns are not valid:<br><br>\" + cols, \"Validate Record\");\n            cols.forEach((col) => { this.records[+this.record].getField(col).valid = false; });\n            return (false);\n        }\n        // Check record is validated\n        if (this.data.validated(this.record, false))\n            return (true);\n        let trgevent = new TriggerEvent(this.alias, this.record, null);\n        if (!await this.invokeTriggers(Trigger.WhenValidateRecord, trgevent))\n            return (false);\n        let insert = (rec.state == RecordState.insert);\n        let response = await this.data.setValidated(this.record);\n        if (response[\"status\"] == \"failed\") {\n            let title = insert ? \"Insert\" : \"Update\";\n            this.alert(JSON.stringify(response), title + \" Failed\");\n            return (false);\n        }\n        if (insert) {\n            if (this.form == null)\n                this.enableall();\n            else\n                this.form.enableall();\n        }\n        return (true);\n    }\n    async clearblock() {\n        await this.clear();\n        this.focus(0);\n        this.searchfilter = [];\n        if (this.data)\n            this.data.clear();\n    }\n    async clear() {\n        if (this.rows == null)\n            return;\n        this.field$ = this.fields$[0];\n        for (let r = 0; r < this.rows; r++) {\n            this.records[+r].clear();\n            this.records[+r].disable();\n            this.records[+r].state = RecordState.na;\n        }\n        this.records[0].current = true;\n        this.records[0].state = RecordState.na;\n        if (!this.disabled$)\n            this.records[0].enable(true);\n    }\n    async disableall() {\n        this.disabled$ = true;\n        for (let r = 0; r < this.rows; r++)\n            this.records[+r].disable();\n    }\n    async enableall() {\n        this.disabled$ = false;\n        for (let r = 0; r < this.rows; r++) {\n            if (this.records[+r].state != RecordState.na)\n                this.records[+r].enable(false);\n        }\n    }\n    async display(start) {\n        await this.clear();\n        this.offset = start;\n        if (this.data == null)\n            return;\n        if (this.sum(this.offset, this.rows) > +this.data.rows)\n            this.offset = this.data.rows - this.rows;\n        if (this.offset < 0)\n            this.offset = 0;\n        let columns = this.data.fields;\n        let rows = this.data.get(this.offset, this.rows);\n        for (let r = 0; r < rows.length; r++) {\n            let rec = this.getRecord(r);\n            let state = this.data.state(this.sum(this.offset, r));\n            for (let c = 0; c < rows[r].length; c++) {\n                let field = rec.getField(columns[c]);\n                if (field != null)\n                    field.value = rows[r][c];\n            }\n            if (state == RecordState.na) {\n                let execs = [];\n                for (let c = 0; c < rows[r].length; c++) {\n                    let field = rec.getField(columns[c]);\n                    let value = rows[r][c];\n                    let fname = columns[c];\n                    if (field != null)\n                        fname = field.name;\n                    let trgevent = new FieldTriggerEvent(this.alias, fname, null, this.sum(r, this.offset), value, value);\n                    execs.push(this.invokeFieldTriggers(Trigger.PostChange, fname, trgevent));\n                }\n                execs.push(this.invokeTriggers(Trigger.PostChange, new TriggerEvent(this.alias, this.sum(r, this.offset))));\n                state = this.data.state(this.sum(this.offset, r), RecordState.update);\n                for (let i = 0; i < execs.length; i++)\n                    await execs[i];\n            }\n            rec.state = state;\n            if (!this.disabled$)\n                rec.enable(false);\n        }\n    }\n    addTrigger(instance, func, types) {\n        this.triggers.addTrigger(instance, func, types);\n    }\n    addKeyTrigger(instance, func, keys) {\n        this.triggers.addTrigger(instance, func, Trigger.Key, null, keys);\n    }\n    addFieldTrigger(instance, func, types, fields, keys) {\n        this.triggers.addTrigger(instance, func, types, fields, keys);\n    }\n    async onEvent(event, field, type, key) {\n        let trgevent = null;\n        if (event == null)\n            event = { type: type };\n        if (this.records.length == 0)\n            return (true);\n        if (type == \"focus\") {\n            this.field$ = field;\n            if (this.form != null)\n                this.form.block = this;\n            if (this.state == FormState.entqry)\n                return (true);\n            if (this.row != field.row) {\n                if (!await this.validate()) {\n                    this.records[+this.row].current = true;\n                    this.field.focus();\n                    return (false);\n                }\n                let state = this.records[field.row].state;\n                if (this.masterdetail != null && state != RecordState.na)\n                    this.masterdetail.querydetails(this, true, true);\n            }\n            this.row = field.row;\n            this.records$[+field.row].current = true;\n            trgevent = new FieldTriggerEvent(this.alias, field.name, field.id, this.sum(field.row, this.offset), field.value, field.value, event);\n            return (await this.invokeFieldTriggers(Trigger.PreField, field.name, trgevent));\n        }\n        if (type == \"blur\") {\n            if (this.state == FormState.entqry)\n                return (true);\n            trgevent = new FieldTriggerEvent(this.alias, field.name, field.id, this.sum(field.row, this.offset), field.value, field.value, event);\n            return (await this.invokeFieldTriggers(Trigger.PostField, field.name, trgevent));\n        }\n        if (type == \"fchange\") {\n            if (this.state == FormState.entqry || this.data == null)\n                return (true);\n            return (await this.lockrecord(this.sum(field.row, this.offset), field.name));\n        }\n        if (type == \"cchange\") {\n            if (this.state == FormState.entqry)\n                return (true);\n            let previous = this.getValue(this.sum(field.row, this.offset), field.name);\n            trgevent = new FieldTriggerEvent(this.alias, field.name, field.id, this.sum(field.row, this.offset), field.value, previous, event);\n            return (this.invokeFieldTriggers(Trigger.Typing, field.name, trgevent));\n        }\n        if (type == \"change\") {\n            // Current row field firing after move\n            if (field.row != this.row)\n                return (true);\n            // This will fire appropiate triggers\n            if (!await this.validatefield(field)) {\n                this.field.focus();\n                return (false);\n            }\n            return (true);\n        }\n        // Enter\n        if (type == \"key\" && key == keymap.enter) {\n            if (this.state == FormState.entqry)\n                key = keymap.executequery;\n            if (this.records[+this.row]?.state == RecordState.insert) {\n                if (!await this.validaterecord())\n                    return (false);\n            }\n            if (this.records[+this.row]?.state == RecordState.update) {\n                if (!await this.validaterecord())\n                    return (false);\n            }\n        }\n        // Cancel\n        if (type == \"key\" && key == keymap.escape) {\n            if (this.state == FormState.entqry) {\n                this.cancelqry();\n                this.focus();\n            }\n            if (this.records[+this.row]?.state == RecordState.insert) {\n                this.enableall();\n                key = keymap.delete;\n            }\n        }\n        // ListOfValues / Datepicker\n        if (type == \"key\" && key == keymap.listval) {\n            if (event != null && event[\"preventDefault\"] != null)\n                event.preventDefault();\n            let type = field.definition.type;\n            if (type == FieldType.date || type == FieldType.datetime) {\n                if (!field.readonly)\n                    DatePicker.show(this.app, this, this.record, field.name, field.value);\n                return (true);\n            }\n            this.showListOfValues(field.name, field.id, this.row);\n            return (true);\n        }\n        // Enter query\n        if (type == \"key\" && key == keymap.enterquery) {\n            if (this.state == FormState.entqry) {\n                for (let i = 0; i < this.lastqry.length; i++) {\n                    let nvp = this.lastqry[i];\n                    await this.setValue(0, nvp.name, nvp.value);\n                }\n                return (true);\n            }\n            if (!await this.validate())\n                return (false);\n            if (!await this.keyentqry()) {\n                field.focus();\n                return (false);\n            }\n            trgevent = new KeyTriggerEvent(Origin.Block, this.alias, field, key, event);\n            return (await this.invokeTriggers(Trigger.Key, trgevent, key));\n        }\n        // Execute query\n        if (type == \"key\" && key == keymap.executequery) {\n            if (!await this.validate())\n                return (false);\n            trgevent = new KeyTriggerEvent(Origin.Block, this.alias, field, key, event);\n            if (!await this.invokeTriggers(Trigger.Key, trgevent, key))\n                return (true);\n            return (await this.keyexeqry());\n        }\n        // Delete\n        if (type == \"key\" && key == keymap.delete) {\n            if (event != null && event[\"preventDefault\"] != null)\n                event.preventDefault();\n            trgevent = new KeyTriggerEvent(Origin.Block, this.alias, field, key, event);\n            if (this.records[+this.row]?.state == RecordState.update) {\n                if (!await this.invokeTriggers(Trigger.Key, trgevent, key))\n                    return (false);\n            }\n            return (await this.keydelete());\n        }\n        // Insert after\n        if (type == \"key\" && key == keymap.insertafter) {\n            if (!await this.validate())\n                return (false);\n            trgevent = new KeyTriggerEvent(Origin.Block, this.alias, field, key, event);\n            if (!await this.invokeTriggers(Trigger.Key, trgevent, key))\n                return (true);\n            if (!await this.keyinsert(true)) {\n                field.focus();\n                return (false);\n            }\n            return (true);\n        }\n        // Insert before\n        if (type == \"key\" && key == keymap.insertbefore) {\n            if (!await this.validate())\n                return (false);\n            trgevent = new KeyTriggerEvent(Origin.Block, this.alias, field, key, event);\n            if (!await this.invokeTriggers(Trigger.Key, trgevent, key))\n                return (true);\n            if (!await this.keyinsert(false)) {\n                field.focus();\n                return (false);\n            }\n            return (true);\n        }\n        // Next/Previous field\n        if (type == \"key\" && (key == keymap.nextfield || key == keymap.prevfield)) {\n            if (this.state != FormState.entqry && this.records[+this.row]?.state != RecordState.na) {\n                let previous = this.data.getValue(this.sum(field.row, this.offset), field.name);\n                if (field.dirty) {\n                    // ctrl-z doesn't refresh\n                    if (field.value == previous)\n                        field.parent.copy(field);\n                }\n                trgevent = new FieldTriggerEvent(this.alias, field.name, field.id, this.sum(field.row, this.offset), field.value, previous, event);\n                if (key == keymap.prevfield) {\n                    if (!await this.invokeFieldTriggers(Trigger.KeyPrevField, field.name, trgevent, key))\n                        return (false);\n                }\n                if (key == keymap.nextfield) {\n                    if (!await this.invokeFieldTriggers(Trigger.KeyNextField, field.name, trgevent, key))\n                        return (false);\n                }\n            }\n        }\n        // Next record\n        if (type == \"key\" && key == keymap.nextrecord) {\n            if (!await this.validate())\n                return (false);\n            trgevent = new KeyTriggerEvent(Origin.Block, this.alias, field, key, event);\n            if (!await this.invokeTriggers(Trigger.Key, trgevent, key))\n                return (true);\n            let row = this.sum(field.row, 1);\n            if (this.data == null)\n                return (false);\n            if (+row >= +this.rows) {\n                row = +this.rows - 1;\n                if (this.data == null)\n                    return (false);\n                let offset = this.sum(field.row, this.offset);\n                let fetched = await this.data.fetch(offset, 1);\n                if (fetched == 0)\n                    return (false);\n                await this.display(this.sum(this.offset, 1));\n            }\n            if (this.records[+row]?.enabled) {\n                this.focus(row);\n                if (this.masterdetail != null)\n                    this.masterdetail.querydetails(this, true, true);\n            }\n            return (true);\n        }\n        // Previous record\n        if (type == \"key\" && key == keymap.prevrecord) {\n            if (this.record == 0)\n                return (true);\n            if (!await this.validate())\n                return (false);\n            trgevent = new KeyTriggerEvent(Origin.Block, this.alias, field, key, event);\n            if (!await this.invokeTriggers(Trigger.Key, trgevent, key))\n                return (true);\n            let row = +field.row - 1;\n            if (this.data == null)\n                return (false);\n            if (+row < 0) {\n                row = 0;\n                await this.display(this.offset - 1);\n            }\n            this.focus(row);\n            if (this.masterdetail != null)\n                this.masterdetail.querydetails(this, true, true);\n            return (true);\n        }\n        // Page down\n        if (type == \"key\" && key == keymap.pagedown) {\n            if (!await this.validate())\n                return (false);\n            trgevent = new KeyTriggerEvent(Origin.Block, this.alias, field, key, event);\n            if (!await this.invokeTriggers(Trigger.Key, trgevent, key))\n                return (true);\n            let offset = this.sum(this.offset, field.row);\n            let fetched = await this.data.fetch(offset, this.rows);\n            if (fetched == 0)\n                return (false);\n            await this.display(this.sum(this.offset, this.rows));\n            this.focus();\n            if (this.masterdetail != null)\n                this.masterdetail.querydetails(this, true, true);\n            return (true);\n        }\n        // Page up\n        if (type == \"key\" && key == keymap.pageup) {\n            if (this.record == 0)\n                return (true);\n            if (!await this.validate())\n                return (false);\n            trgevent = new KeyTriggerEvent(Origin.Block, this.alias, field, key, event);\n            if (!await this.invokeTriggers(Trigger.Key, trgevent, key))\n                return (true);\n            await this.display(+this.offset - this.rows);\n            this.focus();\n            if (this.masterdetail != null)\n                this.masterdetail.querydetails(this, true, true);\n            return (true);\n        }\n        // Next/Prev block\n        if (type == \"key\" && (key == keymap.prevblock || key == keymap.nextblock)) {\n            if (this.state != FormState.entqry && this.records[+this.row]?.state != RecordState.na) {\n                if (!await this.validate())\n                    return (false);\n                trgevent = new FieldTriggerEvent(this.alias, field.name, field.id, this.sum(field.row, this.offset), field.value, null, event);\n                if (key == keymap.prevblock) {\n                    if (!await this.invokeFieldTriggers(Trigger.KeyPrevBlock, field.name, trgevent, key))\n                        return (false);\n                }\n                if (key == keymap.nextblock) {\n                    if (!await this.invokeFieldTriggers(Trigger.KeyNextBlock, field.name, trgevent, key))\n                        return (false);\n                }\n            }\n        }\n        if (type == \"key\" && key == keymap.clearblock) {\n            trgevent = new KeyTriggerEvent(Origin.Block, this.alias, null, keymap.clearblock, null);\n            if (!await this.invokeTriggers(Trigger.Key, event, keymap.clearblock))\n                return (false);\n            this.clearblock();\n        }\n        if (type == \"key\" && key == keymap.clearform && this.form != null)\n            await this.form.onEvent(event, field, type, key);\n        if (type == \"key\" && key == keymap.prevfield && this.form != null)\n            await this.form.onEvent(event, field, type, key);\n        if (type == \"key\" && key == keymap.nextfield && this.form != null)\n            await this.form.onEvent(event, field, type, key);\n        if (type == \"key\" && key == keymap.prevblock && this.form != null)\n            await this.form.onEvent(event, field, type, key);\n        if (type == \"key\" && key == keymap.nextblock && this.form != null)\n            await this.form.onEvent(event, field, type, key);\n        if (type == \"key\") {\n            if (event != null && event[\"preventDefault\"] != null)\n                event.preventDefault();\n            trgevent = new KeyTriggerEvent(Origin.Block, this.alias, field, key, event);\n            return (await this.invokeTriggers(Trigger.Key, trgevent, key));\n        }\n        if (type == \"click\") {\n            trgevent = new FieldTriggerEvent(this.alias, field.name, field.id, this.sum(field.row, this.offset), field.value, field.value, event);\n            return (await this.invokeFieldTriggers(Trigger.MouseClick, field.name, trgevent, key));\n        }\n        if (type == \"dblclick\") {\n            trgevent = new FieldTriggerEvent(this.alias, field.name, field.id, this.sum(field.row, this.offset), field.value, field.value, event);\n            return (await this.invokeFieldTriggers(Trigger.MouseDoubleClick, field.name, trgevent, key));\n        }\n        return (true);\n    }\n    async invokeTriggers(type, event, key) {\n        if (this.form != null)\n            if (!await this.form.invokeTriggers(type, event, key))\n                return (false);\n        return (await this.triggers.invokeTriggers(type, event, key));\n    }\n    async invokeFieldTriggers(type, field, event, key) {\n        if (this.form != null)\n            if (!await this.form.invokeFieldTriggers(type, field, event, key))\n                return (false);\n        return (await this.triggers.invokeFieldTriggers(type, field, event, key));\n    }\n    sleep(ms) {\n        return (new Promise(resolve => setTimeout(resolve, ms)));\n    }\n    alert(msg, title, width, height) {\n        if (title == null)\n            title = this.alias;\n        MessageBox.show(this.app, msg, title, width, height);\n    }\n    sum(n1, n2, n3) {\n        let s = +n1 + +n2;\n        if (n3 != null)\n            s = +s + +n3;\n        return (s);\n    }\n}\n\nclass Block {\n    // dont rename impl as it is read behind the scenes\n    constructor() {\n        this._impl_ = new BlockImpl(this);\n    }\n    get form() {\n        return (this._impl_.form.form);\n    }\n    get table() {\n        return (this._impl_.table);\n    }\n    get connected() {\n        return (this.form.connected);\n    }\n    getValue(record, field) {\n        return (this._impl_.getValue(record, field));\n    }\n    async setValue(record, field, value) {\n        return (await this._impl_.setValue(record, field, value));\n    }\n    get querymode() {\n        return (this._impl_.querymode);\n    }\n    empty() {\n        return (this._impl_.getRecord(0).state == RecordState.na);\n    }\n    cancel() {\n        this._impl_.sendkey(null, keymap.escape);\n    }\n    goField(field, row) {\n        if (row == null)\n            row = this._impl_.row;\n        this._impl_.getField(row, field).focus();\n    }\n    get ready() {\n        return (this._impl_.ready);\n    }\n    get searchfilter() {\n        return (this._impl_.searchfilter);\n    }\n    set searchfilter(filter) {\n        this._impl_.searchfilter = filter;\n    }\n    async sendKey(key) {\n        return (await this._impl_.sendkey(null, key));\n    }\n    async enterquery(override) {\n        return (this._impl_.keyentqry(override));\n    }\n    async executequery(override) {\n        return (this._impl_.keyexeqry(override));\n    }\n    nextrecord() {\n        this._impl_.sendkey(null, keymap.nextrecord);\n    }\n    prevrecord() {\n        this._impl_.sendkey(null, keymap.prevrecord);\n    }\n    nextblock() {\n        this._impl_.sendkey(null, keymap.nextblock);\n    }\n    prevblock() {\n        this._impl_.sendkey(null, keymap.prevblock);\n    }\n    pageup() {\n        this._impl_.sendkey(null, keymap.pageup);\n    }\n    pagedown() {\n        this._impl_.sendkey(null, keymap.pagedown);\n    }\n    get row() {\n        return (this._impl_.row);\n    }\n    get record() {\n        return (this._impl_.record);\n    }\n    async createControlRecord() {\n        return (this._impl_.createControlRecord());\n    }\n    async delete(override) {\n        if (override)\n            return (this._impl_.delete());\n        else\n            return (this._impl_.sendkey(null, keymap.delete));\n    }\n    setFieldDefinition(def) {\n        return (this._impl_.setFieldDefinition(def));\n    }\n    setPossibleValues(field, values, enforce) {\n        return (this._impl_.setPossibleValues(field, values, enforce));\n    }\n    showDatePicker(field, row) {\n        this._impl_.showDatePicker(field, row);\n    }\n    showListOfValues(field, id, row) {\n        this._impl_.showListOfValues(field, id, row);\n    }\n    async insert(above, override) {\n        if (above == null)\n            above = false;\n        if (override)\n            return (this._impl_.insert(!above));\n        else {\n            if (!above)\n                return (this._impl_.sendkey(null, keymap.insertafter));\n            else\n                return (this._impl_.sendkey(null, keymap.insertbefore));\n        }\n    }\n    async execute(stmt, firstrow, firstcolumn) {\n        return (this._impl_.execute(stmt, firstrow, firstcolumn));\n    }\n    addListOfValues(func, field, id) {\n        this._impl_.addListOfValues(false, func, field, id);\n    }\n    addTrigger(listener, types) {\n        this._impl_.addTrigger(this, listener, types);\n    }\n    addKeyTrigger(listener, keys) {\n        this._impl_.addKeyTrigger(this, listener, keys);\n    }\n    addFieldTrigger(listener, types, fields) {\n        this._impl_.addFieldTrigger(this, listener, types, fields);\n    }\n    alert(message, title, width, height) {\n        this._impl_.alert(message, title, width, height);\n    }\n}\n\nclass MasterDetailQuery {\n    constructor(md, links, block, col) {\n        this.md = md;\n        this.links = links;\n        this.finished = 0;\n        this.detailblks = new Map();\n        this.masterblks = new Map();\n        this.root$ = block;\n        this.findblocks(block.alias, col);\n    }\n    get root() {\n        return (this.root$);\n    }\n    findblocks(block, col) {\n        let dep = this.links.get(block);\n        if (this.details(dep)) {\n            this.masterblks.set(block, false);\n            dep.details.forEach((det) => {\n                if (col == null || det.mkey.partof(col)) {\n                    this.findblocks(det.block.alias, null);\n                    this.detailblks.set(det.block.alias, 0);\n                }\n            });\n        }\n    }\n    waitfor(block) {\n        this.detailblks.set(block.alias, 1);\n    }\n    ready(block) {\n        this.masterblks.set(block.alias, true);\n        let dep = this.links.get(block.alias);\n        if (this.detailblks.size == 0) {\n            this.md.finished();\n            return;\n        }\n        if (this.details(dep))\n            this.execute(dep);\n        else\n            this.state(block, 2);\n    }\n    done(block) {\n        this.finished++;\n        this.state(block, 3);\n        if (this.finished == this.detailblks.size)\n            this.md.finished();\n    }\n    failed(block) {\n        this.remove(block);\n        if (this.finished == this.detailblks.size)\n            this.md.finished();\n    }\n    remove(block) {\n        if (this.detailblks.get(block.alias) < 2) {\n            this.detailblks.delete(block.alias);\n            let dep = this.links.get(block.alias);\n            if (dep != null && dep.details != null) {\n                dep.details.forEach((det) => { this.remove(det.block); });\n            }\n        }\n        else {\n            this.finished++;\n            this.state(block, 3);\n        }\n    }\n    status(state) {\n        console.log(state + \" finished: \" + this.finished + \" \" + this.detailblks.size);\n        this.detailblks.forEach((state, blk) => { console.log(blk + \" \" + state); });\n    }\n    async execute(dep) {\n        if (dep.details != null) {\n            for (let i = 0; i < dep.details.length; i++) {\n                if (this.isready(dep.details[i].block)) {\n                    dep.details[i].block.executeqry();\n                    this.state(dep.details[i].block, 1);\n                }\n            }\n        }\n    }\n    isready(block) {\n        let ready = true;\n        let dep = this.links.get(block.alias);\n        if (dep.masters != null) {\n            dep.masters.forEach((master) => {\n                let alias = master.block.alias;\n                let ok = this.masterblks.get(alias);\n                if (ok == null || !ok)\n                    ready = false;\n            });\n        }\n        return (ready);\n    }\n    state(block, state) {\n        this.detailblks.set(block.alias, state);\n    }\n    details(dep) {\n        return (dep != null && dep.details != null);\n    }\n}\n\nclass MasterDetail {\n    constructor(form) {\n        this.form = null;\n        this.master$ = null;\n        this.waiting = null;\n        this.query = null;\n        this.blocks = new Map();\n        this.links = new Map();\n        this.defined = new Map();\n        this.form = form;\n    }\n    get master() {\n        return (this.master$);\n    }\n    set master(block) {\n        this.master$ = block;\n    }\n    getRoot(block) {\n        if (block == null)\n            block = Array.from(this.blocks)[0][\"1\"];\n        let dep = this.links.get(block.alias);\n        while (dep != null && dep.masters != null && dep.masters.length > 0) {\n            block = dep.masters[0].block;\n            dep = this.links.get(block.alias);\n        }\n        return (block);\n    }\n    cleardetails(block) {\n        let dep = this.links.get(block.alias);\n        if (dep != null && dep.details != null)\n            dep.details.forEach((det) => this.clear(det.block));\n    }\n    clear(block) {\n        block.clear();\n        let dep = this.links.get(block.alias);\n        if (dep != null && dep.details != null)\n            dep.details.forEach((det) => this.clear(det.block));\n    }\n    sync(block, col) {\n        let dep = this.links.get(block.alias);\n        if (dep != null) {\n            if (!dep.keycols.has(col))\n                return;\n            this.master = block;\n            this.query = new MasterDetailQuery(this, this.links, block, col);\n            this.query.ready(block);\n        }\n    }\n    enterquery(block) {\n        this.master$ = block;\n        this.enterdetailquery(block);\n    }\n    enterdetailquery(block) {\n        let dep = this.links.get(block.alias);\n        if (dep != null && dep.details != null) {\n            dep.details.forEach((det) => {\n                if (det.block.usage.query)\n                    det.block.enterqry();\n                this.enterdetailquery(det.block);\n            });\n        }\n    }\n    clearfilters(block) {\n        block.searchfilter = [];\n        let dep = this.links.get(block.alias);\n        if (dep != null && dep.details != null) {\n            dep.details.forEach((det) => {\n                det.block.searchfilter = [];\n                this.clearfilters(det.block);\n            });\n        }\n    }\n    // Build subquery from details\n    async getDetailQuery() {\n        let block = this.master$;\n        this.master$ = null;\n        if (block == null)\n            return (null);\n        let dep = this.links.get(block.alias);\n        let sub = {\n            lev: 0,\n            sql: null,\n            subs: [],\n            mcols: [],\n            dcols: [],\n            bindvalues: [],\n            mtab: null\n        };\n        if (dep != null && dep.details != null) {\n            for (let i = 0; i < dep.details.length; i++)\n                await this.subquery(sub, dep.details[i]);\n        }\n        let subq = null;\n        this.buildsubquery(sub);\n        if (sub.sql.length > 0) {\n            let bindvals = [];\n            sub.bindvalues.forEach((bindv) => {\n                bindvals.push({\n                    name: bindv.name,\n                    type: Column$1[bindv.type].toLowerCase(),\n                    value: bindv.value\n                });\n            });\n            subq = { sql: sub.sql, bindvalues: bindvals };\n        }\n        return (subq);\n    }\n    async subquery(parent, detail) {\n        let mkey = detail.mkey;\n        let dkey = detail.dkey;\n        let block = detail.block;\n        if (block.querymode) {\n            let sub = {\n                sql: null,\n                subs: [],\n                bindvalues: [],\n                lev: +parent.lev + 1,\n                mcols: mkey.columns(),\n                dcols: dkey.columns(),\n                mtab: block.data?.table?.name\n            };\n            parent.subs.push(sub);\n            let fields = block.records[0].fields;\n            let stmt = block.data.parseQuery([], null, fields);\n            let event = new SQLTriggerEvent(block.alias, 0, stmt);\n            if (!await block.invokeTriggers(Trigger.PreQuery, event))\n                return;\n            block.cancelqry();\n            if (block.searchfilter.length > 0) {\n                stmt.order = null;\n                stmt.columns = dkey.columns();\n                sub.sql = stmt.build().sql;\n                sub.bindvalues = stmt.getCondition().getAllBindvalues();\n            }\n            let dep = this.links.get(block.alias);\n            if (dep != null && dep.details != null) {\n                for (let i = 0; i < dep.details.length; i++)\n                    await this.subquery(sub, dep.details[i]);\n            }\n        }\n    }\n    buildsubquery(sub) {\n        let children = false;\n        for (let i = 0; i < sub.subs.length; i++) {\n            this.buildsubquery(sub.subs[i]);\n            if (sub.subs[i].sql != null && sub.subs[i].sql.length > 0)\n                children = true;\n        }\n        let sql = \"\";\n        let and = false;\n        let where = false;\n        if (sub.sql != null) {\n            and = true;\n        }\n        else if (children && sub.mtab != null) {\n            where = true;\n            sub.sql = \"select \" + sub.dcols + \" from \" + sub.mtab;\n        }\n        if (children) {\n            for (let i = 0; i < sub.subs.length; i++) {\n                if (sub.subs[i].sql != null && sub.subs[i].sql.length > 0) {\n                    if (and)\n                        sql += \" and \";\n                    if (where)\n                        sql += \" where \";\n                    sql += \"(\" + sub.subs[i].mcols + \") in (\";\n                    sql += sub.subs[i].sql;\n                    sql += \")\";\n                    sub.subs[i].bindvalues.forEach((bind) => { sub.bindvalues.push(bind); });\n                    and = true;\n                    where = false;\n                }\n            }\n        }\n        if (sub.sql == null)\n            sub.sql = sql;\n        else\n            sub.sql += sql;\n    }\n    querydetails(block, init, ready) {\n        if (init == null)\n            init = false;\n        if (init) {\n            if (this.query != null) {\n                this.waiting = block;\n                return;\n            }\n            this.master = block;\n            this.query = new MasterDetailQuery(this, this.links, block);\n        }\n        if (ready)\n            this.query.ready(block);\n        else\n            this.query.waitfor(block);\n    }\n    done(block, success) {\n        if (success)\n            this.query.done(block);\n        else\n            this.query.failed(block);\n    }\n    finished() {\n        let block = null;\n        if (this.waiting != null) {\n            block = this.waiting;\n            this.waiting = null;\n            this.query = new MasterDetailQuery(this, this.links, block);\n            this.query.ready(block);\n        }\n        else {\n            this.query = null;\n            this.master = null;\n        }\n    }\n    getKeys(block) {\n        let keys = [];\n        let dep = this.links.get(block.alias);\n        if (dep != null && dep.masters != null) {\n            dep.masters.forEach((master) => {\n                let c = 0;\n                let record = master.block.record;\n                master.mkey.columns().forEach((col) => {\n                    let val = null;\n                    if (record < master.block.datarows)\n                        val = master.block.getValue(record, col);\n                    master.dkey.set(c++, val);\n                });\n                keys.push(master.dkey);\n            });\n        }\n        return (keys);\n    }\n    addBlock(block) {\n        this.blocks.set(block.alias, block);\n    }\n    addKeys(block, keys) {\n        this.defined.set(block.alias, keys);\n    }\n    addJoins(joins) {\n        if (joins == null)\n            return;\n        joins.forEach((join) => {\n            let skip = false;\n            let master = this.blocks.get(join.master.alias);\n            let detail = this.blocks.get(join.detail.alias);\n            if (master == null) {\n                skip = true;\n                console.log(\"Master block \" + join.master.alias + \" in join on form \" + this.form.name + \" does not exist\");\n            }\n            if (detail == null) {\n                skip = true;\n                console.log(\"Detail block \" + join.detail.alias + \" in join on form \" + this.form.name + \" does not exist\");\n            }\n            if (!skip) {\n                let keys = null;\n                keys = this.defined.get(join.master.alias);\n                let mkey = keys?.get(join.master.key);\n                keys = this.defined.get(join.detail.alias);\n                let dkey = keys?.get(join.detail.key);\n                if (mkey == null) {\n                    skip = true;\n                    console.log(\"Join on form \" + this.form.name + \". Cannot find key \" + join.master.key + \" on block \" + join.master.alias);\n                }\n                if (dkey == null) {\n                    skip = true;\n                    console.log(\"Join on form \" + this.form.name + \". Cannot find key \" + join.detail.key + \" on block \" + join.detail.alias);\n                }\n                if (!skip) {\n                    let mdep = this.links.get(master.alias);\n                    if (mdep == null) {\n                        mdep = { keycols: new Set() };\n                        this.links.set(master.alias, mdep);\n                    }\n                    if (mdep.details == null)\n                        mdep.details = [];\n                    dkey.columns().forEach((col) => { mdep.keycols.add(col); });\n                    mdep.details.push({ block: detail, mkey: mkey, dkey: dkey });\n                    let ddep = this.links.get(detail.alias);\n                    if (ddep == null) {\n                        ddep = { keycols: new Set() };\n                        this.links.set(detail.alias, ddep);\n                    }\n                    if (ddep.masters == null)\n                        ddep.masters = [];\n                    ddep.masters.push({ block: master, mkey: mkey, dkey: dkey });\n                }\n            }\n        });\n    }\n}\n\nclass FormImpl {\n    constructor(form$) {\n        this.form$ = form$;\n        this.blocks = [];\n        this.cancelled = false;\n        this.initiated$ = false;\n        this.fields$ = [];\n        this.triggers = new Triggers();\n        this.parameters = new Map();\n        this.stack = new Map();\n        this.blkindex = new Map();\n        this.creationerror = false;\n        this.guid$ = FormImpl.id++;\n        let utils = new Utils();\n        this.name$ = utils.getName(form$);\n    }\n    get guid() {\n        return (this.guid$);\n    }\n    get form() {\n        return (this.form$);\n    }\n    get name() {\n        return (this.name$);\n    }\n    set path(path) {\n        this.path$ = path;\n    }\n    get path() {\n        return (this.path$);\n    }\n    set title(title) {\n        this.title$ = title;\n    }\n    get title() {\n        return (this.title$);\n    }\n    get block() {\n        return (this.block$);\n    }\n    enterquery(force) {\n        this.depencies.getRoot()?.keyentqry(force);\n    }\n    executequery(force) {\n        this.depencies.getRoot()?.keyexeqry(force);\n    }\n    get popup() {\n        return (this.win != null);\n    }\n    getCurrentRow(block) {\n        let blk = this.getBlock(block);\n        if (blk == null)\n            return (0);\n        return (blk.row);\n    }\n    getCurrentRecord(block) {\n        let blk = this.getBlock(block);\n        if (blk == null)\n            return (0);\n        return (blk.record);\n    }\n    getBlock(bname) {\n        return (this.blkindex.get(bname.toLowerCase()));\n    }\n    async clear() {\n        for (let i = 0; i < this.blocks.length; i++) {\n            let event = new KeyTriggerEvent(Origin.Form, this.blocks[i].alias, null, keymap.clearblock, null);\n            await this.blocks[i].sendkey(event, keymap.clearblock);\n        }\n        if (this.blocks.length > 0)\n            this.block = this.blocks[0];\n        this.block?.focus();\n        return (true);\n    }\n    enableall() {\n        this.blocks.forEach((block) => { block.enableall(); });\n    }\n    disableall() {\n        this.blocks.forEach((block) => { block.disableall(); });\n    }\n    focus() {\n        this.block?.focus();\n    }\n    set block(block) {\n        if (this.block != null && this.block != block)\n            if (!this.block?.validate())\n                return;\n        this.block$ = block;\n    }\n    getChain() {\n        if (this.next == null)\n            return (this);\n        return (this.next.getChain());\n    }\n    initiated() {\n        return (this.initiated$);\n    }\n    setMenu(menu) {\n        if (this.app == null) {\n            this.menu$ = menu;\n            return;\n        }\n        this.app.deletemenu(this.menu$);\n        this.ddmenu = this.app.createmenu(menu);\n        this.app.showMenu(this.ddmenu);\n        this.menu$ = menu;\n    }\n    getMenu() {\n        return (this.menu$);\n    }\n    getApplication() {\n        return (this.app);\n    }\n    setRoot(root) {\n        this.root = root;\n    }\n    setParent(parent) {\n        this.parent = parent;\n    }\n    setApplication(app) {\n        this.app = app;\n        if (this.menu$ == null)\n            this.menu$ = new DefaultMenu();\n        this.conn = app.appstate.connection;\n        this.ddmenu = app.createmenu(this.menu$);\n    }\n    getInstanceID() {\n        return (this.inst);\n    }\n    setInstanceID(inst) {\n        this.inst = inst;\n    }\n    setModalWindow(win) {\n        this.win = win;\n    }\n    getModalWindow() {\n        return (this.win);\n    }\n    setCallback(func) {\n        this.callbackfunc = func;\n    }\n    setParameters(params) {\n        if (params != null)\n            this.parameters = params;\n        else\n            this.parameters = new Map();\n    }\n    getParameters() {\n        return (this.parameters);\n    }\n    getDropDownMenu() {\n        return (this.ddmenu);\n    }\n    async onCommit() {\n        this.blocks.forEach((blk) => { blk.removeLocks(); });\n    }\n    async execute(stmt, firstrow, firstcolumn) {\n        let response = await this.app.appstate.connection.invokestmt(stmt);\n        if (response[\"status\"] == \"failed\")\n            this.alert(JSON.stringify(response), \"Execute SQL Failed\");\n        let rows = response[\"rows\"];\n        if (rows == null) {\n            if (firstcolumn)\n                return (null);\n            return ([]);\n        }\n        if (!firstrow)\n            return (rows);\n        let row = [];\n        if (rows.length > 0)\n            row = rows[0];\n        if (!firstcolumn)\n            return (row);\n        let columns = Object.keys(row);\n        if (columns.length == 0)\n            return (null);\n        return (row[columns[0]]);\n    }\n    newForm(container) {\n        let utils = new Utils();\n        this.depencies = new MasterDetail(this);\n        // Add all form key triggers\n        let fktriggers = TriggerDefinitions.getFormKeyTriggers(this.name);\n        fktriggers.forEach((def) => { this.triggers.addTrigger(this.form, def.func, def.trigger, def.field, def.key); });\n        // Create blocks\n        let blockdef = BlockDefinitions.getBlocks(this.name);\n        blockdef.forEach((bdef) => { this.createBlock(bdef); });\n        if (this.creationerror)\n            return;\n        // DatabaseUsage for this form\n        let fusage = DatabaseDefinitions.getFormUsage(this.name);\n        // Merge form, block and block usage. Form usage overides\n        blockdef.forEach((bdef) => { this.setBlockUsage(fusage, bdef); });\n        container.finish();\n        // Get all fields per block\n        let bfields = new Map();\n        container.getBlocks().forEach((cb) => {\n            let block = this.blkindex.get(cb.name);\n            if (block == null) {\n                let dblk = new Block();\n                block = dblk[\"_impl_\"];\n                this.blocks.push(block);\n                this.blkindex.set(cb.name, block);\n                block.form = this;\n                block.alias = cb.name;\n                block.setApplication(this.app);\n                console.log(\"Block \" + cb.name + \" auto-created\");\n            }\n            bfields.set(block.alias, cb.fields);\n            cb.records.forEach((rec) => { block.addRecord(new Record(rec.row, rec.fields, rec.index)); });\n        });\n        this.blkindex.forEach((block) => {\n            this.depencies.addBlock(block);\n            block.setMasterDetail(this.depencies);\n            // Finish setup for each block\n            let keydefs = BlockDefinitions.getKeys(block.clazz);\n            let tabdef = utils.clone(TableDefinitions.get(block.clazz));\n            // Column definitions\n            let colindex = ColumnDefinitions.getIndex(block.clazz);\n            // Columns mapped to fields. Form definitions overrides\n            let colfields = FieldDefinitions.getColumnIndex(block.clazz);\n            let colffields = FieldDefinitions.getFormColumnIndex(this.name, block.alias);\n            colffields.forEach((def, fld) => { colfields.set(fld, def); });\n            // Create keys and decide on primary\n            let pkey = null;\n            let keys = new Map();\n            keydefs.forEach((kdef) => {\n                let key = keys.get(kdef.name);\n                if (key == null) {\n                    key = new Key(kdef.name);\n                    keys.set(kdef.name, key);\n                    kdef.columns.forEach((col) => {\n                        let fdef = colfields.get(col);\n                        if (fdef != null)\n                            col = fdef.name;\n                        key.addColumn(col);\n                    });\n                    if (kdef.unique && pkey == null)\n                        pkey = key;\n                    if (kdef.name.startsWith(\"primary\"))\n                        pkey = key;\n                }\n                else {\n                    console.log(\"key \" + kdef.name + \" is defined twice\");\n                }\n            });\n            this.depencies.addKeys(block, keys);\n            let fields = [];\n            let sorted = [];\n            // List of data-fields. First pkey\n            if (pkey != null) {\n                pkey.columns().forEach((part) => {\n                    let fname = part;\n                    let fdef = colfields.get(part);\n                    if (fdef != null)\n                        fname = fdef.name;\n                    sorted.push(colindex.get(part));\n                    fields.push(fname);\n                });\n            }\n            // Then other columns. First gather all definitions\n            let columns = ColumnDefinitions.get(block.clazz);\n            let fieldidx = FieldDefinitions.getFieldIndex(block.clazz);\n            let ffieldidx = FieldDefinitions.getFormFieldIndex(this.name, block.alias);\n            // Override by form\n            ffieldidx.forEach((def, fld) => { fieldidx.set(fld, def); });\n            columns.forEach((column) => {\n                let nonkey = true;\n                if (pkey != null && pkey.partof(column.name))\n                    nonkey = false;\n                if (nonkey) {\n                    sorted.push(column);\n                    let fname = null;\n                    let field = colfields.get(column.name);\n                    if (field != null)\n                        fname = field.name;\n                    else {\n                        field = fieldidx.get(column.name);\n                        if (field == null)\n                            fname = column.name;\n                        else {\n                            fname = field.name;\n                            field.column = column.name;\n                        }\n                    }\n                    fields.push(fname);\n                }\n            });\n            columns = sorted;\n            // Then other defined fields (block or form)\n            fieldidx.forEach((field) => { if (!fields.includes(field.name, 0))\n                fields.push(field.name); });\n            // Field overrides.\n            let overideidx = FieldDefinitions.getFieldIndex(block.clazz);\n            // Set field properties and add undefined fields\n            let bfieldlist = bfields.get(block.alias);\n            if (bfieldlist != null)\n                bfieldlist.forEach((inst) => {\n                    let fdef = utils.clone(fieldidx.get(inst.name));\n                    if (fdef == null) {\n                        // Auto create field definition\n                        fdef = { name: inst.name };\n                        fieldidx.set(inst.name, fdef);\n                        if (!fields.includes(inst.name, 0))\n                            fields.push(inst.name);\n                    }\n                    if (fdef.column == null) {\n                        // Map to column, unless column is mapped otherwise\n                        let cdef = colindex.get(fdef.name);\n                        if (cdef != null && colfields.get(fdef.name) == null)\n                            fdef.column = fdef.name;\n                    }\n                    // Save default definition\n                    fieldidx.set(inst.name, fdef);\n                    // Override def\n                    if (inst.id.length > 0) {\n                        let id = inst.name + \".\" + inst.id;\n                        let iddef = utils.clone(FieldDefinitions.getFormFieldOverride(this.name, block.alias, id));\n                        if (iddef == null)\n                            iddef = utils.clone(FieldDefinitions.getFieldOverride(block.clazz, id));\n                        if (iddef != null) {\n                            overideidx.set(id, iddef);\n                            iddef.column = fdef.column;\n                            fdef = iddef;\n                        }\n                    }\n                    let cdef = colindex.get(fdef.column);\n                    if (fdef.column != null && !fdef.hasOwnProperty(\"case\"))\n                        fdef.case = cdef.case;\n                    if (fdef.column != null && !fdef.hasOwnProperty(\"default\"))\n                        fdef.default = cdef.default;\n                    if (fdef.column != null && !fdef.hasOwnProperty(\"mandatory\"))\n                        fdef.mandatory = cdef.mandatory;\n                    if (fdef.type == null)\n                        fdef.type = FieldImplementation.guess(cdef?.type);\n                    if (fdef.fieldoptions == null)\n                        fdef.fieldoptions = {};\n                    if (!block.usage.update)\n                        fdef.fieldoptions.update = false;\n                    inst.definition = fdef;\n                    if (inst.parent.definition == null)\n                        inst.parent.setDefinition(fdef, false);\n                });\n            let def = new Map();\n            let ovf = new Map();\n            let lovs = new Map();\n            let idlovs = new Map();\n            def = LOVDefinitions.getblock(block.name);\n            def.forEach((lov, fld) => {\n                lov.inst = block;\n                lovs.set(fld, lov);\n            });\n            def = LOVDefinitions.getblockid(block.name);\n            def.forEach((lov, fld) => {\n                lov.inst = block;\n                lovs.set(fld, lov);\n            });\n            ovf = LOVDefinitions.getform(this.name, block.alias);\n            ovf.forEach((lov, fld) => {\n                lov.inst = this.form;\n                lovs.set(fld, lov);\n            });\n            ovf = LOVDefinitions.getidform(this.name, block.alias);\n            ovf.forEach((lov, fld) => {\n                lov.inst = this.form;\n                idlovs.set(fld, lov);\n            });\n            block.setListOfValues(lovs);\n            block.setIdListOfValues(idlovs);\n            // Form triggers\n            let ftriggers = TriggerDefinitions.getFormFieldTriggers(this.name, null);\n            // Field triggers for block\n            let bftriggers = TriggerDefinitions.getFieldTriggers(block.name);\n            let fftriggers = TriggerDefinitions.getFormFieldTriggers(this.name, block.alias);\n            // Form overrides\n            ftriggers.forEach((def, trg) => { bftriggers.set(trg, def); });\n            fftriggers.forEach((def, trg) => { bftriggers.set(trg, def); });\n            bftriggers.forEach((def) => {\n                if (!def.blktrg && def.block == block.alias) {\n                    // Blocktrigger defined on form\n                    block[\"triggers\"].addTrigger(this.form, def.func, def.trigger, def.field);\n                }\n                else {\n                    if (!def.blktrg)\n                        this.triggers.addTrigger(this.form, def.func, def.trigger, def.field);\n                    else\n                        block[\"triggers\"].addTrigger(block.block, def.func, def.trigger, def.field);\n                }\n            });\n            // Key triggers for block\n            let bktriggers = TriggerDefinitions.getKeyTriggers(block.name);\n            // delete block-triggers if defined on form\n            fktriggers.forEach((_def, trg) => { bktriggers.delete(trg); });\n            bktriggers.forEach((def) => { block[\"triggers\"].addTrigger(block.block, def.func, def.trigger, def.field, def.key); });\n            // Create data-backing table\n            let table = null;\n            let rows = block.records.length;\n            if (tabdef != null)\n                table = new Table(this.conn, tabdef, pkey, columns, fieldidx, rows);\n            block.data = new FieldData(block, table, fields, fieldidx);\n            // Start form\n            block.ready = true;\n        });\n        // Get all fields on form\n        this.fields$ = container.fields;\n        if (this.blocks.length > 0)\n            this.block$ = this.blocks[0];\n        this.groupfields();\n        this.blocks.forEach((block) => {\n            if (block.records.length > 0)\n                block.records[0].enable(true);\n        });\n        this.depencies.addJoins(JOINDefinitions.get(this.name));\n        this.app.newForm(this);\n        this.initiated$ = true;\n        if (this.fields$.length > 0)\n            this.fields$[0].focus();\n    }\n    async showform(form, destroy, parameters) {\n        if (!this.validate())\n            return;\n        if (this.win == null) {\n            await this.app.showform(form, destroy, parameters);\n        }\n        else {\n            await this.replaceform(form, destroy, parameters);\n        }\n    }\n    async replaceform(form, destroy, parameters) {\n        let utils = new Utils();\n        let name = utils.getName(form);\n        let id = this.parent.stack.get(name);\n        this.onHide();\n        // newform\n        if (destroy)\n            this.app.closeform(this, destroy);\n        // create\n        if (id == null) {\n            id = this.app.getNewInstance(form);\n            this.parent.stack.set(id.name, id);\n        }\n        this.parent.next = id.impl;\n        id.impl.setParent(this.parent);\n        let inst = this.app.getInstance(id);\n        await this.app.preform(id.impl, parameters, inst, false);\n        if (this.win != null) {\n            this.win.newForm(inst);\n            id.impl.setRoot(this.root);\n        }\n        else {\n            id.impl.setRoot(this);\n            this.app.showinstance(inst);\n        }\n    }\n    async callform(form, destroy, parameters) {\n        let utils = new Utils();\n        let name = utils.getName(form);\n        let id = this.stack.get(name);\n        this.onHide();\n        // newform\n        if (id != null && destroy) {\n            this.app.closeform(id.impl, destroy);\n            id = null;\n        }\n        // create\n        if (id == null) {\n            id = this.app.getNewInstance(form);\n            if (id == null)\n                return (null);\n            this.stack.set(name, id);\n        }\n        this.next = id.impl;\n        id.impl.setParent(this);\n        let inst = this.app.getInstance(id);\n        await this.app.preform(id.impl, parameters, inst, false);\n        if (this.win != null) {\n            this.win.newForm(inst);\n            id.impl.setRoot(this.root);\n        }\n        else {\n            id.impl.setRoot(this);\n            this.app.showinstance(inst);\n        }\n        return (id.impl);\n    }\n    wasCancelled() {\n        return (this.cancelled);\n    }\n    cancel() {\n        this.cancelled = true;\n        this.close(true);\n    }\n    onClose(impl, cancelled) {\n        this.next = null;\n        try {\n            if (this.callbackfunc != null)\n                this.form[this.callbackfunc.name](impl.form, cancelled);\n        }\n        catch (error) {\n            console.log(error);\n        }\n        if (cancelled && this.parent != null)\n            this.parent.onClose(this, cancelled);\n    }\n    async close(destroy) {\n        let win = (this.win != null);\n        let menu = (this.root == null);\n        let root = (this.parent == null);\n        if (!this.cancelled && !destroy && !await this.validate())\n            return;\n        this.next = null;\n        if (this.parent != null)\n            this.parent.onClose(this, this.cancelled);\n        if (this.cancelled) {\n            this.cancelled = false;\n            if (menu) {\n                //chain, started from \"menu\", was cancelled\n                this.app.closeform(this, true);\n            }\n            else {\n                //chain, started from form, was cancelled\n                this.parent.stack.delete(this.name);\n                this.app.closeInstance(this.inst, true);\n                this.app.showTitle(this.root.title);\n            }\n            if (!menu)\n                this.root.onShow();\n            return;\n        }\n        if (!win) {\n            //Normal behaivior\n            this.app.closeform(this, destroy);\n            if (!root)\n                this.parent.onShow();\n            return;\n        }\n        if (win && root) {\n            //Root window\n            this.app.closeform(this, destroy);\n            if (!root)\n                this.parent.onShow();\n            this.win.closeWindow();\n            return;\n        }\n        //child closed\n        this.app.closeInstance(this.inst, destroy);\n        if (destroy)\n            this.parent.stack.delete(this.name);\n        let pinst = this.parent.getInstanceID();\n        this.app.showTitle(this.parent.title);\n        if (pinst != null) {\n            //Parent is modal\n            let inst = this.app.getInstance(pinst);\n            this.win.newForm(inst);\n        }\n        else\n            this.win.closeWindow();\n        this.parent.onShow();\n    }\n    getCallStack() {\n        let stack = [];\n        this.stack.forEach((id) => {\n            stack.push(id.impl.form);\n        });\n        return (stack);\n    }\n    clearStack() {\n        this.stack.forEach((id) => {\n            id.impl.clearStack();\n            if (id.ref != null)\n                this.app.closeInstance(id, true);\n        });\n        this.stack.clear();\n    }\n    createBlock(blockdef) {\n        let impl = this.blkindex.get(blockdef.alias);\n        if (impl != null) {\n            console.log(\"Block alias \" + blockdef.alias + \" defined twice\");\n            return;\n        }\n        let block = null;\n        if (blockdef.prop != null) {\n            block = this.form[blockdef.prop];\n            if (block == null && blockdef.component != null) {\n                block = new blockdef.component();\n                this.form[blockdef.prop] = block;\n            }\n        }\n        else {\n            if (blockdef.component != null)\n                block = new blockdef.component();\n        }\n        if (block != null)\n            impl = block[\"_impl_\"];\n        if (impl == null) {\n            this.creationerror = true;\n            console.log(this.name + \" cannot create instance of \" + blockdef.alias + \" bailing out\");\n            return;\n        }\n        let cname = block.constructor.name;\n        if (!(impl instanceof BlockImpl)) {\n            this.creationerror = true;\n            console.log(\"component: \" + cname + \" is not an instance of block bailing out\");\n            return;\n        }\n        let alias = blockdef.alias;\n        if (alias == null) {\n            alias = block.constructor.name;\n            alias = BlockDefinitions.getDefaultAlias(alias);\n        }\n        alias = alias.toLowerCase();\n        impl.alias = alias;\n        blockdef.alias = alias;\n        this.blocks.push(impl);\n        this.blkindex.set(alias, impl);\n        impl.form = this;\n        impl.setApplication(this.app);\n    }\n    setBlockUsage(fusage, blockdef) {\n        let block = this.blkindex.get(blockdef.alias);\n        let usage = {};\n        let pusage = blockdef.databaseopts;\n        let dusage = DatabaseDefinitions.getBlockDefault(block.clazz);\n        if (dusage == null)\n            dusage = {};\n        if (pusage == null)\n            pusage = {};\n        if (fusage == null)\n            fusage = {};\n        usage = DBUsage.merge(pusage, dusage);\n        usage = DBUsage.override(fusage, usage);\n        usage = DBUsage.complete(usage);\n        block.usage = usage;\n    }\n    // Sort fields by group and set tabindex\n    groupfields(groups) {\n        let seq = 1;\n        if (groups == null)\n            groups = [];\n        let index = new Map();\n        this.fields$.forEach((field) => {\n            let group = index.get(field.group);\n            if (group == null) {\n                group = [];\n                index.set(field.group, group);\n                let exists = false;\n                for (let i = 0; i < groups.length; i++) {\n                    if (groups[i] == field.group) {\n                        exists = true;\n                        break;\n                    }\n                }\n                if (!exists)\n                    groups.push(field.group);\n            }\n            group.push(field);\n        });\n        groups.forEach((name) => {\n            let group = index.get(name);\n            if (group != null) {\n                group.forEach((field) => { field.seq = seq++; });\n            }\n        });\n        this.fields$ = this.fields$.sort((a, b) => { return (a.seq - b.seq); });\n        let blocks = new Map();\n        this.fields$.forEach((field) => {\n            let fields = blocks.get(field.block);\n            if (fields == null) {\n                fields = [];\n                blocks.set(field.block, fields);\n            }\n            fields.push(field);\n        });\n        blocks.forEach((fields, bname) => { this.blkindex.get(bname).setFields(fields); });\n    }\n    async validate() {\n        if (this.block == null)\n            return (true);\n        else\n            return (await this.block.validate());\n    }\n    onShow() {\n    }\n    onHide() {\n    }\n    async sendkey(event, key) {\n        if (key == keymap.close) {\n            await this.close(false);\n            return (true);\n        }\n        if (event == null)\n            event = new KeyTriggerEvent(Origin.Form, null, null, keymap.clearblock, null);\n        return (await this.block?.sendkey(event, key));\n    }\n    addTrigger(instance, func, types) {\n        this.triggers.addTrigger(instance, func, types);\n    }\n    addKeyTrigger(instance, func, keys) {\n        this.triggers.addTrigger(instance, func, Trigger.Key, null, keys);\n    }\n    addFieldTrigger(instance, func, types, fields, keys) {\n        this.triggers.addTrigger(instance, func, types, fields, keys);\n    }\n    async onEvent(event, field, type, key) {\n        if (this.app == null)\n            return;\n        if (type == \"focus\")\n            this.block = this.blkindex.get(field.block);\n        if (type == \"key\" && key == keymap.prevfield) {\n            if (event[\"preventDefault\"] != null)\n                event.preventDefault();\n            let row = field.row;\n            let seq = field.seq - 1;\n            let block = field.block;\n            for (let i = 0; i < this.fields$.length; i++) {\n                if (--seq < 0)\n                    seq = this.fields$.length - 1;\n                if (this.fields$[seq].row == row && this.fields$[seq].block == block) {\n                    if (this.fields$[seq].enabled) {\n                        this.fields$[seq].focus();\n                        break;\n                    }\n                }\n            }\n        }\n        if (type == \"key\" && key == keymap.nextfield) {\n            if (event[\"preventDefault\"] != null)\n                event.preventDefault();\n            let row = field.row;\n            let seq = field.seq - 1;\n            let block = field.block;\n            for (let i = 0; i < this.fields$.length; i++) {\n                if (++seq >= this.fields$.length)\n                    seq = 0;\n                if (this.fields$[seq].row == row && this.fields$[seq].block == block) {\n                    if (this.fields$[seq].enabled) {\n                        this.fields$[seq].focus();\n                        break;\n                    }\n                }\n            }\n        }\n        if (type == \"key\" && key == keymap.prevblock) {\n            if (event[\"preventDefault\"] != null)\n                event.preventDefault();\n            let seq = field.seq - 1;\n            let block = field.block;\n            let row = 0;\n            let next = \"\";\n            for (let i = 0; i < this.fields$.length; i++) {\n                if (--seq < 0)\n                    seq = this.fields$.length - 1;\n                if (this.fields$[seq].block != block) {\n                    let blk = this.fields$[seq].block;\n                    if (blk != next) {\n                        let nb = this.blkindex.get(blk);\n                        let nf = nb.field;\n                        if (nf.enabled) {\n                            nf.focus();\n                            break;\n                        }\n                        next = blk;\n                        row = nb.row;\n                    }\n                    if (this.fields$[seq].row == row && this.fields$[seq].enabled) {\n                        this.fields$[seq].focus();\n                        break;\n                    }\n                }\n            }\n        }\n        if (type == \"key\" && key == keymap.nextblock) {\n            if (event[\"preventDefault\"] != null)\n                event.preventDefault();\n            let seq = field.seq - 1;\n            let block = field.block;\n            let row = 0;\n            let next = \"\";\n            for (let i = 0; i < this.fields$.length; i++) {\n                if (++seq >= this.fields$.length)\n                    seq = 0;\n                if (this.fields$[seq].block != block) {\n                    let blk = this.fields$[seq].block;\n                    if (blk != next) {\n                        let nb = this.blkindex.get(blk);\n                        let nf = nb.field;\n                        if (nf.enabled) {\n                            nf.focus();\n                            break;\n                        }\n                        next = blk;\n                        row = nb.row;\n                    }\n                    if (this.fields$[seq].row == row && this.fields$[seq].enabled) {\n                        this.fields$[seq].focus();\n                        break;\n                    }\n                }\n            }\n        }\n        if (type == \"key\" && key == keymap.clearform) {\n            let event = new KeyTriggerEvent(Origin.Form, null, null, keymap.clearform, null);\n            if (!await this.invokeTriggers(Trigger.Key, event, keymap.clearform))\n                return (false);\n            this.clear();\n        }\n    }\n    async invokeTriggers(type, event, key) {\n        return (await this.triggers.invokeTriggers(type, event, key));\n    }\n    async invokeFieldTriggers(type, field, event, key) {\n        return (await this.triggers.invokeFieldTriggers(type, field, event, key));\n    }\n    alert(msg, title, width, height) {\n        MessageBox.show(this.app, msg, title, width, height);\n    }\n}\nFormImpl.id = 0;\n\nclass Form {\n    // dont rename impl as it is read behind the scenes\n    constructor() {\n        this._impl_ = new FormImpl(this);\n    }\n    get name() {\n        return (this.constructor.name);\n    }\n    set title(title) {\n        this._impl_.title = title;\n    }\n    get title() {\n        return (this._impl_.title);\n    }\n    set menu(menu) {\n        this._impl_.setMenu(menu);\n    }\n    get menu() {\n        return (this._impl_.getMenu());\n    }\n    focus() {\n        this._impl_.focus();\n    }\n    get block() {\n        return (this._impl_.block?.block);\n    }\n    get connected() {\n        return (this._impl_.getApplication().connected);\n    }\n    groupfields(groups) {\n        this._impl_.groupfields(groups);\n    }\n    get popup() {\n        return (this._impl_.popup);\n    }\n    get colors() {\n        return (this._impl_.getApplication().config.colors);\n    }\n    getBlockFilter(block) {\n        let blk = this.getBlock(block);\n        if (blk != null && blk.searchfilter.length > 0)\n            return (this.colors.rowindicator);\n        return (\"\");\n    }\n    showRowIndicator(block, row) {\n        if (row == this.getCurrentRow(block))\n            return (true);\n        return (false);\n    }\n    getRowIndicator(block, row) {\n        if (row == this.getCurrentRow(block))\n            return (this.colors.rowindicator);\n        return (\"\");\n    }\n    getCurrentRow(block) {\n        return (this._impl_.getCurrentRow(block));\n    }\n    getCurrentRecord(block) {\n        return (this._impl_.getCurrentRecord(block));\n    }\n    getBlock(block) {\n        let impl = this._impl_.getBlock(block);\n        if (impl != null)\n            return (impl.block);\n        return (null);\n    }\n    addListOfValues(block, func, field, id) {\n        let impl = this._impl_.getBlock(block);\n        if (impl != null)\n            impl.addListOfValues(true, func, field, id);\n    }\n    newform(form, parameters) {\n        this._impl_.showform(form, true, parameters);\n    }\n    showform(form, parameters) {\n        this._impl_.showform(form, false, parameters);\n    }\n    async callform(form, parameters) {\n        let impl = await this._impl_.callform(form, false, parameters);\n        if (impl != null)\n            return (impl.form);\n        return (null);\n    }\n    getCallStack() {\n        return (this._impl_.getCallStack());\n    }\n    clearCallStack() {\n        this._impl_.clearStack();\n    }\n    getTable(block) {\n        return (this.getBlock(block)?.table);\n    }\n    get parameters() {\n        return (this._impl_.getParameters());\n    }\n    getValue(block, record, field) {\n        let blk = this.getBlock(block);\n        if (blk != null)\n            return (blk.getValue(record, field));\n        return (null);\n    }\n    async setValue(block, record, field, value) {\n        let blk = this.getBlock(block);\n        if (blk != null)\n            return (await blk.setValue(record, field, value));\n        return (false);\n    }\n    cancelled() {\n        return (this._impl_.wasCancelled());\n    }\n    async clear() {\n        return (await this._impl_.clear());\n    }\n    cancel() {\n        this._impl_.cancel();\n    }\n    async close(dismiss) {\n        await this._impl_.close(dismiss);\n    }\n    async sendKey(key) {\n        return (await this._impl_.sendkey(null, key));\n    }\n    setCallback(func) {\n        this._impl_.setCallback(func);\n    }\n    addTrigger(func, types) {\n        this._impl_.addTrigger(this, func, types);\n    }\n    addKeyTrigger(func, keys) {\n        this._impl_.addKeyTrigger(this, func, keys);\n    }\n    enterquery(force) {\n        this._impl_.enterquery(force);\n    }\n    executequery(force) {\n        this._impl_.executequery(force);\n    }\n    prevBlock() {\n        this._impl_.block.sendkey(null, keymap.prevblock);\n    }\n    nextBlock() {\n        this._impl_.block.sendkey(null, keymap.nextblock);\n    }\n    async execute(stmt, firstrow, firstcolumn) {\n        return (this._impl_.execute(stmt, firstrow, firstcolumn));\n    }\n    addFieldTrigger(listener, types, fields) {\n        this._impl_.addFieldTrigger(this, listener, types, fields);\n    }\n    ngOnInit() {\n        this._impl_.getApplication().setContainer();\n    }\n    ngAfterViewInit() {\n        let container = this._impl_.getApplication().getContainer();\n        this._impl_.getApplication().dropContainer();\n        this._impl_.newForm(container);\n    }\n    alert(message, title, width, height) {\n        if (title == null)\n            title = this.name;\n        this._impl_.alert(message, title, width, height);\n    }\n}\nForm.ɵfac = function Form_Factory(t) { return new (t || Form)(); };\nForm.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: Form, selectors: [[\"ng-component\"]], decls: 0, vars: 0, template: function Form_Template(rf, ctx) { }, encapsulation: 2 });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(Form, [{\n        type: Component,\n        args: [{ template: '' }]\n    }], function () { return []; }, null); })();\n\nvar Case;\n(function (Case) {\n    Case[Case[\"upper\"] = 0] = \"upper\";\n    Case[Case[\"lower\"] = 1] = \"lower\";\n    Case[Case[\"mixed\"] = 2] = \"mixed\";\n})(Case || (Case = {}));\n\nconst _c0$6 = [\"container\"];\nclass FieldInstance {\n    constructor(ctx) {\n        this.fgroup$ = null;\n        this.valid$ = true;\n        this.lvalid = true;\n        this.enforce = false;\n        this.enabled$ = false;\n        this.readonly$ = false;\n        this.mandatory$ = false;\n        this.firstchange = true;\n        this.values = null;\n        this.container = null;\n        this.state$ = RecordState.na;\n        this.options$ = { query: true, insert: true, update: true, navigable: true };\n        this.id$ = \"\";\n        this.row$ = -1;\n        this.name$ = \"\";\n        this.block$ = \"\";\n        this.group$ = \"\";\n        this.class$ = \"\";\n        this.style$ = \"\";\n        this.size$ = null;\n        this.value$ = null;\n        this.app = ctx.app[\"_impl_\"];\n    }\n    get id() {\n        return (this.id$);\n    }\n    get row() {\n        return (this.row$);\n    }\n    set row(row) {\n        this.row$ = row;\n    }\n    set seq(seq) {\n        if (this.clazz != null)\n            this.clazz.tabindex = seq;\n    }\n    get seq() {\n        if (this.clazz == null)\n            return (0);\n        else\n            return (this.clazz.tabindex);\n    }\n    get name() {\n        return (this.name$);\n    }\n    get fname() {\n        let name = this.block$ + \".\" + this.name;\n        if (this.id.length > 0)\n            name += \".\" + this.id;\n        name += \"[\" + this.row + \"](\" + this.guid + \")\";\n        return (name);\n    }\n    set guid(guid) {\n        this.guid$ = guid;\n    }\n    get guid() {\n        return (this.guid$);\n    }\n    get block() {\n        return (this.block$);\n    }\n    get group() {\n        return (this.group$);\n    }\n    get value() {\n        if (this.clazz == null)\n            return (null);\n        let value = this.clazz.value;\n        if ((\"\" + value).trim().length == 0)\n            value = null;\n        return (value);\n    }\n    get parent() {\n        return (this.fgroup$);\n    }\n    set parent(field) {\n        this.fgroup$ = field;\n    }\n    get fieldoptions() {\n        return (this.options$);\n    }\n    get enabled() {\n        return (this.enabled$);\n    }\n    get state() {\n        return (this.state$);\n    }\n    set state(state) {\n        this.state$ = state;\n    }\n    set readonly(flag) {\n        this.readonly$ = flag;\n    }\n    get readonly() {\n        return (this.readonly$);\n    }\n    get mandatory() {\n        return (this.mandatory$);\n    }\n    setPossibleValues(values, enforce) {\n        this.enforce = enforce;\n        let type = this.clazz.constructor.name;\n        if (type == \"DropDown\")\n            this.setDropDownValues(values);\n        if (type == \"TextField\")\n            this.setTextFieldValues(values);\n    }\n    setTextFieldValues(values) {\n        let name = this.block + \".\" + this.name;\n        if (this.id.length > 0)\n            name += \".\" + this.id;\n        let list = document.getElementById(name);\n        if (list == null) {\n            let kvpair = true;\n            if (values instanceof Map)\n                this.values = new Map(values);\n            else {\n                kvpair = false;\n                this.values = new Map();\n                values.forEach((val) => this.values.set(val, val));\n            }\n            list = document.createElement(\"datalist\");\n            list.setAttribute(\"id\", name);\n            this.values.forEach((val, key) => {\n                let option = document.createElement(\"option\");\n                option.text = val;\n                if (kvpair)\n                    option.value = key;\n                list.append(option);\n            });\n            this.clazz.element.appendChild(list);\n        }\n        this.clazz.element.setAttribute(\"list\", name);\n    }\n    setDropDownValues(xvalues) {\n        if (xvalues instanceof Map)\n            this.values = new Map(xvalues);\n        else {\n            this.values = new Map();\n            xvalues.forEach((val) => this.values.set(val, val));\n        }\n        this.values.forEach((val, key) => {\n            let option = document.createElement(\"option\");\n            option.text = val;\n            option.value = key;\n            this.clazz.element.appendChild(option);\n        });\n    }\n    set mandatory(flag) {\n        this.mandatory$ = flag;\n        if (flag)\n            this.addClass(\"mandatory\");\n        else\n            this.removeClass(\"mandatory\");\n    }\n    focus() {\n        if (!this.enabled)\n            return (false);\n        setTimeout(() => { this.clazz.focus(); }, 0);\n        return (true);\n    }\n    blur() {\n        setTimeout(() => { this.clazz.element.blur(); }, 0);\n    }\n    addClass(clazz) {\n        if (this.clazz != null)\n            this.clazz.element.classList.add(clazz);\n    }\n    removeClass(clazz) {\n        if (this.clazz != null)\n            this.clazz.element.classList.remove(clazz);\n    }\n    get current() {\n        return (this.guid.startsWith(\"c\"));\n    }\n    set value(value) {\n        if (value == null)\n            value = \"\";\n        if (this.clazz != null)\n            this.clazz.value = value;\n    }\n    get valid() {\n        return (this.valid$);\n    }\n    get dirty() {\n        return (!this.firstchange);\n    }\n    validate() {\n        if (this.state == RecordState.qmode || this.state == RecordState.na)\n            return (true);\n        if (!this.clazz.validate())\n            return (false);\n        if (this.mandatory && (this.value == null || (\"\" + this.value).length == 0))\n            return (false);\n        if (this.enforce && this.values != null && this.value != null)\n            if (!this.values.has(this.value))\n                return (false);\n        return (true);\n    }\n    set valid(flag) {\n        if (flag == this.valid$)\n            return;\n        if (flag) {\n            this.valid$ = flag;\n            this.removeClass(\"invalid\");\n        }\n        else {\n            if (this.enabled && !this.readonly) {\n                this.valid$ = flag;\n                this.addClass(\"invalid\");\n            }\n        }\n    }\n    enable() {\n        this.setInputState();\n    }\n    disable() {\n        this.valid = true;\n        this.enabled$ = false;\n        this.readonly$ = true;\n        this.state = RecordState.na;\n        if (this.clazz != null) {\n            this.clazz.enable = false;\n            this.clazz.readonly = true;\n        }\n    }\n    setInputState() {\n        this.enabled$ = false;\n        if (!this.options$.navigable) {\n            if (this.clazz != null)\n                this.clazz.enable = false;\n            return;\n        }\n        if (this.state$ == RecordState.na)\n            this.enabled$ = true;\n        else if (this.state$ == RecordState.insert && this.options$.insert)\n            this.enabled$ = true;\n        else if (this.state$ == RecordState.update && this.options$.update)\n            this.enabled$ = true;\n        else if (this.state$ == RecordState.qmode && this.options$.query)\n            this.enabled$ = true;\n        if (this.clazz != null) {\n            if (!this.enabled$ && this.state$ == RecordState.update) {\n                this.enabled$ = true;\n                this.readonly$ = true;\n            }\n            this.clazz.enable = this.enabled$;\n            this.clazz.readonly = this.readonly$;\n        }\n    }\n    get definition() {\n        return (this.def);\n    }\n    set definition(def) {\n        let override = false;\n        if (this.def != null) {\n            override = true;\n            if (def.hasOwnProperty(\"case\"))\n                this.def.case = def.case;\n            if (def.hasOwnProperty(\"mandatory\"))\n                this.def.mandatory = def.mandatory;\n            if (def.hasOwnProperty(\"type\"))\n                this.def.type = def.type;\n            if (def.hasOwnProperty(\"fieldoptions\")) {\n                if (def.hasOwnProperty(\"query\"))\n                    this.def.fieldoptions.query = def.fieldoptions.query;\n                if (def.hasOwnProperty(\"insert\"))\n                    this.def.fieldoptions.insert = def.fieldoptions.insert;\n                if (def.hasOwnProperty(\"update\"))\n                    this.def.fieldoptions.update = def.fieldoptions.update;\n                if (def.hasOwnProperty(\"navigable\"))\n                    this.def.fieldoptions.navigable = def.fieldoptions.navigable;\n            }\n        }\n        this.def = def;\n        this.setType(def.type);\n        if (!this.def.hasOwnProperty(\"case\"))\n            this.def.case = Case.mixed;\n        if (this.def.hasOwnProperty(\"mandatory\"))\n            this.mandatory = this.def.mandatory;\n        if (this.def.fieldoptions != null) {\n            this.options$ = this.def.fieldoptions;\n            if (!this.options$.hasOwnProperty(\"query\"))\n                this.options$.query = true;\n            if (!this.options$.hasOwnProperty(\"insert\"))\n                this.options$.insert = true;\n            if (!this.options$.hasOwnProperty(\"update\"))\n                this.options$.update = true;\n            if (!this.options$.hasOwnProperty(\"navigable\"))\n                this.options$.navigable = true;\n        }\n        if (override)\n            this.setInputState();\n    }\n    setType(type) {\n        let seq = this.seq;\n        this.container.innerHTML = null;\n        let cname = FieldImplementation.getClass(FieldType[type]);\n        if (cname != null) {\n            this.clazz = new cname();\n            this.container.innerHTML = this.clazz.html;\n            this.clazz.element = this.container.children[0];\n            if (this.size$ != null)\n                this.clazz.size = +this.size$;\n            if (this.value$ != null)\n                this.clazz.value = this.value$;\n            if (this.class$ != \"\")\n                this.clazz.element.classList.add(this.class$);\n            if (this.style$ != \"\")\n                this.clazz.element.style.cssText = this.style$;\n            this.seq = seq;\n            this.disable();\n            this.addTriggers();\n            // Ugly, but need to set name\n            this.clazz.element.name = this.name;\n        }\n    }\n    async onEvent(event) {\n        let keypress = false;\n        if (this.fgroup$ == null)\n            return;\n        if (event.type == \"focus\") {\n            this.firstchange = true;\n            this.lvalue = this.value;\n            this.lvalid = this.valid$;\n            this.fgroup$[\"onEvent\"](event, this, \"focus\");\n        }\n        if (event.type == \"blur\") {\n            if (this.dirty && this.value == this.lvalue && !this.lvalid)\n                this.valid = false;\n            this.fgroup$[\"onEvent\"](event, this, \"blur\");\n        }\n        if (event.type == \"click\" || event.type == \"dblclick\")\n            this.fgroup$[\"onEvent\"](event, this, event.type);\n        if (event.type == \"change\") {\n            if (this.enabled && !this.readonly)\n                if (!this.valid)\n                    this.fgroup$.valid = false;\n            this.valid = this.validate();\n            if (this.clazz instanceof CheckBox)\n                this.value = this.value$;\n            if (this.clazz instanceof RadioButton)\n                this.value = this.value$;\n            this.fgroup$[\"onEvent\"](event, this, \"change\");\n        }\n        if (event.type == \"keydown\" && event.keyCode == 8)\n            keypress = true;\n        if (event.type == \"keydown\" && !keypress) {\n            if (+event.keyCode >= 16 && +event.keyCode <= 20)\n                return;\n            let keydef = {\n                code: event.keyCode,\n                alt: event.altKey,\n                ctrl: event.ctrlKey,\n                meta: event.metaKey,\n                shift: event.shiftKey\n            };\n            let map = KeyMapper.map(keydef);\n            let key = KeyMapper.keymap(map);\n            if (key == keymap.paste)\n                console.log(\"paste\");\n            if (key == keymap.undo || key == keymap.paste) {\n                setTimeout(() => { this.blur(); }, 1);\n                setTimeout(() => { this.focus(); }, 1);\n                return;\n            }\n            if (key != null) {\n                // handled by application\n                if (key == keymap.close ||\n                    key == keymap.listval ||\n                    key == keymap.connect ||\n                    key == keymap.disconnect ||\n                    key == keymap.commit ||\n                    key == keymap.rollback ||\n                    key == keymap.delete ||\n                    key == keymap.clearform ||\n                    key == keymap.insertafter ||\n                    key == keymap.insertbefore ||\n                    key == keymap.enterquery ||\n                    key == keymap.executequery) {\n                    this.fgroup$.copy(this);\n                    return;\n                }\n                this.fgroup$[\"onEvent\"](event, this, \"key\", key);\n            }\n        }\n        if (event.type == \"keypress\" || keypress) {\n            if (this.readonly)\n                return;\n            if (this.firstchange && (event.key.length == 1 || event.keyCode == KeyCodes.backspace)) {\n                this.firstchange = false;\n                if (!this.valid)\n                    this.fgroup$.valid = true;\n                this.fgroup$[\"onEvent\"](event, this, \"fchange\");\n            }\n            let value = this.value;\n            setTimeout(() => { this.continious(event, value); }, 0);\n        }\n    }\n    continious(event, value) {\n        if (this.value == value)\n            return;\n        if (this.def.type == FieldType.integer) {\n            if (!this.valnumber(value))\n                return;\n        }\n        if (this.def.type == FieldType.decimal) {\n            if (!this.valdecimal(value))\n                return;\n        }\n        if (this.value != null && this.def.case == Case.lower)\n            this.value = (\"\" + this.value).toLowerCase();\n        if (this.value != null && this.def.case == Case.upper)\n            this.value = (\"\" + this.value).toUpperCase();\n        this.fgroup$.onEvent(event, this, \"cchange\");\n    }\n    valnumber(value) {\n        if (this.state == RecordState.qmode)\n            return (true);\n        let nvalue = this.value;\n        if (nvalue == null || nvalue.trim().length == 0)\n            return (true);\n        let numeric = !isNaN(+nvalue);\n        if (!numeric || nvalue.indexOf(\".\") >= 0) {\n            this.value = value;\n            return (false);\n        }\n        return (true);\n    }\n    valdecimal(value) {\n        if (this.state == RecordState.qmode)\n            return (true);\n        let nvalue = this.value;\n        if (nvalue == null || nvalue.trim().length == 0)\n            return (true);\n        let numeric = !isNaN(+nvalue);\n        if (!numeric) {\n            this.value = value;\n            return (false);\n        }\n        return (true);\n    }\n    ngAfterViewInit() {\n        this.container = this.containerelem?.nativeElement;\n        this.id$ = this.id$.toLowerCase();\n        this.name$ = this.name$.toLowerCase();\n        this.block$ = this.block$.toLowerCase();\n        this.app.getContainer().register(this);\n    }\n    addTriggers() {\n        let impl = this.container.firstChild;\n        if (impl == null)\n            return;\n        impl.addEventListener(\"blur\", (event) => { this.onEvent(event); });\n        impl.addEventListener(\"focus\", (event) => { this.onEvent(event); });\n        impl.addEventListener(\"change\", (event) => { this.onEvent(event); });\n        impl.addEventListener(\"click\", (event) => { this.onEvent(event); });\n        impl.addEventListener(\"keydown\", (event) => { this.onEvent(event); });\n        impl.addEventListener(\"keypress\", (event) => { this.onEvent(event); });\n        impl.addEventListener(\"dblclick\", (event) => { this.onEvent(event); });\n    }\n}\nFieldInstance.ɵfac = function FieldInstance_Factory(t) { return new (t || FieldInstance)(i0.ɵɵdirectiveInject(Context)); };\nFieldInstance.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: FieldInstance, selectors: [[\"field\"]], viewQuery: function FieldInstance_Query(rf, ctx) { if (rf & 1) {\n        i0.ɵɵviewQuery(_c0$6, 5, ElementRef);\n    } if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.containerelem = _t.first);\n    } }, inputs: { id$: [\"id\", \"id$\"], row$: [\"row\", \"row$\"], name$: [\"name\", \"name$\"], block$: [\"block\", \"block$\"], group$: [\"group\", \"group$\"], class$: [\"class\", \"class$\"], style$: [\"style\", \"style$\"], size$: [\"size\", \"size$\"], value$: [\"value\", \"value$\"] }, decls: 2, vars: 0, consts: [[\"container\", \"\"]], template: function FieldInstance_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelement(0, \"span\", null, 0);\n    } }, encapsulation: 2 });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FieldInstance, [{\n        type: Component,\n        args: [{\n                selector: 'field',\n                template: '<span #container></span>'\n            }]\n    }], function () { return [{ type: Context }]; }, { id$: [{\n            type: Input,\n            args: [\"id\"]\n        }], row$: [{\n            type: Input,\n            args: [\"row\"]\n        }], name$: [{\n            type: Input,\n            args: [\"name\"]\n        }], block$: [{\n            type: Input,\n            args: [\"block\"]\n        }], group$: [{\n            type: Input,\n            args: [\"group\"]\n        }], class$: [{\n            type: Input,\n            args: [\"class\"]\n        }], style$: [{\n            type: Input,\n            args: [\"style\"]\n        }], size$: [{\n            type: Input,\n            args: [\"size\"]\n        }], value$: [{\n            type: Input,\n            args: [\"value\"]\n        }], containerelem: [{\n            type: ViewChild,\n            args: [\"container\", { read: ElementRef }]\n        }] }); })();\n\nclass DateUtils {\n    parse(datestr, format) {\n        return (dates.parse(datestr, format));\n    }\n    format(date, format) {\n        return (dates.format(date, format));\n    }\n}\n\nconst _c0$5 = [\"html\"];\nclass FormList {\n    constructor(ctx) {\n        this.page = \"\";\n        this.ready = false;\n        this.name = \"/\";\n        this.conf = ctx.conf;\n        this.app = ctx.app[\"_impl_\"];\n        this.root = new Folder(this.name);\n        this.conf.notify(this, \"setColors\");\n        this.app.setFormList(this);\n        this.formsdef = this.app.getFormsList();\n        this.parse();\n        this.page += \"<style>\\n\";\n        this.page += this.styles() + \"\\n\";\n        this.page += \"</style>\\n\";\n        this.page += \"<div class='formlist'>\\n\";\n        this.page += this.print(\"/\", this.root, 0, [true]);\n        this.page += \"</div>\\n\";\n    }\n    open(folder) {\n        if (!this.ready) {\n            setTimeout(() => { this.open(folder); }, 10);\n            return;\n        }\n        folder = folder.trim();\n        let parts = folder.split(\"/\");\n        let current = this.root;\n        for (let i = 0; i < parts.length; i++) {\n            current = current.findFolder([parts[i]]);\n            if (current == null)\n                return;\n            if (!current.content.classList.contains(\"formlist-active\")) {\n                current.img.src = \"/assets/images/open.jpg\";\n                current.content.classList.toggle(\"formlist-active\");\n            }\n        }\n    }\n    print(path, root, level, last) {\n        let html = \"\";\n        html += this.folder(path, root, level, last);\n        html += \"<div class='formlist-folder-content' id='\" + path + \"-content'>\";\n        level++;\n        last.push(false);\n        if (path == \"/\")\n            path = \"\";\n        let subs = root.folders.length;\n        let forms = root.forms.length;\n        for (let i = 0; i < subs; i++) {\n            let folder = root.folders[i];\n            if (i == subs - 1 && forms == 0)\n                last[level] = true;\n            html += this.print(path + \"/\" + folder.name, folder, level, last);\n        }\n        last[level] = false;\n        html += this.forms(root, level, last);\n        last.pop();\n        html += \"</div>\";\n        return (html);\n    }\n    parse() {\n        for (let i = 0; i < this.formsdef.length; i++) {\n            let path = this.formsdef[i].path;\n            if (!this.formsdef[i].navigable)\n                continue;\n            let form = path;\n            let folder = \"/\";\n            let pos = path.lastIndexOf(\"/\");\n            if (pos >= 0) {\n                form = path.substring(pos + 1);\n                folder = path.substring(0, pos);\n            }\n            let current = this.root;\n            let parts = folder.split(\"/\");\n            for (let p = 1; p < parts.length; p++) {\n                if (parts[p] == \"\")\n                    parts[p] = \"/\";\n                current = current.getFolder(parts[p].trim());\n            }\n            current.addForm(form, this.formsdef[i]);\n        }\n    }\n    ngAfterViewInit() {\n        this.html = this.elem?.nativeElement;\n        this.html.innerHTML = this.page;\n        let folders = this.html.getElementsByClassName(\"formlist-folder\");\n        for (let i = 0; i < folders.length; i++) {\n            let container = folders.item(i);\n            let content = document.getElementById(container.id + \"-content\");\n            let lnk = container.querySelector(\"[id='\" + container.id + \"-lnk']\");\n            let img = container.querySelector(\"[id='\" + container.id + \"-img']\");\n            let folder = this.root.findFolder(container.id.split(\"/\"));\n            folder.img = img;\n            folder.lnk = lnk;\n            folder.content = content;\n            folder.img.addEventListener(\"click\", (event) => this.toggle(event));\n            folder.lnk.addEventListener(\"click\", (event) => this.toggle(event));\n        }\n        let forms = this.html.getElementsByClassName(\"formlist-form\");\n        for (let i = 0; i < forms.length; i++) {\n            let form = forms.item(i);\n            let lnk = form.querySelector(\"[id='\" + form.id + \"-lnk']\");\n            lnk.addEventListener(\"click\", (event) => this.show(event));\n        }\n        this.setColors();\n        this.open(\"/\");\n        this.root.lnk.innerHTML = this.name;\n        this.ready = true;\n    }\n    setColors() {\n        let link = this.conf.colors.link;\n        let tree = this.conf.colors.foldertree;\n        let list = null;\n        list = this.html.getElementsByClassName(\"formlist-txt\");\n        for (let i = 0; i < list.length; i++)\n            list[i].style.color = tree;\n        list = this.html.getElementsByClassName(\"formlist-link\");\n        for (let i = 0; i < list.length; i++)\n            list[i].style.color = link;\n        list = this.html.getElementsByClassName(\"formlist-off\");\n        for (let i = 0; i < list.length; i++)\n            list[i].style.borderLeft = \"1px solid \" + tree;\n        list = this.html.getElementsByClassName(\"formlist-vln\");\n        for (let i = 0; i < list.length; i++)\n            list[i].style.borderLeft = \"1px solid \" + tree;\n        list = this.html.getElementsByClassName(\"formlist-cnr\");\n        for (let i = 0; i < list.length; i++) {\n            list[i].style.borderLeft = \"1px solid \" + tree;\n            list[i].style.borderBottom = \"1px solid \" + tree;\n        }\n    }\n    toggle(event) {\n        let fname = event.target.id;\n        fname = fname.substring(0, fname.length - 4);\n        let folder = this.root.findFolder(fname.split(\"/\"));\n        folder.content.classList.toggle(\"formlist-active\");\n        if (folder.content.classList.contains(\"formlist-active\")) {\n            folder.img.src = \"/assets/images/open.jpg\";\n        }\n        else {\n            folder.img.src = \"/assets/images/closed.jpg\";\n        }\n    }\n    show(event) {\n        let fname = event.target.id;\n        fname = fname.substring(0, fname.length - 4);\n        this.app.showform(fname, false);\n    }\n    folder(path, root, level, last) {\n        let html = \"\";\n        html += \"<div id='\" + path + \"' class='formlist-folder'>\\n\";\n        if (level > 0) {\n            html += this.half();\n            for (let i = 1; i < level; i++)\n                html += this.indent(last[i]);\n        }\n        if (level > 0)\n            html += this.pre(last[level]);\n        html += \"<img class='formlist-img' id='\" + path + \"-img' src='/assets/images/closed.jpg'>\\n\";\n        html += \"<span class='formlist-txt' id='\" + path + \"-lnk'>\" + root.name + \"</span>\\n\";\n        html += \"</div>\\n\";\n        return (html);\n    }\n    forms(root, level, last) {\n        let html = \"\";\n        for (let i = 0; i < root.forms.length; i++) {\n            if (i == root.forms.length - 1)\n                last[level] = true;\n            html += this.form(root.forms[i], level, last);\n        }\n        return (html);\n    }\n    form(form, level, last) {\n        let html = \"\";\n        html += \"<div id='\" + form.def.name + \"' class='formlist-form'>\\n\";\n        html += this.half();\n        for (let i = 1; i < level; i++)\n            html += this.indent(last[i]);\n        if (level > 0)\n            html += this.pre(last[last.length - 1]);\n        html += \"<span class='formlist-link' id='\" + form.def.name + \"-lnk'> \" + form.name + \"</span>\\n\";\n        html += \"</div>\\n\";\n        return (html);\n    }\n    pre(last) {\n        let html = \"\";\n        html += \"<span class='formlist-lct'>\\n\";\n        html += \" <span class='formlist-off'></span>\\n\";\n        html += \" <span class='formlist-cnr'></span>\\n\";\n        if (last)\n            html += \"<span class='formlist-end'></span>\\n\";\n        else\n            html += \"<span class='formlist-vln'></span>\\n\";\n        html += \"</span>\\n\";\n        return (html);\n    }\n    indent(skip) {\n        let html = \"\";\n        if (skip) {\n            html += \"<span class='formlist-lct'>\\n\";\n            html += \"</span>\\n\";\n            html += \" <span class='formlist-ind'></span>\\n\";\n        }\n        else {\n            html += \"<span class='formlist-lct'>\\n\";\n            html += \" <span class='formlist-vln'></span>\\n\";\n            html += \" <span class='formlist-vln'></span>\\n\";\n            html += \" <span class='formlist-vln'></span>\\n\";\n            html += \"</span>\\n\";\n            html += \" <span class='formlist-ind'></span>\\n\";\n        }\n        return (html);\n    }\n    half() {\n        let html = \"\";\n        html += \" <span class='formlist-ind'></span>\\n\";\n        return (html);\n    }\n    styles() {\n        let styles = `\n\t\t.formlist\n\t\t{\n\t\t\twidth: 1px;\n\t\t\tposition: relative;\n\t\t}\n\n    \t.formlist-folder\n    \t{\n\t\t\tmargin: 0;\n\t\t\tpadding: 0;\n\t\t\twidth: 100%;\n\t\t\theight: 100%;\n\t\t\tfont-size: 0;\n\t\t\tposition: relative;\n\t\t\tborder-collapse: collapse;\n    \t}\n\n\t\t.formlist-folder-content\n\t\t{\n\t\t\tdisplay: none;\n\t\t}\n\n\t\t.formlist-lct\n\t\t{\n\t\t\twidth: 16px;\n\t\t\theight: 24px;\n\t\t\tpointer-events:none;\n\t\t\twhite-space: nowrap;\n\t\t\tdisplay: inline-block;\n\t\t\tvertical-align: middle;\n\t\t}\n\n\t\t.formlist-txt\n\t\t{\n\t\t\twidth: 16px;\n\t\t\theight: 21px;\n\t\t\tfont-size: 15px;\n\t\t\tcursor: pointer;\n\t\t\twhite-space: nowrap;\n\t\t\tdisplay: inline-block;\n\t\t\tvertical-align: bottom;\n\t\t}\n\n\t\t.formlist-off\n\t\t{\n\t\t\twidth: 16px;\n\t\t\theight: 4px;\n\t\t\tdisplay: block;\n\t\t\tpointer-events:none;\n\t\t}\n\n\t\t.formlist-vln\n\t\t{\n\t\t\twidth: 16px;\n\t\t\theight: 12px;\n\t\t\tdisplay: block;\n\t\t\tpointer-events:none;\n\t\t}\n\n\t\t.formlist-cnr\n\t\t{\n\t\t\twidth: 16px;\n\t\t\theight: 8px;\n\t\t\tdisplay: block;\n\t\t\tpointer-events:none;\n\t\t}\n\n\t\t.formlist-end\n\t\t{\n\t\t\twidth: 16px;\n\t\t\theight: 12px;\n\t\t\tdisplay: block;\n\t\t\tpointer-events:none;\n\t\t}\n\n\t\t.formlist-ind\n\t\t{\n\t\t\twidth: 12px;\n\t\t\theight: 24px;\n\t\t\twhite-space: nowrap;\n\t\t\tpointer-events:none;\n\t\t\tdisplay: inline-block;\n\t\t\tvertical-align: middle;\n\t\t}\n\n\t\t.formlist-img\n\t\t{\n\t\t\twidth: 24px;\n\t\t\theight: 24px;\n\t\t\tcursor: pointer;\n\t\t\tvertical-align: middle;\n\t\t}\n\n\t\t.formlist-link\n\t\t{\n\t\t\twidth: 16px;\n\t\t\theight: 22px;\n\t\t\tcursor: pointer;\n\t\t\tfont-size: 15px;\n\t\t\tmargin-left: 8px;\n\t\t\tfont-style: italic;\n\t\t\twhite-space: nowrap;\n\t\t\tdisplay: inline-block;\n\t\t\tvertical-align: bottom;\n\t\t}\n\n\t\t.formlist-form\n\t\t{\n\t\t\tmargin: 0;\n\t\t\tpadding: 0;\n\t\t\tfont-size: 0;\n\t\t\tdisplay: block;\n\t\t\tborder-collapse: collapse;\n\t\t}\n\n\t\t.formlist-active\n\t\t{\n\t\t\tdisplay: block;\n\t\t}\n\t\t`;\n        return (styles);\n    }\n}\nFormList.ɵfac = function FormList_Factory(t) { return new (t || FormList)(i0.ɵɵdirectiveInject(Context)); };\nFormList.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: FormList, selectors: [[\"formlist\"]], viewQuery: function FormList_Query(rf, ctx) { if (rf & 1) {\n        i0.ɵɵviewQuery(_c0$5, 5, ElementRef);\n    } if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.elem = _t.first);\n    } }, inputs: { name: [\"root\", \"name\"] }, decls: 2, vars: 0, consts: [[2, \"display\", \"inline-block\", \"white-space\", \"nowrap\"], [\"html\", \"\"]], template: function FormList_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelement(0, \"div\", 0, 1);\n    } }, encapsulation: 2 });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FormList, [{\n        type: Component,\n        args: [{\n                selector: 'formlist',\n                template: `\n\t\t<div #html style=\"display: inline-block; white-space: nowrap;\"></div>\n\t`,\n                styles: []\n            }]\n    }], function () { return [{ type: Context }]; }, { name: [{\n            type: Input,\n            args: ['root']\n        }], elem: [{\n            type: ViewChild,\n            args: [\"html\", { read: ElementRef }]\n        }] }); })();\nclass Folder {\n    constructor(name) {\n        this.forms = [];\n        this.folders = [];\n        this.name = name;\n    }\n    getFolder(next) {\n        if (next == this.name)\n            return (this);\n        for (let i = 0; i < this.folders.length; i++)\n            if (this.folders[i].name == next)\n                return (this.folders[i]);\n        let folder = new Folder(next);\n        this.folders.push(folder);\n        return (folder);\n    }\n    findFolder(path) {\n        while (path[0] == \"\")\n            path.shift();\n        if (path.length == 0)\n            return (this);\n        let next = null;\n        for (let i = 0; i < this.folders.length; i++) {\n            if (this.folders[i].name == path[0]) {\n                next = this.folders[i];\n                break;\n            }\n        }\n        if (next == null)\n            return (null);\n        path.shift();\n        return (next.findFolder(path));\n    }\n    addForm(name, form) {\n        this.forms.push({ name: name, def: form });\n    }\n    print() {\n        console.log(\"\");\n        console.log(\"Folder: \" + this.name);\n        for (let i = 0; i < this.forms.length; i++)\n            console.log(\"Form: \" + this.forms[i].name);\n        for (let i = 0; i < this.folders.length; i++)\n            this.folders[i].print();\n    }\n}\n\nconst _c0$4 = [\"formarea\"];\nclass FormArea {\n    constructor(ctx) {\n        this.app = null;\n        this.app = ctx.app;\n    }\n    getFormsArea() {\n        return (this.formarea.nativeElement);\n    }\n    ngAfterViewInit() {\n        let impl = this.app[\"_impl_\"];\n        impl.setFormArea(this);\n    }\n}\nFormArea.ɵfac = function FormArea_Factory(t) { return new (t || FormArea)(i0.ɵɵdirectiveInject(Context)); };\nFormArea.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: FormArea, selectors: [[\"formarea\"]], viewQuery: function FormArea_Query(rf, ctx) { if (rf & 1) {\n        i0.ɵɵviewQuery(_c0$4, 5, ElementRef);\n    } if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.formarea = _t.first);\n    } }, decls: 2, vars: 0, consts: [[\"formarea\", \"\"]], template: function FormArea_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelement(0, \"div\", null, 0);\n    } }, encapsulation: 2 });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FormArea, [{\n        type: Component,\n        args: [{ selector: 'formarea', template: '<div #formarea></div>', styles: [] }]\n    }], function () { return [{ type: Context }]; }, { formarea: [{\n            type: ViewChild,\n            args: [\"formarea\", { read: ElementRef }]\n        }] }); })();\n\nconst _c0$3 = [\"ok\"];\nconst _c1$2 = [\"keymap\"];\nclass KeyMapHelp {\n    constructor(ctx) {\n        this.width = \"300px\";\n        this.height = \"475px\";\n        this.title = \"ShortKeys\";\n        this.html = null;\n        this.win = null;\n        this.map = null;\n        this.okbtn = null;\n        this.title = ctx.conf.keymaptitle;\n        this.html = ctx.conf.keymapping.map;\n    }\n    static show(app) {\n        let pinst = new PopupInstance();\n        pinst.display(app, KeyMapHelp);\n    }\n    close(_cancel) {\n        this.win.closeWindow();\n    }\n    setWin(win) {\n        this.win = win;\n    }\n    ngAfterViewInit() {\n        this.map = this.mapelem?.nativeElement;\n        this.okbtn = this.okelem?.nativeElement;\n        this.okbtn.addEventListener(\"keydown\", () => this.close(true));\n        this.okbtn.addEventListener(\"keypress\", () => this.close(true));\n        this.map.innerHTML = this.html;\n        this.okbtn.focus();\n    }\n}\nKeyMapHelp.ɵfac = function KeyMapHelp_Factory(t) { return new (t || KeyMapHelp)(i0.ɵɵdirectiveInject(Context)); };\nKeyMapHelp.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: KeyMapHelp, selectors: [[\"ng-component\"]], viewQuery: function KeyMapHelp_Query(rf, ctx) { if (rf & 1) {\n        i0.ɵɵviewQuery(_c0$3, 5, ElementRef);\n        i0.ɵɵviewQuery(_c1$2, 5, ElementRef);\n    } if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.okelem = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.mapelem = _t.first);\n    } }, decls: 4, vars: 0, consts: [[\"keymap\", \"\"], [2, \"width\", \"100%\", \"height\", \"1px\"], [\"ok\", \"\"]], template: function KeyMapHelp_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelement(0, \"div\", null, 0);\n        i0.ɵɵelement(2, \"button\", 1, 2);\n    } }, encapsulation: 2 });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(KeyMapHelp, [{\n        type: Component,\n        args: [{\n                template: `\n        <div #keymap></div>\n        <button style=\"width: 100%; height: 1px\" #ok></button>\n    `\n            }]\n    }], function () { return [{ type: Context }]; }, { okelem: [{\n            type: ViewChild,\n            args: [\"ok\", { read: ElementRef }]\n        }], mapelem: [{\n            type: ViewChild,\n            args: [\"keymap\", { read: ElementRef }]\n        }] }); })();\n\nclass LoginForm extends Block {\n    constructor(ctx) {\n        super();\n        this.top = \"20%\";\n        this.left = \"25%\";\n        this.width = \"300px\";\n        this.height = \"150px\";\n        this.tmargin = \"20px\";\n        this.title = \"Login\";\n        this.app = ctx.app[\"_impl_\"];\n        this.addKeyTrigger(this.onEvent, [\n            keymap.enter,\n            keymap.escape,\n            keymap.nextfield,\n            keymap.prevfield\n        ]);\n    }\n    setWin(win) {\n        this.win = win;\n    }\n    close(cancel) {\n        this.app.enable();\n        this.win.closeWindow();\n        if (!cancel)\n            this.app.appstate.connection.connect(this.usr.value, this.pwd.value);\n        this.app.getCurrentForm()?.focus();\n    }\n    async onEvent(kevent) {\n        if (kevent.key == keymap.enter)\n            this.close(false);\n        if (kevent.key == keymap.escape)\n            this.close(true);\n        if (kevent.key == keymap.nextfield && kevent.field == \"usr\") {\n            kevent.event.preventDefault();\n            this.pwd.focus();\n        }\n        if (kevent.key == keymap.nextfield && kevent.field == \"pwd\") {\n            kevent.event.preventDefault();\n            this.usr.focus();\n        }\n        if (kevent.key == keymap.prevfield && kevent.field == \"usr\") {\n            kevent.event.preventDefault();\n            this.pwd.focus();\n        }\n        if (kevent.key == keymap.prevfield && kevent.field == \"pwd\") {\n            kevent.event.preventDefault();\n            this.usr.focus();\n        }\n        return (true);\n    }\n    ngOnInit() {\n        this.app.disable();\n        this.app.setContainer();\n    }\n    ngAfterViewInit() {\n        let container = this.app.getContainer();\n        container.finish();\n        container.getBlock(\"\").records.forEach((rec) => { this[\"_impl_\"].addRecord(new Record(0, rec.fields, rec.index)); });\n        this.usr = this[\"_impl_\"].getField(0, \"usr\");\n        this.pwd = this[\"_impl_\"].getField(0, \"pwd\");\n        let usr = { name: \"usr\", mandatory: true, type: FieldType.text };\n        let pwd = { name: \"pwd\", mandatory: true, type: FieldType.password };\n        this.usr.setDefinition(usr, true);\n        this.pwd.setDefinition(pwd, true);\n        this.usr.enable(false);\n        this.pwd.enable(false);\n        let field = document.getElementsByName(\"usr\")[1];\n        let width = (1.75 * field.offsetWidth + 10) + \"px\";\n        let height = (6 * field.offsetHeight + 20) + \"px\";\n        this.win.resize(width, height);\n        this.usr.focus();\n        this.app.dropContainer();\n    }\n}\nLoginForm.ɵfac = function LoginForm_Factory(t) { return new (t || LoginForm)(i0.ɵɵdirectiveInject(Context)); };\nLoginForm.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: LoginForm, selectors: [[\"ng-component\"]], features: [i0.ɵɵInheritDefinitionFeature], decls: 13, vars: 0, consts: [[2, \"margin-top\", \"20px\", \"margin-right\", \"10px\"], [\"name\", \"usr\"], [\"name\", \"pwd\"]], template: function LoginForm_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelementStart(0, \"table\", 0);\n        i0.ɵɵelementStart(1, \"tr\");\n        i0.ɵɵelementStart(2, \"td\");\n        i0.ɵɵtext(3, \"Username\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"td\");\n        i0.ɵɵtext(5, \": \");\n        i0.ɵɵelement(6, \"field\", 1);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"tr\");\n        i0.ɵɵelementStart(8, \"td\");\n        i0.ɵɵtext(9, \"Password\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(10, \"td\");\n        i0.ɵɵtext(11, \": \");\n        i0.ɵɵelement(12, \"field\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n    } }, encapsulation: 2 });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(LoginForm, [{\n        type: Component,\n        args: [{\n                selector: '',\n                template: `\n        <table style='margin-top: \"20px\"; margin-right: \"10px\"'>\n          <tr>\n            <td>Username</td><td>: <field name='usr'></field> </td>\n          </tr>\n          <tr>\n            <td>Password</td><td>: <field name='pwd'></field> </td>\n          </tr>\n        </table>\n    `\n            }]\n    }], function () { return [{ type: Context }]; }, null); })();\n\nconst _c0$2 = [\"input\"];\nconst _c1$1 = [\"canvas\"];\nclass Wait {\n    constructor() {\n        this.input = null;\n        this.canvas = null;\n    }\n    static show(app) {\n        if (Wait.displayed)\n            return;\n        Wait.ready = false;\n        Wait.displayed = true;\n        Wait.win = app.builder.createComponent(Wait);\n        let element = Wait.win.hostView.rootNodes[0];\n        app.builder.getAppRef().attachView(Wait.win.hostView);\n        document.body.appendChild(element);\n        Wait.ready = true;\n    }\n    static waiting() {\n        return (Wait.displayed);\n    }\n    static close(app) {\n        if (!Wait.displayed)\n            return;\n        if (!Wait.ready) {\n            setTimeout(() => { Wait.close(app); }, 1);\n            return;\n        }\n        Wait.displayed = false;\n        let element = Wait.win.hostView.rootNodes[0];\n        document.body.removeChild(element);\n        app.builder.getAppRef().detachView(Wait.win.hostView);\n        Wait.win.destroy();\n        app.getCurrentForm().focus();\n    }\n    ngAfterViewInit() {\n        this.input = this.inputElement?.nativeElement;\n        this.canvas = this.canvasElement?.nativeElement;\n        let ctx = this.canvas.getContext(\"2d\");\n        setTimeout(() => { this.focus(); }, 10);\n        setTimeout(() => { this.showrunning(ctx, 0); }, 250);\n    }\n    focus() {\n        if (!Wait.displayed)\n            return;\n        this.input.focus();\n        setTimeout(() => { this.focus(); }, 100);\n    }\n    showrunning(ctx, pick) {\n        if (!Wait.displayed)\n            return;\n        ctx.lineWidth = 5;\n        let pcolor = \"black\";\n        let bcolor = \"#DCDCDC\";\n        pick = pick % 3;\n        let rad = 6;\n        let off = 64;\n        ctx.beginPath();\n        ctx.strokeStyle = bcolor;\n        if (pick == 0)\n            ctx.strokeStyle = pcolor;\n        ctx.arc(rad + off, 2 * rad, rad, 0, 2 * Math.PI);\n        ctx.stroke();\n        ctx.closePath();\n        ctx.beginPath();\n        ctx.strokeStyle = bcolor;\n        if (pick == 1)\n            ctx.strokeStyle = pcolor;\n        ctx.arc(6 * rad + off, 2 * rad, rad, 0, 2 * Math.PI);\n        ctx.stroke();\n        ctx.closePath();\n        ctx.beginPath();\n        ctx.strokeStyle = bcolor;\n        if (pick == 2)\n            ctx.strokeStyle = pcolor;\n        ctx.arc(11 * rad + off, 2 * rad, rad, 0, 2 * Math.PI);\n        ctx.stroke();\n        ctx.closePath();\n        setTimeout(() => { this.showrunning(ctx, pick + 1); }, 250);\n    }\n}\nWait.ready = false;\nWait.displayed = false;\nWait.win = null;\nWait.ɵfac = function Wait_Factory(t) { return new (t || Wait)(); };\nWait.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: Wait, selectors: [[\"ng-component\"]], viewQuery: function Wait_Query(rf, ctx) { if (rf & 1) {\n        i0.ɵɵviewQuery(_c0$2, 5, ElementRef);\n        i0.ɵɵviewQuery(_c1$1, 5, ElementRef);\n    } if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.inputElement = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.canvasElement = _t.first);\n    } }, decls: 5, vars: 0, consts: [[1, \"wait-modal\"], [\"id\", \"canvas\", 1, \"wait-canvas\"], [\"canvas\", \"\"], [1, \"wait-input\"], [\"input\", \"\"]], template: function Wait_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelement(1, \"canvas\", 1, 2);\n        i0.ɵɵelement(3, \"input\", 3, 4);\n        i0.ɵɵelementEnd();\n    } }, styles: [\".wait-input[_ngcontent-%COMP%]{width:0;height:0;opacity:0;filter:alpha(opacity=0)}.wait-canvas[_ngcontent-%COMP%]{top:25%;left:40%;width:320px;height:160px;position:fixed}.wait-modal[_ngcontent-%COMP%]{top:0;left:0;z-index:1;opacity:1;width:100%;height:100%;display:block;overflow:auto;position:fixed;box-shadow:inset 0 0 400px 110px #0003}\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(Wait, [{\n        type: Component,\n        args: [{\n                selector: '',\n                template: `\n                <div class=\"wait-modal\">\n                    <canvas #canvas class=\"wait-canvas\" id=\"canvas\"></canvas>\n                    <input #input class=\"wait-input\">\n                </div>\n              `,\n                styles: [\n                    `\n        .wait-input\n        {\n            width: 0;\n            height: 0;\n            opacity: 0;\n            filter:alpha(opacity=0);\n        }\n\n        .wait-canvas\n        {\n            top: 25%;\n            left: 40%;\n            width: 320px;\n            height: 160px;\n            position: fixed;\n        }\n\n        .wait-modal\n        {\n            top: 0;\n            left: 0;\n            z-index: 1;\n            opacity: 1;\n            width: 100%;\n            height: 100%;\n            display: block;\n            overflow: auto;\n            position: fixed;\n            box-shadow: inset 0px 0px 400px 110px rgba(0, 0, 0, .2);\n        }\n        `\n                ]\n            }]\n    }], null, { inputElement: [{\n            type: ViewChild,\n            args: [\"input\", { read: ElementRef }]\n        }], canvasElement: [{\n            type: ViewChild,\n            args: [\"canvas\", { read: ElementRef }]\n        }] }); })();\n\nclass MenuInterface {\n    constructor(menu) {\n        this.menu$ = menu;\n        this.app$ = this.menu$.getApplication()[\"_impl_\"];\n    }\n    get app() {\n        return (this.app$.getApplication());\n    }\n    isConnected() {\n        return (this.app$.connected);\n    }\n    enable(menu) {\n        this.menu$.enable(menu);\n    }\n    disable(menu) {\n        this.menu$.disable(menu);\n    }\n}\n\nconst _c0$1 = [\"html\"];\nclass DropDownMenu {\n    constructor(ctx) {\n        this.ctx = ctx;\n        this.options = new Map();\n        this.menus = new Map();\n        this.conf = ctx.conf;\n        this.app$ = ctx.app[\"_impl_\"]; // might not be initialized\n        this.instance = \"DropDownMenu-\" + (DropDownMenu.instances++);\n    }\n    static setForm(inst, form) {\n        if (inst.instance.getMenu() == null) {\n            if (DropDownMenu.calls++ > 10)\n                return;\n            setTimeout(() => { DropDownMenu.setForm(inst, form); }, 10);\n            return;\n        }\n        inst.instance.getMenu().getHandler().onFormChange(form);\n    }\n    getMenu() {\n        return (this.menu);\n    }\n    getApplication() {\n        return (this.app$.getApplication());\n    }\n    enable(menu) {\n        if (menu == null) {\n            this.menus.forEach((mopt) => {\n                mopt.elem.classList.remove(\"ddmenu-disabled\");\n                mopt.options.forEach((opt) => { opt.elem.children[0].classList.remove(\"ddmenu-disabled\"); });\n            });\n            return;\n        }\n        menu = menu.toLowerCase();\n        let mopt = this.menus.get(menu);\n        if (mopt != null) {\n            mopt.elem.classList.remove(\"ddmenu-disabled\");\n            mopt.options.forEach((opt) => { opt.elem.children[0].classList.remove(\"ddmenu-disabled\"); });\n            return;\n        }\n        let option = menu;\n        mopt = this.menus.get(menu.substring(0, menu.lastIndexOf(\"/\")));\n        if (mopt == null)\n            return;\n        let enabled = 0;\n        mopt.options.forEach((opt) => {\n            if (opt.elem.id == option)\n                opt.elem.children[0].classList.remove(\"ddmenu-disabled\");\n            if (!opt.elem.children[0].classList.contains(\"ddmenu-disabled\"))\n                enabled++;\n        });\n        if (enabled > 0)\n            mopt.elem.classList.remove(\"ddmenu-disabled\");\n    }\n    disable(menu) {\n        if (menu == null) {\n            this.menus.forEach((mopt) => {\n                mopt.elem.classList.add(\"ddmenu-disabled\");\n                mopt.options.forEach((opt) => { opt.elem.children[0].classList.add(\"ddmenu-disabled\"); });\n            });\n            return;\n        }\n        menu = menu.toLowerCase();\n        let mopt = this.menus.get(menu);\n        if (mopt != null) {\n            mopt.elem.classList.add(\"ddmenu-disabled\");\n            mopt.options.forEach((opt) => { opt.elem.children[0].classList.add(\"ddmenu-disabled\"); });\n            return;\n        }\n        let option = menu;\n        mopt = this.menus.get(menu.substring(0, menu.lastIndexOf(\"/\")));\n        if (mopt == null)\n            return;\n        let enabled = 0;\n        mopt.options.forEach((opt) => {\n            if (opt.elem.id == option)\n                opt.elem.children[0].classList.add(\"ddmenu-disabled\");\n            if (!opt.elem.children[0].classList.contains(\"ddmenu-disabled\"))\n                enabled++;\n        });\n        if (enabled == 0)\n            mopt.elem.classList.add(\"ddmenu-disabled\");\n    }\n    display(menu) {\n        if (menu == null)\n            return;\n        if (this.html == null) {\n            setTimeout(() => { this.display(menu); }, 10);\n            return;\n        }\n        this.app$ = this.ctx.app[\"_impl_\"];\n        this.menu = menu;\n        let intf = new MenuInterface(this);\n        menu.getHandler()[\"__menu__\"] = intf;\n        this.menu = menu;\n        this.html.innerHTML = this.menuhtml();\n        let menus = this.html.getElementsByClassName(\"ddmenu-menu\");\n        let options = this.html.getElementsByClassName(\"ddmenu-option\");\n        for (let i = 0; i < menus.length; i++) {\n            let mopt = new MenuOption(menus[i].children[0]);\n            this.menus.set(mopt.elem.id, mopt);\n            mopt.elem.classList.add(\"ddmenu-default\");\n            mopt.elem.classList.add(\"ddmenu-disabled\");\n            mopt.elem.addEventListener(\"click\", (event) => { this.toggle(event); });\n        }\n        for (let i = 0; i < options.length; i++) {\n            let id = options[i].id;\n            let menu = id.substring(0, id.lastIndexOf(\"/\"));\n            let opt = this.options.get(id);\n            options[i].children[0].classList.add(\"ddmenu-disabled\");\n            options[i].addEventListener(\"click\", (event) => { this.action(event); });\n            opt.elem = options[i];\n            let mopt = this.menus.get(menu);\n            mopt.options.push(opt);\n        }\n        menu.getHandler().onInit();\n    }\n    onEvent(event) {\n        if (!event.target.matches('.ddmenu-entry')) {\n            this.closeall();\n            WindowListener.remove(this.instance, \"click\");\n        }\n    }\n    action(event) {\n        let handler = this.menu.getHandler();\n        let link = null;\n        let text = event.target;\n        if (text.classList.contains(\"ddmenu-linktext\")) {\n            link = text.parentElement;\n        }\n        else {\n            link = text;\n            text = text.children[0];\n        }\n        if (text.classList.contains(\"ddmenu-disabled\"))\n            return;\n        let opt = this.options.get(link.id);\n        if (opt.option.action != null)\n            handler[opt.option.action]();\n    }\n    toggle(event) {\n        let menu = event.target;\n        let container = menu.parentNode.children[1];\n        if (menu.classList.contains(\"ddmenu-disabled\"))\n            return;\n        container.classList.toggle(\"ddmenu-show\");\n        if (container.classList.contains(\"ddmenu-show\")) {\n            this.closeall(container);\n            WindowListener.add(this.instance, this, \"click\");\n        }\n        else {\n            container.classList.remove(\"ddmenu-show\");\n        }\n    }\n    closeall(except) {\n        let open = this.html.getElementsByClassName(\"ddmenu-show\");\n        for (let i = 0; i < open.length; i++) {\n            if (except == null || open[i].id != except.id)\n                open[i].classList.remove(\"ddmenu-show\");\n        }\n    }\n    menuhtml() {\n        let html = \"\";\n        html += \"<style>\\n\";\n        html += this.styles() + \"\\n\";\n        html += \"</style>\\n\";\n        html += \"<span class='ddmenu-bar'>\\n\";\n        html += this.entries(\"\", \"\", this.menu.getEntries());\n        html += \"</span>\\n\";\n        return (html);\n    }\n    entries(indent, path, entries) {\n        let html = \"\";\n        for (let i = 0; i < entries.length; i++) {\n            let id = path + \"/\" + entries[i].name.toLowerCase();\n            html += indent + \"<div class='ddmenu-menu'>\\n\";\n            html += indent + \"  <button class='ddmenu-entry' id='\" + id + \"'>\\n\";\n            html += indent + entries[i].name;\n            html += indent + \"  </button>\\n\";\n            html += indent + \"  <div class='ddmenu-content' id='\" + id + \"-content'>\\n\";\n            if (entries[i].options != null) {\n                for (let f = 0; f < entries[i].options.length; f++) {\n                    let entry = entries[i].options[f];\n                    let oid = id + \"/\" + entry.name.toLowerCase();\n                    this.options.set(oid, new Option(entries[i].options[f]));\n                    html += indent + \"    <a class='ddmenu-option' id='\" + oid + \"'>\\n\";\n                    html += indent + \"      <span class='ddmenu-linktext'>\" + entry.name + \"</span>\\n\";\n                    html += indent + \"    </a>\\n\";\n                }\n            }\n            html += indent + \"  </div>\\n\";\n            html += indent + \"</div>\\n\";\n        }\n        return (html);\n    }\n    styles() {\n        let style = `\n            .ddmenu-bar\n            {\n                width: 100%;\n                height: 100%;\n                display: flex;\n                position: relative;\n                white-space: nowrap;\n                background: transparent;\n            }\n\n            .ddmenu-entry\n            {\n                padding: 0;\n                border: none;\n                color: ` + this.conf.colors.menuoption + `;\n                outline:none;\n                cursor: pointer;\n                font-size: 15px;\n                margin-top: 1px;\n                margin-left: 4px;\n                margin-right: 4px;\n                margin-bottom: 1px;\n                background: transparent;\n            }\n\n            .ddmenu-default\n            {\n                color: ` + this.conf.colors.enabled + `;\n            }\n\n            .ddmenu-disabled\n            {\n                color: ` + this.conf.colors.disabled + `;\n            }\n\n            .ddmenu-menu\n            {\n                position: relative;\n                display: inline-block;\n            }\n\n            .ddmenu-content\n            {\n                z-index: 1;\n                display: none;\n                overflow: none;\n                min-width: 80px;\n                position: absolute;\n                background-color: #f1f1f1;\n                color: ` + this.conf.colors.menuoption + `;\n                box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);\n            }\n\n            .ddmenu-option\n            {\n                border: none;\n                color: black;\n                outline:none;\n                cursor: pointer;\n                font-size: 15px;\n                background: transparent;\n            }\n\n            .ddmenu-content .ddmenu-option\n            {\n                color: black;\n                display: block;\n                padding: 12px 16px;\n                text-decoration: none;\n            }\n\n            .ddmenu-content .ddmenu-option:hover\n            {\n                background-color: #ddd;\n            }\n\n            .ddmenu-show\n            {\n                display: block;\n            }\n        `;\n        return (style);\n    }\n    ngAfterViewInit() {\n        this.html = this.elem?.nativeElement;\n    }\n}\nDropDownMenu.instances = 0;\nDropDownMenu.calls = 0;\nDropDownMenu.ɵfac = function DropDownMenu_Factory(t) { return new (t || DropDownMenu)(i0.ɵɵdirectiveInject(Context)); };\nDropDownMenu.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: DropDownMenu, selectors: [[\"ng-component\"]], viewQuery: function DropDownMenu_Query(rf, ctx) { if (rf & 1) {\n        i0.ɵɵviewQuery(_c0$1, 5, ElementRef);\n    } if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.elem = _t.first);\n    } }, decls: 2, vars: 0, consts: [[\"html\", \"\"]], template: function DropDownMenu_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelement(0, \"div\", null, 0);\n    } }, encapsulation: 2 });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DropDownMenu, [{\n        type: Component,\n        args: [{\n                selector: '',\n                template: '<div #html></div>'\n            }]\n    }], function () { return [{ type: Context }]; }, { elem: [{\n            type: ViewChild,\n            args: [\"html\", { read: ElementRef }]\n        }] }); })();\nclass MenuOption {\n    constructor(elem) {\n        this.options = [];\n        this.elem = elem;\n    }\n}\nclass Option {\n    constructor(option) {\n        this.option = option;\n    }\n}\n\nclass MenuFactory {\n    constructor(builder) {\n        this.builder = builder;\n    }\n    create(menu) {\n        let ref = this.builder.createComponent(DropDownMenu);\n        ref.instance.display(menu);\n        return (ref);\n    }\n}\n\nclass FormUtil {\n    constructor() {\n        this.utils = new Utils();\n    }\n    complete(options, create) {\n        if (options == null) {\n            if (create)\n                options = {};\n            else\n                return (null);\n        }\n        if (!options.hasOwnProperty(\"wizard\"))\n            options.wizard = false;\n        if (!options.hasOwnProperty(\"inherit\"))\n            options.inherit = true;\n        if (!options.hasOwnProperty(\"width\"))\n            options.width = \"99.65vw\";\n        if (!options.hasOwnProperty(\"height\"))\n            options.height = \"99.5vh\";\n        if (!options.hasOwnProperty(\"offsetTop\"))\n            options.offsetTop = \"0\";\n        if (!options.hasOwnProperty(\"offsetLeft\"))\n            options.offsetLeft = \"0\";\n        return (options);\n    }\n    convert(form) {\n        let fname = this.utils.getName(form.component);\n        let navigable = true;\n        form.windowopts = this.complete(form.windowopts);\n        if (form.hasOwnProperty(\"navigable\"))\n            navigable = form.navigable;\n        let path = \"/\" + fname;\n        if (form.hasOwnProperty(\"path\"))\n            path = form.path;\n        path = path.trim();\n        if (!path.startsWith(\"/\"))\n            path = \"/\" + path;\n        let def = {\n            name: fname,\n            path: form.path,\n            title: form.title,\n            navigable: navigable,\n            component: form.component,\n            windowdef: form.windowopts\n        };\n        return (def);\n    }\n    clone(base) {\n        let clone = {\n            name: base.name,\n            path: base.path,\n            title: base.title,\n            windowdef: base.windowdef,\n            windowopts: base.windowdef,\n            component: base.component,\n            navigable: base.navigable\n        };\n        return (clone);\n    }\n}\n\nconst _c0 = [\"menu\"];\nconst _c1 = [\"window\"];\nconst _c2 = [\"topbar\"];\nconst _c3 = [\"content\"];\nclass ModalWindow {\n    constructor(ctx, change) {\n        this.change = change;\n        this.top = null;\n        this.left = null;\n        this.width = \"99vw\";\n        this.height = \"98vh\";\n        this.tmargin = \"1vh\";\n        this.minw = 0;\n        this.minh = 0;\n        this.offx = 0;\n        this.offy = 0;\n        this.move = false;\n        this.resz = false;\n        this.resizex = false;\n        this.resizey = false;\n        this.conf = ctx.conf;\n    }\n    get tcolor() {\n        return (this.conf.colors.title);\n    }\n    get bcolor() {\n        return (this.conf.colors.topbar);\n    }\n    get btncolor() {\n        return (this.conf.colors.menuoption);\n    }\n    setForm(form) {\n        this.resize(form, true);\n        let impl = form.formref.instance[\"_impl_\"];\n        impl.setModalWindow(this);\n        this.form = form;\n    }\n    getForm() {\n        return (this.form.formref.instance);\n    }\n    newForm(form) {\n        if (!form.windowopts?.inherit)\n            this.resize(form, false);\n        let formelem = this.content.firstElementChild;\n        if (formelem != null)\n            this.content.removeChild(formelem);\n        this.app.builder.getAppRef().detachView(this.form.formref.hostView);\n        if (this.menuelem != null) {\n            let menuelem = this.menu.firstElementChild;\n            if (menuelem != null)\n                this.menu.removeChild(this.menuelem);\n            this.app.builder.getAppRef().detachView(this.menuref.hostView);\n        }\n        let impl = form.formref.instance[\"_impl_\"];\n        impl.setModalWindow(this);\n        this.form = form;\n        this.display();\n    }\n    setWinRef(winref) {\n        this.winref = winref;\n    }\n    setApplication(app) {\n        this.app = app;\n    }\n    close() {\n        let impl = this.form.formref.instance[\"_impl_\"];\n        this.closeWindow();\n        impl.cancel();\n    }\n    closeWindow() {\n        WindowListener.remove(\"modal\", \"mouseup\");\n        WindowListener.remove(\"modal\", \"mousemove\");\n        WindowListener.remove(\"modal\", \"mousedown\");\n        let formelem = this.content.firstElementChild;\n        if (formelem != null)\n            this.content.removeChild(formelem);\n        this.app.builder.getAppRef().detachView(this.form.formref.hostView);\n        let element = this.winref.hostView.rootNodes[0];\n        document.body.removeChild(element);\n        this.app.builder.getAppRef().detachView(this.winref.hostView);\n        this.winref.destroy();\n        this.winref = null;\n    }\n    resize(form, pos) {\n        if (form.windowopts.offsetLeft != null && form.windowopts.offsetLeft.trim().endsWith(\"%\")) {\n            let s = form.windowopts.offsetLeft.trim();\n            let n = +s.substring(0, s.length - 1);\n            form.windowopts.offsetLeft = (window.innerWidth * n / 100) + \"px\";\n        }\n        if (form.windowopts.width != null && form.windowopts.width.trim().endsWith(\"%\")) {\n            let s = form.windowopts.width.trim();\n            let n = +s.substring(0, s.length - 1);\n            form.windowopts.width = (window.innerWidth * n / 100) + \"px\";\n        }\n        if (form.windowopts.offsetTop != null && form.windowopts.offsetTop.trim().endsWith(\"%\")) {\n            let s = form.windowopts.offsetTop.trim();\n            let n = +s.substring(0, s.length - 1);\n            form.windowopts.offsetTop = (window.innerHeight * n / 100) + \"px\";\n        }\n        if (form.windowopts.height != null && form.windowopts.height.trim().endsWith(\"%\")) {\n            let s = form.windowopts.height.trim();\n            let n = +s.substring(0, s.length - 1);\n            form.windowopts.height = (window.innerHeight * n / 100) + \"px\";\n        }\n        if (pos) {\n            this.top = form.windowopts.offsetTop;\n            this.left = form.windowopts.offsetLeft;\n            if (this.top == \"undefined\")\n                this.top = null;\n            if (this.left == \"undefined\")\n                this.left = null;\n        }\n        this.width = form.windowopts.width;\n        this.height = form.windowopts.height;\n        if (form.windowopts.width == \"\") {\n            this.left = \"0\";\n            this.width = \"100%\";\n        }\n        if (form.windowopts.height == \"\") {\n            this.top = \"0\";\n            this.height = \"100%\";\n        }\n        this.change.detectChanges();\n    }\n    display() {\n        if (this.form == null) {\n            setTimeout(() => { this.display(); }, 10);\n            return;\n        }\n        this.element = this.form.formref.hostView.rootNodes[0];\n        this.app.builder.getAppRef().attachView(this.form.formref.hostView);\n        this.content.appendChild(this.element);\n        this.minh = 100;\n        this.minw = 450;\n        this.showmenu();\n        this.change.detectChanges();\n        this.posy = this.window.offsetTop;\n        this.posx = this.window.offsetLeft;\n        this.sizex = this.window.offsetWidth;\n        this.sizey = this.window.offsetHeight;\n        let resize = false;\n        if (this.sizex < this.minw) {\n            resize = true;\n            this.sizex = this.minw;\n            this.width = this.sizex + \"px\";\n        }\n        if (this.sizey < this.minh) {\n            resize = true;\n            this.sizey = this.minh;\n            this.height = this.sizey + \"px\";\n        }\n        if (this.top == null || this.top.trim().length == 0) {\n            resize = true;\n            this.top = ((+window.innerHeight - this.sizey) / 3) + \"px\";\n        }\n        if (this.left == null || this.left.trim().length == 0) {\n            resize = true;\n            this.left = ((+window.innerWidth - this.sizex) / 3) + \"px\";\n        }\n        if (resize) {\n            this.change.detectChanges();\n            this.posy = this.window.offsetTop;\n            this.posx = this.window.offsetLeft;\n            this.sizex = this.window.offsetWidth;\n            this.sizey = this.window.offsetHeight;\n        }\n    }\n    showmenu() {\n        let impl = this.form.formref.instance[\"_impl_\"];\n        this.menuelem = null;\n        this.menuref = impl.getDropDownMenu();\n        if (this.menuref == null)\n            return;\n        this.menuelem = this.menuref.hostView.rootNodes[0];\n        this.app.builder.getAppRef().attachView(this.menuref.hostView);\n        this.menu.appendChild(this.menuelem);\n        let ddmenu = this.menuref.instance;\n        this.initmenu(ddmenu);\n    }\n    initmenu(ddmenu) {\n        if (ddmenu.getMenu() == null) {\n            setTimeout(() => { this.initmenu(ddmenu); }, 10);\n            return;\n        }\n        let impl = this.form.formref.instance[\"_impl_\"];\n        ddmenu.getMenu().getHandler().onFormChange(impl.form);\n        this.minw = this.menu.clientWidth + 50;\n        if (this.sizex < this.minw) {\n            this.sizex = this.minw;\n            this.width = this.sizex + \"px\";\n            this.change.detectChanges();\n        }\n    }\n    ngAfterViewInit() {\n        this.menu = this.menuElement?.nativeElement;\n        this.window = this.windowElement?.nativeElement;\n        this.topbar = this.topbarElement?.nativeElement;\n        this.content = this.contentElement?.nativeElement;\n        this.display();\n        WindowListener.add(\"modal\", this, \"mouseup\");\n        WindowListener.add(\"modal\", this, \"mousemove\");\n        WindowListener.add(\"modal\", this, \"mousedown\");\n        this.topbar.addEventListener(\"mousedown\", (event) => { this.startmove(event); });\n    }\n    onEvent(event) {\n        switch (event.type) {\n            case \"mouseup\":\n                this.mouseup();\n                break;\n            case \"mousemove\":\n                this.movePopup(event);\n                this.resizePopup(event);\n                this.resizemousemove(event);\n                break;\n            case \"mousedown\":\n                this.startresize(event);\n                break;\n        }\n    }\n    startmove(event) {\n        if (this.resizexy)\n            return;\n        this.move = true;\n        event = event || window.event;\n        event.preventDefault();\n        this.offy = +event.clientY - this.posy;\n        this.offx = +event.clientX - this.posx;\n    }\n    mouseup() {\n        if (!this.move && !this.resz)\n            return;\n        this.move = false;\n        this.resz = false;\n        this.resizexy = false;\n        this.window.style.cursor = \"default\";\n        document.body.style.cursor = \"default\";\n    }\n    movePopup(event) {\n        if (!this.move)\n            return;\n        event = event || window.event;\n        let deltay = +event.clientY - this.posy;\n        let deltax = +event.clientX - this.posx;\n        this.posy += (deltay - this.offy);\n        this.posx += (deltax - this.offx);\n        if (this.posy > 0)\n            this.top = this.posy + \"px\";\n        if (this.posx > 0)\n            this.left = this.posx + \"px\";\n        this.change.detectChanges();\n    }\n    resizemousemove(event) {\n        if (this.resz)\n            return;\n        event = event || window.event;\n        let posx = +event.clientX;\n        let posy = +event.clientY;\n        let offx = this.posx + this.sizex - posx;\n        let offy = this.posy + this.sizey - posy;\n        let before = false;\n        if (this.resizex || this.resizey)\n            before = true;\n        this.resizex = false;\n        this.resizey = false;\n        if (offx > -7 && offx < 10 && posy > this.posy - 7 && posy < this.posy + this.sizey + 7)\n            this.resizex = true;\n        if (offy > -7 && offy < 10 && posx > this.posx - 7 && posx < this.posx + this.sizex + 7)\n            this.resizey = true;\n        if (this.resizex && this.resizey) {\n            this.resizex = true;\n            this.resizey = true;\n        }\n        if (this.resizex && !this.resizey) {\n            this.window.style.cursor = \"e-resize\";\n            document.body.style.cursor = \"e-resize\";\n        }\n        if (this.resizey && !this.resizex) {\n            this.window.style.cursor = \"s-resize\";\n            document.body.style.cursor = \"s-resize\";\n        }\n        if (this.resizex && this.resizey) {\n            this.window.style.cursor = \"se-resize\";\n            document.body.style.cursor = \"se-resize\";\n        }\n        if (before && !this.resizexy) {\n            this.window.style.cursor = \"default\";\n            document.body.style.cursor = \"default\";\n        }\n    }\n    startresize(event) {\n        if (!this.resizexy)\n            return;\n        this.resz = true;\n        event = event || window.event;\n        event.preventDefault();\n        this.offy = +event.clientY;\n        this.offx = +event.clientX;\n    }\n    resizePopup(event) {\n        if (!this.resz)\n            return;\n        event = event || window.event;\n        let deltay = +event.clientY - this.offy;\n        let deltax = +event.clientX - this.offx;\n        if (this.resizex && (this.sizex > this.minw || deltax > 0)) {\n            this.sizex += deltax;\n            this.width = this.sizex + \"px\";\n        }\n        if (this.resizey && (this.sizey > this.minh || deltay > 0)) {\n            this.sizey += deltay;\n            this.height = this.sizey + \"px\";\n        }\n        this.offy = +event.clientY;\n        this.offx = +event.clientX;\n        this.change.detectChanges();\n    }\n    get resizexy() {\n        if (this.resizex || this.resizey)\n            return (true);\n        return (false);\n    }\n    set resizexy(on) {\n        this.resizex = on;\n        this.resizey = on;\n    }\n}\nModalWindow.ɵfac = function ModalWindow_Factory(t) { return new (t || ModalWindow)(i0.ɵɵdirectiveInject(Context), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };\nModalWindow.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: ModalWindow, selectors: [[\"modalwindow\"]], viewQuery: function ModalWindow_Query(rf, ctx) { if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5, ElementRef);\n        i0.ɵɵviewQuery(_c1, 5, ElementRef);\n        i0.ɵɵviewQuery(_c2, 5, ElementRef);\n        i0.ɵɵviewQuery(_c3, 5, ElementRef);\n    } if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.menuElement = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.windowElement = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.topbarElement = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.contentElement = _t.first);\n    } }, decls: 16, vars: 21, consts: [[1, \"modalwindow\"], [1, \"modalwindow-modal-block\"], [\"window\", \"\"], [1, \"modalwindow-container\"], [1, \"modalwindow-topbar\"], [\"topbar\", \"\"], [1, \"modalwindow-center\"], [1, \"modalwindow-corner\"], [\"menu\", \"\"], [1, \"modalwindow-close\"], [1, \"modalwindow-button\", 3, \"click\"], [1, \"modalwindow-block\"], [\"content\", \"\"]], template: function ModalWindow_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1, 2);\n        i0.ɵɵelementStart(3, \"div\", 3);\n        i0.ɵɵelementStart(4, \"div\", 4, 5);\n        i0.ɵɵelementStart(6, \"span\", 6);\n        i0.ɵɵelement(7, \"span\", 7);\n        i0.ɵɵelement(8, \"div\", null, 8);\n        i0.ɵɵelementStart(10, \"span\", 9);\n        i0.ɵɵelementStart(11, \"button\", 10);\n        i0.ɵɵlistener(\"click\", function ModalWindow_Template_button_click_11_listener() { return ctx.close(); });\n        i0.ɵɵtext(12, \"X\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(13, \"div\", 11);\n        i0.ɵɵelement(14, \"div\", null, 12);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n    } if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵstyleMapInterpolate2(\"top: \", ctx.top, \"; left: \", ctx.left, \"\");\n        i0.ɵɵadvance(2);\n        i0.ɵɵstyleMapInterpolate2(\"width: \", ctx.width, \"; height: \", ctx.height, \";\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵstyleMapInterpolate2(\"color: \", ctx.tcolor, \"; background-color: \", ctx.bcolor, \"\");\n        i0.ɵɵadvance(2);\n        i0.ɵɵstyleMapInterpolate1(\"color: \", ctx.tcolor, \";\");\n        i0.ɵɵadvance(5);\n        i0.ɵɵstyleMapInterpolate1(\"color: \", ctx.btncolor, \";\");\n        i0.ɵɵadvance(2);\n        i0.ɵɵstyleMapInterpolate1(\"margin-top: \", ctx.tmargin, \";\");\n    } }, styles: [\".modalwindow[_ngcontent-%COMP%]{top:0;left:0;z-index:1;width:100%;height:100%;display:block;overflow:auto;position:fixed}.modalwindow-modal-block[_ngcontent-%COMP%]{position:absolute;background-color:#fefefe}.modalwindow-container[_ngcontent-%COMP%]{position:relative;border:2px solid black}.modalwindow-topbar[_ngcontent-%COMP%]{height:1.7em;margin-left:0;margin-right:0;cursor:default;justify-content:center;border-bottom:2px solid black}.modalwindow-corner[_ngcontent-%COMP%]{width:2.5em;display:block;position:relative}.modalwindow-close[_ngcontent-%COMP%]{top:0;right:0;width:1.75em;height:1.7em;position:absolute;border-left:1px solid black}.modalwindow-button[_ngcontent-%COMP%]{top:50%;width:100%;height:100%;outline:none;font-size:.75em;font-weight:bold;position:relative;background:transparent;transform:translateY(-50%);border:0px solid transparent;box-shadow:0 0 0 transparent;text-shadow:0px 0px 0px transparent}.modalwindow-center[_ngcontent-%COMP%]{top:0;bottom:0;width:93%;height:100%;display:flex;align-items:center;justify-content:center}.modalwindow-block[_ngcontent-%COMP%]{left:0;top:3vh;right:0;bottom:0;display:flex;overflow:auto;position:absolute;justify-content:center}\"], changeDetection: 0 });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ModalWindow, [{\n        type: Component,\n        args: [{\n                selector: 'modalwindow',\n                template: `\n    <div class=\"modalwindow\">\n      <div #window class=\"modalwindow-modal-block\" style=\"top: {{top}}; left: {{left}}\">\n        <div class=\"modalwindow-container\" style=\"width: {{width}}; height: {{height}};\">\n\t\t  <div #topbar class=\"modalwindow-topbar\" style=\"color: {{tcolor}}; background-color: {{bcolor}}\">\n\t\t    <span class=\"modalwindow-center\" style=\"color: {{tcolor}};\">\n\t\t\t\t<span class=\"modalwindow-corner\"></span>\n\t\t\t\t<div #menu></div>\n\t\t\t\t<span class=\"modalwindow-close\">\n\t\t\t\t\t<button class=\"modalwindow-button\" style=\"color: {{btncolor}};\" (click)=\"close()\">X</button>\n\t\t\t\t</span>\n\t\t\t</span>\n\t\t  </div>\n          <div class=\"modalwindow-block\" style=\"margin-top: {{tmargin}};\"><div #content></div></div>\n        </div>\n      </div>\n    </div>\n  `,\n                styles: [`\n    .modalwindow\n    {\n        top: 0;\n        left: 0;\n        z-index: 1;\n        width: 100%;\n        height: 100%;\n        display: block;\n        overflow: auto;\n        position: fixed;\n    }\n\n    .modalwindow-modal-block\n    {\n      position: absolute;\n      background-color: #fefefe;\n    }\n\n    .modalwindow-container\n    {\n        position: relative;\n        border: 2px solid black;\n    }\n\n    .modalwindow-topbar\n    {\n        height: 1.70em;\n        margin-left: 0;\n        margin-right: 0;\n        cursor:default;\n\t\tjustify-content: center;\n        border-bottom: 2px solid black;\n    }\n\n\t.modalwindow-corner\n\t{\n\t\twidth: 2.5em;\n\t\tdisplay: block;\n\t\tposition: relative;\n\t}\n\n\t.modalwindow-close\n\t{\n\t\ttop: 0;\n\t\tright: 0;\n\t\twidth: 1.75em;\n\t\theight: 1.70em;\n\t\tposition: absolute;\n\t\tborder-left: 1px solid black;\n\t}\n\n\t.modalwindow-button\n\t{\n\t\ttop: 50%;\n\t\twidth: 100%;\n\t\theight: 100%;\n\t\toutline:none;\n\t\tfont-size: 0.75em;\n\t\tfont-weight: bold;\n\t\tposition: relative;\n\t\tbackground: transparent;\n\t\ttransform: translateY(-50%);\n\t\tborder: 0px solid transparent;\n\t\tbox-shadow: 0px 0px 0px transparent;\n\t\ttext-shadow: 0px 0px 0px transparent;\n\t}\n\n\t.modalwindow-center\n\t{\n\t\ttop: 0;\n\t\tbottom: 0;\n\t\twidth: 93%;\n\t\theight: 100%;\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tjustify-content: center;\n\t}\n\n    .modalwindow-block\n    {\n        left: 0;\n        top: 3vh;\n        right: 0;\n        bottom: 0;\n\t\tdisplay: flex;\n        overflow: auto;\n        position: absolute;\n\t\tjustify-content: center;\n    }\n`],\n                changeDetection: ChangeDetectionStrategy.OnPush\n            }]\n    }], function () { return [{ type: Context }, { type: i0.ChangeDetectorRef }]; }, { menuElement: [{\n            type: ViewChild,\n            args: [\"menu\", { read: ElementRef }]\n        }], windowElement: [{\n            type: ViewChild,\n            args: [\"window\", { read: ElementRef }]\n        }], topbarElement: [{\n            type: ViewChild,\n            args: [\"topbar\", { read: ElementRef }]\n        }], contentElement: [{\n            type: ViewChild,\n            args: ['content', { read: ElementRef }]\n        }] }); })();\n\nclass FormsControl {\n    constructor(app, builder) {\n        this.app = app;\n        this.builder = builder;\n        this.utils = new Utils();\n        this.formlist = [];\n        this.forms = new Map();\n    }\n    setFormArea(formarea) {\n        this.formarea = formarea;\n    }\n    setFormsDefinitions(forms) {\n        let futil = new FormUtil();\n        for (let i = 0; i < forms.length; i++) {\n            let form = forms[i];\n            let def = futil.convert(form);\n            this.formlist.push(def);\n            this.forms.set(def.name, def);\n        }\n        return (this.forms);\n    }\n    findFormByPath(path) {\n        for (let i = 0; i < this.formlist.length; i++) {\n            if (this.formlist[i].path == path)\n                return (this.formlist[i].name);\n        }\n        return (null);\n    }\n    getFormsList() {\n        return (this.formlist);\n    }\n    getFormsDefinitions() {\n        return (this.forms);\n    }\n    closeform(form, destroy) {\n        let name = this.utils.getName(form);\n        let formdef = this.forms.get(name);\n        if (formdef == null || formdef.formref == null)\n            return;\n        this.close(formdef, destroy);\n    }\n    close(formdef, destroy) {\n        if (formdef.formref == null)\n            return;\n        let formsarea = this.formarea.getFormsArea();\n        let element = formdef.formref.hostView.rootNodes[0];\n        if (this.current != null && this.current.element == element) {\n            this.current = null;\n            formsarea.removeChild(element);\n            this.builder.getAppRef().detachView(formdef.formref.hostView);\n        }\n        if (destroy) {\n            formdef.formref.destroy();\n            formdef.windowopts = null;\n            formdef.formref = null;\n        }\n    }\n    display(formdef) {\n        if (formdef == null || formdef.formref == null)\n            return;\n        let formsarea = this.formarea.getFormsArea();\n        let element = formdef.formref.hostView.rootNodes[0];\n        let impl = formdef.formref.instance[\"_impl_\"];\n        if (formdef.windowopts == null) {\n            this.current = { formdef: formdef, element: element };\n            this.builder.getAppRef().attachView(formdef.formref.hostView);\n            formsarea.appendChild(element);\n        }\n        else {\n            let id = {\n                impl: impl,\n                ref: formdef.formref,\n                name: formdef.name,\n                modalopts: formdef.windowopts\n            };\n            impl.setInstanceID(id);\n            let win = this.createWindow();\n            win.setForm(formdef);\n            win.setApplication(this.app);\n        }\n    }\n    createWindow() {\n        let winref = this.app.builder.createComponent(ModalWindow);\n        let win = winref.instance;\n        win.setWinRef(winref);\n        let element = winref.hostView.rootNodes[0];\n        this.builder.getAppRef().attachView(winref.hostView);\n        document.body.appendChild(element);\n        return (win);\n    }\n    getFormInstance(form) {\n        let name = this.utils.getName(form);\n        let formdef = this.forms.get(name);\n        if (formdef == null)\n            return (null);\n        if (formdef.formref == null) {\n            formdef.formref = this.createForm(formdef.component);\n            if (formdef.windowdef != null && formdef.windowdef.wizard)\n                formdef.windowopts = formdef.windowdef;\n        }\n        return (formdef);\n    }\n    createForm(component) {\n        let ref = this.builder.createComponent(component);\n        if (!(ref.instance instanceof Form)) {\n            let name = ref.instance.constructor.name;\n            console.log(\"Component \" + name + \" is not an instance of Form\");\n            return;\n        }\n        let impl = ref.instance[\"_impl_\"];\n        impl.setApplication(this.app);\n        return (ref);\n    }\n}\n\nclass Connection {\n    constructor(app) {\n        this.app = app;\n        this.url = null;\n        this.conn = null;\n        this.keepalive = 0;\n        this.client = null;\n        this.stmtid = 0;\n        this.waitlim = 250;\n        this.running = new Map();\n        this.client = app.client;\n    }\n    async connect(usr, pwd) {\n        if (this.url == null) {\n            await this.app.config.ready();\n            let conf = await this.app.config.others;\n            this.url = conf[\"database.js\"];\n            if (this.url == null || this.url.length == 0)\n                this.url = window.location.origin;\n        }\n        if (this.conn != null) {\n            this.alert(\"Already logged on\");\n            return;\n        }\n        if (usr == null || pwd == null) {\n            this.alert(\"Username and password must be specified to logon\");\n            return;\n        }\n        let credentials = { usr: usr, pwd: pwd };\n        let response = await this.invoke(\"connect\", credentials);\n        if (response[\"status\"] == \"failed\") {\n            this.alert(response[\"message\"]);\n            return;\n        }\n        this.conn = response[\"id\"];\n        ;\n        this.keepalive = response[\"keep-alive\"];\n        this.app.appstate.onConnect();\n        this.keepAlive();\n        return (response);\n    }\n    async commit() {\n        if (this.conn != null) {\n            let response = await this.invoke(\"commit\", {});\n            if (response[\"status\"] != \"ok\")\n                this.alert(JSON.stringify(response));\n            this.app.appstate.transactionChange(false);\n            return (false);\n        }\n        return (true);\n    }\n    async rollback() {\n        if (this.conn != null) {\n            let response = await this.invoke(\"rollback\", {});\n            if (response[\"status\"] != \"ok\") {\n                this.alert(JSON.stringify(response));\n                return (false);\n            }\n            this.app.appstate.transactionChange(false);\n            return (false);\n        }\n        return (true);\n    }\n    get connected() {\n        return (this.conn != null);\n    }\n    async disconnect() {\n        if (this.conn == null) {\n            this.alert(\"not logged on\");\n            return;\n        }\n        let response = await this.invoke(\"disconnect\", {});\n        if (response[\"status\"] != \"ok\")\n            this.alert(JSON.stringify(response));\n        this.conn = null;\n        this.keepalive = 0;\n        this.app.appstate.transactionChange(false);\n        this.app.appstate.onDisconnect();\n    }\n    async keepAlive() {\n        if (this.conn != null && +this.keepalive > 0) {\n            let response = null;\n            let body = { \"keep-alive\": true };\n            await this.client.post(this.url + \"/\" + this.conn + \"/ping\", body).toPromise().then(data => { response = data; }, error => { response = error; });\n            if (response[\"status\"] != \"ok\") {\n                this.keepalive = 0;\n                this.alert(JSON.stringify(response), \"KeepAlive stopped\");\n            }\n            setTimeout(() => { this.keepAlive(); }, this.keepalive * 1000);\n        }\n    }\n    async invokestmt(stmt) {\n        return (this.invoke(SQLType[stmt.type], stmt.build()));\n    }\n    async invoke(cmd, body) {\n        let url = this.url + \"/\";\n        if (this.conn != null)\n            url = url + this.conn + \"/\";\n        if (this.conn == null && cmd != \"connect\")\n            return ({ status: \"failed\", message: \"Not logged on\" });\n        if (cmd == \"lock\" || cmd == \"insert\" || cmd == \"update\" || cmd == \"delete\")\n            this.app.appstate.transactionChange(true);\n        let stid = this.stmtid++;\n        let start = new Date().getTime();\n        this.running.set(stid, start);\n        setTimeout(() => { this.showwait(); }, +this.waitlim + +10);\n        return (this.client.post(url + cmd, body).toPromise().then(data => { return (this.onReply(stid, data)); }, error => { return (this.onReply(stid, error)); }));\n    }\n    onReply(stid, data) {\n        let response = null;\n        this.running.delete(stid);\n        this.showwait();\n        if (!(data instanceof HttpErrorResponse))\n            response = data;\n        else\n            response = { status: \"failed\", error: \"500\", message: JSON.stringify(data.message) };\n        return (response);\n    }\n    alert(msg, title) {\n        if (title == null)\n            title = \"Database Call Failed\";\n        MessageBox.show(this.app, msg, title);\n    }\n    showwait() {\n        let now = new Date().getTime();\n        let min = now;\n        this.running.forEach((start) => {\n            if (+start < +min)\n                min = start;\n        });\n        let show = false;\n        if (now - min > +this.waitlim)\n            show = true;\n        if (show)\n            Wait.show(this.app);\n        else\n            Wait.close(this.app);\n    }\n}\n\nclass ApplicationState {\n    constructor(app) {\n        this.app = app;\n        this.menu = null;\n        this.form = null;\n        this.transaction = false;\n        this.appmenu = null;\n        this.forms = new Map();\n        this.menus = new Map();\n        this.menu = new DefaultMenu();\n        this.connection = new Connection(app);\n    }\n    addForm(form) {\n        this.forms.set(form.guid, form);\n    }\n    dropForm(form) {\n        this.forms.delete(form.guid);\n    }\n    addMenu(menu) {\n        let mhdl = menu.getHandler();\n        this.menus.set(mhdl.guid, mhdl);\n    }\n    dropMenu(menu) {\n        if (menu != null) {\n            let mhdl = menu.getHandler();\n            this.menus.delete(mhdl.guid);\n        }\n    }\n    async clearAllForms() {\n        this.forms.forEach((form) => { form.clear(); });\n    }\n    async onConnect() {\n        this.menus.forEach((mhdl) => { mhdl.onConnect(); });\n        let forms = [];\n        this.forms.forEach(async (form) => { forms.push(form); });\n        for (let f = 0; f < forms.length; f++) {\n            let funcs = FormDefinitions.getOnConnect(forms[f].name);\n            for (let i = 0; i < funcs.length; i++)\n                await this.app.execfunc(forms[f], funcs[i]);\n        }\n        return (true);\n    }\n    transactionChange(trans) {\n        if (!trans)\n            this.forms.forEach((form) => { form.onCommit(); });\n        if (trans + \"\" != this.transaction + \"\") {\n            this.transaction = trans;\n            this.menus.forEach((mhdl) => { mhdl.onTransactionChange(); });\n        }\n    }\n    async onDisconnect() {\n        this.menus.forEach((mhdl) => { mhdl.onDisconnect(); });\n        let forms = [];\n        this.forms.forEach(async (form) => { forms.push(form); });\n        for (let f = 0; f < forms.length; f++) {\n            let funcs = FormDefinitions.getOnDisconnect(forms[f].name);\n            for (let i = 0; i < funcs.length; i++)\n                await this.app.execfunc(forms[f], funcs[i]);\n        }\n        return (true);\n    }\n    get connected() {\n        return (this.connection.connected);\n    }\n    alert(message, title, width, height) {\n        MessageBox.show(this.app, message, title, width, height);\n    }\n}\n\nclass InstanceControl {\n    constructor(ctrl) {\n        this.ctrl = ctrl;\n        this.utils = new Utils();\n        this.futil = new FormUtil();\n    }\n    setFormsDefinitions(forms) {\n        this.forms = forms;\n    }\n    getNewInstance(form, modal) {\n        let name = this.utils.getName(form);\n        if (name == null)\n            return (null);\n        let def = this.forms.get(name);\n        if (def == null)\n            return (null);\n        let ref = this.ctrl.createForm(def.component);\n        if (ref == null)\n            return (null);\n        let impl = ref.instance[\"_impl_\"];\n        if (modal == null)\n            modal = def.windowdef;\n        modal = this.futil.complete(modal, true);\n        let id = {\n            ref: ref,\n            impl: impl,\n            name: def.name,\n            modalopts: modal\n        };\n        impl.setInstanceID(id);\n        return (id);\n    }\n    getInstance(id) {\n        let def = this.forms.get(id.name);\n        let instance = this.futil.clone(def);\n        if (id.ref == null)\n            id.ref = this.ctrl.createForm(def.component);\n        instance.formref = id.ref;\n        instance.windowopts = id.modalopts;\n        return (instance);\n    }\n    closeInstance(id, destroy) {\n        let inst = this.getInstance(id);\n        if (destroy) {\n            inst.formref.destroy();\n            inst.windowopts = null;\n            inst.formref = null;\n        }\n    }\n}\n\nclass Field {\n    constructor(name, row) {\n        this.seq = 0;\n        this.value$ = \"\";\n        this.current$ = false;\n        this.enabled$ = false;\n        this.field = null;\n        this.fields$ = [];\n        this.cfields$ = [];\n        this.state$ = RecordState.na;\n        this.ids = new Map();\n        this.index = new Map();\n        this.row$ = row;\n        this.name$ = name;\n    }\n    ;\n    get name() {\n        return (this.name$);\n    }\n    get row() {\n        return (this.row$);\n    }\n    set block(block) {\n        this.block$ = block;\n    }\n    get block() {\n        return (this.block$);\n    }\n    get fields() {\n        return (this.fields$);\n    }\n    get cfields() {\n        return (this.cfields$);\n    }\n    set valid(valid) {\n        this.fields.forEach((inst) => { inst.valid = valid; });\n        if (this.current)\n            this.cfields.forEach((inst) => { inst.valid = valid; });\n    }\n    getInstance(guid) {\n        return (this.index.get(guid));\n    }\n    getFirstInstance() {\n        if (this.fields.length > 0)\n            return (this.fields[0]);\n        if (this.current && this.cfields.length > 0) {\n            let inst = this.cfields[0];\n            inst.row = this.row;\n            return (inst);\n        }\n        return (null);\n    }\n    get state() {\n        return (this.state$);\n    }\n    get readonly() {\n        for (let i = 0; i < this.fields.length; i++) {\n            if (this.fields[i].enabled) {\n                if (!this.fields[i].readonly)\n                    return (false);\n            }\n        }\n        if (this.current$) {\n            for (let i = 0; i < this.cfields.length; i++) {\n                if (this.cfields[i].enabled) {\n                    if (!this.cfields[i].readonly)\n                        return (false);\n                }\n            }\n        }\n        return (true);\n    }\n    get current() {\n        return (this.current$);\n    }\n    set current(flag) {\n        this.current$ = flag;\n        if (!flag)\n            this.cfields.forEach((inst) => {\n                inst.value = null;\n                inst.disable();\n            });\n        else\n            this.cfields.forEach((inst) => {\n                inst.parent = this;\n                inst.row = this.row;\n                inst.value = this.value$;\n                inst.state = this.state;\n                inst.readonly = this.readonly;\n                inst.enable();\n            });\n    }\n    get value() {\n        return (this.value$);\n    }\n    set value(value) {\n        this.value$ = value;\n        this.fields.forEach((inst) => { inst.value = value; });\n        if (this.current)\n            this.cfields.forEach((inst) => { inst.value = value; });\n    }\n    get enabled() {\n        return (this.enabled$);\n    }\n    focus() {\n        if (this.field != null && this.field.enabled) {\n            if (this.field.focus())\n                return (true);\n        }\n        for (let i = 0; i < this.fields.length; i++) {\n            if (this.fields[i].enabled) {\n                if (this.fields[i].focus())\n                    return (true);\n            }\n        }\n        if (this.current$) {\n            for (let i = 0; i < this.cfields.length; i++) {\n                if (this.cfields[i].enabled) {\n                    if (this.cfields[i].focus())\n                        return (true);\n                }\n            }\n        }\n        return (false);\n    }\n    add(field) {\n        field.parent = this;\n        if (field.row == -1) {\n            this.cfields.push(field);\n            if (field.guid == null)\n                field.guid = \"c:\" + (this.seq++);\n        }\n        else {\n            this.fields.push(field);\n            field.guid = \"f:\" + (this.seq++);\n        }\n        this.index.set(field.guid, field);\n        if (field.id.length > 0)\n            this.ids.set(field.id, field);\n    }\n    get definition() {\n        return (this.def);\n    }\n    setDefinition(def, cascade) {\n        this.def = def;\n        if (cascade) {\n            for (let i = 0; i < this.fields.length; i++)\n                this.fields[i].definition = def;\n            for (let i = 0; i < this.cfields.length; i++)\n                this.cfields[i].definition = def;\n        }\n    }\n    set state(state) {\n        this.state$ = state;\n        this.fields.forEach((field) => { field.state = state; });\n        if (this.current)\n            this.cfields.forEach((field) => { field.state = state; });\n    }\n    enable(readonly) {\n        this.enabled$ = true;\n        this.fields.forEach((field) => { field.readonly = readonly; field.enable(); });\n        if (this.current)\n            this.cfields.forEach((field) => { field.readonly = readonly; field.enable(); });\n    }\n    disable() {\n        this.enabled$ = false;\n        this.fields.forEach((field) => { field.disable(); });\n        if (this.current)\n            this.cfields.forEach((field) => { field.disable(); });\n    }\n    validate() {\n        let valid = true;\n        let inst = null;\n        for (let i = 0; i < this.fields.length; i++) {\n            inst = this.fields[i];\n            if (!this.fields[i].validate()) {\n                valid = false;\n                break;\n            }\n        }\n        if (valid && this.current) {\n            for (let i = 0; i < this.cfields.length; i++) {\n                inst = this.cfields[i];\n                if (!this.cfields[i].validate()) {\n                    valid = false;\n                    break;\n                }\n            }\n        }\n        this.valid = valid;\n        if (inst != null)\n            this.copy(inst);\n        return (valid);\n    }\n    async onEvent(event, field, type, key) {\n        if (type == \"blur\")\n            this.field = null;\n        if (type == \"focus\")\n            this.field = field;\n        if (type == \"cchange\" || type == \"change\")\n            this.copy(field);\n        if (this.block$ != null)\n            this.block$.onEvent(event, field, type, key);\n    }\n    copy(field) {\n        this.value$ = field.value;\n        this.fields.forEach((inst) => { if (inst != field)\n            inst.value = this.value$; });\n        this.cfields.forEach((inst) => { if (inst != field)\n            inst.value = this.value$; });\n    }\n}\n\nclass Container {\n    constructor() {\n        this.fields$ = [];\n        this.blocks = new Map();\n    }\n    register(field) {\n        let bname = field.block;\n        let block = this.blocks.get(bname);\n        if (block == null) {\n            block = new ContainerBlock(bname);\n            this.blocks.set(bname, block);\n        }\n        block.add(field);\n        block.fields.push(field);\n        this.fields$.push(field);\n    }\n    get fields() {\n        return (this.fields$);\n    }\n    getBlock(block) {\n        return (this.blocks.get(block.toLowerCase()));\n    }\n    getBlocks() {\n        let blocks = [];\n        this.blocks.forEach((blk) => { blocks.push(blk); });\n        return (blocks);\n    }\n    finish() {\n        this.blocks.forEach((block) => { block[\"finish\"](); });\n    }\n}\nclass ContainerBlock {\n    constructor(name) {\n        this.rows$ = 0;\n        this.fields$ = [];\n        this.current$ = [];\n        this.records$ = new Map();\n        this.name$ = name;\n    }\n    get name() {\n        return (this.name$);\n    }\n    get rows() {\n        return (this.rows$);\n    }\n    add(field) {\n        let row = field.row;\n        if (field.row == -1) {\n            this.current$.push(field);\n            return;\n        }\n        let rec = this.records$.get(+row);\n        if (rec == null) {\n            rec = new ContainerRecord(row);\n            this.records$.set(+row, rec);\n            if (field.row > this.rows$)\n                this.rows$ = field.row;\n        }\n        rec.add(field);\n    }\n    get fields() {\n        return (this.fields$);\n    }\n    get records() {\n        let recs = [];\n        this.records$.forEach((rec) => { recs.push(rec); });\n        let sorted = recs.sort((a, b) => { return (a.row - b.row); });\n        return (sorted);\n    }\n    getRecord(row) {\n        return (this.records$.get(+row));\n    }\n    finish() {\n        if (this.rows$ == 0) {\n            let rec = new ContainerRecord(0);\n            this.records$.set(0, rec);\n            this.current$.forEach((field) => {\n                field.row = 0;\n                rec.add(field);\n            });\n            this.current$ = [];\n        }\n        else {\n            this.records$.forEach((rec) => {\n                this.current$.forEach((inst) => {\n                    let group = rec.index.get(inst.name);\n                    if (group != null)\n                        group.add(inst);\n                    else\n                        rec.add(inst);\n                });\n            });\n        }\n    }\n}\nclass ContainerRecord {\n    constructor(row) {\n        this.fields = [];\n        this.index = new Map();\n        this.row = row;\n    }\n    add(field) {\n        let group = this.index.get(field.name);\n        if (group == null) {\n            group = new Field(field.name, this.row);\n            this.index.set(field.name, group);\n            this.fields.push(group);\n        }\n        group.add(field);\n    }\n}\n\nclass ContainerControl {\n    constructor(builder) {\n        this.builder = builder;\n    }\n    setContainer(container) {\n        if (container == null)\n            container = new Container();\n        this.container = container;\n    }\n    getContainer() {\n        let cont = this.container;\n        return (cont);\n    }\n    dropContainer() {\n        this.container = null;\n    }\n}\n\nclass ApplicationImpl {\n    constructor(ctx, client, builder) {\n        this.client = client;\n        this.builder = builder;\n        this.ready = 2;\n        this.config$ = null;\n        this.marea = null;\n        this.apptitle = null;\n        this.formlist = null;\n        this.mfactory = null;\n        this.formsctl = null;\n        this.state = null;\n        this.contctl = null;\n        this.instances = null;\n        this.app = ctx.app;\n        this.config$ = ctx.conf;\n        this.enable();\n        this.loadConfig();\n        this.state = new ApplicationState(this);\n        this.contctl = new ContainerControl(builder);\n        this.mfactory = new MenuFactory(this.builder);\n        this.formsctl = new FormsControl(this, builder);\n        this.instances = new InstanceControl(this.formsctl);\n        this.setFormsDefinitions(FormDefinitions.getForms());\n        this.state.appmenu = this.createmenu(this.state.menu);\n    }\n    async loadConfig() {\n        await this.config$.ready();\n        if (this.config$.others.hasOwnProperty(\"title\"))\n            this.setTitle(this.config$.others[\"title\"]);\n        if (this.config$.others.hasOwnProperty(\"theme\"))\n            this.config$.setTheme(this.config$.others[\"theme\"]);\n        this.ready--;\n        this.showLinkedForm();\n    }\n    get config() {\n        return (this.config$);\n    }\n    enable() {\n        WindowListener.add(\"app\", this, \"keydown\");\n    }\n    disable() {\n        WindowListener.remove(\"app\", \"keydown\");\n    }\n    get appstate() {\n        return (this.state);\n    }\n    getApplication() {\n        return (this.app);\n    }\n    setTitle(title) {\n        this.apptitle = title;\n        this.showTitle(title);\n    }\n    close() {\n        this.closeform(this.state.form, true);\n    }\n    setMenu(menu) {\n        this.deletemenu(this.state.menu);\n        this.state.menu = menu;\n        this.state.appmenu = this.createmenu(menu);\n        this.showMenu(this.state.appmenu);\n    }\n    getMenu() {\n        return (this.state.menu);\n    }\n    showTitle(title) {\n        if (title == null)\n            title = this.apptitle;\n        document.title = title;\n    }\n    showPath(name, path) {\n        let state = { additionalInformation: 'None' };\n        let url = window.location.protocol + '//' + window.location.host;\n        window.history.replaceState(state, name, url + path);\n    }\n    getFormsList() {\n        return (this.formsctl.getFormsList());\n    }\n    getFormsDefinitions() {\n        return (this.formsctl.getFormsDefinitions());\n    }\n    setFormList(formlist) {\n        this.formlist = formlist;\n    }\n    setMenuArea(area) {\n        this.marea = area;\n        this.showMenu(this.state.appmenu);\n    }\n    setFormArea(area) {\n        this.formsctl.setFormArea(area);\n        this.ready--;\n    }\n    setContainer(container) {\n        this.contctl.setContainer(container);\n    }\n    getContainer() {\n        return (this.contctl.getContainer());\n    }\n    dropContainer() {\n        this.contctl.dropContainer();\n    }\n    get connection() {\n        return (this.appstate.connection);\n    }\n    get connected() {\n        return (this.appstate.connected);\n    }\n    async disconnect() {\n        await this.appstate.connection.disconnect();\n        this.getCurrentForm()?.focus();\n    }\n    async newForm(impl) {\n        let funcs = FormDefinitions.getOnInit(impl.name);\n        for (let i = 0; i < funcs.length; i++)\n            await this.execfunc(impl, funcs[i]);\n        funcs = FormDefinitions.getOnShow(impl.name);\n        for (let i = 0; i < funcs.length; i++)\n            await this.execfunc(impl, funcs[i]);\n        impl.onShow();\n    }\n    async preform(impl, parameters, formdef, path) {\n        impl.setParameters(parameters);\n        if (!impl.initiated()) {\n            impl.path = formdef.path;\n            impl.title = formdef.title;\n            this.state.addForm(impl);\n            this.showTitle(formdef.title);\n            if (path)\n                this.showPath(impl.name, formdef.path);\n            return;\n        }\n        this.showTitle(impl.title);\n        if (path)\n            this.showPath(impl.name, impl.path);\n        let funcs = FormDefinitions.getOnShow(impl.name);\n        for (let i = 0; i < funcs.length; i++)\n            await this.execfunc(impl, funcs[i]);\n        impl.onShow();\n    }\n    async postform(impl, destroy) {\n        impl.onHide();\n        let funcs = FormDefinitions.getOnHide(impl.name);\n        for (let i = 0; i < funcs.length; i++)\n            await this.execfunc(impl, funcs[i]);\n        if (destroy) {\n            this.state.dropForm(impl);\n            let funcs = FormDefinitions.getOnDestroy(impl.name);\n            for (let i = 0; i < funcs.length; i++)\n                await this.execfunc(impl, funcs[i]);\n        }\n    }\n    async execfunc(impl, func) {\n        try {\n            await impl.form[func]();\n        }\n        catch (error) {\n            console.log(error);\n        }\n    }\n    async callform(form, destroy, parameters) {\n        if (this.ready != 0) {\n            setTimeout(() => { this.callform(form, destroy, parameters); }, 10);\n            return;\n        }\n        if (this.state.form != null) {\n            // Make sure changes has been validated\n            if (!await this.state.form.validate())\n                return;\n            // get current form in chain\n            let curr = this.state.form.getChain();\n            // let form handle the showform\n            await curr.callform(form, destroy, parameters);\n        }\n    }\n    getCurrentForm() {\n        if (this.ready != 0)\n            return (null);\n        if (this.state.form == null)\n            return (null);\n        return (this.state.form.getChain());\n    }\n    async showform(form, destroy, parameters) {\n        if (this.ready != 0) {\n            setTimeout(() => { this.showform(form, destroy, parameters); }, 10);\n            return;\n        }\n        if (this.state.form != null) {\n            // Make sure changes has been validated\n            if (!await this.state.form.validate())\n                return;\n            // if form has called anoother form\n            let curr = this.state.form.getChain();\n            if (curr != this.state.form) {\n                // let form handle the showform\n                curr.showform(form, destroy, parameters);\n                return;\n            }\n            if (this.state.form.getModalWindow() != null)\n                return;\n            this.closeform(this.state.form, false);\n        }\n        if (destroy)\n            this.formsctl.closeform(form, destroy);\n        let formdef = this.getFormInstance(form);\n        if (formdef == null)\n            return;\n        let impl = formdef.formref.instance[\"_impl_\"];\n        await this.preform(impl, parameters, formdef, true);\n        this.state.form = impl;\n        let fmenu = impl.getDropDownMenu();\n        if (!formdef.windowopts?.wizard)\n            this.showMenu(fmenu);\n        DropDownMenu.setForm(fmenu, formdef.formref.instance);\n        this.formsctl.display(formdef);\n    }\n    showinstance(inst) {\n        if (this.ready == 0)\n            this.formsctl.display(inst);\n        else\n            setTimeout(() => { this.showinstance(inst); }, 10);\n    }\n    closeform(impl, destroy) {\n        if (impl == null)\n            return;\n        this.postform(impl, destroy);\n        this.formsctl.closeform(impl.name, destroy);\n        if (this.state.appmenu != null)\n            DropDownMenu.setForm(this.state.appmenu, null);\n        this.showPath(\"\", \"\");\n        this.showTitle(null);\n        this.state.form = null;\n        this.showMenu(this.state.appmenu);\n    }\n    getFormInstance(form) {\n        return (this.formsctl.getFormInstance(form));\n    }\n    getNewInstance(form, modal) {\n        return (this.instances.getNewInstance(form, modal));\n    }\n    getInstance(id) {\n        return (this.instances.getInstance(id));\n    }\n    closeInstance(id, destroy) {\n        this.postform(id.impl, destroy);\n        this.instances.closeInstance(id, destroy);\n    }\n    showMenu(menu) {\n        if (this.marea != null)\n            this.marea.display(menu);\n    }\n    deletemenu(menu) {\n        this.state.dropMenu(menu);\n    }\n    createmenu(menu) {\n        if (menu == null)\n            return (null);\n        this.state.addMenu(menu);\n        let ddmenu = this.mfactory.create(menu);\n        return (ddmenu);\n    }\n    setFormsDefinitions(forms) {\n        for (let i = 0; i < forms.length; i++) {\n            let fname = forms[i].component.name.toLowerCase();\n            forms[i].windowopts = FormDefinitions.getWindowOpts(fname);\n            forms[i].databaseusage = DatabaseDefinitions.getFormUsage(fname);\n        }\n        let formsmap = this.formsctl.setFormsDefinitions(forms);\n        this.instances.setFormsDefinitions(formsmap);\n    }\n    showLinkedForm() {\n        if (this.ready != 0) {\n            // Make time for application setup\n            setTimeout(() => { this.showLinkedForm(); }, 500);\n            return;\n        }\n        let form = decodeURI(window.location.pathname);\n        if (form.length > 0)\n            form = this.formsctl.findFormByPath(form);\n        if (form != null) {\n            let inst = this.formsctl.getFormsDefinitions().get(form);\n            if (inst == null || !inst.navigable) {\n                this.showPath(\"\", \"\");\n                return;\n            }\n            let params = new Map();\n            let urlparams = new URLSearchParams(window.location.search);\n            urlparams.forEach((value, key) => { params.set(key, value); });\n            this.showform(form, false, params);\n        }\n    }\n    async onEvent(event) {\n        if (Wait.waiting())\n            return;\n        let keydef = {\n            code: event.keyCode,\n            alt: event.altKey,\n            ctrl: event.ctrlKey,\n            meta: event.metaKey,\n            shift: event.shiftKey\n        };\n        let map = KeyMapper.map(keydef);\n        let key = KeyMapper.keymap(map);\n        if (key == keymap.connect) {\n            this.app.connect();\n            return;\n        }\n        if (key == keymap.disconnect) {\n            this.app.disconnect();\n            return;\n        }\n        if (key == keymap.close ||\n            key == keymap.delete ||\n            key == keymap.listval ||\n            key == keymap.commit ||\n            key == keymap.rollback ||\n            key == keymap.clearform ||\n            key == keymap.insertafter ||\n            key == keymap.insertbefore ||\n            key == keymap.enterquery ||\n            key == keymap.executequery) {\n            event.preventDefault();\n            let form = this.getCurrentForm();\n            if (form != null)\n                form.sendkey(event, key);\n        }\n    }\n}\n\nclass MacKeyMap {\n    constructor() {\n        this.zoom = KeyMapper.map({ code: 90, ctrl: true });\n        this.close = KeyMapper.map({ code: 87, ctrl: true });\n        this.undo = KeyMapper.map({ code: 90, meta: true });\n        this.paste = KeyMapper.map({ code: 86, meta: true });\n        this.enter = KeyMapper.map({ code: KeyCodes.enter });\n        this.escape = KeyMapper.map({ code: KeyCodes.escape });\n        this.listval = KeyMapper.map({ code: 76, shift: true, ctrl: true });\n        this.clearblock = KeyMapper.map({ code: KeyCodes.escape, ctrl: true });\n        this.clearform = KeyMapper.map({ code: KeyCodes.escape, shift: true, ctrl: true });\n        this.insertafter = KeyMapper.map({ code: 73, ctrl: true });\n        this.insertbefore = KeyMapper.map({ code: 73, shift: true, ctrl: true });\n        this.delete = KeyMapper.map({ code: 68, ctrl: true });\n        this.dublicate = KeyMapper.map({ code: 86, ctrl: true });\n        this.commit = KeyMapper.map({ code: KeyCodes.enter, ctrl: true });\n        this.rollback = KeyMapper.map({ code: KeyCodes.f1, ctrl: true, shift: true });\n        this.connect = KeyMapper.map({ code: 67, ctrl: true });\n        this.disconnect = KeyMapper.map({ code: 67, shift: true, ctrl: true });\n        this.nextfield = KeyMapper.map({ code: KeyCodes.tab });\n        this.prevfield = KeyMapper.map({ code: KeyCodes.tab, shift: true });\n        this.nextrecord = KeyMapper.map({ code: KeyCodes.down, shift: false });\n        this.prevrecord = KeyMapper.map({ code: KeyCodes.up, shift: false });\n        this.nextblock = KeyMapper.map({ code: KeyCodes.down, shift: true });\n        this.prevblock = KeyMapper.map({ code: KeyCodes.up, shift: true });\n        this.pageup = KeyMapper.map({ code: 80, ctrl: true, shift: true });\n        this.pagedown = KeyMapper.map({ code: 80, ctrl: true, shift: false });\n        this.enterquery = KeyMapper.map({ code: 81, ctrl: true });\n        this.executequery = KeyMapper.map({ code: 81, shift: true, ctrl: true });\n        this.map =\n            `\n            <table>\n                <tr><td class=\"kmtd\">   connect            </td><td>   ctrl-c             </td></tr>\n                <tr><td class=\"kmtd\">   disconnect         </td><td>   ctrl-shift-c       </td></tr>\n                <tr><td class=\"kmtd\">   close              </td><td>   ctrl-w             </td></tr>\n                <tr><td class=\"kmtd\">   zoom               </td><td>   ctrl-z             </td></tr>\n                <tr><td class=\"kmtd\">   datepicker         </td><td>   ctrl-shift-l       </td></tr>\n                <tr><td class=\"kmtd\">   list of values     </td><td>   ctrl-shift-l       </td></tr>\n                <tr><td class=\"kmtd\">   clear block        </td><td>   ctrl-escape        </td></tr>\n                <tr><td class=\"kmtd\">   clear form         </td><td>   ctrl-shift-escape  </td></tr>\n                <tr><td class=\"kmtd\">   insert after       </td><td>   ctrl-i             </td></tr>\n                <tr><td class=\"kmtd\">   insert before      </td><td>   ctrl-shift-i       </td></tr>\n                <tr><td class=\"kmtd\">   delete             </td><td>   ctrl-d             </td></tr>\n                <tr><td class=\"kmtd\">   commit             </td><td>   ctrl-enter         </td></tr>\n                <tr><td class=\"kmtd\">   rollback           </td><td>   ctrl-shift-escape  </td></tr>\n                <tr><td class=\"kmtd\">   next record        </td><td>   key-down           </td></tr>\n                <tr><td class=\"kmtd\">   previous record    </td><td>   key-up             </td></tr>\n                <tr><td class=\"kmtd\">   page down          </td><td>   ctrl-p             </td></tr>\n                <tr><td class=\"kmtd\">   page up            </td><td>   ctrl-shift-p       </td></tr>\n                <tr><td class=\"kmtd\">   next block         </td><td>   shift-key-down     </td></tr>\n                <tr><td class=\"kmtd\">   previous block     </td><td>   shift-key-up       </td></tr>\n                <tr><td class=\"kmtd\">   enter query        </td><td>   ctrl-q             </td></tr>\n                <tr><td class=\"kmtd\">   execute query      </td><td>   ctrl-shift-q       </td ></tr>\n            </table>\n\n            <style>\n              .kmtd\n              {\n                  width: 150px;\n                  display: block;\n              }\n            </style>\n        `;\n    }\n    ;\n}\n\nclass WinKeyMap {\n    constructor() {\n        this.zoom = KeyMapper.map({ code: 90, ctrl: true });\n        this.close = KeyMapper.map({ code: 87, ctrl: true });\n        this.undo = KeyMapper.map({ code: 90, meta: true });\n        this.paste = KeyMapper.map({ code: 86, ctrl: true });\n        this.enter = KeyMapper.map({ code: KeyCodes.enter });\n        this.escape = KeyMapper.map({ code: KeyCodes.escape });\n        this.listval = KeyMapper.map({ code: KeyCodes.f9 });\n        this.clearblock = KeyMapper.map({ code: KeyCodes.f5, shift: true });\n        this.clearform = KeyMapper.map({ code: KeyCodes.f7, shift: true });\n        this.insertafter = KeyMapper.map({ code: KeyCodes.insert });\n        this.insertbefore = KeyMapper.map({ code: KeyCodes.insert, shift: true });\n        this.dublicate = KeyMapper.map({ code: 86, ctrl: true });\n        this.delete = KeyMapper.map({ code: KeyCodes.delete, ctrl: true });\n        this.commit = KeyMapper.map({ code: KeyCodes.f10, ctrl: false, shift: false });\n        this.rollback = KeyMapper.map({ code: KeyCodes.f10, ctrl: false, shift: true });\n        this.connect = KeyMapper.map({ code: 67, ctrl: true });\n        this.disconnect = KeyMapper.map({ code: 67, shift: true, ctrl: true });\n        this.nextfield = KeyMapper.map({ code: KeyCodes.tab });\n        this.prevfield = KeyMapper.map({ code: KeyCodes.tab, shift: true });\n        this.nextrecord = KeyMapper.map({ code: KeyCodes.down, shift: false });\n        this.prevrecord = KeyMapper.map({ code: KeyCodes.up, shift: false });\n        this.prevblock = KeyMapper.map({ code: KeyCodes.pageup, shift: true });\n        this.nextblock = KeyMapper.map({ code: KeyCodes.pagedown, shift: true });\n        this.pageup = KeyMapper.map({ code: KeyCodes.pageup });\n        this.pagedown = KeyMapper.map({ code: KeyCodes.pagedown });\n        this.enterquery = KeyMapper.map({ code: KeyCodes.f7 });\n        this.executequery = KeyMapper.map({ code: KeyCodes.f8 });\n        this.map =\n            `\n            <table>\n                <tr><td class=\"kmtd\">   connect            </td><td>   ctrl-c             </td></tr>\n                <tr><td class=\"kmtd\">   disconnect         </td><td>   ctrl-shift-c       </td></tr>\n                <tr><td class=\"kmtd\">   close              </td><td>   ctrl-w             </td></tr>\n                <tr><td class=\"kmtd\">   zoom               </td><td>   ctrl-z             </td></tr>\n                <tr><td class=\"kmtd\">   datepicker         </td><td>   F9                 </td></tr>\n                <tr><td class=\"kmtd\">   list of values     </td><td>   F9                 </td></tr>\n                <tr><td class=\"kmtd\">   clear block        </td><td>   shift-F5           </td></tr>\n                <tr><td class=\"kmtd\">   clear form         </td><td>   shift-F7           </td></tr>\n                <tr><td class=\"kmtd\">   insert after       </td><td>   insert             </td></tr>\n                <tr><td class=\"kmtd\">   insert before      </td><td>   shift-insert       </td></tr>\n                <tr><td class=\"kmtd\">   delete             </td><td>   delete             </td></tr>\n                <tr><td class=\"kmtd\">   commit             </td><td>   F10                </td></tr>\n                <tr><td class=\"kmtd\">   rollback           </td><td>   shift-F10          </td></tr>\n                <tr><td class=\"kmtd\">   next record        </td><td>   key-down           </td></tr>\n                <tr><td class=\"kmtd\">   previous record    </td><td>   key-up             </td></tr>\n                <tr><td class=\"kmtd\">   page down          </td><td>   pagedown           </td></tr>\n                <tr><td class=\"kmtd\">   page up            </td><td>   pageup             </td></tr>\n                <tr><td class=\"kmtd\">   next block         </td><td>   shift-pagedown     </td></tr>\n                <tr><td class=\"kmtd\">   previous block     </td><td>   shift-pageup       </td></tr>\n                <tr><td class=\"kmtd\">   enter query        </td><td>   F7                 </td></tr>\n                <tr><td class=\"kmtd\">   execute query      </td><td>   F8                 </td ></tr>\n            </table>\n\n            <style>\n              .kmtd\n              {\n                  width: 150px;\n                  display: block;\n              }\n            </style>\n        `;\n    }\n    ;\n}\n\nclass defaultTheme {\n    constructor() {\n        this.name = \"default\";\n        this.link = \"blue\";\n        this.text = \"black\";\n        this.title = \"white\";\n        this.topbar = \"#303f9f\";\n        this.enabled = \"white\";\n        this.disabled = \"silver\";\n        this.menuoption = \"white\";\n        this.buttontext = \"white\";\n        this.foldertree = \"#303f9f\";\n        this.rowindicator = \"#303f9f\";\n    }\n}\nclass Indigo extends defaultTheme {\n    constructor() {\n        super(...arguments);\n        this.name = \"indigo\";\n    }\n}\nclass Grey extends defaultTheme {\n    constructor() {\n        super(...arguments);\n        this.name = \"grey\";\n        this.link = \"grey\";\n        this.topbar = \"grey\";\n        this.foldertree = \"grey\";\n        this.rowindicator = \"grey\";\n    }\n}\nclass Pink extends defaultTheme {\n    constructor() {\n        super(...arguments);\n        this.name = \"pink\";\n        this.link = \"#ff4081\";\n        this.topbar = \"#ff4081\";\n        this.foldertree = \"#ff4081\";\n        this.rowindicator = \"#ff4081\";\n    }\n}\nclass Yellow {\n    constructor() {\n        this.name = \"yellow\";\n        this.link = \"grey\";\n        this.text = \"black\";\n        this.title = \"black\";\n        this.topbar = \"yellow\";\n        this.foldertree = \"grey\";\n        this.enabled = \"black\";\n        this.disabled = \"silver\";\n        this.menuoption = \"black\";\n        this.buttontext = \"black\";\n        this.rowindicator = \"yellow\";\n    }\n}\n\nclass Config {\n    constructor(client) {\n        this.client = client;\n        this.config = null;\n        this.notifications = [];\n        this.invoker = null;\n        this.caltitle = \"Calendar\";\n        this.keymaphelp = \"Shortkeys\";\n        this.themes = new Map();\n        this.lang = Intl.DateTimeFormat().resolvedOptions().locale;\n        this.load();\n        this.themes.set(\"pink\", new Pink());\n        this.themes.set(\"grey\", new Grey());\n        this.themes.set(\"indigo\", new Indigo());\n        this.themes.set(\"yellow\", new Yellow());\n        this.themes.set(\"default\", new defaultTheme());\n        let os = this.os();\n        if (os == \"Windows\")\n            this.keymap = new WinKeyMap();\n        else\n            this.keymap = new MacKeyMap();\n        KeyMapper.index(this.keymap);\n        this.colors = this.themes.get(\"default\");\n    }\n    os() {\n        let os = \"unknown\";\n        if (navigator.appVersion.indexOf(\"Mac\") != -1)\n            os = \"MacOS\";\n        if (navigator.appVersion.indexOf(\"X11\") != -1)\n            os = \"UNIX\";\n        if (navigator.appVersion.indexOf(\"Linux\") != -1)\n            os = \"Linux\";\n        if (navigator.appVersion.indexOf(\"Win\") != -1)\n            os = \"Windows\";\n        return (os);\n    }\n    async load() {\n        this.invoker = this.client.get(\"/assets/config/config.json\").toPromise();\n        this.invoker.then(data => { this.loaded(data); }, error => { this.config = {}; console.log(\"Loading config failed: \" + error); });\n    }\n    loaded(config) {\n        this.config = config;\n        this.datefmt$ = this.config[\"datefmt\"];\n        dates.setFormat(this.datefmt$);\n        if (this.config[\"locale\"] != null)\n            this.lang = this.config[\"locale\"];\n        if (this.config[\"calendar\"] != null)\n            this.caltitle = this.config[\"calendar\"];\n        if (this.config[\"keymap\"] != null)\n            this.keymaphelp = this.config[\"keymap\"];\n    }\n    async ready() {\n        if (this.invoker != null) {\n            await this.invoker;\n            this.invoker = null;\n        }\n        return (true);\n    }\n    get locale() {\n        return (this.lang);\n    }\n    get datefmt() {\n        return (this.datefmt$);\n    }\n    set colors(theme) {\n        this.colors$ = theme;\n    }\n    get colors() {\n        return (this.colors$);\n    }\n    get others() {\n        return (this.config);\n    }\n    notify(instance, func) {\n        this.notifications.push({ instance: instance, func: func });\n    }\n    setTheme(theme) {\n        let ttheme = null;\n        if (typeof theme == 'object')\n            ttheme = theme;\n        else\n            ttheme = this.themes.get(theme);\n        if (ttheme != null) {\n            this.colors = ttheme;\n            this.notifications.forEach((notify) => { notify.instance[notify.func](); });\n        }\n    }\n    get keymapping() {\n        return (this.keymap);\n    }\n    get keymaptitle() {\n        return (this.keymaphelp);\n    }\n    get calendarname() {\n        return (this.caltitle);\n    }\n}\nConfig.ɵfac = function Config_Factory(t) { return new (t || Config)(i0.ɵɵinject(i1.HttpClient)); };\nConfig.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: Config, factory: Config.ɵfac, providedIn: 'root' });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(Config, [{\n        type: Injectable,\n        args: [{\n                providedIn: 'root',\n            }]\n    }], function () { return [{ type: i1.HttpClient }]; }, null); })();\n\nclass Builder {\n    constructor(resolver, injector, app) {\n        this.resolver = resolver;\n        this.injector = injector;\n        this.app = app;\n    }\n    createComponent(component) {\n        let cref = this.resolver.resolveComponentFactory(component).create(this.injector);\n        return (cref);\n    }\n    getAppRef() {\n        return (this.app);\n    }\n}\nBuilder.ɵfac = function Builder_Factory(t) { return new (t || Builder)(i0.ɵɵinject(i0.ComponentFactoryResolver), i0.ɵɵinject(i0.Injector), i0.ɵɵinject(i0.ApplicationRef)); };\nBuilder.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: Builder, factory: Builder.ɵfac, providedIn: 'root' });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(Builder, [{\n        type: Injectable,\n        args: [{\n                providedIn: 'root',\n            }]\n    }], function () { return [{ type: i0.ComponentFactoryResolver }, { type: i0.Injector }, { type: i0.ApplicationRef }]; }, null); })();\n\nclass Application {\n    // dont rename impl as it is read behind the scenes\n    constructor(ctx, conf, client, builder) {\n        this.conf = conf;\n        ctx.app = this;\n        ctx.conf = conf;\n        this._impl_ = new ApplicationImpl(ctx, client, builder);\n    }\n    get title() {\n        return (this.title$);\n    }\n    set title(title) {\n        this.title$ = title;\n        this._impl_.setTitle(title);\n    }\n    get form() {\n        return (this._impl_.getCurrentForm()?.form);\n    }\n    set menu(menu) {\n        this._impl_.setMenu(menu);\n    }\n    get menu() {\n        return (this._impl_.getMenu());\n    }\n    get transaction() {\n        return (this._impl_.appstate.transaction);\n    }\n    newform(form, parameters) {\n        this._impl_.showform(form, true, parameters);\n    }\n    showform(form, parameters) {\n        this._impl_.showform(form, false, parameters);\n    }\n    callform(form, parameters) {\n        this._impl_.callform(form, false, parameters);\n    }\n    get colors() {\n        return (this.conf.colors);\n    }\n    set theme(theme) {\n        setTimeout(() => { this.conf.setTheme(theme); }, 50);\n    }\n    closeform(destroy) {\n        if (destroy == undefined)\n            destroy = false;\n        let form = this._impl_.getCurrentForm();\n        if (form != null)\n            form.close(destroy);\n    }\n    connect() {\n        if (!this._impl_.connected) {\n            let pinst = new PopupInstance();\n            pinst.display(this._impl_, LoginForm);\n        }\n    }\n    async disconnect() {\n        if (this._impl_.connected) {\n            await this._impl_.appstate.clearAllForms();\n            await this._impl_.connection.rollback();\n            await this._impl_.disconnect();\n        }\n    }\n    async commit() {\n        if (!this._impl_.connected)\n            return;\n        let form = this._impl_.getCurrentForm();\n        if (form != null) {\n            if (!await form.validate())\n                return;\n        }\n        this._impl_.connection.commit();\n    }\n    async rollback() {\n        if (this._impl_.connected) {\n            await this._impl_.appstate.clearAllForms();\n            await this._impl_.connection.rollback();\n        }\n    }\n    showKeyMap() {\n        KeyMapHelp.show(this._impl_);\n    }\n    alert(message, title, width, height) {\n        MessageBox.show(this._impl_, message, title, width, height);\n    }\n}\nApplication.ɵfac = function Application_Factory(t) { return new (t || Application)(i0.ɵɵinject(Context), i0.ɵɵinject(Config), i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(Builder)); };\nApplication.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: Application, factory: Application.ɵfac, providedIn: 'root' });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(Application, [{\n        type: Injectable,\n        args: [{\n                providedIn: 'root',\n            }]\n    }], function () { return [{ type: Context }, { type: Config }, { type: i1.HttpClient }, { type: Builder }]; }, null); })();\n\nclass FormsLibrary {\n}\nFormsLibrary.ɵfac = function FormsLibrary_Factory(t) { return new (t || FormsLibrary)(); };\nFormsLibrary.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: FormsLibrary });\nFormsLibrary.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [[CommonModule, HttpClientModule]] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FormsLibrary, [{\n        type: NgModule,\n        args: [{\n                declarations: [FormList, FormArea, ModalWindow, MenuArea, LoginForm, FieldInstance, ListOfValuesImpl, Wait],\n                exports: [FormList, FormArea, MenuArea, FieldInstance],\n                imports: [CommonModule, HttpClientModule]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(FormsLibrary, { declarations: [FormList, FormArea, ModalWindow, MenuArea, LoginForm, FieldInstance, ListOfValuesImpl, Wait], imports: [CommonModule, HttpClientModule], exports: [FormList, FormArea, MenuArea, FieldInstance] }); })();\ni0.ɵɵsetComponentScope(LoginForm, [FieldInstance], []);\ni0.ɵɵsetComponentScope(ListOfValuesImpl, [FieldInstance, i1$1.NgForOf], []);\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Application, Block, Case, Column$1 as Column, Condition, DateUtils, DefaultMenu, DefaultMenuHandler, FieldInstance, FieldTrigger, FieldTriggerEvent, FieldType, Form, FormArea, FormList, FormsLibrary, KeyTriggerEvent, MenuArea, MenuHandler, SQLTriggerEvent, Statement, Trigger, TriggerEvent, alias, block, column, connect, database, defaultTheme, destroy, disconnect, field, form, hide, init, join, key, keymap, keytrigger, listofvalues, show, table, trigger, window$1 as window, wizard };\n","map":{"version":3,"file":"forms.mjs","sources":["../../../projects/forms/src/lib/utils/Utils.ts","../../../projects/forms/src/lib/annotations/BlockDefinitions.ts","../../../projects/forms/src/lib/annotations/key.ts","../../../projects/forms/src/lib/annotations/FormDefinitions.ts","../../../projects/forms/src/lib/annotations/form.ts","../../../projects/forms/src/lib/annotations/init.ts","../../../projects/forms/src/lib/annotations/show.ts","../../../projects/forms/src/lib/annotations/hide.ts","../../../projects/forms/src/lib/annotations/JOINDefinitions.ts","../../../projects/forms/src/lib/annotations/join.ts","../../../projects/forms/src/lib/annotations/block.ts","../../../projects/forms/src/lib/annotations/alias.ts","../../../projects/forms/src/lib/annotations/TableDefinitions.ts","../../../projects/forms/src/lib/annotations/table.ts","../../../projects/forms/src/lib/annotations/FieldDefinitions.ts","../../../projects/forms/src/lib/annotations/field.ts","../../../projects/forms/src/lib/annotations/ColumnDefinitions.ts","../../../projects/forms/src/lib/annotations/column.ts","../../../projects/forms/src/lib/annotations/wizard.ts","../../../projects/forms/src/lib/annotations/window.ts","../../../projects/forms/src/lib/annotations/connect.ts","../../../projects/forms/src/lib/annotations/destroy.ts","../../../projects/forms/src/lib/keymap/KeyMap.ts","../../../projects/forms/src/lib/events/TriggerEvents.ts","../../../projects/forms/src/lib/events/Triggers.ts","../../../projects/forms/src/lib/annotations/TriggerDefinitions.ts","../../../projects/forms/src/lib/annotations/trigger.ts","../../../projects/forms/src/lib/database/DatabaseUsage.ts","../../../projects/forms/src/lib/annotations/DatabaseDefinitions.ts","../../../projects/forms/src/lib/annotations/database.ts","../../../projects/forms/src/lib/annotations/keytrigger.ts","../../../projects/forms/src/lib/annotations/disconnect.ts","../../../projects/forms/src/lib/annotations/LOVDefinitions.ts","../../../projects/forms/src/lib/annotations/listofvalues.ts","../../../projects/forms/src/lib/events/TriggerEvent.ts","../../../projects/forms/src/lib/application/Context.ts","../../../projects/forms/src/lib/menu/MenuArea.ts","../../../projects/forms/src/lib/menu/MenuHandler.ts","../../../projects/forms/src/lib/menu/DefaultMenuHandler.ts","../../../projects/forms/src/lib/menu/DefaultMenu.ts","../../../projects/forms/src/lib/blocks/Key.ts","../../../projects/forms/src/lib/blocks/Record.ts","../../../projects/forms/src/lib/input/TextField.ts","../../../projects/forms/src/lib/input/DropDown.ts","../../../projects/forms/src/lib/input/Password.ts","../../../projects/forms/src/lib/input/CheckBox.ts","../../../projects/forms/src/lib/dates/fecha.ts","../../../projects/forms/src/lib/dates/dates.ts","../../../projects/forms/src/lib/input/DateField.ts","../../../projects/forms/src/lib/input/RadioButton.ts","../../../projects/forms/src/lib/database/Column.ts","../../../projects/forms/src/lib/input/FieldType.ts","../../../projects/forms/src/lib/forms/FormState.ts","../../../projects/forms/src/lib/keymap/KeyCodes.ts","../../../projects/forms/src/lib/events/WindowListener.ts","../../../projects/forms/src/lib/popup/PopupWindow.ts","../../../projects/forms/src/lib/popup/PopupInstance.ts","../../../projects/forms/src/lib/dates/DatePicker.ts","../../../projects/forms/src/lib/popup/MessageBox.ts","../../../projects/forms/src/lib/database/Condition.ts","../../../projects/forms/src/lib/database/Statement.ts","../../../projects/forms/src/lib/database/Table.ts","../../../projects/forms/src/lib/blocks/FieldData.ts","../../../projects/forms/src/lib/listval/ListOfValuesImpl.ts","../../../projects/forms/src/lib/blocks/BlockImpl.ts","../../../projects/forms/src/lib/blocks/Block.ts","../../../projects/forms/src/lib/forms/MasterDetailQuery.ts","../../../projects/forms/src/lib/forms/MasterDetail.ts","../../../projects/forms/src/lib/forms/FormImpl.ts","../../../projects/forms/src/lib/forms/Form.ts","../../../projects/forms/src/lib/database/Case.ts","../../../projects/forms/src/lib/input/FieldInstance.ts","../../../projects/forms/src/lib/dates/DateUtils.ts","../../../projects/forms/src/lib/menu/FormList.ts","../../../projects/forms/src/lib/forms/FormArea.ts","../../../projects/forms/src/lib/application/KeyMapHelp.ts","../../../projects/forms/src/lib/database/LoginForm.ts","../../../projects/forms/src/lib/utils/Wait.ts","../../../projects/forms/src/lib/menu/MenuInterface.ts","../../../projects/forms/src/lib/menu/DropDownMenu.ts","../../../projects/forms/src/lib/menu/MenuFactory.ts","../../../projects/forms/src/lib/forms/FormUtil.ts","../../../projects/forms/src/lib/forms/ModalWindow.ts","../../../projects/forms/src/lib/forms/FormsControl.ts","../../../projects/forms/src/lib/database/Connection.ts","../../../projects/forms/src/lib/application/ApplicationState.ts","../../../projects/forms/src/lib/forms/InstanceControl.ts","../../../projects/forms/src/lib/input/Field.ts","../../../projects/forms/src/lib/container/Container.ts","../../../projects/forms/src/lib/container/ContainerControl.ts","../../../projects/forms/src/lib/application/ApplicationImpl.ts","../../../projects/forms/src/lib/keymap/MacKeyMap.ts","../../../projects/forms/src/lib/keymap/WinKeyMap.ts","../../../projects/forms/src/lib/application/Themes.ts","../../../projects/forms/src/lib/application/Config.ts","../../../projects/forms/src/lib/utils/Builder.ts","../../../projects/forms/src/lib/application/Application.ts","../../../projects/forms/src/lib/FormsLibrary.ts","../../../projects/forms/src/forms.ts"],"sourcesContent":["import { stringify } from \"@angular/compiler/src/util\";\n\nexport class Utils\n{\n    public getName(component:any)\n    {\n        if (component == null) return(null);\n        let name:string = component.constructor.name;\n\n        if (name == \"String\") name = component;\n        if (name == \"Function\") name = component.name;\n\n        return(name.toLowerCase());\n    }\n\n\n    public clone(obj:any) : any\n    {\n        let clone:any = {};\n        if (obj == null) return(null);\n        Object.keys(obj).forEach((key) => {clone[key] = obj[key];});\n        return(clone);\n    }\n\n\n    public getType(component:any) : string\n    {\n        let type:string = null;\n        let code:string = component.toString();\n\n        if (code == \"[object Object]\")\n            code = component.constructor.toString();\n\n        if (code.startsWith(\"class\"))\n        {\n            code = code.substring(0,code.indexOf(\"{\"));\n            let pos:number = code.indexOf(\"extends\");\n\n            if (pos > 0)\n            {\n                let pos1:number = code.indexOf(\"[\",pos);\n                let pos2:number = code.indexOf(\"]\",pos1);\n                type = code.substring(pos1+2,pos2-1);\n            }\n        }\n\n        return(type);\n    }\n\n\n    public getParams(func:any) : string[]\n    {\n        let code:string = func.toString();\n\n        code = code.replace(/\\/\\*[\\s\\S]*?\\*\\//g, '')\n        .replace(/\\/\\/(.)*/g, '')\n        .replace(/{[\\s\\S]*}/, '')\n        .replace(/=>/g, '')\n        .trim();\n\n        let end:number = code.length - 1;\n        let start:number = code.indexOf(\"(\") + 1;\n\n        let params:string[] = [];\n        let tokens:string[] = code.substring(start, end).split(\", \");\n\n        tokens.forEach((element) =>\n        {\n            // Removing any default value\n            element = element.replace(/=[\\s\\S]*/g, '').trim();\n            if(element.length > 0) params.push(element);\n        });\n\n        return(params);\n    }\n}","import { KeyDefinition } from './KeyDefinition';\nimport { BlockDefinition } from '../blocks/BlockDefinition';\nimport { BlockImpl } from '../blocks/BlockImpl';\n\n\nexport class BlockDefinitions\n{\n    private static alias:Map<string,string> = new Map<string,string>();\n    private static blocks:Map<string,any[]> = new Map<string,BlockDefinition[]>();\n    private static keys:Map<string,KeyDefinition[]> = new Map<string,KeyDefinition[]>();\n\n\n    public static setDefaultAlias(block:string, alias:string) : void\n    {\n        if (alias == null) alias = block;\n        BlockDefinitions.alias.set(block,alias);\n    }\n\n\n    public static getDefaultAlias(alias:string) : string\n    {\n        alias = alias.toLowerCase();\n        let bname:string = BlockDefinitions.alias.get(alias);\n        if (bname == null) bname = alias;\n        return(bname);\n    }\n\n\n    public static setBlock(form:string, def:BlockDefinition) : void\n    {\n        let blocks:BlockDefinition[] = BlockDefinitions.blocks.get(form.toLowerCase());\n\n        if  (blocks == null)\n        {\n            blocks = [];\n            BlockDefinitions.blocks.set(form.toLowerCase(),blocks);\n        }\n\n        if (def.prop != null) blocks.push(def);\n        else                  blocks.unshift(def);\n    }\n\n\n    public static getBlocks(form:string) : BlockDefinition[]\n    {\n        let blocks:BlockDefinition[] = BlockDefinitions.blocks.get(form.toLowerCase());\n        if (blocks == null) blocks = [];\n        return(blocks);\n    }\n\n\n    public static setKey(block:string, def:KeyDefinition) : void\n    {\n        let keys:KeyDefinition[] = BlockDefinitions.keys.get(block.toLowerCase());\n\n        if  (keys == null)\n        {\n            keys = [];\n            BlockDefinitions.keys.set(block.toLowerCase(),keys);\n        }\n\n        keys.unshift(def);\n    }\n\n\n    public static getKeys(block:string) : KeyDefinition[]\n    {\n        let keys:KeyDefinition[] = BlockDefinitions.keys.get(block.toLowerCase());\n        if (keys == null) keys = [];\n        return(keys);\n    }\n}","import { Utils } from '../utils/Utils';\nimport { KeyDefinition } from './KeyDefinition';\nimport { BlockDefinitions } from './BlockDefinitions';\n\n\nexport const key = (name:string, unique:boolean, columns:string|string[]) =>\n{\n    function define(comp:any)\n    {\n        let utils:Utils = new Utils();\n        let cname:string = utils.getName(comp);\n        let ctype:string = utils.getType(comp);\n\n        if (ctype != \"Block\")\n        {\n            console.log(\"@key(\"+name+\") can only be used on blocks\");\n            return;\n        }\n\n        let arr:boolean = true;\n        let cols:string[] = [];\n\n        if (columns.constructor.name == \"String\")\n            arr = false;\n\n        if (arr) cols = columns as string[];\n        else     cols.push(columns as string);\n\n        let lccols:string[] = [];\n        cols.forEach((col) => {lccols.push(col.toLowerCase())});\n\n        let def:KeyDefinition = {name: name.toLowerCase(), unique: unique, columns: lccols}\n        BlockDefinitions.setKey(cname,def);\n    }\n    return(define);\n}","import { WindowOptions } from '../forms/WindowOptions';\nimport { FormDefinition } from '../forms/FormsDefinition';\n\n\nexport class FormDefinitions\n{\n    private static forms:FormDefinition[] = [];\n    private static oninit:Map<string,string[]> = new Map<string,string[]>();\n    private static onshow:Map<string,string[]> = new Map<string,string[]>();\n    private static onhide:Map<string,string[]> = new Map<string,string[]>();\n    private static onconn:Map<string,string[]> = new Map<string,string[]>();\n    private static ondisc:Map<string,string[]> = new Map<string,string[]>();\n    private static ondest:Map<string,string[]> = new Map<string,string[]>();\n    private static windowopts:Map<string,WindowOptions> = new Map<string,WindowOptions>();\n\n\n    public static setForm(def:FormDefinition) : void\n    {\n        FormDefinitions.forms.unshift(def);\n    }\n\n\n    public static getForms() : FormDefinition[]\n    {\n        return(FormDefinitions.forms);\n    }\n\n\n    public static getWindowOpts(form:string) : WindowOptions\n    {\n        let wopts:WindowOptions = FormDefinitions.windowopts.get(form);\n\n        if (wopts == null)\n        {\n            wopts = {};\n            FormDefinitions.windowopts.set(form,wopts);\n        }\n\n        return(wopts);\n    }\n\n\n    public static setOnInit(form:string,func:string) : void\n    {\n        let funcs:string[] = FormDefinitions.oninit.get(form);\n        if (funcs == null) funcs = [];\n        funcs.push(func);\n        FormDefinitions.oninit.set(form,funcs);\n    }\n\n\n    public static setOnShow(form:string,func:string) : void\n    {\n        let funcs:string[] = FormDefinitions.onshow.get(form);\n        if (funcs == null) funcs = [];\n        funcs.push(func);\n        FormDefinitions.onshow.set(form,funcs);\n    }\n\n\n    public static setOnHide(form:string,func:string) : void\n    {\n        let funcs:string[] = FormDefinitions.onhide.get(form);\n        if (funcs == null) funcs = [];\n        funcs.push(func);\n        FormDefinitions.onhide.set(form,funcs);\n    }\n\n\n    public static setOnConnect(form:string,func:string) : void\n    {\n        let funcs:string[] = FormDefinitions.onconn.get(form);\n        if (funcs == null) funcs = [];\n        funcs.push(func);\n        FormDefinitions.onconn.set(form,funcs);\n    }\n\n\n    public static setOnDisconnect(form:string,func:string) : void\n    {\n        let funcs:string[] = FormDefinitions.ondisc.get(form);\n        if (funcs == null) funcs = [];\n        funcs.push(func);\n        FormDefinitions.ondisc.set(form,funcs);\n    }\n\n\n    public static setOnDestroy(form:string,func:string) : void\n    {\n        let funcs:string[] = FormDefinitions.ondest.get(form);\n        if (funcs == null) funcs = [];\n        funcs.push(func);\n        FormDefinitions.ondest.set(form,funcs);\n    }\n\n\n    public static getOnInit(form:string) : string[]\n    {\n        let funcs:string[] = FormDefinitions.oninit.get(form);\n        if (funcs == null) funcs = [];\n        return(funcs);\n    }\n\n\n    public static getOnShow(form:string) : string[]\n    {\n        let funcs:string[] = FormDefinitions.onshow.get(form);\n        if (funcs == null) funcs = [];\n        return(funcs);\n    }\n\n\n    public static getOnHide(form:string) : string[]\n    {\n        let funcs:string[] = FormDefinitions.onhide.get(form);\n        if (funcs == null) funcs = [];\n        return(funcs);\n    }\n\n\n    public static getOnConnect(form:string) : string[]\n    {\n        let funcs:string[] = FormDefinitions.onconn.get(form);\n        if (funcs == null) funcs = [];\n        return(funcs);\n    }\n\n\n    public static getOnDisconnect(form:string) : string[]\n    {\n        let funcs:string[] = FormDefinitions.ondisc.get(form);\n        if (funcs == null) funcs = [];\n        return(funcs);\n    }\n\n\n    public static getOnDestroy(form:string) : string[]\n    {\n        let funcs:string[] = FormDefinitions.ondest.get(form);\n        if (funcs == null) funcs = [];\n        return(funcs);\n    }\n}","import { FormDefinitions } from \"./FormDefinitions\";\nimport { FormDefinition } from \"../forms/FormsDefinition\";\n\n\nexport const form = (component:any, title:string, path:string, navigable?:boolean) =>\n{\n    function define(_comp:any)\n    {\n        let def:FormDefinition =\n        {\n            path: path,\n            title: title,\n            component: component,\n        };\n\n        if (navigable != undefined) def[\"navigable\"] = navigable;\n\n        FormDefinitions.setForm(def);\n    }\n    return(define);\n}","import { Form } from \"../forms/Form\";\nimport { Utils } from \"../utils/Utils\";\nimport { FormDefinitions } from \"./FormDefinitions\";\n\n\nexport const init = (form:Form, func?:string) =>\n{\n    let utils:Utils = new Utils();\n    let fname:string = utils.getName(form);\n    let ctype:string = utils.getType(form);\n\n    if (ctype != \"Form\")\n    {\n        console.log(\"@init can only be used on forms, found on '\"+fname+\"'\");\n        return;\n    }\n\n    FormDefinitions.setOnInit(fname,func);\n}","import { Form } from \"../forms/Form\";\nimport { Utils } from \"../utils/Utils\";\nimport { FormDefinitions } from \"./FormDefinitions\";\n\n\nexport const show = (form:Form, func?:string) =>\n{\n    let utils:Utils = new Utils();\n    let fname:string = utils.getName(form);\n    let ctype:string = utils.getType(form);\n\n    if (ctype != \"Form\")\n    {\n        console.log(\"@show can only be used on forms, found on '\"+fname+\"'\");\n        return;\n    }\n\n    FormDefinitions.setOnShow(fname,func);\n}","import { Form } from \"../forms/Form\";\nimport { Utils } from \"../utils/Utils\";\nimport { FormDefinitions } from \"./FormDefinitions\";\n\n\nexport const hide = (form:Form, func?:string) =>\n{\n    let utils:Utils = new Utils();\n    let fname:string = utils.getName(form);\n    let ctype:string = utils.getType(form);\n\n    if (ctype != \"Form\")\n    {\n        console.log(\"@hide can only be used on forms, found on '\"+fname+\"'\");\n        return;\n    }\n\n    FormDefinitions.setOnHide(fname,func);\n}","export interface JOINDefinition\n{\n    master: {alias:string, key:string},\n    detail: {alias:string, key:string},\n}\n\n\nexport class JOINDefinitions\n{\n    private static defs:Map<string,JOINDefinition[]> = new Map<string,JOINDefinition[]>();\n\n    public static add(form:string, def:JOINDefinition) : void\n    {\n        let joins:JOINDefinition[] = JOINDefinitions.defs.get(form);\n\n        if (joins == null)\n        {\n            joins = [];\n            JOINDefinitions.defs.set(form,joins);\n        }\n\n        joins.unshift(def);\n    }\n\n\n    public static get(form:string) : JOINDefinition[]\n    {\n        return(JOINDefinitions.defs.get(form.toLowerCase()));\n    }\n}","import { Utils } from '../utils/Utils';\nimport { JOINDefinition, JOINDefinitions } from './JOINDefinitions';\n\n\nexport const join = (definition:JOINDefinition) =>\n{\n    function define(comp:any)\n    {\n        let utils:Utils = new Utils();\n        let form:string = utils.getName(comp);\n        let ctype:string = utils.getType(comp);\n\n        if (ctype != \"Form\")\n        {\n            console.log(\"@join(\"+JSON.stringify(definition)+\") can only be used on forms\");\n            return;\n        }\n\n        definition.master.key = definition.master.key.toLowerCase();\n        definition.master.alias = definition.master.alias.toLowerCase();\n\n        definition.detail.key = definition.detail.key.toLowerCase();\n        definition.detail.alias = definition.detail.alias.toLowerCase();\n\n        JOINDefinitions.add(form.toLowerCase(),definition);\n    }\n\n    return(define);\n}","import { Utils } from '../utils/Utils';\nimport { BlockDefinition } from './BlockDefinition';\nimport { BlockDefinitions } from './BlockDefinitions';\nimport { BlockDefinition as BlockDef } from '../blocks/BlockDefinition';\n\n\nexport const block = (definition:BlockDefinition) =>\n{\n    function define(comp:any, prop?:string)\n    {\n        let utils:Utils = new Utils();\n        let name:string = utils.getName(comp);\n        let type:string = utils.getType(comp);\n\n        if (type != \"Form\" && prop == null)\n        {\n            console.log(\"@block can only be used with forms\");\n            return;\n        }\n\n        if (definition.alias != null)\n            definition.alias = definition.alias.toLowerCase();\n\n        let def:BlockDef =\n        {\n            prop: prop,\n            alias: definition.alias,\n            component: definition.component,\n            databaseopts: definition.databaseopts\n        }\n\n        BlockDefinitions.setBlock(name,def);\n    }\n    return(define);\n}","import { Utils } from '../utils/Utils';\nimport { BlockDefinitions } from './BlockDefinitions';\n\n\nexport const alias = (alias:string) =>\n{\n    function define(comp:any)\n    {\n        let utils:Utils = new Utils();\n        let cname:string = utils.getName(comp);\n        let ctype:string = utils.getType(comp);\n\n        if (ctype != \"Block\")\n        {\n            console.log(\"@alias(\"+alias+\") can only be used on blocks\");\n            return;\n        }\n\n        if (alias == null)\n        {\n            console.log(\"@alias(\"+alias+\") cannot be null\");\n            return;\n        }\n\n        BlockDefinitions.setDefaultAlias(cname,alias.toLowerCase());\n    }\n    return(define);\n}","import { TableDefinition } from \"../database/TableDefinition\";\n\nexport class TableDefinitions\n{\n    private static index:Map<string,TableDefinition> = new Map<string,TableDefinition>();\n\n    public static set(block:string, table:TableDefinition) : void\n    {\n        let def:TableDefinition = TableDefinitions.index.get(block.toLowerCase());\n\n        if (def != null)\n        {\n            if (table.hasOwnProperty(\"name\")) def.name = table.name;\n            if (table.hasOwnProperty(\"order\")) def.order = table.order;\n        }\n        else\n        {\n            TableDefinitions.index.set(block.toLowerCase(),table);\n        }\n    }\n\n    public static get(block:string) : TableDefinition\n    {\n        return(TableDefinitions.index.get(block.toLowerCase()));\n    }\n}","import { Utils } from '../utils/Utils';\nimport { TableDefinitions } from './TableDefinitions';\nimport { TableDefinition } from '../database/TableDefinition';\n\nexport const table = (definition:TableDefinition) =>\n{\n    function define(comp:any)\n    {\n        let utils:Utils = new Utils();\n        let cname:string = utils.getName(comp);\n        let ctype:string = utils.getType(comp);\n\n        if (ctype != \"Block\")\n        {\n            console.log(\"@table(\"+definition.name+\") can only be used on blocks\");\n            return;\n        }\n\n        TableDefinitions.set(cname,definition);\n    }\n    return(define);\n}","import { FieldDefinition } from \"../input/FieldDefinition\";\n\n\nexport class FieldDefinitions\n{\n    // List and indexes for fields, columns and fields with id, respectively for form\n    private static bfd:Map<string,FieldDefinition[]> = new Map<string,FieldDefinition[]>();\n    private static bfx:Map<string,Map<string,FieldDefinition>> = new Map<string,Map<string,FieldDefinition>>();\n    private static bcx:Map<string,Map<string,FieldDefinition>> = new Map<string,Map<string,FieldDefinition>>();\n    private static bidx:Map<string,Map<string,FieldDefinition>> = new Map<string,Map<string,FieldDefinition>>();\n\n    private static ffd:Map<string,Map<string,FieldDefinition[]>> = new Map<string,Map<string,FieldDefinition[]>>();\n    private static ffx:Map<string,Map<string,Map<string,FieldDefinition>>> = new Map<string,Map<string,Map<string,FieldDefinition>>>();\n    private static fcx:Map<string,Map<string,Map<string,FieldDefinition>>> = new Map<string,Map<string,Map<string,FieldDefinition>>>();\n    private static fidx:Map<string,Map<string,Map<string,FieldDefinition>>> = new Map<string,Map<string,Map<string,FieldDefinition>>>();\n\n\n    public static add(form:boolean, comp:string, def:FieldDefinition) : void\n    {\n        let parts:string[] = FieldDefinitions.split(def.name);\n\n        if (form)\n        {\n            if (parts.length < 2 || parts.length > 3)\n            {\n                console.log(\"Form field \"+def.name+\" must be on the form block.field[.id], field definition ignored\");\n                return;\n            }\n\n            def.name = parts[1];\n            let id:string = null;\n            let block:string = parts[0];\n            if (parts.length > 2) id = parts[2];\n\n            if (id != null) FieldDefinitions.addformid(comp,block,id,def);\n            else            FieldDefinitions.addformfield(comp,block,def);\n        }\n        else\n        {\n            if (parts.length > 2)\n            {\n                console.log(\"Block field \"+def.name+\" must be on the form field[.id], field definition ignored\");\n                return;\n            }\n\n            let id:string = null;\n\n            if (parts.length > 1)\n            {\n                id = parts[1];\n                def.name = parts[0];\n            }\n\n            if (id != null) FieldDefinitions.addblockid(comp,id,def);\n            else            FieldDefinitions.addblockfield(comp,def);\n        }\n    }\n\n\n    private static addformfield(form:string, block:string, def:FieldDefinition) : void\n    {\n        let formbfd:Map<string,FieldDefinition[]> = FieldDefinitions.ffd.get(form);\n        let formbfx:Map<string,Map<string,FieldDefinition>> = FieldDefinitions.ffx.get(form);\n        let formbcx:Map<string,Map<string,FieldDefinition>> = FieldDefinitions.fcx.get(form);\n\n        if (formbfd == null)\n        {\n            formbfd = new Map<string,FieldDefinition[]>();\n            FieldDefinitions.ffd.set(form,formbfd);\n\n            formbfx = new Map<string,Map<string,FieldDefinition>>();\n            FieldDefinitions.ffx.set(form,formbfx);\n\n            formbcx = new Map<string,Map<string,FieldDefinition>>();\n            FieldDefinitions.fcx.set(form,formbcx);\n        }\n\n        let fields:FieldDefinition[] = formbfd.get(block);\n        let index:Map<string,FieldDefinition> = formbfx.get(block);\n        let columns:Map<string,FieldDefinition> = formbcx.get(block);\n\n        if (fields == null)\n        {\n            fields = [];\n            formbfd.set(block,fields);\n\n            index = new Map<string,FieldDefinition>();\n            formbfx.set(block,index);\n\n            columns = new Map<string,FieldDefinition>();\n            formbcx.set(block,columns);\n        }\n\n        if (index.get(def.name) != null)\n        {\n            console.log(\"Field \"+def.name+\" defined twice on block '\"+form+\".\"+block+\"', ignored\");\n            return;\n        }\n\n        if (columns.get(def.name) != null)\n        {\n            console.log(\"Column \"+def.column+\" bound to more than 1 field on block '\"+form+\".\"+block+\"', ignored\");\n            def.column = null;\n        }\n\n        fields.unshift(def);\n        index.set(def.name,def);\n        if (def.column != null) columns.set(def.column,def);\n    }\n\n\n    private static addblockfield(block:string, def:FieldDefinition) : void\n    {\n        let fields:FieldDefinition[] = FieldDefinitions.bfd.get(block);\n        let index:Map<string,FieldDefinition> = FieldDefinitions.bfx.get(block);\n        let columns:Map<string,FieldDefinition> = FieldDefinitions.bcx.get(block);\n\n        if (fields == null)\n        {\n            fields = [];\n            FieldDefinitions.bfd.set(block,fields);\n\n            index = new Map<string,FieldDefinition>();\n            FieldDefinitions.bfx.set(block,index);\n\n            columns = new Map<string,FieldDefinition>();\n            FieldDefinitions.bcx.set(block,columns);\n        }\n\n        if (def.hasOwnProperty(\"column\"))\n        {\n            if (def.column != null)\n                def.column = def.column.toLowerCase();\n        }\n\n        if (index.get(def.name) != null)\n        {\n            console.log(\"Field \"+def.name+\" defined twice on block '\"+block+\"', ignored\");\n            return;\n        }\n\n        if (columns.get(def.name) != null)\n        {\n            console.log(\"Column \"+def.column+\" bound to more than 1 field on block '\"+block+\"', ignored\");\n            def.column = null;\n        }\n\n        fields.unshift(def);\n        index.set(def.name,def);\n        if (def.column != null) columns.set(def.column,def);\n    }\n\n\n    private static addformid(form:string, block:string, id:string, def:FieldDefinition) : void\n    {\n        let formids:Map<string,Map<string,FieldDefinition>> = FieldDefinitions.fidx.get(form);\n\n        if (formids == null)\n        {\n            formids = new Map<string,Map<string,FieldDefinition>>();\n            FieldDefinitions.fidx.set(form,formids);\n        }\n\n        let blockids:Map<string,FieldDefinition> = formids.get(block);\n\n        if (blockids == null)\n        {\n            blockids = new Map<string,FieldDefinition>();\n            formids.set(block,blockids);\n        }\n\n        if (blockids.get(def.name+\".\"+id) != null)\n        {\n            console.log(\"Field \"+form+\".\"+def.name+\".\"+id+\" defined twice, ignored\");\n            return;\n        }\n\n        if (def.column != null)\n        {\n            console.log(\"Field \"+form+\".\"+def.name+\".\"+id+\" cannot override column definition, ignored\");\n            def.column = null;\n        }\n\n        blockids.set(def.name+\".\"+id,def);\n    }\n\n\n    private static addblockid(block:string, id:string, def:FieldDefinition) : void\n    {\n        let blockids:Map<string,FieldDefinition> = FieldDefinitions.bidx.get(block);\n\n        if (blockids == null)\n        {\n            blockids = new Map<string,FieldDefinition>();\n            FieldDefinitions.bidx.set(block,blockids);\n        }\n\n        if (blockids.get(def.name+\".\"+id) != null)\n        {\n            console.log(\"Field \"+def.name+\".\"+id+\" defined twice, ignored\");\n            return;\n        }\n\n        if (def.column != null)\n        {\n            console.log(\"Field \"+def.name+\".\"+id+\" cannot override column definition, ignored\");\n            def.column = null;\n        }\n\n        blockids.set(def.name+\".\"+id,def);\n    }\n\n\n    public static getFormFieldOverride(form:string, block:string, fldid:string) : FieldDefinition\n    {\n        let formids:Map<string,Map<string,FieldDefinition>> = FieldDefinitions.fidx.get(form);\n        if (formids == null) return(null);\n\n        let blockids:Map<string,FieldDefinition> = formids.get(block.toLowerCase());\n        if (blockids != null) return(blockids.get(fldid.toLowerCase()));\n\n        return(null);\n    }\n\n\n    public static getFieldOverride(block:string, fldid:string) : FieldDefinition\n    {\n        let blockids:Map<string,FieldDefinition> = FieldDefinitions.bidx.get(block.toLowerCase());\n        if (blockids != null) return(blockids.get(fldid.toLowerCase()));\n        return(null);\n    }\n\n\n    public static getFormFields(form:string, block:string) : FieldDefinition[]\n    {\n        let formbfd:Map<string,FieldDefinition[]> = FieldDefinitions.ffd.get(form.toLowerCase());\n        if (formbfd == null) return([]);\n\n        let fields:FieldDefinition[] = formbfd.get(block.toLowerCase());\n        if (fields == null) return([]);\n\n        return(fields);\n    }\n\n\n    public static getFields(block:string) : FieldDefinition[]\n    {\n        let fields:FieldDefinition[] = FieldDefinitions.bfd.get(block.toLowerCase());\n        if (fields == null) return([]);\n        return(fields);\n    }\n\n\n    public static getFormFieldIndex(form:string, block:string) : Map<string,FieldDefinition>\n    {\n        let formbfx:Map<string,Map<string,FieldDefinition>> = FieldDefinitions.ffx.get(form.toLowerCase());\n        if (formbfx == null) return(new Map<string,FieldDefinition>());\n\n        let index:Map<string,FieldDefinition> = formbfx.get(block.toLowerCase());\n        if (index == null) return(new Map<string,FieldDefinition>());\n\n        return(new Map(index));\n    }\n\n\n    public static getFieldIndex(block:string) : Map<string,FieldDefinition>\n    {\n        let index:Map<string,FieldDefinition> = FieldDefinitions.bfx.get(block.toLowerCase());\n        if (index == null) return(new Map<string,FieldDefinition>());\n        return(new Map(index));\n    }\n\n\n    public static getFormColumnIndex(form:string, block:string) : Map<string,FieldDefinition>\n    {\n        let formbcx:Map<string,Map<string,FieldDefinition>> = FieldDefinitions.fcx.get(form.toLowerCase());\n        if (formbcx == null) return(new Map<string,FieldDefinition>());\n\n        let index:Map<string,FieldDefinition> = formbcx.get(block.toLowerCase());\n        if (index == null) return(new Map<string,FieldDefinition>());\n\n        return(new Map(index));\n    }\n\n\n    public static getColumnIndex(block:string) : Map<string,FieldDefinition>\n    {\n        let index:Map<string,FieldDefinition> = FieldDefinitions.bcx.get(block.toLowerCase());\n        if (index == null) index = new Map<string,FieldDefinition>();\n        return(new Map(index));\n    }\n\n\n    private static split(name:string) : string[]\n    {\n        let tokens:string[] = name.split(\".\");\n\n        for(let i = 0; i < tokens.length; i++)\n            tokens[i] = tokens[i].trim().toLowerCase();\n\n        return(tokens);\n    }\n}","import { Utils } from '../utils/Utils';\nimport { FieldDefinitions } from './FieldDefinitions';\nimport { FieldDefinition } from '../input/FieldDefinition';\n\n\nexport const field = (definition:FieldDefinition) =>\n{\n    function define(comp:any)\n    {\n        let form:boolean = false;\n        let utils:Utils = new Utils();\n        let cname:string = utils.getName(comp);\n        let ctype:string = utils.getType(comp);\n\n        if (ctype != \"Block\" && ctype != \"Form\")\n        {\n            console.log(\"@field(\"+JSON.stringify(definition)+\") can only be used on blocks and forms\");\n            return;\n        }\n\n        if (ctype == \"Form\") form = true;\n        FieldDefinitions.add(form,cname,definition);\n    }\n\n    return(define);\n}","import { ColumnDefinition } from \"../database/ColumnDefinition\";\n\nexport class ColumnDefinitions\n{\n    private static bcols:Map<string,ColumnDefinition[]> = new Map<string,ColumnDefinition[]>();\n    private static bcidx:Map<string,Map<string,ColumnDefinition>> = new Map<string,Map<string,ColumnDefinition>>();\n\n    public static add(block:string, def:ColumnDefinition) : void\n    {\n        let columns:ColumnDefinition[] = ColumnDefinitions.bcols.get(block);\n        let index:Map<string,ColumnDefinition> = ColumnDefinitions.bcidx.get(block);\n\n        if (columns == null)\n        {\n            columns = [];\n            ColumnDefinitions.bcols.set(block,columns);\n\n            index = new Map<string,ColumnDefinition>();\n            ColumnDefinitions.bcidx.set(block,index);\n        }\n\n        if (index.get(def.name) != null)\n        {\n            console.log(\"Block \"+block+\" column \"+def.name+\" defined twice, ignored\");\n            return;\n        }\n\n        columns.unshift(def);\n        index.set(def.name,def);\n    }\n\n\n    public static get(block:string) : ColumnDefinition[]\n    {\n        let columns:ColumnDefinition[] = ColumnDefinitions.bcols.get(block.toLowerCase());\n        if (columns == null) columns = [];\n        return(columns);\n    }\n\n\n    public static getIndex(block:string) : Map<string,ColumnDefinition>\n    {\n        let index:Map<string,ColumnDefinition> = ColumnDefinitions.bcidx.get(block.toLowerCase());\n        if (index == null) index = new Map<string,ColumnDefinition>();\n        return(index);\n    }\n}","import { Utils } from '../utils/Utils';\nimport { ColumnDefinitions } from './ColumnDefinitions';\nimport { ColumnDefinition } from '../database/ColumnDefinition';\n\n\nexport const column = (definition:ColumnDefinition) =>\n{\n    function define(comp:any)\n    {\n        let utils:Utils = new Utils();\n        let cname:string = utils.getName(comp);\n        let ctype:string = utils.getType(comp);\n\n        if (ctype != \"Block\")\n        {\n            console.log(\"@column(\"+definition.name+\",\"+definition.type+\") can only be used on blocks\");\n            return;\n        }\n\n        ColumnDefinitions.add(cname,definition);\n        definition.name = definition.name.toLowerCase();\n    }\n    return(define);\n}","import { Utils } from \"../utils/Utils\";\nimport { FormDefinitions } from \"./FormDefinitions\";\nimport { WindowOptions } from \"../forms/WindowOptions\";\n\n\nexport const wizard = () =>\n{\n    function define(form:any)\n    {\n        let utils:Utils = new Utils();\n        let fname:string = utils.getName(form);\n        let ctype:string = utils.getType(form);\n\n\n        if (ctype != \"Form\")\n        {\n            console.log(\"@wizard can only be used on forms\");\n            return;\n        }\n\n        let wopt:WindowOptions = FormDefinitions.getWindowOpts(fname);\n        wopt.wizard = true;\n    }\n\n    return(define);\n}\n","import { Utils } from \"../utils/Utils\";\nimport { FormDefinitions } from \"./FormDefinitions\";\nimport { WindowOptions } from \"../forms/WindowOptions\";\n\n\nexport const window = (inherit:boolean, width?:number|string, height?:number|string, top?:number|string, left?:number|string) =>\n{\n    function define(form:any)\n    {\n        let utils:Utils = new Utils();\n        let fname:string = utils.getName(form);\n        let ctype:string = utils.getType(form);\n\n\n        if (ctype != \"Form\")\n        {\n            console.log(\"@window can only be used on forms\");\n            return;\n        }\n\n\n        if (top != null && top.constructor.name == \"Number\") top += \"px\";\n        if (left != null && left.constructor.name == \"Number\") left += \"px\";\n        if (width != null && width.constructor.name == \"Number\") width += \"px\";\n        if (height != null && height.constructor.name == \"Number\") height += \"px\";\n\n        let wopt:WindowOptions = FormDefinitions.getWindowOpts(fname);\n\n        wopt.inherit = inherit;\n        wopt.offsetTop = \"\"+top;\n        wopt.width = \"\"+width;\n        wopt.height = \"\"+height;\n        wopt.offsetLeft = \"\"+left;\n    }\n\n    return(define);\n}\n","import { Form } from \"../forms/Form\";\nimport { Utils } from \"../utils/Utils\";\nimport { FormDefinitions } from \"./FormDefinitions\";\n\n\nexport const connect = (form:Form, func?:string) =>\n{\n    let utils:Utils = new Utils();\n    let fname:string = utils.getName(form);\n    let ctype:string = utils.getType(form);\n\n    if (ctype != \"Form\")\n    {\n        console.log(\"@connect can only be used on forms, found on '\"+fname+\"'\");\n        return;\n    }\n\n    FormDefinitions.setOnConnect(fname,func);\n}","import { Form } from \"../forms/Form\";\nimport { Utils } from \"../utils/Utils\";\nimport { FormDefinitions } from \"./FormDefinitions\";\n\n\nexport const destroy = (form:Form, func?:string) =>\n{\n    let utils:Utils = new Utils();\n    let fname:string = utils.getName(form);\n    let ctype:string = utils.getType(form);\n\n    if (ctype != \"Form\")\n    {\n        console.log(\"@destroy can only be used on forms, found on '\"+fname+\"'\");\n        return;\n    }\n\n    FormDefinitions.setOnDestroy(fname,func);\n}","export interface Key\n{\n    code:number;\n    name?:string;\n    alt?:boolean;\n    ctrl?:boolean;\n    meta?:boolean;\n    shift?:boolean;\n}\n\nexport interface KeyMap\n{\n    enter:string;\n    escape:string;\n\n    undo:string;\n    paste:string;\n\n    zoom:string;\n    close:string;\n    listval:string;\n\n    delete:string;\n    dublicate:string;\n    insertafter:string;\n    insertbefore:string;\n\n    commit:string;\n    rollback:string;\n\n    connect:string;\n    disconnect:string;\n\n    nextfield:string;\n    prevfield:string;\n\n    nextblock:string;\n    prevblock:string;\n\n    nextrecord:string;\n    prevrecord:string;\n\n    pageup:string;\n    pagedown:string;\n\n    clearform:string;\n    clearblock:string;\n\n    enterquery:string;\n    executequery:string;\n\n    map:string;\n}\n\nexport enum keymap\n{\n    enter,\n    escape,\n\n    undo,\n    paste,\n\n    close,\n\n    listval,\n\n    delete,\n    dublicate,\n    insertafter,\n    insertbefore,\n\n    commit,\n    rollback,\n\n    connect,\n    disconnect,\n\n    nextfield,\n    prevfield,\n\n    nextblock,\n    prevblock,\n\n    nextrecord,\n    prevrecord,\n\n    pageup,\n    pagedown,\n\n    clearform,\n    clearblock,\n\n    enterquery,\n    executequery,\n\n    zoom\n}\n\n\nexport class KeyMapper\n{\n    private static keys:Map<string,keymap> = new Map<string,keymap>();\n\n\n    public static index(map:KeyMap) : void\n    {\n        Object.keys(map).forEach((key) =>\n        {\n            let val:string = map[key];\n            let km:keymap = keymap[key];\n            KeyMapper.keys.set(val,km);\n        });\n    }\n\n\n    public static keymap(key:string) : keymap\n    {\n        return(KeyMapper.keys.get(key));\n    }\n\n\n    public static map(key:Key) : string\n    {\n        let sig:string = key.code+\":\";\n\n        sig += key.shift ? \"t\" : \"f\";\n        sig += key.ctrl  ? \"t\" : \"f\";\n        sig += key.alt   ? \"t\" : \"f\";\n        sig += key.meta  ? \"t\" : \"f\";\n\n        return(sig);\n    }\n\n\n    public static parse(key:string) : Key\n    {\n        let pos:number = key.indexOf(\":\");\n        let shf:boolean = key[pos+1] == 't';\n        let ctl:boolean = key[pos+2] == 't';\n        let alt:boolean = key[pos+3] == 't';\n        let mta:boolean = key[pos+4] == 't';\n        let code:number = +key.substring(0,pos);\n        return({code: code, shift: shf, ctrl: ctl, alt: alt, meta: mta});\n    }\n}","import { Listener } from \"./Listener\";\n\nexport class TriggerEvents\n{\n    types:Map<string,Listener[]> = new Map<string,Listener[]>();\n    fields:Map<string,Map<string,Listener[]>> = new Map<string,Map<string,Listener[]>>();\n}\n","import { Listener } from \"./Listener\";\nimport { keymap } from \"../keymap/KeyMap\";\nimport { TriggerEvent } from \"./TriggerEvent\";\nimport { TriggerEvents } from \"./TriggerEvents\";\nimport { TriggerFunction } from \"./TriggerFunction\";\n\n\nexport enum Trigger\n{\n    Key,\n    Lock,\n    Typing,\n    MouseClick,\n    MouseDoubleClick,\n    PreField,\n    PostField,\n    PostChange,\n    KeyPrevField,\n    KeyNextField,\n    KeyPrevBlock,\n    KeyNextBlock,\n    KeyEnterQuery,\n    KeyExecuteQuery,\n    WhenValidateField,\n    WhenValidateRecord,\n    PreQuery,\n    PostQuery,\n    PreInsert,\n    PreUpdate,\n    PreDelete\n}\n\nexport enum FieldTrigger\n{\n    Key,\n    Typing,\n    MouseClick,\n    MouseDoubleClick,\n    PreField,\n    PostField,\n    PostChange,\n    WhenValidateField,\n    WhenValidateRecord\n}\n\n\nexport class Triggers\n{\n    private triggers:TriggerEvents = new TriggerEvents();\n    private static fieldtriggers:Set<string> = null;\n\n    private static init() : void\n    {\n        if (Triggers.fieldtriggers == null)\n        {\n            Triggers.fieldtriggers = new Set<string>();\n\n            Object.keys(FieldTrigger).forEach((type) =>\n            {\n                if (isNaN(Number(type)))\n                    Triggers.fieldtriggers.add(type);\n            });\n        }\n    }\n\n    public addTrigger(instance:any, func:TriggerFunction, ttypes:Trigger|Trigger[], tfields?:string|string[], tkeys?:keymap|keymap[]) : void\n    {\n        let keys:keymap[] = [];\n        let fields:string[] = [];\n        let types:Trigger[] = [];\n\n        let tasa:boolean = false;\n        if (ttypes.constructor.name == \"Array\") tasa = true;\n\n        if (tasa) types = ttypes as Trigger[];\n        else      types.push(ttypes as Trigger);\n\n        if (tfields != null)\n        {\n            let fasa:boolean = false;\n            if (tfields.constructor.name == \"Array\") fasa = true;\n\n            if (fasa) fields = tfields as string[];\n            else      fields.push(tfields as string);\n        }\n\n        if (tkeys != null)\n        {\n            let kasa:boolean = false;\n            if (tkeys.constructor.name == \"Array\") kasa = true;\n\n            if (kasa) keys = tkeys as keymap[];\n            else      keys.push(tkeys as keymap);\n        }\n\n        if (fields.length > 0)\n        {\n            fields.forEach((field) =>\n            {\n                field = field.toLowerCase();\n                let triggers:Map<string,Listener[]> = this.triggers.fields.get(field);\n\n                if (triggers == null)\n                {\n                    triggers = new Map<string,Listener[]>();\n                    this.triggers.fields.set(field,triggers);\n                }\n\n                types.forEach((type) =>\n                {\n                    if (type == Trigger.Key)\n                    {\n                        keys.forEach((key) =>\n                        {\n                            let code:string = this.keycode(key);\n                            let lsnrs:Listener[] = triggers.get(code);\n\n                            if (lsnrs == null)\n                            {\n                                lsnrs = [];\n                                triggers.set(code,lsnrs);\n                            }\n\n                            lsnrs.push({inst: instance, func: func});\n                        });\n                    }\n                    else if (this.isFieldTrigger(type))\n                    {\n                        let name:string = this.trgname(type);\n                        let lsnrs:Listener[] = triggers.get(name);\n\n                        if (lsnrs == null)\n                        {\n                            lsnrs = [];\n                            triggers.set(name,lsnrs);\n                        }\n\n                        lsnrs.push({inst: instance, func: func});\n                    }\n                });\n            });\n        }\n        else\n        {\n            types.forEach((type) =>\n            {\n                if (type == Trigger.Key)\n                {\n                    keys.forEach((key) =>\n                    {\n                        let code:string = this.keycode(key);\n                        let lsnrs:Listener[] = this.triggers.types.get(code);\n\n                        if (lsnrs == null)\n                        {\n                            lsnrs = [];\n                            this.triggers.types.set(code,lsnrs);\n                        }\n\n                        lsnrs.push({inst: instance, func: func});\n                    });\n                }\n                else\n                {\n                    let name:string = this.trgname(type);\n                    let lsnrs:Listener[] = this.triggers.types.get(name);\n\n                    if (lsnrs == null)\n                    {\n                        lsnrs = [];\n                        this.triggers.types.set(name,lsnrs);\n                    }\n\n                    lsnrs.push({inst: instance, func: func});\n                }\n            });\n        }\n    }\n\n\n    public async invokeTriggers(type:Trigger, event:TriggerEvent, key?:keymap) : Promise<boolean>\n    {\n        event[\"type$\"] = type;\n\n        if (type == Trigger.Key && key != null)\n        {\n            let code:string = this.keycode(key);\n            let lsnrs:Listener[] = this.triggers.types.get(code);\n\n            if (lsnrs != null)\n            {\n                for(let i = 0; i < lsnrs.length; i++)\n                    if (!await this.execfunc(lsnrs[i],event)) return(false);\n            }\n        }\n        else\n        {\n            let name:string = this.trgname(type);\n            let lsnrs:Listener[] = this.triggers.types.get(name);\n\n            if (lsnrs != null)\n            {\n                for(let i = 0; i < lsnrs.length; i++)\n                    if (!await this.execfunc(lsnrs[i],event)) return(false);\n            }\n        }\n\n        return(true);\n    }\n\n\n    public async invokeFieldTriggers(type:Trigger, field:string, event:TriggerEvent, key?:keymap) : Promise<boolean>\n    {\n        let triggers:Map<string,Listener[]> = this.triggers.fields.get(field);\n\n        if (triggers == null)\n            return(this.invokeTriggers(type,event,key));\n\n        event[\"type$\"] = type;\n\n        if (type == Trigger.Key && key != null)\n        {\n            let code:string = this.keycode(key);\n            let lsnrs:Listener[] = triggers.get(code);\n\n            if (lsnrs != null)\n            {\n                for(let i = 0; i < lsnrs.length; i++)\n                    if (!await this.execfunc(lsnrs[i],event)) return(false);\n            }\n        }\n        else\n        {\n            let name:string = this.trgname(type);\n            let lsnrs:Listener[] = triggers.get(name);\n\n            if (lsnrs != null)\n            {\n                for(let i = 0; i < lsnrs.length; i++)\n                    if (!await this.execfunc(lsnrs[i],event)) return(false);\n            }\n        }\n\n        return(this.invokeTriggers(type,event,key));\n    }\n\n\n    private async execfunc(lsnr:Listener, event:TriggerEvent) : Promise<boolean>\n    {\n        try\n        {\n            return(await lsnr.inst[lsnr.func.name](event));\n        }\n        catch (error)\n        {\n            console.log(error);\n            return(false);\n        }\n    }\n\n\n    private isFieldTrigger(trigger:Trigger)\n    {\n        Triggers.init();\n        return(Triggers.fieldtriggers.has(Trigger[trigger]));\n    }\n\n\n    private trgname(trigger:Trigger) : string\n    {\n        return(Trigger[trigger].toLowerCase());\n    }\n\n\n    private keycode(key:keymap) : string\n    {\n        return(keymap[key].toLowerCase());\n    }\n}","import { keymap } from \"../keymap/KeyMap\";\nimport { Trigger } from \"../events/Triggers\";\nimport { TriggerFunction } from \"../events/TriggerFunction\";\n\n\nexport interface TriggerDefinition\n{\n    key?:keymap,\n    field?:string;\n    block:string;\n    blktrg:boolean;\n    trigger:Trigger;\n    params:string[];\n    func:TriggerFunction;\n}\n\n\nexport class TriggerDefinitions\n{\n    private static bftriggers:Map<string,Map<string,TriggerDefinition>> = new Map<string,Map<string,TriggerDefinition>>();\n    private static bktriggers:Map<string,Map<string,TriggerDefinition>> = new Map<string,Map<string,TriggerDefinition>>();\n    private static fktriggers:Map<string,Map<string,TriggerDefinition>> = new Map<string,Map<string,TriggerDefinition>>();\n    private static fftriggers:Map<string,Map<string,Map<string,TriggerDefinition>>> = new Map<string,Map<string,Map<string,TriggerDefinition>>>();\n\n\n    public static add(isblock:boolean, cname:string, def:TriggerDefinition) : void\n    {\n        if (def.key == null) this.addft(isblock,cname,def);\n        else                 this.addkt(isblock,cname,def);\n    }\n\n\n    private static addkt(isblock:boolean, cname:string, def:TriggerDefinition) : void\n    {\n        if (isblock) TriggerDefinitions.addKeyTrigger(cname,def);\n        else         TriggerDefinitions.addFormKeyTrigger(cname,def);\n    }\n\n\n    private static addft(isblock:boolean, cname:string, def:TriggerDefinition) : void\n    {\n        let parts:string[] = TriggerDefinitions.split(def.field);\n\n        if (isblock && parts.length > 1)\n        {\n            console.log(\"trigger must specify field without '.' or ' '\");\n            return;\n        }\n\n        if (!isblock && parts.length > 2)\n        {\n            console.log(\"trigger must specify blockalias.field without ' '\");\n            return;\n        }\n\n        let form:string = null;\n        let block:string = null;\n        let field:string = null;\n\n        if (isblock)\n        {\n            block = cname;\n            if (parts.length > 0) field = parts.shift();\n        }\n        else\n        {\n            form = cname;\n            block = parts.shift();\n            def.block = block;\n            if (parts.length > 0) field = parts.shift();\n        }\n\n        def.field = field;\n\n        if (isblock) TriggerDefinitions.addFieldTrigger(block,field,def);\n        else         TriggerDefinitions.addFormFieldTrigger(form,block,field,def);\n    }\n\n\n    private static addFieldTrigger(block:string,field:string,def:TriggerDefinition)\n    {\n        let triggers:Map<string,TriggerDefinition> = TriggerDefinitions.bftriggers.get(block);\n\n        if (triggers == null)\n        {\n            triggers = new Map<string,TriggerDefinition>();\n            TriggerDefinitions.bftriggers.set(block,triggers);\n        }\n\n        triggers.set(field+\"[\"+Trigger[def.trigger]+\"]\",def);\n    }\n\n\n    private static addKeyTrigger(block:string,def:TriggerDefinition)\n    {\n        let triggers:Map<string,TriggerDefinition> = TriggerDefinitions.bktriggers.get(block);\n\n        if (triggers == null)\n        {\n            triggers = new Map<string,TriggerDefinition>();\n            TriggerDefinitions.bktriggers.set(block,triggers);\n        }\n\n        triggers.set(keymap[def.key]+\"[\"+Trigger[def.trigger]+\"]\",def);\n    }\n\n\n    private static addFormFieldTrigger(form:string,block:string,field:string,def:TriggerDefinition)\n    {\n        if (block == null) block = \"\";\n        let ftriggers:Map<string,Map<string,TriggerDefinition>> = TriggerDefinitions.fftriggers.get(form);\n\n        if (ftriggers == null)\n        {\n            ftriggers = new Map<string,Map<string,TriggerDefinition>>();\n            TriggerDefinitions.fftriggers.set(form,ftriggers);\n        }\n\n        let triggers:Map<string,TriggerDefinition> = ftriggers.get(block);\n\n        if (triggers == null)\n        {\n            triggers = new Map<string,TriggerDefinition>();\n            ftriggers.set(block,triggers);\n        }\n\n        triggers.set(field+\"[\"+Trigger[def.trigger]+\"]\",def);\n    }\n\n\n    private static addFormKeyTrigger(form:string,def:TriggerDefinition)\n    {\n        let triggers:Map<string,TriggerDefinition> = TriggerDefinitions.fktriggers.get(form);\n\n        if (triggers == null)\n        {\n            triggers = new Map<string,TriggerDefinition>();\n            TriggerDefinitions.fktriggers.set(form,triggers);\n        }\n\n        triggers.set(keymap[def.key]+\"[\"+Trigger[def.trigger]+\"]\",def);\n    }\n\n\n    public static getFieldTriggers(block:string) : Map<string,TriggerDefinition>\n    {\n        return(new Map(TriggerDefinitions.bftriggers.get(block.toLowerCase())));\n    }\n\n\n    public static getKeyTriggers(block:string) : Map<string,TriggerDefinition>\n    {\n        return(new Map(TriggerDefinitions.bktriggers.get(block.toLowerCase())));\n    }\n\n\n    public static getFormFieldTriggers(form:string,block:string) : Map<string,TriggerDefinition>\n    {\n        if (block == null) block = \"\";\n        let triggers:Map<string,Map<string,TriggerDefinition>> = TriggerDefinitions.fftriggers.get(form.toLowerCase());\n        if (triggers != null) return(new Map(triggers.get(block.toLowerCase())));\n        return(new Map());\n    }\n\n\n    public static getFormKeyTriggers(form:string) : Map<string,TriggerDefinition>\n    {\n        return(new Map(TriggerDefinitions.fktriggers.get(form.toLowerCase())));\n    }\n\n\n    private static split(name:string) : string[]\n    {\n        if (name == null) return([]);\n        let tokens:string[] = name.trim().split(\".\");\n\n        for(let i = 0; i < tokens.length; i++)\n            tokens[i] = tokens[i].trim().toLowerCase();\n\n        return(tokens);\n    }\n}\n","import { Utils } from \"../utils/Utils\";\nimport { Trigger } from \"../events/Triggers\";\nimport { TriggerDefinition, TriggerDefinitions } from \"./TriggerDefinitions\";\n\nexport const trigger = (trigger:Trigger,field?:string|string[]) =>\n{\n    function define(comp:any, func?:string)\n    {\n        let utils:Utils = new Utils();\n        let cname:string = utils.getName(comp);\n        let ctype:string = utils.getType(comp);\n        let params:string[] = utils.getParams(comp[func]);\n\n        if (params.length != 1)\n        {\n            console.log(\"function \"+func+\" must take 1 TriggerEvent argument\");\n            return;\n        }\n\n        if (ctype != \"Block\" && ctype != \"Form\")\n        {\n            console.log(\"@trigger can only be applied on Block or Form\");\n            return;\n        }\n\n        let blktrg:boolean = false;\n        if (ctype == \"Block\") blktrg = true;\n\n        let fields:string[] = [];\n        if (field == null) field = [null];\n\n        if (field.constructor.name == \"Array\") fields = field as string[];\n        else                                   fields.push(field as string);\n\n        fields.forEach((fld) =>\n        {\n            let trg:TriggerDefinition =\n            {\n                field: fld,\n                block: null,\n                blktrg: blktrg,\n                params: params,\n                func: comp[func],\n                trigger: trigger\n            }\n\n            TriggerDefinitions.add(blktrg,cname,trg);\n        });\n    }\n\n    return(define);\n}\n","import { Utils } from \"../utils/Utils\";\n\nexport class DBUsage\n{\n    public static merge(changes:DatabaseUsage, base:DatabaseUsage) : DatabaseUsage\n    {\n        let utils:Utils = new Utils();\n        if (changes == null) return(base);\n        let merged:DatabaseUsage = utils.clone(base);\n        if (changes.hasOwnProperty(\"query\"))  merged.query  = changes.query;\n        if (changes.hasOwnProperty(\"insert\")) merged.insert = changes.insert;\n        if (changes.hasOwnProperty(\"update\")) merged.update = changes.update;\n        if (changes.hasOwnProperty(\"delete\")) merged.delete = changes.delete;\n        return(merged);\n    }\n\n    public static override(overide:DatabaseUsage, base:DatabaseUsage) : DatabaseUsage\n    {\n        let utils:Utils = new Utils();\n        if (overide == null) return(base);\n        let merged:DatabaseUsage = utils.clone(base);\n\n        if (overide.hasOwnProperty(\"query\")  && !overide.query)  merged.query = false;\n        if (overide.hasOwnProperty(\"insert\") && !overide.insert) merged.insert = false;\n        if (overide.hasOwnProperty(\"update\") && !overide.update) merged.update = false;\n        if (overide.hasOwnProperty(\"delete\") && !overide.delete) merged.delete = false;\n\n        return(merged);\n    }\n\n    public static complete(base:DatabaseUsage) : DatabaseUsage\n    {\n        let utils:Utils = new Utils();\n        \n        if (base == null) base = {};\n        else base = utils.clone(base);\n\n        if (!base.hasOwnProperty(\"query\"))  base.query  = true;\n        if (!base.hasOwnProperty(\"insert\")) base.insert = true;\n        if (!base.hasOwnProperty(\"update\")) base.update = true;\n        if (!base.hasOwnProperty(\"delete\")) base.delete = true;\n        return(base);\n    }\n}\n\n\nexport interface DatabaseUsage\n{\n    query?:boolean;\n    insert?:boolean;\n    update?:boolean;\n    delete?:boolean;\n}","import { DatabaseUsage, DBUsage } from \"../database/DatabaseUsage\";\n\nexport interface PropUsage\n{\n    prop?:string;\n    usage?:DatabaseUsage;\n}\n\n\nexport class DatabaseDefinitions\n{\n    private static bdefault:Map<string,DatabaseUsage> = new Map<string,DatabaseUsage>();\n    private static fdefault:Map<string,DatabaseUsage> = new Map<string,DatabaseUsage>();\n\n    public static setFormUsage(form:string, usage:DatabaseUsage) : void\n    {\n        DatabaseDefinitions.fdefault.set(form,usage);\n    }\n\n    public static getFormUsage(form:string) : DatabaseUsage\n    {\n        let usage:DatabaseUsage = DatabaseDefinitions.fdefault.get(form.toLowerCase());\n        return(usage);\n    }\n\n    public static setBlockDefault(block:string, usage:DatabaseUsage) : void\n    {\n        DatabaseDefinitions.bdefault.set(block,usage);\n    }\n\n    public static getBlockDefault(block:string) : DatabaseUsage\n    {\n        let usage:DatabaseUsage = null;\n\n        let base:DatabaseUsage =\n        {\n            query:  true,\n            insert: true,\n            update: true,\n            delete: true\n        };\n\n        if (block != null) usage = DatabaseDefinitions.bdefault.get(block.toLowerCase());\n        return(DBUsage.merge(usage,base));\n    }\n}","import { Utils } from \"../utils/Utils\";\nimport { DatabaseUsage } from \"../database/DatabaseUsage\";\nimport { DatabaseDefinitions } from \"./DatabaseDefinitions\";\n\nexport const database = (usage:DatabaseUsage) =>\n{\n    function define(component:any)\n    {\n        let utils:Utils = new Utils();\n        let comp:string = utils.getName(component);\n        let type:string = utils.getType(component);\n\n        if (type == \"Form\")\n        {\n            DatabaseDefinitions.setFormUsage(comp,usage);\n            return;\n        }\n\n        if (type == \"Block\")\n        {\n            DatabaseDefinitions.setBlockDefault(comp,usage);\n            return;\n        }\n\n        console.log(\"@database can only be used in conjunction with Form or Block\");\n    }\n    return(define);\n}","import { Utils } from \"../utils/Utils\";\nimport { keymap } from \"../keymap/KeyMap\";\nimport { Trigger } from \"../events/Triggers\";\nimport { TriggerDefinition, TriggerDefinitions } from \"./TriggerDefinitions\";\n\n\nexport const keytrigger = (key:keymap|keymap[]) =>\n{\n    function define(comp:any, func?:string)\n    {\n        let utils:Utils = new Utils();\n        let cname:string = utils.getName(comp);\n        let ctype:string = utils.getType(comp);\n        let params:string[] = utils.getParams(comp[func]);\n\n        if (params.length != 1)\n        {\n            console.log(\"function \"+func+\" must take 1 TriggerEvent argument\");\n            return;\n        }\n\n        if (ctype != \"Block\" && ctype != \"Form\")\n        {\n            console.log(\"@keytrigger can only be applied on Block or Form\");\n            return;\n        }\n\n        let block:boolean = false;\n        if (ctype == \"Block\") block = true;\n\n        let keys:keymap[] = [];\n\n        if (key.constructor.name == \"Array\") keys = key as keymap[];\n        else                                 keys.push(key as keymap);\n\n        keys.forEach((key) =>\n        {\n            let trg:TriggerDefinition =\n            {\n                key: key,\n                block: null,\n                blktrg: block,\n                params: params,\n                func: comp[func],\n                trigger: Trigger.Key\n            }\n\n            TriggerDefinitions.add(block,cname,trg);\n        });\n    }\n\n    return(define);\n}\n","import { Form } from \"../forms/Form\";\nimport { Utils } from \"../utils/Utils\";\nimport { FormDefinitions } from \"./FormDefinitions\";\n\n\nexport const disconnect = (form:Form, func?:string) =>\n{\n    let utils:Utils = new Utils();\n    let fname:string = utils.getName(form);\n    let ctype:string = utils.getType(form);\n\n    if (ctype != \"Form\")\n    {\n        console.log(\"@disconnect can only be used on forms, found on '\"+fname+\"'\");\n        return;\n    }\n\n    FormDefinitions.setOnDisconnect(fname,func);\n}","export interface LOVDefinition\n{\n    inst:any;\n    func:string;\n    params:string[];\n}\n\nexport class LOVDefinitions\n{\n    private static bdefs:Map<string,Map<string,LOVDefinition>> = new Map<string,Map<string,LOVDefinition>>();\n    private static biddefs:Map<string,Map<string,LOVDefinition>> = new Map<string,Map<string,LOVDefinition>>();\n    private static fdefs:Map<string,Map<string,Map<string,LOVDefinition>>> = new Map<string,Map<string,Map<string,LOVDefinition>>>();\n    private static fiddefs:Map<string,Map<string,Map<string,LOVDefinition>>> = new Map<string,Map<string,Map<string,LOVDefinition>>>();\n\n    public static add(isblock:boolean, cname:string, fieldspec:string, inst:any, func:string, params:string[])\n    {\n        let form:string = null;\n        let block:string = null;\n        let field:string = null;\n\n        let id:boolean = false;\n        let parts:string[] = LOVDefinitions.split(fieldspec);\n\n        if (isblock)\n        {\n            block = cname;\n        }\n        else\n        {\n            form = cname;\n            block = parts.shift();\n        }\n\n        if (parts.length == 0 || parts.length > 2)\n        {\n            console.log(\"@listofvalues must specify [alias.]field[.id], not '\"+fieldspec+\"'\");\n            return;\n        }\n\n        field = parts.shift();\n\n        if (parts.length > 0)\n        {\n            id = true;\n            field += \".\"+parts.shift();\n        }\n\n        let def:LOVDefinition =\n        {\n            inst: inst,\n            func: func,\n            params: params\n        }\n\n        if (form != null)\n        {\n            if (!id) LOVDefinitions.addFormLov(form,block,field,def);\n            else     LOVDefinitions.addFormIdLov(form,block,field,def);\n        }\n        else\n        {\n            if (!id) LOVDefinitions.addBlockLov(block,field,def);\n            else     LOVDefinitions.addBlockIdLov(block,field,def);\n        }\n    }\n\n\n    private static addFormLov(form:string, block:string, field:string, def:LOVDefinition)\n    {\n        let fdefs:Map<string,Map<string,LOVDefinition>> = LOVDefinitions.fdefs.get(form);\n\n        if (fdefs == null)\n        {\n            fdefs = new Map<string,Map<string,LOVDefinition>>();\n            LOVDefinitions.fdefs.set(form,fdefs);\n        }\n\n        let bdefs:Map<string,LOVDefinition> = fdefs.get(block);\n\n        if (bdefs == null)\n        {\n            bdefs = new Map<string,LOVDefinition>();\n            fdefs.set(block,bdefs);\n        }\n\n        bdefs.set(field,def);\n    }\n\n\n    private static addFormIdLov(form:string, block:string, field:string, def:LOVDefinition)\n    {\n        let fdefs:Map<string,Map<string,LOVDefinition>> = LOVDefinitions.fiddefs.get(form);\n\n        if (fdefs == null)\n        {\n            fdefs = new Map<string,Map<string,LOVDefinition>>();\n            LOVDefinitions.fiddefs.set(form,fdefs);\n        }\n\n        let bdefs:Map<string,LOVDefinition> = fdefs.get(block);\n\n        if (bdefs == null)\n        {\n            bdefs = new Map<string,LOVDefinition>();\n            fdefs.set(block,bdefs);\n        }\n\n        bdefs.set(field,def);\n    }\n\n\n    private static addBlockLov(block:string, field:string, def:LOVDefinition)\n    {\n        let bdefs:Map<string,LOVDefinition> = LOVDefinitions.bdefs.get(block);\n\n        if (bdefs == null)\n        {\n            bdefs = new Map<string,LOVDefinition>();\n            LOVDefinitions.bdefs.set(block,bdefs);\n        }\n\n        bdefs.set(field,def);\n    }\n\n\n    private static addBlockIdLov(block:string, field:string, def:LOVDefinition)\n    {\n        let bdefs:Map<string,LOVDefinition> = LOVDefinitions.biddefs.get(block);\n\n        if (bdefs == null)\n        {\n            bdefs = new Map<string,LOVDefinition>();\n            LOVDefinitions.biddefs.set(block,bdefs);\n        }\n\n        bdefs.set(field,def);\n    }\n\n\n    public static getblock(block:string) : Map<string,LOVDefinition>\n    {\n        return(new Map(LOVDefinitions.bdefs.get(block.toLowerCase())));\n    }\n\n\n    public static getblockid(block:string) : Map<string,LOVDefinition>\n    {\n        return(new Map(LOVDefinitions.biddefs.get(block.toLowerCase())));\n    }\n\n\n\n    public static getform(form:string, block:string) : Map<string,LOVDefinition>\n    {\n        let fdefs:Map<string,Map<string,LOVDefinition>> = LOVDefinitions.fdefs.get(form.toLowerCase());\n        if (fdefs != null) return(new Map(fdefs.get(block.toLowerCase())));\n        return(new Map());\n    }\n\n\n    public static getidform(form:string, block:string) : Map<string,LOVDefinition>\n    {\n        let fdefs:Map<string,Map<string,LOVDefinition>> = LOVDefinitions.fiddefs.get(form.toLowerCase());\n        if (fdefs != null) return(new Map(fdefs.get(block.toLowerCase())));\n        return(new Map());\n    }\n\n\n    private static split(name:string) : string[]\n    {\n        let tokens:string[] = name.trim().split(\".\");\n\n        for(let i = 0; i < tokens.length; i++)\n            tokens[i] = tokens[i].trim().toLowerCase();\n\n        return(tokens);\n    }\n}","import { Utils } from \"../utils/Utils\";\nimport { LOVDefinitions } from \"./LOVDefinitions\";\n\nexport const listofvalues = (field:string|string[]) =>\n{\n    function define(comp:any, func?:string)\n    {\n        let utils:Utils = new Utils();\n        let cname:string = utils.getName(comp);\n        let ctype:string = utils.getType(comp);\n        let params:string[] = utils.getParams(comp[func]);\n\n        if (ctype != \"Block\" && ctype != \"Form\")\n        {\n            console.log(\"@listofvalues can only be applied on Block or Form\");\n            return;\n        }\n\n        let block:boolean = false;\n        if (ctype == \"Block\") block = true;\n\n        let fields:string[] = [];\n        if (field.constructor.name == \"Array\") fields = field as string[];\n        else                                   fields.push(field as string);\n\n        fields.forEach((fld) => {LOVDefinitions.add(block,cname,fld,comp,func,params)});\n    }\n\n    return(define);\n}\n","import { Trigger } from \"./Triggers\";\nimport { keymap } from \"../keymap/KeyMap\";\nimport { Statement } from \"../database/Statement\";\nimport { FieldInstance } from \"../input/FieldInstance\";\n\nexport enum Origin\n{\n    Form,\n    Block,\n    Field\n}\n\n\nexport class TriggerEvent\n{\n    private event$:any;\n    private type$:Trigger;\n    private block$:string;\n    private record$:number;\n\n    constructor(block:string, record:number, jsevent?:any)\n    {\n        this.block$ = block;\n        this.record$ = record;\n        this.event$ = jsevent;\n    }\n\n    public get block() : string\n    {\n        return(this.block$);\n    }\n\n    public get type() : Trigger\n    {\n        return(this.type$);\n    }\n\n    public get event() : any\n    {\n        return(this.event$);\n    }\n\n    public get record() : number\n    {\n        return(this.record$);\n    }\n}\n\n\nexport class KeyTriggerEvent extends TriggerEvent\n{\n    private key$:keymap;\n    private field$:string;\n    private origin$:number;\n\n    constructor(origin:Origin, block:string, field:FieldInstance, key:keymap, jsevent:any)\n    {\n        super(block,0,jsevent);\n\n        this.key$ = key;\n        this.origin$ = origin;\n\n        if (field != null)\n        {\n            this.field$ = field.name;\n            this[\"record$\"] = field.row;\n        }\n    }\n\n    public get key() : keymap\n    {\n        return(this.key$);\n    }\n\n    public get field() : string\n    {\n        return(this.field$);\n    }\n\n    public get origin() : number\n    {\n        return(this.origin$);\n    }\n}\n\n\nexport class FieldTriggerEvent extends TriggerEvent\n{\n    private value$:any;\n    private id$:string;\n    private field$:string;\n    private previous$:any;\n\n    constructor(block:string, field:string, id:string, row:number, value:any, previous:any, jsevent?:any)\n    {\n        super(block,row,jsevent);\n\n        this.id$ = id;\n        this.field$ = field;\n        this.value$ = value;\n        this.previous$ = previous;\n    }\n\n    public get value() : any\n    {\n        return(this.value$);\n    }\n\n    public get field() : string\n    {\n        return(this.field$);\n    }\n\n    public get id() : string\n    {\n        return(this.id$);\n    }\n\n    public get previous() : any\n    {\n        return(this.previous$);\n    }\n}\n\n\nexport class SQLTriggerEvent extends TriggerEvent\n{\n    private stmt$:Statement;\n\n    constructor(block:string, row:number, stmt:Statement)\n    {\n        super(block,row,null);\n        this.stmt$ = stmt;\n    }\n\n    public get stmt() : Statement\n    {\n        return(this.stmt$);\n    }\n\n    public set stmt(stmt:Statement)\n    {\n        this.stmt$ = stmt;\n    }\n}\n","import { Config } from \"./Config\";\nimport { Injectable } from \"@angular/core\";\nimport { Application } from \"./Application\";\n\n\n@Injectable({\n    providedIn: 'root',\n})\n\n\nexport class Context\n{\n    public conf:Config;\n    public app:Application;\n}","import { DropDownMenu } from './DropDownMenu';\nimport { Context } from '../application/Context';\nimport { ApplicationImpl } from '../application/ApplicationImpl';\nimport { Component, ViewChild, ElementRef, AfterViewInit, ComponentRef, EmbeddedViewRef, ChangeDetectorRef, ChangeDetectionStrategy } from '@angular/core';\n\n\n@Component({\n    selector: 'menuarea',\n    template:\n\t`\n\t\t<div #menu></div>\n\t`\n    , changeDetection: ChangeDetectionStrategy.OnPush\n})\n\n\nexport class MenuArea implements AfterViewInit\n{\n    private app:ApplicationImpl;\n    private menu:HTMLDivElement;\n    private element:HTMLElement;\n    private menuref:ComponentRef<any>;\n    @ViewChild(\"menu\", {read: ElementRef}) private elem: ElementRef;\n\n\n    constructor(ctx:Context, private change:ChangeDetectorRef)\n    {\n        this.app = ctx.app[\"_impl_\"];\n    }\n\n\n    public remove() : void\n    {\n        if (this.element != null)\n        {\n            let menuelem:Element = this.menu.firstElementChild;\n            if (menuelem != null) this.menu.removeChild(menuelem);\n            this.app.builder.getAppRef().detachView(this.menuref.hostView);\n        }\n\n        this.change.detectChanges();\n    }\n\n\n    public display(menu:ComponentRef<DropDownMenu>) : void\n    {\n        if (menu == null)\n        {\n            this.remove();\n            return;\n        }\n\n\t\tif (this.menu == null)\n\t\t{\n\t\t\tsetTimeout(() => {this.display(menu);},10);\n\t\t\treturn;\n\t\t}\n\n        if (this.element != null)\n        {\n            let menuelem:Element = this.menu.firstElementChild;\n            if (menuelem != null) this.menu.removeChild(menuelem);\n            this.app.builder.getAppRef().detachView(this.menuref.hostView);\n        }\n\n        this.menuref = menu;\n\n        this.element = (menu.hostView as EmbeddedViewRef<any>).rootNodes[0] as HTMLElement;\n\t\tthis.app.builder.getAppRef().attachView(this.menuref.hostView);\n\t\tthis.menu.appendChild(this.element);\n\t\tthis.change.detectChanges();\n    }\n\n\n    public ngAfterViewInit(): void\n    {\n        this.menu = this.elem?.nativeElement as HTMLDivElement;\n\t\tthis.app.setMenuArea(this);\n    }\n}","import { Form } from '../forms/Form';\nimport { MenuInterface } from \"./MenuInterface\";\nimport { Application } from \"../application/Application\";\n\n\nexport abstract class MenuHandler\n{\n    private static _id:number = 0;\n\n    private guid$:number;\n    private __menu__:MenuInterface = null;\n    // dont rename __menu__ as it is set behind the scenes\n\n    constructor()\n    {\n        this.guid$ = MenuHandler._id++;\n    }\n\n    public get guid() : number\n    {\n        return(this.guid$);\n    }\n\n    public get ready() : boolean\n    {\n        return(this.__menu__ != null);\n    }\n\n    public get app() : Application\n    {\n        return(this.__menu__.app);\n    }\n\n\n    public enable(menu?:string) : void\n    {\n        this.__menu__.enable(menu);\n    }\n\n\n    public disable(menu?:string) : void\n    {\n        this.__menu__.disable(menu);\n    }\n\n    public get connected() : boolean\n    {\n        return(this.__menu__.isConnected());\n    }\n\n    public get transaction() : boolean\n    {\n        return(this.app.transaction);\n    }\n\n    // For overwrite by application menus\n    public onFormChange(form:Form) : void\n    {\n    }\n\n\n    abstract onInit() : void;\n    abstract onConnect() : void;\n    abstract onDisconnect() : void;\n    abstract onTransactionChange() : void;\n}","import { Form } from \"../forms/Form\";\nimport { keymap } from \"../keymap/KeyMap\";\nimport { MenuHandler } from './MenuHandler';\n\n\nexport class DefaultMenuHandler extends MenuHandler\n{\n    public form:Form;\n\n    public onInit() : void\n    {\n        this.init();\n    }\n\n    public onConnect(): void\n    {\n        this.init();\n    }\n\n    public onDisconnect(): void\n    {\n        this.init();\n    }\n\n    public onFormChange(form: Form): void\n    {\n        this.form = form;\n        if (this.ready) this.init();\n    }\n\n    public onTransactionChange(): void\n    {\n        if (this.transaction) this.enable(\"/transaction\");\n        else                  this.disable(\"/transaction\");\n    }\n\n    private init() : void\n    {\n        this.disable();\n        this.enable(\"/form/shortkeys\");\n\n        if (this.form != null)\n        {\n            this.enable(\"/form/close\");\n            this.enable(\"/section/next\");\n            this.enable(\"/section/previous\");\n\n            if (this.connected)\n            {\n                this.enable(\"/form\");\n                this.enable(\"/section\");\n                this.enable(\"/record\");\n                this.enable(\"/connection/disconnect\");\n            }\n            else\n            {\n                this.enable(\"/connection/connect\");\n            }\n        }\n        else\n        {\n            if (this.connected)\n            {\n                this.enable(\"/connection/disconnect\");\n            }\n            else\n            {\n                this.enable(\"/connection/connect\");\n            }\n        }\n\n        this.onTransactionChange();\n    }\n\n    public connect() : void\n    {\n        this.app.connect();\n        this.init();\n    }\n\n    public disconnect() : void\n    {\n        this.app.disconnect();\n        this.init();\n    }\n\n    public commit() : void\n    {\n        this.app.commit();\n    }\n\n    public rollback() : void\n    {\n        this.app.rollback();\n    }\n\n    public clear() : void\n    {\n        this.form?.sendKey(keymap.clearform);\n    }\n\n    public cancel() : void\n    {\n        this.form?.block?.cancel();\n    }\n\n    public enterFormQuery() : void\n    {\n        this.form?.enterquery();\n    }\n\n    public executeFormQuery() : void\n    {\n        this.form?.executequery();\n    }\n\n    public enterQuery() : void\n    {\n        this.form?.block?.sendKey(keymap.enterquery);\n    }\n\n    public executeQuery() : void\n    {\n        this.form?.block?.sendKey(keymap.executequery);\n    }\n\n    public deleteRecord() : void\n    {\n        this.form?.block?.delete();\n    }\n\n    public insertRecordAfter() : void\n    {\n        this.form?.block?.insert(false);\n    }\n\n    public insertRecordBefore() : void\n    {\n        this.form?.block?.insert(true);\n    }\n\n    public nextRecord() : void\n    {\n        this.form?.block?.nextrecord();\n    }\n\n    public prevRecord() : void\n    {\n        this.form?.block?.prevrecord();\n    }\n\n    public nextBlock() : void\n    {\n        this.form?.block?.nextblock();\n    }\n\n    public prevBlock() : void\n    {\n        this.form?.block?.prevblock();\n    }\n\n    public pageUp() : void\n    {\n        this.form?.block?.pageup();\n    }\n\n    public pageDown() : void\n    {\n        this.form?.block?.pagedown();\n    }\n\n    public close() : void\n    {\n        this.form?.close(false);\n        this.init();\n    }\n\n    public showkeymap() : void\n    {\n        this.app.showKeyMap();\n    }\n}","import { Menu } from './Menu';\nimport { MenuEntry } from './MenuEntry';\nimport { MenuHandler } from './MenuHandler';\nimport { DefaultMenuHandler } from './DefaultMenuHandler';\n\n\nexport class DefaultMenu implements Menu\n{\n    private entries: MenuEntry[];\n    private handler: DefaultMenuHandler;\n\n    constructor()\n    {\n        this.entries =\n        [\n            {\n                name: \"Form\", title: \"Form actions\", options:\n                [\n                    {name: \"enter query\",       action: \"enterFormQuery\"},\n                    {name: \"execute query\",     action: \"executeFormQuery\"},\n                    {name: \"clear\",             action: \"clear\"},\n                    {name: \"close\",             action: \"close\"},\n                    {name: \"shortkeys\",         action: \"showkeymap\"},\n                ]\n            }\n            ,\n            {\n                name: \"Section\", title: \"Block actions\", options:\n                [\n                    {name: \"enter query\",     action: \"enterQuery\"},\n                    {name: \"execute query\",   action: \"executeQuery\"},\n                    {name: \"clear filter\",    action: \"executeQuery\"},\n                    {name: \"next\",            action: \"nextBlock\"},\n                    {name: \"previous\",        action: \"prevBlock\"},\n                ]\n            }\n            ,\n            {\n                name: \"Record\", title: \"Record actions\", options:\n                [\n                    {name: \"insert below\",  action: \"insertRecordAfter\"},\n                    {name: \"insert above\",  action: \"insertRecordBefore\"},\n                    {name: \"delete\",        action: \"deleteRecord\"},\n                    {name: \"next\",          action: \"nextRecord\"},\n                    {name: \"previous\",      action: \"prevRecord\"},\n                    {name: \"pagedown\",      action: \"pageDown\"},\n                    {name: \"pageup\",        action: \"pageUp\"},\n                ]\n            }\n            ,\n            {\n                name: \"Transaction\", title: \"Transaction Menu\", options:\n                [\n                    {name: \"commit\", action: \"commit\"},\n                    {name: \"rollback\", action: \"rollback\"},\n                ]\n            }\n            ,\n            {\n                name: \"Connection\", title: \"Connection to database\", options:\n                [\n                    {name: \"connect\",    action: \"connect\"},\n                    {name: \"disconnect\", action: \"disconnect\"},\n                ]\n            }\n        ];\n\n        this.handler = new DefaultMenuHandler();\n    }\n\n    getHandler(): MenuHandler\n    {\n        return(this.handler);\n    }\n\n    getEntries(): MenuEntry[]\n    {\n        return(this.entries);\n    }\n}","import { NameValuePair } from \"../utils/NameValuePair\";\n\nexport class Key\n{\n    private values$:any[] = [];\n    private columns$:string[] = [];\n    private index:Map<string,any> = new Map<string,any>();\n\n    constructor(public name:string) {}\n\n    public get(part:string|number) : any\n    {\n        let col:number = -1;\n\n        if (part.constructor.name == \"Number\") col = +part;\n        else col = this.index.get(\"\"+part);\n\n        return(this.values$[col]);\n    }\n\n    public partof(part:string) : boolean\n    {\n        return(this.columns$.includes(part,0));\n    }\n\n    public set(name:string|number, value:any) : void\n    {\n        let col:number = -1;\n\n        if (name.constructor.name == \"Number\") col = +name;\n        else col = this.index.get(\"\"+name);\n\n        this.values$[col] = value;\n    }\n\n    public addColumn(name:string) : void\n    {\n        this.index.set(name,this.columns$.length);\n\n        this.values$.push(name);\n        this.columns$.push(name);\n    }\n\n    public columns() : string[]\n    {\n        return(this.columns$);\n    }\n\n    public get values() : NameValuePair[]\n    {\n        let map:NameValuePair[] = [];\n\n        for (let i = 0; i < this.columns$.length; i++)\n            map.push({name: this.columns$[i], value: this.values$[i]});\n\n        return(map);\n    }\n\n\n    public toString() : string\n    {\n        let str:string = this.name+\" [\";\n\n        for (let i = 0; i < this.columns$.length; i++)\n            str += this.columns$[i]+\" = \"+this.values$[i]+\", \";\n\n        return(str.substring(0,str.length-2)+\"]\");\n    }\n}","import { Field } from \"../input/Field\";\nimport { FieldInstance } from \"../input/FieldInstance\";\n\n\nexport enum RecordState\n{\n    na,\n    qmode,\n    insert,\n    update\n}\n\n\nexport class Record\n{\n    private row$:number = 0;\n    private fields$:Field[] = [];\n    private current$:boolean = false;\n    private enabled$:boolean = false;\n    private state$:RecordState = RecordState.na;\n    private index:Map<string,Field> = new Map<string,Field>();\n\n\n    constructor(row:number, fields:Field[], index:Map<string,Field>)\n    {\n        this.row$ = row;\n        this.index = index;\n        this.fields$ = fields;\n    }\n\n    public set row(row:number)\n    {\n        this.row$ = row;\n    }\n\n    public get row() : number\n    {\n        return(this.row$);\n    }\n\n    public get fields() : Field[]\n    {\n        return(this.fields$);\n    }\n\n    public focus() : void\n    {\n        for(let i = 0; i < this.fields$.length; i++)\n            if (this.fields$[i].focus()) return;\n    }\n\n    public set current(flag:boolean)\n    {\n        this.current$ = flag;\n        this.fields$.forEach((field) => {field.current = flag});\n    }\n\n    public get current() : boolean\n    {\n        return(this.current$);\n    }\n\n    public clear() : void\n    {\n        this.fields$.forEach((field) => {field.value = null; field.disable()});\n        if (this.current) this.fields$.forEach((field) => {field.current = true; field.disable()});\n    }\n\n    public set state(state:RecordState)\n    {\n        this.state$ = state;\n        this.fields$.forEach((field) => {field.state = state});\n    }\n\n    public get state() : RecordState\n    {\n        return(this.state$);\n    }\n\n    public get enabled() : boolean\n    {\n        return(this.enabled$);\n    }\n\n    public get readonly() :boolean\n    {\n        for(let i = 0; i < this.fields$.length; i++)\n            if (!this.fields$[i].readonly) return(false);\n\n        return(true);\n    }\n\n    public enable(readonly?:boolean) : void\n    {\n        this.enabled$ = true;\n        this.fields$.forEach((field) =>\n        {\n            field.state = this.state$;\n            field.enable(readonly);\n        });\n    }\n\n    public disable() : void\n    {\n        this.enabled$ = false;\n        this.fields$.forEach((field) => {field.disable()});\n    }\n\n    public getField(name:string) : Field\n    {\n        if (name == null) return(null);\n        return(this.index.get(name.toLowerCase()));\n    }\n\n    public getFieldByGuid(name:string, guid:string) : FieldInstance\n    {\n        let field:Field = this.index.get(name.toLowerCase());\n        if (field != null) return(field.getInstance(guid));\n        return(null);\n    }\n}","import { FieldInterface } from \"./FieldType\";\n\n\nexport class TextField implements FieldInterface\n{\n    public element$:HTMLInputElement;\n\n\n    public get html() : string\n    {\n        return(\"<input type='text'></input>\");\n    }\n\n    public set size(size:number)\n    {\n        this.element$.size = size;\n    }\n\n    public get tabindex() : number\n    {\n        return(this.element$.tabIndex);\n    }\n\n    public get element() : HTMLElement\n    {\n        return(this.element$);\n    }\n\n    public set tabindex(seq:number)\n    {\n        this.element$.tabIndex = seq;\n    }\n\n    public set element(element:HTMLElement)\n    {\n        this.element$ = element as HTMLInputElement;\n    }\n\n    public get enable() : boolean\n    {\n        return(!this.element$.disabled);\n    }\n\n    public set enable(flag:boolean)\n    {\n        this.element$.disabled = !flag;\n    }\n\n    public get readonly() : boolean\n    {\n        return(this.element$.readOnly);\n    }\n\n    public set readonly(flag:boolean)\n    {\n        this.element$.readOnly = flag;\n    }\n\n    public get value() : any\n    {\n        return(this.element$.value);\n    }\n\n    public set value(value:any)\n    {\n        this.element$.value = value;\n    }\n\n    public focus() : void\n    {\n        this.element$.focus();\n        this.element$.select();\n    }\n\n    public validate() : boolean\n    {\n        return(true);\n    }\n}","import { TextField } from './TextField';\n\nexport class DropDown extends TextField\n{\n    public get html() : string\n    {\n        return(\"<select></select>\");\n    }\n\n    public focus() : void\n    {\n        this.element$.focus();\n    }\n}","import { TextField } from './TextField';\n\nexport class Password extends TextField\n{\n    public get html() : string\n    {\n        return(\"<input type='password'></input>\");\n    }\n}","import { TextField } from './TextField';\n\nexport class CheckBox extends TextField\n{\n    private actvalue:any = null;\n    private chkvalue:any = null;\n\n    public get html() : string\n    {\n        return(\"<input type='checkbox'></input>\");\n    }\n\n    public get value() : any\n    {\n        return(this.actvalue);\n    }\n\n    public set value(value:any)\n    {\n        if (this.chkvalue == null)\n        {\n            this.chkvalue = value;\n            return;\n        }\n\n        this.actvalue = value;\n\n        // cheat compiler\n        let checkbox:any = this.element;\n\n        if (value == this.chkvalue) checkbox.checked = true;\n        else                        checkbox.checked = false;\n    }\n}","const token = /d{1,4}|M{1,4}|YY(?:YY)?|S{1,3}|Do|ZZ|Z|([HhMsDm])\\1?|[aA]|\"[^\"]*\"|'[^']*'/g;\nconst twoDigitsOptional = \"[1-9]\\\\d?\";\nconst twoDigits = \"\\\\d\\\\d\";\nconst threeDigits = \"\\\\d{3}\";\nconst fourDigits = \"\\\\d{4}\";\nconst word = \"[^\\\\s]+\";\nconst literal = /\\[([^]*?)\\]/gm;\n\ntype DateInfo = {\n  year: number;\n  month: number;\n  day: number;\n  hour: number;\n  minute: number;\n  second: number;\n  millisecond: number;\n  isPm: number | null;\n  timezoneOffset: number | null;\n};\n\nexport type I18nSettings = {\n  amPm: [string, string];\n  dayNames: Days;\n  dayNamesShort: Days;\n  monthNames: Months;\n  monthNamesShort: Months;\n  DoFn(dayOfMonth: number): string;\n};\n\nexport type I18nSettingsOptional = Partial<I18nSettings>;\n\nexport type Days = [string, string, string, string, string, string, string];\nexport type Months = [\n  string,\n  string,\n  string,\n  string,\n  string,\n  string,\n  string,\n  string,\n  string,\n  string,\n  string,\n  string\n];\n\nfunction shorten<T extends string[]>(arr: T, sLen: number): string[] {\n  const newArr: string[] = [];\n  for (let i = 0, len = arr.length; i < len; i++) {\n    newArr.push(arr[i].substr(0, sLen));\n  }\n  return newArr;\n}\n\nconst monthUpdate = (\n  arrName: \"monthNames\" | \"monthNamesShort\" | \"dayNames\" | \"dayNamesShort\"\n) => (v: string, i18n: I18nSettings): number | null => {\n  const lowerCaseArr = i18n[arrName].map(v => v.toLowerCase());\n  const index = lowerCaseArr.indexOf(v.toLowerCase());\n  if (index > -1) {\n    return index;\n  }\n  return null;\n};\n\nexport function assign<A>(a: A): A;\nexport function assign<A, B>(a: A, b: B): A & B;\nexport function assign<A, B, C>(a: A, b: B, c: C): A & B & C;\nexport function assign<A, B, C, D>(a: A, b: B, c: C, d: D): A & B & C & D;\nexport function assign(origObj: any, ...args: any[]): any {\n  for (const obj of args) {\n    for (const key in obj) {\n      // @ts-ignore ex\n      origObj[key] = obj[key];\n    }\n  }\n  return origObj;\n}\n\nconst dayNames: Days = [\n  \"Sunday\",\n  \"Monday\",\n  \"Tuesday\",\n  \"Wednesday\",\n  \"Thursday\",\n  \"Friday\",\n  \"Saturday\"\n];\nconst monthNames: Months = [\n  \"January\",\n  \"February\",\n  \"March\",\n  \"April\",\n  \"May\",\n  \"June\",\n  \"July\",\n  \"August\",\n  \"September\",\n  \"October\",\n  \"November\",\n  \"December\"\n];\n\nconst monthNamesShort: Months = shorten(monthNames, 3) as Months;\nconst dayNamesShort: Days = shorten(dayNames, 3) as Days;\n\nconst defaultI18n: I18nSettings = {\n  dayNamesShort,\n  dayNames,\n  monthNamesShort,\n  monthNames,\n  amPm: [\"am\", \"pm\"],\n  DoFn(dayOfMonth: number) {\n    return (\n      dayOfMonth +\n      [\"th\", \"st\", \"nd\", \"rd\"][\n        dayOfMonth % 10 > 3\n          ? 0\n          : ((dayOfMonth - (dayOfMonth % 10) !== 10 ? 1 : 0) * dayOfMonth) % 10\n      ]\n    );\n  }\n};\nlet globalI18n = assign({}, defaultI18n);\nconst setGlobalDateI18n = (i18n: I18nSettingsOptional): I18nSettings =>\n  (globalI18n = assign(globalI18n, i18n));\n\nconst regexEscape = (str: string): string =>\n  str.replace(/[|\\\\{()[^$+*?.-]/g, \"\\\\$&\");\n\nconst pad = (val: string | number, len = 2): string => {\n  val = String(val);\n  while (val.length < len) {\n    val = \"0\" + val;\n  }\n  return val;\n};\n\nconst formatFlags: Record<\n  string,\n  (dateObj: Date, i18n: I18nSettings) => string\n> = {\n  D: (dateObj: Date): string => String(dateObj.getDate()),\n  DD: (dateObj: Date): string => pad(dateObj.getDate()),\n  Do: (dateObj: Date, i18n: I18nSettings): string =>\n    i18n.DoFn(dateObj.getDate()),\n  d: (dateObj: Date): string => String(dateObj.getDay()),\n  dd: (dateObj: Date): string => pad(dateObj.getDay()),\n  ddd: (dateObj: Date, i18n: I18nSettings): string =>\n    i18n.dayNamesShort[dateObj.getDay()],\n  dddd: (dateObj: Date, i18n: I18nSettings): string =>\n    i18n.dayNames[dateObj.getDay()],\n  M: (dateObj: Date): string => String(dateObj.getMonth() + 1),\n  MM: (dateObj: Date): string => pad(dateObj.getMonth() + 1),\n  MMM: (dateObj: Date, i18n: I18nSettings): string =>\n    i18n.monthNamesShort[dateObj.getMonth()],\n  MMMM: (dateObj: Date, i18n: I18nSettings): string =>\n    i18n.monthNames[dateObj.getMonth()],\n  YY: (dateObj: Date): string =>\n    pad(String(dateObj.getFullYear()), 4).substr(2),\n  YYYY: (dateObj: Date): string => pad(dateObj.getFullYear(), 4),\n  h: (dateObj: Date): string => String(dateObj.getHours() % 12 || 12),\n  hh: (dateObj: Date): string => pad(dateObj.getHours() % 12 || 12),\n  H: (dateObj: Date): string => String(dateObj.getHours()),\n  HH: (dateObj: Date): string => pad(dateObj.getHours()),\n  m: (dateObj: Date): string => String(dateObj.getMinutes()),\n  mm: (dateObj: Date): string => pad(dateObj.getMinutes()),\n  s: (dateObj: Date): string => String(dateObj.getSeconds()),\n  ss: (dateObj: Date): string => pad(dateObj.getSeconds()),\n  S: (dateObj: Date): string =>\n    String(Math.round(dateObj.getMilliseconds() / 100)),\n  SS: (dateObj: Date): string =>\n    pad(Math.round(dateObj.getMilliseconds() / 10), 2),\n  SSS: (dateObj: Date): string => pad(dateObj.getMilliseconds(), 3),\n  a: (dateObj: Date, i18n: I18nSettings): string =>\n    dateObj.getHours() < 12 ? i18n.amPm[0] : i18n.amPm[1],\n  A: (dateObj: Date, i18n: I18nSettings): string =>\n    dateObj.getHours() < 12\n      ? i18n.amPm[0].toUpperCase()\n      : i18n.amPm[1].toUpperCase(),\n  ZZ(dateObj: Date): string {\n    const offset = dateObj.getTimezoneOffset();\n    return (\n      (offset > 0 ? \"-\" : \"+\") +\n      pad(Math.floor(Math.abs(offset) / 60) * 100 + (Math.abs(offset) % 60), 4)\n    );\n  },\n  Z(dateObj: Date): string {\n    const offset = dateObj.getTimezoneOffset();\n    return (\n      (offset > 0 ? \"-\" : \"+\") +\n      pad(Math.floor(Math.abs(offset) / 60), 2) +\n      \":\" +\n      pad(Math.abs(offset) % 60, 2)\n    );\n  }\n};\n\ntype ParseInfo = [\n  keyof DateInfo,\n  string,\n  ((v: string, i18n: I18nSettings) => number | null)?,\n  string?\n];\nconst monthParse = (v: string): number => +v - 1;\nconst emptyDigits: ParseInfo = [null, twoDigitsOptional];\nconst emptyWord: ParseInfo = [null, word];\nconst amPm: ParseInfo = [\n  \"isPm\",\n  word,\n  (v: string, i18n: I18nSettings): number | null => {\n    const val = v.toLowerCase();\n    if (val === i18n.amPm[0]) {\n      return 0;\n    } else if (val === i18n.amPm[1]) {\n      return 1;\n    }\n    return null;\n  }\n];\nconst timezoneOffset: ParseInfo = [\n  \"timezoneOffset\",\n  \"[^\\\\s]*?[\\\\+\\\\-]\\\\d\\\\d:?\\\\d\\\\d|[^\\\\s]*?Z?\",\n  (v: string): number | null => {\n    const parts = (v + \"\").match(/([+-]|\\d\\d)/gi);\n\n    if (parts) {\n      const minutes = +parts[1] * 60 + parseInt(parts[2], 10);\n      return parts[0] === \"+\" ? minutes : -minutes;\n    }\n\n    return 0;\n  }\n];\nconst parseFlags: Record<string, ParseInfo> = {\n  D: [\"day\", twoDigitsOptional],\n  DD: [\"day\", twoDigits],\n  Do: [\"day\", twoDigitsOptional + word, (v: string): number => parseInt(v, 10)],\n  M: [\"month\", twoDigitsOptional, monthParse],\n  MM: [\"month\", twoDigits, monthParse],\n  YY: [\n    \"year\",\n    twoDigits,\n    (v: string): number => {\n      const now = new Date();\n      const cent = +(\"\" + now.getFullYear()).substr(0, 2);\n      return +(\"\" + (+v > 68 ? cent - 1 : cent) + v);\n    }\n  ],\n  h: [\"hour\", twoDigitsOptional, undefined, \"isPm\"],\n  hh: [\"hour\", twoDigits, undefined, \"isPm\"],\n  H: [\"hour\", twoDigitsOptional],\n  HH: [\"hour\", twoDigits],\n  m: [\"minute\", twoDigitsOptional],\n  mm: [\"minute\", twoDigits],\n  s: [\"second\", twoDigitsOptional],\n  ss: [\"second\", twoDigits],\n  YYYY: [\"year\", fourDigits],\n  S: [\"millisecond\", \"\\\\d\", (v: string): number => +v * 100],\n  SS: [\"millisecond\", twoDigits, (v: string): number => +v * 10],\n  SSS: [\"millisecond\", threeDigits],\n  d: emptyDigits,\n  dd: emptyDigits,\n  ddd: emptyWord,\n  dddd: emptyWord,\n  MMM: [\"month\", word, monthUpdate(\"monthNamesShort\")],\n  MMMM: [\"month\", word, monthUpdate(\"monthNames\")],\n  a: amPm,\n  A: amPm,\n  ZZ: timezoneOffset,\n  Z: timezoneOffset\n};\n\n// Some common format strings\nconst globalMasks: { [key: string]: string } = {\n  default: \"ddd MMM DD YYYY HH:mm:ss\",\n  shortDate: \"M/D/YY\",\n  mediumDate: \"MMM D, YYYY\",\n  longDate: \"MMMM D, YYYY\",\n  fullDate: \"dddd, MMMM D, YYYY\",\n  isoDate: \"YYYY-MM-DD\",\n  isoDateTime: \"YYYY-MM-DDTHH:mm:ssZ\",\n  shortTime: \"HH:mm\",\n  mediumTime: \"HH:mm:ss\",\n  longTime: \"HH:mm:ss.SSS\"\n};\nconst setGlobalDateMasks = (masks: {\n  [key: string]: string;\n}): { [key: string]: string } => assign(globalMasks, masks);\n\n/***\n * Format a date\n * @method format\n * @param {Date|number} dateObj\n * @param {string} mask Format of the date, i.e. 'mm-dd-yy' or 'shortDate'\n * @returns {string} Formatted date string\n */\nconst format = (\n  dateObj: Date,\n  mask: string = globalMasks[\"default\"],\n  i18n: I18nSettingsOptional = {}\n): string => {\n  if (typeof dateObj === \"number\") {\n    dateObj = new Date(dateObj);\n  }\n\n  if (\n    Object.prototype.toString.call(dateObj) !== \"[object Date]\" ||\n    isNaN(dateObj.getTime())\n  ) {\n    throw new Error(\"Invalid Date pass to format\");\n  }\n\n  mask = globalMasks[mask] || mask;\n\n  const literals: string[] = [];\n\n  // Make literals inactive by replacing them with @@@\n  mask = mask.replace(literal, function($0, $1) {\n    literals.push($1);\n    return \"@@@\";\n  });\n\n  const combinedI18nSettings: I18nSettings = assign(\n    assign({}, globalI18n),\n    i18n\n  );\n  // Apply formatting rules\n  mask = mask.replace(token, $0 =>\n    formatFlags[$0](dateObj, combinedI18nSettings)\n  );\n  // Inline literal values back into the formatted value\n  return mask.replace(/@@@/g, () => literals.shift());\n};\n\n/**\n * Parse a date string into a Javascript Date object /\n * @method parse\n * @param {string} dateStr Date string\n * @param {string} format Date parse format\n * @param {i18n} I18nSettingsOptional Full or subset of I18N settings\n * @returns {Date|null} Returns Date object. Returns null what date string is invalid or doesn't match format\n */\nfunction parse(\n  dateStr: string,\n  format: string,\n  i18n: I18nSettingsOptional = {}\n): Date | null {\n  if (typeof format !== \"string\") {\n    throw new Error(\"Invalid format in fecha parse\");\n  }\n\n  // Check to see if the format is actually a mask\n  format = globalMasks[format] || format;\n\n  // Avoid regular expression denial of service, fail early for really long strings\n  // https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS\n  if (dateStr.length > 1000) {\n    return null;\n  }\n\n  // Default to the beginning of the year.\n  const today = new Date();\n  const dateInfo: DateInfo = {\n    year: today.getFullYear(),\n    month: 0,\n    day: 1,\n    hour: 0,\n    minute: 0,\n    second: 0,\n    millisecond: 0,\n    isPm: null,\n    timezoneOffset: null\n  };\n  const parseInfo: ParseInfo[] = [];\n  const literals: string[] = [];\n\n  // Replace all the literals with @@@. Hopefully a string that won't exist in the format\n  let newFormat = format.replace(literal, ($0, $1) => {\n    literals.push(regexEscape($1));\n    return \"@@@\";\n  });\n  const specifiedFields: { [field: string]: boolean } = {};\n  const requiredFields: { [field: string]: boolean } = {};\n\n  // Change every token that we find into the correct regex\n  newFormat = regexEscape(newFormat).replace(token, $0 => {\n    const info = parseFlags[$0];\n    const [field, regex, , requiredField] = info;\n\n    // Check if the person has specified the same field twice. This will lead to confusing results.\n    if (specifiedFields[field]) {\n      throw new Error(`Invalid format. ${field} specified twice in format`);\n    }\n\n    specifiedFields[field] = true;\n\n    // Check if there are any required fields. For instance, 12 hour time requires AM/PM specified\n    if (requiredField) {\n      requiredFields[requiredField] = true;\n    }\n\n    parseInfo.push(info);\n    return \"(\" + regex + \")\";\n  });\n\n  // Check all the required fields are present\n  Object.keys(requiredFields).forEach(field => {\n    if (!specifiedFields[field]) {\n      throw new Error(\n        `Invalid format. ${field} is required in specified format`\n      );\n    }\n  });\n\n  // Add back all the literals after\n  newFormat = newFormat.replace(/@@@/g, () => literals.shift());\n\n  // Check if the date string matches the format. If it doesn't return null\n  const matches = dateStr.match(new RegExp(newFormat, \"i\"));\n  if (!matches) {\n    return null;\n  }\n\n  const combinedI18nSettings: I18nSettings = assign(\n    assign({}, globalI18n),\n    i18n\n  );\n\n  // For each match, call the parser function for that date part\n  for (let i = 1; i < matches.length; i++) {\n    const [field, , parser] = parseInfo[i - 1];\n    const value = parser\n      ? parser(matches[i], combinedI18nSettings)\n      : +matches[i];\n\n    // If the parser can't make sense of the value, return null\n    if (value == null) {\n      return null;\n    }\n\n    dateInfo[field] = value;\n  }\n\n  if (dateInfo.isPm === 1 && dateInfo.hour != null && +dateInfo.hour !== 12) {\n    dateInfo.hour = +dateInfo.hour + 12;\n  } else if (dateInfo.isPm === 0 && +dateInfo.hour === 12) {\n    dateInfo.hour = 0;\n  }\n\n  const dateWithoutTZ: Date = new Date(\n    dateInfo.year,\n    dateInfo.month,\n    dateInfo.day,\n    dateInfo.hour,\n    dateInfo.minute,\n    dateInfo.second,\n    dateInfo.millisecond\n  );\n\n  const validateFields: [\n    \"month\" | \"day\" | \"hour\" | \"minute\" | \"second\",\n    \"getMonth\" | \"getDate\" | \"getHours\" | \"getMinutes\" | \"getSeconds\"\n  ][] = [\n    [\"month\", \"getMonth\"],\n    [\"day\", \"getDate\"],\n    [\"hour\", \"getHours\"],\n    [\"minute\", \"getMinutes\"],\n    [\"second\", \"getSeconds\"]\n  ];\n  for (let i = 0, len = validateFields.length; i < len; i++) {\n    // Check to make sure the date field is within the allowed range. Javascript dates allows values\n    // outside the allowed range. If the values don't match the value was invalid\n    if (\n      specifiedFields[validateFields[i][0]] &&\n      dateInfo[validateFields[i][0]] !== dateWithoutTZ[validateFields[i][1]]()\n    ) {\n      return null;\n    }\n  }\n\n  if (dateInfo.timezoneOffset == null) {\n    return dateWithoutTZ;\n  }\n\n  return new Date(\n    Date.UTC(\n      dateInfo.year,\n      dateInfo.month,\n      dateInfo.day,\n      dateInfo.hour,\n      dateInfo.minute - dateInfo.timezoneOffset,\n      dateInfo.second,\n      dateInfo.millisecond\n    )\n  );\n}\nexport default {\n  format,\n  parse,\n  defaultI18n,\n  setGlobalDateI18n,\n  setGlobalDateMasks\n};\nexport { format, parse, defaultI18n, setGlobalDateI18n, setGlobalDateMasks };","import {format as formatimpl, parse as parseimpl} from './fecha';\n\n\nexport interface datepart\n{\n    token:string;\n    delim:string;\n}\n\n\nexport class dates\n{\n    // Current implementation from\n    // https://github.com/taylorhakes/fecha/blob/master/README.md\n\n\n    private static delim:string = null;\n    private static deffmt:string = null;\n    private static tokens$:datepart[] = null;\n    private static formattokens:Set<string> = null;\n\n    private static init(format:string) : void\n    {\n        dates.deffmt = format;\n        this.tokens$ = dates.split(format,\"-/:. \");\n\n        for(let i = 0; i < this.tokens$.length; i++)\n        {\n            if (this.tokens$[i].delim != \" \")\n            {\n                dates.delim = this.tokens$[i].delim;\n                break;\n            }\n        }\n\n        dates.formattokens = new Set<string>();\n        dates.formattokens.add(\"m\");\n        dates.formattokens.add(\"d\");\n        dates.formattokens.add(\"o\");\n        dates.formattokens.add(\"d\");\n        dates.formattokens.add(\"y\");\n        dates.formattokens.add(\"a\");\n        dates.formattokens.add(\"h\");\n        dates.formattokens.add(\"s\");\n        dates.formattokens.add(\"z\");\n    }\n\n    public static setFormat(format:string) : void\n    {\n        dates.init(format);\n    }\n\n    public static parse(datestr:string, format?:string) : Date\n    {\n        if (format == null) format = dates.deffmt;\n\n        if (datestr == null || datestr.trim().length == 0)\n            return(null);\n\n        let date:Date = parseimpl(datestr,format);\n        if (date == null) datestr = dates.reformat(datestr);\n\n        if (datestr == null) return(null);\n        return(parseimpl(datestr,format));\n    }\n\n    public static format(date:Date, format?:string) : string\n    {\n        if (format == null) format = dates.deffmt;\n        return(formatimpl(date,format));\n    }\n\n    private static reformat(datestr:string) : string\n    {\n        let ndate:string = \"\";\n\n        if (!isNaN(+datestr))\n        {\n            let pos:number = 0;\n\n            for(let i = 0; i < 3; i++)\n            {\n                let len:number = dates.tokens$[i].token.length;\n                ndate += datestr.substring(pos,pos+len) + dates.tokens$[i].delim;\n                pos += len;\n            }\n\n            return(ndate);\n        }\n\n        if (dates.delim != \"-\") datestr = dates.replaceAll(datestr,\"-\",dates.delim);\n        if (dates.delim != \"/\") datestr = dates.replaceAll(datestr,\"/\",dates.delim);\n        if (dates.delim != \".\") datestr = dates.replaceAll(datestr,\".\",dates.delim);\n\n        let parts:datepart[] = dates.split(datestr,dates.delim+\": \");\n\n        for (let i = 0; i < parts.length; i++)\n        {\n            let numeric:boolean = !isNaN(+parts[i].token);\n            if (numeric && parts[i].token.length == 1) parts[i].token = \"0\"+parts[i].token;\n        }\n\n        parts.forEach((part) => {ndate += part.token+part.delim})\n\n        return(ndate);\n    }\n\n\n    private static split(str:string, splitter:string) : datepart[]\n    {\n        let parts:datepart[] = [];\n        let delimiters:Set<string> = new Set<string>();\n\n        for (let i = 0; i < splitter.length; i++)\n            delimiters.add(splitter[i]+\"\");\n\n        let pos:number = 0;\n\n        for (let i = 0; i < str.length; i++)\n        {\n            if (delimiters.has(str[i]+\"\"))\n            {\n                parts.push({token: str.substring(pos,i), delim: str[i]});\n                pos = i + 1;\n            }\n        }\n\n        if (pos < str.length)\n            parts.push({token: str.substring(pos,str.length), delim: \"\"});\n\n        return(parts);\n    }\n\n\n    private static replaceAll(str:string, search:string, replace:string) : string\n    {\n        while(str.indexOf(search) >= 0) str = str.replace(search,replace);\n        return(str);\n    }\n}","import { dates } from \"../dates/dates\";\nimport { TextField } from \"./TextField\";\n\n\nexport class DateField extends TextField\n{\n    private dateval:Date = null;\n    private formatted:string = null;\n\n    public get value() : any\n    {\n        if (this.element$.value == this.formatted)\n        {\n            // Invalid date\n            if (this.formatted.length > 0 && this.dateval == null)\n                return(this.formatted);\n\n            return(this.dateval);\n        }\n\n        return(this.element$.value);\n    }\n\n    public set value(value:any)\n    {\n        if (value == null || value.constructor.name != \"Date\")\n        {\n            if (value != this.formatted || value != this.element$.value)\n            {\n                this.dateval = null;\n                this.formatted = value;\n                this.element$.value = value;\n            }\n        }\n        else\n        {\n            this.dateval = value;\n            this.formatted = dates.format(value);\n            this.element$.value = this.formatted;\n        }\n    }\n\n    public validate() : boolean\n    {\n        let strval:string = this.element$.value;\n\n        if (strval == this.formatted)\n        {\n            if (strval != null && dates.parse(strval) == null)\n                return(false);\n\n            return(true);\n        }\n\n        this.formatted = null;\n        this.dateval = dates.parse(strval);\n\n        if (this.dateval == null && strval != null)\n            return(false);\n\n        if (this.dateval != null)\n            this.formatted = dates.format(this.dateval);\n\n        this.element$.value = this.formatted;\n        return(true);\n    }\n}","import { TextField } from './TextField';\n\nexport class RadioButton extends TextField\n{\n    private actvalue:any = null;\n    private chkvalue:any = null;\n\n    public get html() : string\n    {\n        return(\"<input type='radio'></input>\");\n    }\n\n    public get value() : any\n    {\n        return(this.actvalue);\n    }\n\n    public set value(value:any)\n    {\n        if (this.chkvalue == null)\n        {\n            this.chkvalue = value;\n            return;\n        }\n\n        this.actvalue = value;\n\n        // cheat compiler\n        let radio:any = this.element;\n\n        if (value == this.chkvalue) radio.checked = true;\n        else                        radio.checked = false;\n    }\n}","export enum Column\n{\n    int,\n    date,\n    decimal,\n    integer,\n    varchar,\n    datetime\n}","import { DropDown } from \"./DropDown\";\nimport { Password } from \"./Password\";\nimport { CheckBox } from \"./CheckBox\";\nimport { TextField } from \"./TextField\";\nimport { DateField } from \"./DateField\";\nimport { RadioButton } from \"./RadioButton\";\nimport { Column } from \"../database/Column\";\n\n\nexport enum FieldType\n{\n    date,\n    text,\n    radio,\n    integer,\n    decimal,\n    checkbox,\n    datetime,\n    password,\n    dropdown\n}\n\n\nexport class FieldImplementation\n{\n    private static impl:Map<string,any> = null;\n\n    private static init() : void\n    {\n        if (FieldImplementation.impl != null) return;\n        FieldImplementation.impl = new Map<string,any>();\n\n        Object.keys(FieldType).forEach((type) =>\n        {\n            if (isNaN(Number(type)))\n                FieldImplementation.impl.set(type,TextField);\n        });\n\n        FieldImplementation.impl.set(FieldType[FieldType.date],DateField);\n        FieldImplementation.impl.set(FieldType[FieldType.radio],RadioButton);\n        FieldImplementation.impl.set(FieldType[FieldType.checkbox],CheckBox);\n        FieldImplementation.impl.set(FieldType[FieldType.password],Password);\n        FieldImplementation.impl.set(FieldType[FieldType.dropdown],DropDown);\n        FieldImplementation.impl.set(FieldType[FieldType.datetime],DateField);\n    }\n\n    public static getClass(type:string) : any\n    {\n        FieldImplementation.init();\n        return(FieldImplementation.impl.get(type));\n    }\n\n    public static guess(type:Column) : FieldType\n    {\n        let ftype:FieldType = FieldType.text;\n\n        if (type != null)\n        {\n            ftype = FieldType.text;\n            if (type == Column.date) ftype = FieldType.date;\n            if (type == Column.integer) ftype = FieldType.integer;\n            if (type == Column.decimal) ftype = FieldType.decimal;\n            if (type == Column.datetime) ftype = FieldType.datetime;\n        }\n\n        return(ftype);\n    }\n}\n\n\nexport interface FieldInterface\n{\n    value:any;\n    html:string;\n    size:number;\n    enable:boolean;\n    tabindex:number;\n    readonly:boolean;\n    element:HTMLElement;\n\n    focus() : void;\n    validate() : boolean;\n}","export enum FormState\n{\n    normal,\n    entqry,\n    exeqry\n}","export class KeyCodes\n{\n    static backspace    : number =  8;\n    static tab          : number =  9;\n    static enter        : number = 13;\n    static escape       : number = 27;\n    static pageup       : number = 33;\n    static pagedown     : number = 34;\n    static end          : number = 35;\n    static home         : number = 36;\n    static up           : number = 38;\n    static down         : number = 40;\n    static left         : number = 37;\n    static right        : number = 39;\n    static insert       : number = 45;\n    static delete       : number = 46;\n    static f1           : number = 112;\n    static f2           : number = 113;\n    static f3           : number = 114;\n    static f4           : number = 115;\n    static f5           : number = 116;\n    static f6           : number = 117;\n    static f7           : number = 118;\n    static f8           : number = 119;\n    static f9           : number = 120;\n    static f10          : number = 121;\n    static f11          : number = 122;\n    static f12          : number = 123;\n}","export interface onEventListener\n{\n    onEvent(event:any) : void;\n}\n\n\nexport class WindowListener\n{\n    private static events:Map<string,Map<string,onEventListener>> =\n        new Map<string,Map<string,onEventListener>>();\n\n\n    public static add(id:string, clazz:onEventListener, event:string) : void\n    {\n        let events:Map<string,onEventListener> = WindowListener.events.get(event);\n\n        if (events == null)\n        {\n            events = new Map<string,onEventListener>();\n            WindowListener.events.set(event,events);\n\n            let listener:WindowListener = new WindowListener();\n            listener.start(event);\n        }\n\n        events.set(id,clazz);\n    }\n\n\n    public static remove(id:string, event:string) : void\n    {\n        let events:Map<string,onEventListener> = WindowListener.events.get(event);\n        events.delete(id);\n    }\n\n\n    private constructor() {}\n\n\n    private start(eventtype:string) : void\n    {\n        window.addEventListener(eventtype, (event) => {this.onEvent(event)});\n    }\n\n    private onEvent(event:any) : void\n    {\n        let events:Map<string,onEventListener> = WindowListener.events.get(event.type);\n        events.forEach((clazz) => {clazz.onEvent(event)});\n    }\n}","import { Popup } from './Popup';\nimport { PopupInstance } from './PopupInstance';\nimport { Context } from '../application/Context';\nimport { ApplicationImpl } from '../application/ApplicationImpl';\nimport { WindowListener, onEventListener } from \"../events/WindowListener\";\nimport { Component, ViewChild, ElementRef, AfterViewInit, EmbeddedViewRef, ChangeDetectionStrategy, ChangeDetectorRef, ComponentRef } from '@angular/core';\n\n\n@Component({\n  selector: 'popupwindow',\n  template:\n  `\n    <div class=\"popupwindow\">\n      <div #window class=\"popupwindow-modal-block\" style=\"top: {{top}}; left: {{left}}\">\n        <div class=\"popupwindow-container\" style=\"width: {{width}}; height: {{height}};\">\n\t\t  <div #topbar class=\"popupwindow-topbar\" style=\"color: {{tcolor}}; background-color: {{bcolor}}\">\n\t\t    <span class=\"popupwindow-center\" style=\"color: {{tcolor}};\">\n\t\t\t\t<span class=\"popupwindow-corner\"></span>\n\t\t\t\t<div #title></div>\n                <span class=\"popupwindow-close\">\n                    <button class=\"popupwindow-button\" style=\"color: {{btncolor}};\" (click)=\"close(true)\">X</button>\n                </span>\n\t\t\t</span>\n\t\t   </div>\n          <div class=\"popupwindow-block\" style=\"margin-top: {{tmargin}};\"><div #content></div></div>\n        </div>\n      </div>\n    </div>\n  `,\n  styles:\n  [`\n    .popupwindow\n    {\n        top: 0;\n        left: 0;\n        z-index: 1;\n        width: 100%;\n        height: 100%;\n        display: block;\n        overflow: auto;\n        position: fixed;\n    }\n\n    .popupwindow-modal-block\n    {\n      position: absolute;\n      background-color: #fefefe;\n    }\n\n    .popupwindow-container\n    {\n        position: relative;\n        border: 2px solid black;\n    }\n\n    .popupwindow-topbar\n    {\n        height: 1.70em;\n        margin-left: 0;\n        margin-right: 0;\n        cursor:default;\n\t\tjustify-content: center;\n        border-bottom: 2px solid black;\n    }\n\n\t.popupwindow-corner\n\t{\n\t\twidth: 1.5em;\n\t\tdisplay: block;\n\t\tposition: relative;\n\t}\n\n\t.popupwindow-close\n\t{\n\t\ttop: 0;\n\t\tright: 0;\n\t\twidth: 1.75em;\n\t\theight: 1.70em;\n\t\tposition: absolute;\n\t\tborder-left: 1px solid black;\n\t}\n\n\t.popupwindow-button\n\t{\n\t\ttop: 50%;\n\t\twidth: 100%;\n\t\theight: 100%;\n\t\toutline:none;\n\t\tfont-size: 0.75em;\n\t\tfont-weight: bold;\n\t\tposition: relative;\n\t\tbackground: transparent;\n\t\ttransform: translateY(-50%);\n\t\tborder: 0px solid transparent;\n\t\tbox-shadow: 0px 0px 0px transparent;\n\t\ttext-shadow: 0px 0px 0px transparent;\n\t}\n\n\t.popupwindow-center\n\t{\n\t\ttop: 0;\n\t\tbottom: 0;\n\t\twidth: 93%;\n\t\theight: 100%;\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tjustify-content: center;\n\t}\n\n    .popupwindow-block\n    {\n        left: 0;\n        top: 3vh;\n        right: 0;\n        bottom: 0;\n\t\tdisplay: flex;\n        overflow: auto;\n        position: absolute;\n\t\tjustify-content: center;\n    }\n`],\nchangeDetection: ChangeDetectionStrategy.OnPush\n})\n\nexport class PopupWindow implements onEventListener, AfterViewInit\n{\n\tprivate popup:Popup;\n\tprivate title$:string;\n    private pinst:PopupInstance;\n    private app:ApplicationImpl;\n\tprivate element:HTMLElement;\n    private window:HTMLDivElement;\n    private topbar:HTMLDivElement;\n\tprivate content:HTMLDivElement;\n    private titlebar:HTMLDivElement;\n\tprivate winref:ComponentRef<any>;\n\n    public top : string = null;\n    public left : string = null;\n    public width : string =  \"300px\";\n    public height : string = \"200px\";\n    public tmargin : string =  \"8px\";\n\n    @ViewChild(\"title\", {read: ElementRef}) private titlebarElement: ElementRef;\n    @ViewChild(\"window\", {read: ElementRef}) private windowElement: ElementRef;\n    @ViewChild(\"topbar\", {read: ElementRef}) private topbarElement: ElementRef;\n\t@ViewChild('content', {read: ElementRef}) private contentElement:ElementRef;\n\n\tprivate minw:number = 0;\n\tprivate minh:number = 0;\n\n\tprivate offx:number = 0;\n\tprivate offy:number = 0;\n\n\tprivate posy:number;\n\tprivate posx:number;\n\n\tprivate sizex:number;\n\tprivate sizey:number;\n\n\tprivate move:boolean = false;\n\tprivate resz:boolean = false;\n\n\tprivate resizex:boolean = false;\n\tprivate resizey:boolean = false;\n\n\n\tconstructor(ctx:Context, private change:ChangeDetectorRef)\n    {\n\t\tthis.app = ctx.app[\"_impl_\"];\n    }\n\n\n\tpublic get tcolor() : string\n\t{\n\t\treturn(this.app.config.colors.title);\n\t}\n\n\n\tpublic get bcolor() : string\n\t{\n\t\treturn(this.app.config.colors.topbar);\n\t}\n\n\n\tpublic get btncolor() : string\n\t{\n\t\treturn(this.app.config.colors.buttontext);\n\t}\n\n\n\tpublic set title(title:string)\n\t{\n\t\tthis.title$ = title;\n\t}\n\n\n    public setPopup(pinst:PopupInstance) : void\n    {\n        this.pinst = pinst;\n\t\tthis.popup = pinst.popupref.instance;\n\n\t\tthis.popup.setWin(this);\n\t\tthis.title$ = this.popup.title;\n\n\t\tif (this.popup.hasOwnProperty(\"top\")) this.top = this.popup.top;\n\t\tif (this.popup.hasOwnProperty(\"left\")) this.left = this.popup.left;\n\t\tif (this.popup.hasOwnProperty(\"width\")) this.width = this.popup.width;\n\t\tif (this.popup.hasOwnProperty(\"height\")) this.height = this.popup.height;\n    }\n\n\n\tpublic resize(width:string, height:string) : void\n\t{\n\t\tthis.width = width;\n\t\tthis.height = height;\n\t\tthis.change.detectChanges();\n\t}\n\n\n\tpublic setWinRef(winref:ComponentRef<any>) : void\n\t{\n\t\tthis.winref = winref;\n\t}\n\n\n\tpublic close(cancel:boolean) : void\n\t{\n\t\tthis.closeWindow();\n\t\tthis.popup.close(cancel);\n\t}\n\n\n\tpublic closeWindow() : void\n\t{\n\t\tif (this.winref == null) return;\n\n\t\tWindowListener.remove(\"modal\",\"mouseup\");\n\t\tWindowListener.remove(\"modal\",\"mousemove\");\n\t\tWindowListener.remove(\"modal\",\"mousedown\");\n\n\t\tlet formelem:Element = this.content.firstElementChild;\n\t\tif (formelem != null) this.content.removeChild(formelem);\n\t\tthis.app.builder.getAppRef().detachView(this.pinst.popupref.hostView);\n\n\t\tlet element:HTMLElement = (this.winref.hostView as EmbeddedViewRef<any>).rootNodes[0] as HTMLElement;\n\t\tdocument.body.removeChild(element);\n\n\t\tthis.app.builder.getAppRef().detachView(this.winref.hostView);\n\t\tthis.winref.destroy();\n\n\t\tthis.winref = null;\n\t}\n\n\n\tprivate display() : void\n\t{\n\t\tif (this.pinst == null)\n\t\t{\n\t\t\tsetTimeout(() => {this.display();},10);\n\t\t\treturn;\n\t\t}\n\n\t\tthis.element = (this.pinst.popupref.hostView as EmbeddedViewRef<any>).rootNodes[0] as HTMLElement;\n\t\tthis.app.builder.getAppRef().attachView(this.pinst.popupref.hostView);\n\t\tthis.content.appendChild(this.element);\n\n\t\tthis.minh = 150;\n\t\tthis.minw = 250;\n\n\t\tthis.titlebar.innerHTML = this.title$;\n\t\tthis.change.detectChanges();\n\n\t\tthis.posy = this.window.offsetTop;\n\t\tthis.posx = this.window.offsetLeft;\n\t\tthis.sizex = this.window.offsetWidth;\n\t\tthis.sizey = this.window.offsetHeight;\n\n\t\tlet resize:boolean = false;\n\n\t\tif (this.sizex < this.minw)\n\t\t{\n\t\t\tresize = true;\n\t\t\tthis.sizex = this.minw;\n\t\t\tthis.width = this.sizex+\"px\";\n\t\t}\n\n\t\tif (this.sizey < this.minh)\n\t\t{\n\t\t\tresize = true;\n\t\t\tthis.sizey = this.minh;\n\t\t\tthis.height = this.sizey+\"px\";\n\t\t}\n\n\t\tif (this.top == null || this.top.trim.length == 0)\n\t\t{\n\t\t\tresize = true;\n\t\t\tthis.top = ((+window.innerHeight - this.sizey)/3)+\"px\";\n\t\t}\n\n\t\tif (this.left == null || this.left.trim.length == 0)\n\t\t{\n\t\t\tresize = true;\n\t\t\tthis.left = ((+window.innerWidth - this.sizex)/1.5)+\"px\";\n\t\t}\n\n\t\tif (resize)\n\t\t{\n\t\t\tthis.change.detectChanges();\n\t\t\tthis.posy = this.window.offsetTop;\n\t\t\tthis.posx = this.window.offsetLeft;\n\t\t\tthis.sizex = this.window.offsetWidth;\n\t\t\tthis.sizey = this.window.offsetHeight;\n\t\t}\n\t}\n\n\n\tpublic ngAfterViewInit(): void\n\t{\n\t\tthis.window = this.windowElement?.nativeElement as HTMLDivElement;\n\t\tthis.topbar = this.topbarElement?.nativeElement as HTMLDivElement;\n\t\tthis.content = this.contentElement?.nativeElement as HTMLDivElement;\n\t\tthis.titlebar = this.titlebarElement?.nativeElement as HTMLDivElement;\n\n\t\tthis.display();\n\n\t\tWindowListener.add(\"modal\",this,\"mouseup\");\n\t\tWindowListener.add(\"modal\",this,\"mousemove\");\n\t\tWindowListener.add(\"modal\",this,\"mousedown\");\n\n\t\tthis.topbar.addEventListener(\"mousedown\", (event) => {this.startmove(event);});\n\t}\n\n\n    public onEvent(event:any) : void\n\t{\n\t\tswitch(event.type)\n\t\t{\n\t\t\tcase \"mouseup\":\n\t\t\t\tthis.mouseup();\n\t\t\t\tbreak;\n\n\t\t\tcase \"mousemove\":\n\t\t\t\tthis.movePopup(event);\n\t\t\t\tthis.resizePopup(event);\n\t\t\t\tthis.resizemousemove(event);\n\t\t\t\tbreak;\n\n\t\t\tcase \"mousedown\":\n\t\t\t\tthis.startresize(event);\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\tprivate startmove(event:any) : void\n\t{\n\t\tif (this.resizexy)\n\t\t\treturn;\n\n\t\tthis.move = true;\n\n\t\tevent = event || window.event;\n\t\tevent.preventDefault();\n\n\t\tthis.offy = +event.clientY - this.posy;\n\t\tthis.offx = +event.clientX - this.posx;\n\t}\n\n\tprivate mouseup()\n\t{\n\t\tif (!this.move && !this.resz)\n\t\t\treturn;\n\n\t\tthis.move = false;\n\t\tthis.resz = false;\n\t\tthis.resizexy = false;\n\n\t\tthis.window.style.cursor = \"default\";\n\t\tdocument.body.style.cursor = \"default\";\n\t}\n\n\tprivate movePopup(event:any) : void\n\t{\n\t\tif (!this.move) return;\n\t  \tevent = event || window.event;\n\n\t\tlet deltay:number = +event.clientY - this.posy;\n\t\tlet deltax:number = +event.clientX - this.posx;\n\n\t\tthis.posy += (deltay - this.offy);\n\t\tthis.posx += (deltax - this.offx);\n\n\t\tif (this.posy > 0)\n\t\t\tthis.top = this.posy + \"px\";\n\n\t\tif (this.posx > 0)\n\t\t\tthis.left = this.posx + \"px\";\n\n\t\tthis.change.detectChanges();\n\t}\n\n\n\tprivate resizemousemove(event:any) : any\n\t{\n\t\tif (this.resz) return;\n\n\t\tevent = event || window.event;\n\t\tlet posx:number = +event.clientX;\n\t\tlet posy:number = +event.clientY;\n\n\t\tlet offx:number = this.posx + this.sizex - posx;\n\t\tlet offy:number = this.posy + this.sizey - posy;\n\n\t\tlet before:boolean = false;\n\t\tif (this.resizex || this.resizey) before = true;\n\n\t\tthis.resizex = false;\n\t\tthis.resizey = false;\n\n\t\tif (offx > -7 && offx < 10 && posy > this.posy - 7 && posy < this.posy + this.sizey + 7) this.resizex = true;\n\t\tif (offy > -7 && offy < 10 && posx > this.posx - 7 && posx < this.posx + this.sizex + 7) this.resizey = true;\n\n\t\tif (this.resizex && this.resizey)\n\t\t{\n\t\t\tthis.resizex = true;\n\t\t\tthis.resizey = true;\n\t\t}\n\n\t\tif (this.resizex && !this.resizey)\n\t\t{\n\t\t\tthis.window.style.cursor = \"e-resize\";\n\t\t\tdocument.body.style.cursor = \"e-resize\";\n\t\t}\n\n\t\tif (this.resizey && !this.resizex)\n\t\t{\n\t\t\tthis.window.style.cursor = \"s-resize\";\n\t\t\tdocument.body.style.cursor = \"s-resize\";\n\t\t}\n\n\t\tif (this.resizex && this.resizey)\n\t\t{\n\t\t\tthis.window.style.cursor = \"se-resize\";\n\t\t\tdocument.body.style.cursor = \"se-resize\";\n\t\t}\n\n\t\tif (before && !this.resizexy)\n\t\t{\n\t\t\tthis.window.style.cursor = \"default\";\n\t\t\tdocument.body.style.cursor = \"default\";\n\t\t}\n\t}\n\n\tprivate startresize(event:any) : void\n\t{\n\t  \tif (!this.resizexy)\n\t\t  return;\n\n\t\tthis.resz = true;\n\t\tevent = event || window.event;\n\t\tevent.preventDefault();\n\n\t\tthis.offy = +event.clientY;\n\t\tthis.offx = +event.clientX;\n\t}\n\n\tprivate resizePopup(event:any) : void\n\t{\n\t\tif (!this.resz) return;\n\t  \tevent = event || window.event;\n\n\t\tlet deltay:number = +event.clientY - this.offy;\n\t\tlet deltax:number = +event.clientX - this.offx;\n\n\t\tif (this.resizex && (this.sizex > this.minw || deltax > 0))\n\t\t{\n\t\t\tthis.sizex += deltax;\n\t\t\tthis.width = this.sizex+\"px\";\n\t\t}\n\n\t\tif (this.resizey && (this.sizey > this.minh || deltay > 0))\n\t\t{\n\t\t\tthis.sizey += deltay;\n\t\t\tthis.height = this.sizey+\"px\";\n\t\t}\n\n\t\tthis.offy = +event.clientY;\n\t\tthis.offx = +event.clientX;\n\n\t\tthis.change.detectChanges();\n\t}\n\n\tprivate get resizexy() : boolean\n\t{\n\t\tif (this.resizex || this.resizey) return(true);\n\t\treturn(false);\n\t}\n\n\tprivate set resizexy(on:boolean)\n\t{\n\t\tthis.resizex = on;\n\t\tthis.resizey = on;\n\t}\n}","import { Popup } from './Popup';\nimport { PopupWindow } from './PopupWindow';\nimport { ComponentRef, EmbeddedViewRef } from \"@angular/core\";\nimport { ApplicationImpl } from '../application/ApplicationImpl';\n\nexport class PopupInstance\n{\n    public popupref:ComponentRef<Popup>;\n\n    public display(app:ApplicationImpl, popup:any) : void\n    {\n        this.popupref = app.builder.createComponent(popup);\n\n        let winref:ComponentRef<any> = app.builder.createComponent(PopupWindow);\n        let win:PopupWindow = winref.instance;\n\n        win.setPopup(this);\n        win.setWinRef(winref);\n\n        let element:HTMLElement = (winref.hostView as EmbeddedViewRef<any>).rootNodes[0] as HTMLElement;\n        app.builder.getAppRef().attachView(winref.hostView);\n\n        document.body.appendChild(element);\n    }\n\n\n    public popup() : Popup\n    {\n        return(this.popupref.instance);\n    }\n}","import { Popup } from \"../popup/Popup\";\nimport { KeyCodes } from \"../keymap/KeyCodes\";\nimport { BlockImpl } from \"../blocks/BlockImpl\";\nimport { Context } from \"../application/Context\";\nimport { PopupWindow } from \"../popup/PopupWindow\";\nimport { PopupInstance } from \"../popup/PopupInstance\";\nimport { ApplicationImpl } from \"../application/ApplicationImpl\";\nimport { AfterViewInit, Component, ElementRef, ViewChild } from \"@angular/core\";\n\n\n@Component({\n    template:\n    `\n        <div #calendar></div>\n    `\n})\n\n\nexport class DatePicker implements Popup, AfterViewInit\n{\n    public top:string = null;\n    public left:string = null;\n    public title:string = null;\n    public width?:string = \"256px\";\n    public height?:string = \"256px\";\n\n    private field:string\n    private record:number;\n    private impl:BlockImpl;\n\n    private cdate:Date = null;\n    private app:ApplicationImpl;\n    private win:PopupWindow = null;\n    private cal:HTMLDivElement = null;\n    private days:HTMLDivElement = null;\n    private years:HTMLSelectElement = null;\n    private months:HTMLSelectElement = null;\n\n    @ViewChild(\"calendar\", {read: ElementRef}) private calelem: ElementRef;\n\n\n    public static show(app:ApplicationImpl, impl:BlockImpl, record:number, field:string, date:Date)\n    {\n        let pinst:PopupInstance = new PopupInstance();\n        pinst.display(app,DatePicker);\n\n        let datepicker:DatePicker = pinst.popup() as DatePicker;\n\n        datepicker.date = date;\n        datepicker.setDestination(impl,record,field);\n    }\n\n\n    constructor(private ctx:Context)\n    {\n        this.app = ctx.app[\"_impl_\"];\n        this.title = ctx.conf.calendarname;\n    }\n\n\n    public close(_cancel: boolean): void\n    {\n        this.win.closeWindow();\n    }\n\n\n    public set date(date:Date)\n    {\n        if (date == null) date = new Date();\n        this.cdate = date;\n    }\n\n\n    public setDestination(impl:BlockImpl, record:number, field:string) : void\n    {\n        this.impl = impl;\n        this.field = field;\n        this.record = record;\n    }\n\n\n    private pick(event:any) : void\n    {\n        let year:number = +this.years.value;\n        let month:number = +this.months.value;\n        let day:number = +event.target.innerHTML;\n\n        let cday:number = this.cdate.getUTCDate();\n        let cmonth:number = this.cdate.getUTCMonth();\n        let cyear:number = this.cdate.getUTCFullYear();\n\n        if (year != cyear || month != cmonth || day != cday)\n        {\n            this.cdate = new Date(Date.UTC(year, month-1, day));\n\n            // Truncate\n            this.cdate = new Date(this.cdate.toDateString());\n\n            this.impl.setValue(this.record,this.field,this.cdate);\n            this.impl.focus();\n        }\n\n        this.close(false);\n    }\n\n\n    public setWin(win: PopupWindow): void\n    {\n        this.win = win;\n    }\n\n\n    public ngAfterViewInit(): void\n    {\n\t\tthis.cal = this.calelem?.nativeElement as HTMLDivElement;\n        this.build(this.cdate,75,75);\n    }\n\n\n    public navigate(event:any) : void\n    {\n        if (event.keyCode == KeyCodes.tab)\n        {\n            event.preventDefault();\n\n            if (event.target.name == \"months\") this.years.focus();\n            else                               this.months.focus();\n\n            return;\n        }\n\n        if (event.keyCode == KeyCodes.escape)\n            this.close(true);\n    }\n\n\n    public weekdays(locale:string) : string[]\n    {\n        let fmt = new Intl.DateTimeFormat(locale,{weekday: \"short\"}).format;\n        let names:string[] = [...Array(7).keys()].map((d) => fmt(new Date(Date.UTC(2021, 1, d))));\n\n        for (let i = 0; i < 7; i++)\n        {\n            if (names[i].endsWith(\".\"))\n                names[i] = names[i].substring(0,names[i].length-1);\n        }\n\n        let sun:string = names[0];\n\n        names.shift();\n        names.push(sun);\n\n        return(names);\n    }\n\n\n    public monthnames(locale:string) : string[]\n    {\n        let fmt = new Intl.DateTimeFormat(locale,{month: \"short\"}).format;\n        let names:string[] = [...Array(12).keys()].map((m) => fmt(new Date(Date.UTC(2021, m))));\n\n        for (let i = 0; i < 12; i++)\n        {\n            if (names[i].endsWith(\".\"))\n                names[i] = names[i].substring(0,names[i].length-1);\n        }\n\n        return(names);\n    }\n\n\n    public build(date:Date, bef:number, aft:number) : void\n    {\n        this.styles();\n\n        let month:number = date.getUTCMonth();\n        let year:number = date.getUTCFullYear();\n\n        let months = this.monthnames(this.ctx.conf.locale);\n\n        this.years = document.createElement(\"select\");\n        this.months = document.createElement(\"select\");\n\n        this.years.name = \"years\";\n        this.months.name = \"months\";\n\n        this.addFieldTriggers(this.years);\n        this.addFieldTriggers(this.months);\n\n        this.months.classList.add(\"datepicker-month\");\n\n        for (let i = 0; i < 12; i++)\n        {\n            let option = document.createElement(\"option\");\n\n            option.text = months[i];\n            option.value = (i + 1)+\"\";\n\n            this.months.appendChild(option);\n        }\n\n        this.months.selectedIndex = month;\n        this.cal.appendChild(this.months);\n\n        this.years.classList.add(\"datepicker-year\");\n\n        for (let i = year - bef; i < year + aft; i++)\n        {\n            let option = document.createElement(\"option\");\n\n            option.text = i+\"\";\n            option.value = i+\"\";\n\n            this.years.appendChild(option);\n        }\n\n        this.years.selectedIndex = bef;\n        this.cal.appendChild(this.years);\n\n        this.days = document.createElement(\"div\");\n\n        this.days.classList.add(\"datepicker-days\");\n        this.cal.appendChild(this.days);\n\n        this.draw();\n\n        let width:string = (1.25*this.cal.offsetWidth)+\"px\";\n        let height:string = (1.10*this.cal.offsetHeight+32)+\"px\";\n\n        this.win.resize(width,height);\n        this.months.focus();\n   }\n\n\n   private draw() : HTMLTableElement\n   {\n        let cday:number = this.cdate.getDate();\n        let cmonth:number = this.cdate.getMonth();\n        let cyear:number = this.cdate.getFullYear();\n\n        let year:number = +this.years.value;\n        let month:number = +this.months.value;\n\n        if (year != cyear || month != +cmonth + +1)\n            cday = 0;\n\n        let days:number = new Date(Date.UTC(year, month, 0)).getUTCDate();\n        let first:number = new Date(Date.UTC(year, month-1, 1)).getUTCDay();\n        let last:number = new Date(Date.UTC(year, month-1, days)).getUTCDay();\n\n        last = last == 0 ? 7 : last;\n        first = first == 0 ? 7 : first;\n\n        let squares = [];\n\n        for (let i = 1; i < first; i++)\n            squares.push([false,0]);\n\n        for (let i = 0; i < days; i++)\n            squares.push([true,i]);\n\n        while(squares.length%7 != 0)\n            squares.push([false,0]);\n\n        let names:string[] = this.weekdays(this.ctx.conf.locale);\n\n        let table:HTMLTableElement = document.createElement(\"table\");\n        table.classList.add(\"datepicker-table\");\n\n        let row:HTMLTableRowElement = table.insertRow();\n\n        names.forEach((day) =>\n        {\n            let cell:HTMLTableCellElement = row.insertCell();\n            cell.classList.add(\"datepicker-head\")\n            cell.innerHTML = day;\n        });\n\n        for (let i = 0; i < squares.length; i++)\n        {\n            if (i%7 == 0) row = table.insertRow();\n            let cell:HTMLTableCellElement = row.insertCell();\n\n            if (squares[i][0])\n            {\n                let dom:number = +squares[i][1] + +1;\n\n                cell.innerHTML = dom+\"\";\n                cell.classList.add(\"datepicker-day\");\n\n                if (dom == cday) cell.classList.add(\"datepicker-current\");\n                this.addDayTriggers(cell);\n            }\n            else\n            {\n                cell.classList.add(\"datepicker-blank\");\n            }\n        }\n\n        this.days.innerHTML = \"\";\n        this.days.appendChild(table);\n\n        return(table);\n    }\n\n\n    private addDayTriggers(cell:HTMLTableCellElement) : void\n    {\n        cell.addEventListener(\"click\",(event) => {this.pick(event)});\n    }\n\n\n    private addFieldTriggers(change:HTMLSelectElement) : void\n    {\n        change.addEventListener(\"change\",() => {this.draw()});\n        change.addEventListener(\"keydown\",(event) => {this.navigate(event)});\n    }\n\n\n    private styles() : void\n    {\n        this.cal.innerHTML =\n        `\n        <style>\n            .datepicker-month\n            {\n                font-size: 15px;\n                margin-top: 16px;\n                margin-left: 16px;\n                width: fit-content;\n            }\n\n            .datepicker-year\n            {\n                font-size: 15px;\n                margin-top: 16px;\n                margin-left: 32px;\n                width: fit-content;\n            }\n\n            .datepicker-table\n            {\n                width: 100%;\n                margin-top: 14px;\n                border-collapse: separate;\n            }\n\n            .datepicker-head\n            {\n                font-weight: bold;\n                text-align: center;\n                color: `+this.app.config.colors.text+`;\n            }\n\n            .datepicker-day\n            {\n                color: `+this.app.config.colors.buttontext+`;\n                padding: 5px;\n                width: 14.28%;\n                text-align: center;\n                background: `+this.app.config.colors.topbar+`;\n            }\n\n            .datepicker-blank\n            {\n                background: #ddd;\n            }\n\n            .datepicker-current\n            {\n                font-size: 16px;\n                font-weight: bold;\n            }\n\n            .datepicker-day:hover\n            {\n                cursor: pointer;\n                font-weight: bold;\n                font-style: italic;\n            }\n        </style>\n        `;\n    }\n}","import { Popup } from \"./Popup\";\nimport { PopupWindow } from \"./PopupWindow\";\nimport { PopupInstance } from \"./PopupInstance\";\nimport { Context } from \"../application/Context\";\nimport { ApplicationImpl } from \"../application/ApplicationImpl\";\nimport { AfterViewInit, Component, ElementRef, ViewChild } from \"@angular/core\";\n\n\n@Component({\n    selector: '',\n    template:\n    `\n        <div class=\"messagebox\">\n            <div #msg class=\"messagebox-msg\"></div>\n            <div class=\"messagebox-buttom\">\n                <button #accept class=\"messagebox-btn\" style=\"color: {{tcolor}}; background-color: {{bcolor}};\">Ok</button>\n            </div>\n        </div>\n        `,\n    styles: [`\n        .messagebox\n        {\n            top: 0px;\n            left: 1px;\n            right: 1px;\n            bottom: 0px;\n            display: block;\n            position: absolute;\n        }\n\n        .messagebox-msg\n        {\n            height: 80px;\n            display: flex;\n            text-align: center;\n            word-wrap: break-all;\n            justify-content: center;\n        }\n\n        .messagebox-buttom\n        {\n            right: 1px;\n            bottom: 4px;\n            witdh: 35px;\n            height: 35px;\n            display: block;\n            position: absolute;\n        }\n\n        .messagebox-btn\n        {\n            border: none;\n            padding: 10px;\n            outline: none;\n            font-size: 15px;\n            cursor: pointer;\n            text-align: center;\n            border-radius: 100%;\n            display: inline-block;\n            text-decoration: none;\n        }\n    `]\n})\n\nexport class MessageBox implements Popup, AfterViewInit\n{\n    public top:string    = \"20%\";\n    public left:string   = \"25%\";\n    public width$:string  = \"100px\";\n    public height$:string = \"100px\";\n    public title$:string  = \"alert\";\n    public message:string = \"the message\";\n\n    private win:PopupWindow;\n    private app: ApplicationImpl;\n    private msg:HTMLDivElement = null;\n    private btn:HTMLButtonElement = null;\n\n    @ViewChild(\"msg\", {read: ElementRef}) private msgelem: ElementRef;\n    @ViewChild(\"accept\", {read: ElementRef}) private acceptelem: ElementRef;\n\n\n    public static show(app:ApplicationImpl, message:string, title?:string, width?:string, height?:string)\n    {\n        let pinst:PopupInstance = new PopupInstance();\n\n        pinst.display(app,MessageBox);\n        let mbox:MessageBox = pinst.popup() as MessageBox;\n\n        mbox.title = title;\n        mbox.message = message;\n\n        if (width != null) mbox.width = width;\n        if (height != null) mbox.height = height;\n    }\n\n\n    public constructor(ctx:Context)\n    {\n        this.app = ctx.app[\"_impl_\"];\n    }\n\n\n\tpublic get bcolor() : string\n\t{\n\t\treturn(this.app.config.colors.topbar);\n\t}\n\n\n\tpublic get tcolor() : string\n\t{\n\t\treturn(this.app.config.colors.buttontext);\n\t}\n\n\n    public set width(width:string)\n    {\n        this.width$ = width;\n    }\n\n\n    public get width() : string\n    {\n        return(this.width$);\n    }\n\n\n    public set height(height:string)\n    {\n        this.height$ = height;\n    }\n\n\n    public get height() : string\n    {\n        return(this.height$);\n    }\n\n\n    public set title(title:string)\n    {\n        this.title$ = title;\n        this.win.title = this.title;\n    }\n\n\n    public get title() : string\n    {\n        return(this.title$);\n    }\n\n\n    public setWin(win:PopupWindow): void\n    {\n        this.win = win;\n    }\n\n\n    public close(_cancel: boolean): void\n    {\n        this.btn.removeEventListener(\"click\",() => {this.close(false)});\n        this.btn.removeEventListener(\"keydown\",() => {this.close(false)});\n\n        this.win.closeWindow();\n        this.app.getCurrentForm()?.focus();\n    }\n\n\n    public ngAfterViewInit() : void\n    {\n        this.msg = this.msgelem?.nativeElement as HTMLDivElement;\n        this.btn = this.acceptelem?.nativeElement as HTMLButtonElement;\n\n        setTimeout(() => {this.addTriggers()},1);\n\n        this.msg.innerHTML = this.message;\n        this.keepFocus(0);\n    }\n\n\n    private addTriggers() : void\n    {\n        this.btn.addEventListener(\"click\",() => {this.close(false)});\n        this.btn.addEventListener(\"keydown\",() => {this.close(false)});\n    }\n\n\n    private keepFocus(delay:number) : void\n    {\n        this.btn.focus();\n        setTimeout(() => {this.keepFocus(delay+1)},delay);\n    }\n}","import { Column } from \"./Column\";\nimport { dates } from \"../dates/dates\";\nimport { BindValue } from \"./BindValue\";\n\n\nexport class Condition\n{\n    private value$:any;\n    private error$:string;\n    private column$:string;\n    private placeholder$:any;\n    private operator$:string;\n    private datatype$:Column;\n    private condition$:string;\n    private level$:number = 0;\n    private type$:string = \"and\";\n    private prev$:Condition = null;\n    private next$:Condition = null;\n    private bindvalues$:BindValue[] = [];\n\n    private static id:number = 1;\n\n    private static ubid() : string\n    {\n        if (++Condition.id > 9999)\n            Condition.id = 1;\n\n        let ubid:string = \"\"+Condition.id;\n        while(ubid.length < 4) ubid = \"0\"+ubid;\n\n        return(\"_\"+ubid);\n    }\n\n\n    public static where(column:string, value:string, datatype?:Column) : Condition\n    {\n        let condition:Condition = new Condition(column,value,datatype);\n        condition.type$ = \"where\";\n        return(condition);\n    }\n\n\n    constructor(column:string, value:any, datatype?:Column)\n    {\n        this.error$ = null;\n        this.column$ = column;\n        this.datatype$ = datatype;\n        this.placeholder$ = column + Condition.ubid();\n\n        if (this.column$ == null)\n        {\n            this.error$ = \"cannot construct condition on unspecified column. Value = \"+value;\n            return;\n        }\n\n        if (value != null)\n        {\n            let type:string = value.constructor.name.toLowerCase();\n\n            if (type == \"date\")\n            {\n                this.datatype$ = Column.date;\n                this.value$ = (value as Date).getTime();\n\n                this.datebtwn();\n\n                this.bindvalues$.push({name: this.placeholder$[0], value: this.value$[0], type: this.datatype$});\n                this.bindvalues$.push({name: this.placeholder$[1], value: this.value$[1], type: this.datatype$});\n\n                return;\n            }\n\n            if (type == \"number\")\n            {\n                this.value$ = value;\n                this.operator$ = \"=\";\n                this.datatype$ = Column.decimal;\n                this.bindvalues$.push({name: this.placeholder$, value: this.value$, type: this.datatype$});\n                return;\n            }\n        }\n\n        if (value != null && (value+\"\").trim().length > 0 && this.datatype$ == null)\n        {\n            value = (value+\"\").trim();\n            let numeric:boolean = !isNaN(+value);\n            if (numeric) this.datatype$ = Column.decimal;\n        }\n\n        if (value == null)\n        {\n            this.operator$ = \"is null\";\n            return;\n        }\n\n        if (this.datatype$ == null)\n            this.datatype$ = Column.varchar;\n\n        this.operator$ = \"\";\n        let quoted:boolean = false;\n\n        if (value.startsWith(\"<\")) this.operator$ = \"<\";\n        else if (value.startsWith(\">\")) this.operator$ = \">\";\n\n        if (this.operator$.length == 1)\n        {\n            value = value.substring(1).trim();\n            if (value.startsWith(\"=\")) this.operator$ += \"=\";\n        }\n\n        if (this.operator$.length == 2)\n            value = value.substring(1).trim();\n\n        if (value.startsWith('\"') && value.endsWith('\"'))\n        {\n            quoted = true;\n            value = value.substring(1,value.length-1);\n        }\n\n        if (value.startsWith(\"'\") && value.endsWith(\"'\"))\n        {\n            quoted = true;\n            value = value.substring(1,value.length-1);\n        }\n\n        if (!quoted)\n        {\n            let like:boolean = false;\n            if (value.indexOf(\"%\") >= 0) like = true;\n            if (value.indexOf(\"_\") >= 0) like = true;\n            if (like) this.operator$ = \"like\";\n        }\n\n        this.value$ = value.trim();\n        if (this.operator$.length == 0) this.operator$ = \"=\";\n\n        if (this.datatype$ == Column.decimal && isNaN(+this.value$))\n        {\n            this.error$ = \"Unable to parse \"+this.value$+\" as number\";\n            return;\n        }\n\n        if (this.datatype$ == Column.integer && isNaN(+this.value$))\n        {\n            this.error$ = \"Unable to parse \"+this.value$+\" as number\";\n            return;\n        }\n\n        if (this.datatype$ == Column.date)\n        {\n            let date:Date = dates.parse(this.value$);\n\n            if (date == null)\n            {\n                this.error$ = \"Unable to parse '\"+this.value$+\"' as date\";\n                return;\n            }\n\n            this.value$ = date.getTime();\n\n            if (this.operator$ == \"=\")\n                this.datebtwn();\n        }\n\n\n        if (this.operator$ != \"between\")\n        {\n            this.bindvalues$.push({name: this.placeholder$, value: this.value$, type: this.datatype$});\n        }\n        else\n        {\n            this.bindvalues$.push({name: this.placeholder$[0], value: this.value$[0], type: this.datatype$});\n            this.bindvalues$.push({name: this.placeholder$[1], value: this.value$[1], type: this.datatype$});\n        }\n    }\n\n    private datebtwn() : void\n    {\n        this.operator$ = \"between\";\n        let sdate:number = this.value$;\n\n        // add 24 hours - minus 1 sec\n        let edate:number = sdate + 60 * 60 * 24 * 1000 - 1000;\n\n        this.value$ = [sdate,edate];\n        this.placeholder$ = [this.placeholder$+\"_0\",this.placeholder$+\"_1\"];\n    }\n\n    public get column() : string\n    {\n        return(this.column$);\n    }\n\n    public get placeholder() : string|string[]\n    {\n        return(this.placeholder$);\n    }\n\n    public getValue() : any\n    {\n        if (this.bindvalues$.length == 0)\n            return(null);\n\n        if (this.bindvalues$.length == 1)\n            return(this.bindvalues$[0].value);\n\n        if (this.bindvalues$.length > 1)\n        {\n            let vals:any[] = [];\n            this.bindvalues$.forEach((bv) => {vals.push(bv.value)});\n            return(vals);\n        }\n    }\n\n    public setValue(value:any) : void\n    {\n        for(let i = 0; i < this.bindvalues$.length; i++)\n            this.bindvalues$[i].value = value;\n    }\n\n    public setCondition(condition:string) : void\n    {\n        this.error$ = null;\n        this.condition$ = condition;\n    }\n\n    public error() : string\n    {\n        return(this.error$)\n    }\n\n    public or() : Condition\n    {\n        this.type$ = \"or\";\n        return(this);\n    }\n\n\n    public and() : Condition\n    {\n        this.type$ = \"and\";\n        return(this);\n    }\n\n    public where() : Condition\n    {\n        this.type$ = \"where\";\n        return(this);\n    }\n\n\n    public next(next?:Condition) : Condition\n    {\n        if (next == null) return(this.next$);\n\n        if (this.next$ != null)\n            this.next$.prev$ = next;\n\n        this.next$ = next;\n        next.prev$ = this;\n        return(next);\n    }\n\n\n    public prev(prev?:Condition) : Condition\n    {\n        if (prev == null) return(this.prev$);\n\n        if (this.prev$ != null)\n            this.prev$.next$ = prev;\n\n        this.prev$ = prev;\n        prev.next$ = this;\n        return(prev);\n    }\n\n\n    public first() : Condition\n    {\n        let pc:Condition = this;\n        while(pc.prev$ != null) pc = pc.prev$;\n        return(pc);\n    }\n\n\n    public last() : Condition\n    {\n        let nc:Condition = this;\n        while(nc.next$ != null) nc = nc.next$;\n        return(nc);\n    }\n\n\n    public pop() : Condition\n    {\n        this.level$ = -1;\n        return(this);\n    }\n\n\n    public push() : Condition\n    {\n        this.level$ = +1;\n        return(this);\n    }\n\n\n    public errors() : string[]\n    {\n        let errors:string[] = [];\n        let cd:Condition = this.first();\n\n        while(cd != null)\n        {\n            if (cd.error() != null)\n                errors.push(cd.error());\n\n            cd = cd.next$;\n        }\n\n        return(errors)\n    }\n\n\n    public getAllBindvalues() : BindValue[]\n    {\n        let bindvalues:BindValue[] = [];\n        let cd:Condition = this.first();\n\n        while(cd != null)\n        {\n            cd.bindvalues$.forEach((bindvalue) => {bindvalues.push(bindvalue)});\n            cd = cd.next$;\n        }\n\n        return(bindvalues);\n    }\n\n\n    public split() : Condition[]\n    {\n        let conditions:Condition[] = [];\n        let cd:Condition = this.first();\n\n        while(cd != null)\n        {\n            conditions.push(cd);\n            cd = cd.next$;\n        }\n\n        return(conditions);\n    }\n\n\n    public toString() : string\n    {\n        let nc:Condition = this;\n        while(nc.prev$ != null) nc = nc.prev$;\n\n        if (nc.next$ == null)\n            return(nc.type$+\" \"+this.clause(nc));\n\n        let str:string = (nc.level$ == 0) ? \"where \" : \"where (\";\n        str += this.clause(nc);\n        if (nc.next$ != null) str += \" \"+nc.type$+\" \";\n\n        while(nc.next$ != null)\n        {\n            nc = nc.next$;\n            if (+nc.level$ > 0) str += \"(\";\n            str += this.clause(nc);\n            if (+nc.level$ < 0) str += \")\";\n            if (nc.next$ != null) str += \" \"+nc.type$+\" \";\n        }\n\n        return(str);\n    }\n\n\n    private clause(cond:Condition) : string\n    {\n        if (cond.condition$ != null)\n            return(cond.condition$);\n\n        if (cond.operator$.startsWith(\"is\"))\n            return(cond.column$+\" \"+cond.operator$);\n\n        else if (cond.operator$ == \"between\")\n            return(cond.column$+\" between :\"+cond.placeholder$[0]+\" and :\"+cond.placeholder$[1]);\n\n        else\n            return(cond.column$+\" \"+cond.operator$+\" :\"+cond.placeholder$);\n    }\n}","import { Column } from \"./Column\";\nimport { BindValue } from \"./BindValue\";\nimport { Condition } from \"./Condition\";\n\nexport enum SQLType\n{\n    call,\n    lock,\n    select,\n    insert,\n    update,\n    delete\n}\n\n\nexport interface SQL\n{\n    sql:string;\n    rows?:number;\n    cursor?:string;\n    bindvalues:bindvalue[];\n}\n\n\nexport interface bindvalue\n{\n    value:any;\n    name:string;\n    type:string;\n}\n\n\nexport class Statement\n{\n    private sql$:string = null;\n    private rows$:number = null;\n    private subquery$:SQL = null;\n    private table$:string = null;\n    private order$:string = null;\n    private limit$:string = null;\n    private type$:SQLType = null;\n    private cursor$:string = null;\n    private columns$:string[] = [];\n    private errors:string[] = null;\n    private override:boolean = false;\n    private constraint$:string = null;\n    private updates$:BindValue[] = [];\n    private condition$:Condition = null;\n    private bindvalues:BindValue[] = [];\n\n\n    constructor(sql:string|SQLType)\n    {\n        if (sql != null)\n        {\n            if (sql.constructor.name == \"String\") this.sql$ = \"\"+sql;\n            else this.type$ = sql as SQLType;\n        }\n\n        this.findtype();\n    }\n\n    private findtype() : void\n    {\n        if (this.sql$ != null)\n        {\n            this.type$ = SQLType.call;\n            let test:string = this.sql$.trim().substring(0,7).trim().toLowerCase();\n\n            if (test == \"select\") this.type$ = SQLType.select;\n            if (test == \"insert\") this.type$ = SQLType.insert;\n            if (test == \"update\") this.type$ = SQLType.update;\n            if (test == \"delete\") this.type$ = SQLType.delete;\n        }\n    }\n\n    public set type(type:SQLType)\n    {\n        this.type$ = type;\n    }\n\n    public get type() : SQLType\n    {\n        return(this.type$);\n    }\n\n    public get sql() : string\n    {\n        return(this.build().sql);\n    }\n\n    public set sql(sql:string)\n    {\n        this.sql$ = sql;\n        this.findtype();\n        this.override = true;\n    }\n\n    public rows(rows:number) : Statement\n    {\n        this.rows$ = rows;\n        return(this);\n    }\n\n    public isFunction() : boolean\n    {\n        return(this.type == SQLType.call);\n    }\n\n    public isSelect() : boolean\n    {\n        return(this.type == SQLType.select);\n    }\n\n    public isInsert() : boolean\n    {\n        return(this.type == SQLType.insert);\n    }\n\n    public isUpdate() : boolean\n    {\n        return(this.type == SQLType.update);\n    }\n\n    public isDelete() : boolean\n    {\n        return(this.type == SQLType.delete);\n    }\n\n    public set table(table:string)\n    {\n        this.table$ = table;\n    }\n\n    public set limit(limit:string)\n    {\n        this.limit$ = limit;\n    }\n\n    public set constraint(where:string)\n    {\n        this.constraint$ = where;\n    }\n\n    public set order(order:string)\n    {\n        this.order$ = order;\n    }\n\n    public set cursor(cursor:string)\n    {\n        this.cursor$ = cursor;\n    }\n\n    public get cursor() : string\n    {\n        return(this.cursor$);\n    }\n\n    public update(name:string, value:any, datatype?:Column)\n    {\n        if (value != null && datatype == null)\n        {\n            let type:string = value.constructor.name.toLowerCase();\n\n            if (type == \"date\")\n            {\n                datatype = Column.date;\n                value = (value as Date).getTime();\n            }\n\n            if (type == \"number\")\n                datatype = Column.decimal;\n        }\n\n\n        if (value != null && (value+\"\").trim().length > 0 && datatype == null)\n        {\n            value = (value+\"\").trim();\n            let numeric:boolean = !isNaN(+value);\n            if (numeric) datatype = Column.decimal;\n        }\n\n        if (datatype == null)\n            datatype = Column.varchar;\n\n        this.updates$.push({name: name, value: value, type: datatype});\n    }\n\n    public set columns(columns:string|string[])\n    {\n        this.columns$ = [];\n\n        if (columns.constructor.name == \"String\")\n        {\n            this.columns$.push(\"\"+columns);\n        }\n        else\n        {\n            (columns as String[]).forEach((column) =>\n            {\n                this.columns$.push(\"\"+column);\n            });\n        }\n    }\n\n    public setCondition(condition:Condition|Condition[]) : void\n    {\n        if (condition.constructor.name == \"Array\")\n        {\n            let arr:Condition[] = condition as Condition[];\n\n            this.condition$ = arr[0];\n\n            for(let i = 1; i < arr.length; i++)\n                this.condition$ = this.condition$.and().next(arr[i]);\n\n            this.condition$ = this.condition$.first();\n        }\n        else\n        {\n            this.condition$ = condition as Condition;\n        }\n    }\n\n    public pop() : Statement\n    {\n        if (this.condition$ != null)\n            this.condition$.pop();\n        return(this);\n    }\n\n    public push() : Statement\n    {\n        if (this.condition$ != null)\n            this.condition$.push();\n        return(this);\n    }\n\n    public where(column:string, value:any, datatype?:Column) : Statement\n    {\n        if (this.condition$ == null)\n        {\n            this.condition$ = new Condition(column,value,datatype);\n            this.condition$.where();\n        }\n        else\n        {\n            let cd:Condition = new Condition(column,value,datatype);\n            this.condition$ = this.condition$.where().next(cd);\n        }\n\n        return(this);\n    }\n\n    public whand(column:string, value:any, datatype?:Column) : Statement\n    {\n        if (this.condition$ != null) return(this.and(column,value,datatype));\n        else                         return(this.where(column,value,datatype));\n    }\n\n    public and(column:string, value:any, datatype?:Column) : Statement\n    {\n        if (this.condition$ == null)\n        {\n            this.condition$ = new Condition(column,value,datatype);\n        }\n        else\n        {\n            let cd:Condition = new Condition(column,value,datatype);\n            this.condition$ = this.condition$.and().next(cd);\n        }\n\n        return(this);\n    }\n\n    public or(column:string, value:any, datatype?:Column) : Statement\n    {\n        if (this.condition$ == null)\n        {\n            this.condition$ = new Condition(column,value,datatype);\n        }\n        else\n        {\n            let cd:Condition = new Condition(column,value,datatype);\n            this.condition$ = this.condition$.or().next(cd);\n        }\n\n        return(this);\n    }\n\n    public returnvalue(column:string, datatype?:Column) : Statement\n    {\n        this.bindvalues.unshift({name: column, value: null, type: datatype});\n        return(this);\n    }\n\n    public bind(column:string, value:any, datatype?:Column) : Statement\n    {\n        if (value != null && datatype == null)\n        {\n            let type:string = value.constructor.name.toLowerCase();\n\n            if (type == \"date\")\n            {\n                datatype = Column.date;\n                value = (value as Date).getTime();\n            }\n\n            if (type == \"number\")\n                datatype = Column.decimal;\n        }\n\n\n        if (value != null && (value+\"\").trim().length > 0 && datatype == null)\n        {\n            value = (value+\"\").trim();\n            let numeric:boolean = !isNaN(+value);\n            if (numeric) datatype = Column.decimal;\n        }\n\n        if (datatype == null)\n            datatype = Column.varchar;\n\n        this.bindvalues.push({name: column, value: value, type: datatype});\n        return(this);\n    }\n\n    public get subquery() : SQL\n    {\n        return(this.subquery$);\n    }\n\n    public set subquery(subquery:SQL)\n    {\n        this.subquery$ = subquery;\n    }\n\n    public validate() : string[]\n    {\n        if (this.errors != null)\n            return(this.errors);\n\n        this.errors = [];\n\n        if (this.condition$ != null)\n        this.errors = this.condition$.errors();\n\n        return(this.errors);\n    }\n\n    public getCondition() : Condition\n    {\n        return(this.condition$);\n    }\n\n    public build() : SQL\n    {\n        switch(this.type)\n        {\n            case SQLType.call: return(this.buildcall());\n            case SQLType.lock: return(this.buildselect());\n            case SQLType.select: return(this.buildselect());\n            case SQLType.insert: return(this.buildinsert());\n            case SQLType.update: return(this.buildupdate());\n            case SQLType.delete: return(this.builddelete());\n\n            default: console.log(\"don't know how to build \"+SQLType[this.type]);\n        }\n    }\n\n\n    private buildcall() : SQL\n    {\n        let bindvals:bindvalue[] = [];\n\n        this.bindvalues.forEach((bindv) =>\n        {\n            bindvals.push\n            ({\n                name: bindv.name,\n                type: Column[bindv.type].toLowerCase(),\n                value: bindv.value\n            });\n        });\n\n        return({sql: this.sql$, bindvalues: bindvals});\n    }\n\n\n    private buildinsert() : SQL\n    {\n        let bindvals:bindvalue[] = [];\n\n        this.bindvalues.forEach((bindv) =>\n        {\n            bindvals.push\n            ({\n                name: bindv.name,\n                type: Column[bindv.type].toLowerCase(),\n                value: bindv.value\n            });\n        });\n\n        this.sql$ = \"insert into \"+this.table$+\" (\";\n\n        for (let i = 0; i < bindvals.length; i++)\n        {\n            this.sql$ += bindvals[i].name;\n            if (i < bindvals.length - 1) this.sql$ += \",\";\n        }\n\n        this.sql$ += \") values (\";\n\n        for (let i = 0; i < bindvals.length; i++)\n        {\n            this.sql$ += \":\"+bindvals[i].name;\n            if (i < bindvals.length - 1) this.sql$ += \",\";\n        }\n\n        this.sql$ += \")\";\n\n        return({sql: this.sql$, bindvalues: bindvals});\n    }\n\n\n    private buildupdate() : SQL\n    {\n        let updates:bindvalue[] = [];\n        let bindvals:bindvalue[] = [];\n\n        for (let i = 0; i < this.updates$.length; i++)\n        {\n            updates.push(\n            {\n                name: this.updates$[i].name,\n                type: Column[this.updates$[i].type].toLowerCase(),\n                value: this.updates$[i].value\n            });\n        }\n\n        // Bindvalues for the update\n        updates.forEach((bindv) => {bindvals.push(bindv)});\n\n        let bindvalues:BindValue[] = this.bindvalues;\n\n        if (this.condition$ != null)\n            this.condition$.getAllBindvalues().forEach((bind) => {bindvalues.push(bind);});\n\n        // Bindvalues for the whereclause\n        this.bindvalues.forEach((bindv) =>\n        {\n            bindvals.push\n            ({\n                name: bindv.name,\n                type: Column[bindv.type].toLowerCase(),\n                value: bindv.value\n            });\n        });\n\n        this.sql$ = \"update \"+this.table$+\" set \";\n\n        for (let i = 0; i < updates.length; i++)\n        {\n            this.sql$ += updates[i].name + \" = :\"+updates[i].name;\n            if (i < updates.length - 1) this.sql$ += \", \";\n        }\n\n        if (this.constraint$ != null)\n            this.sql$ += \" \"+this.constraint$;\n\n        if (this.condition$ != null)\n            this.sql$ += \" \"+this.condition$.toString();\n\n        return({sql: this.sql$, bindvalues: bindvals});\n    }\n\n    private builddelete() : SQL\n    {\n        let sql:string = this.sql$;\n\n        if (sql == null)\n            sql = \"delete from \"+this.table$;\n\n        if (this.constraint$ != null)\n            sql += \" \"+this.constraint$;\n\n        let bindvalues:BindValue[] = this.bindvalues;\n\n        if (this.condition$ != null)\n        {\n            sql += \" \"+this.condition$.toString();\n            this.condition$.getAllBindvalues().forEach((bind) => {bindvalues.push(bind);});\n        }\n\n        let bindvals:bindvalue[] = [];\n\n        bindvalues.forEach((bindv) =>\n        {\n            bindvals.push\n            ({\n                name: bindv.name,\n                type: Column[bindv.type].toLowerCase(),\n                value: bindv.value\n            });\n        });\n\n        return({sql: sql, bindvalues: bindvals});\n    }\n\n\n    private buildselect() : SQL\n    {\n        let sql:string = this.sql$;\n\n        if (sql == null)\n        {\n            sql = \"select \";\n\n            if (this.columns$ != null)\n            {\n                for(let i = 0; i < this.columns$.length - 1; i++)\n                    sql += this.columns$[i]+\", \";\n\n                sql += this.columns$[this.columns$.length-1];\n            }\n\n            if (this.table$ != null)\n                sql += \" from \"+this.table$;\n        }\n\n        if (!this.override)\n        {\n            let whand:string = \" where \";\n\n            if (this.condition$ != null)\n            {\n                sql += \" \"+this.condition$.toString();\n                whand = \" and \";\n            }\n\n            if (this.constraint$ != null)\n            {\n                sql += whand+this.constraint$;\n                whand = \" and \";\n            }\n\n            if (this.subquery$ != null)\n            {\n                sql += whand+this.subquery$.sql;\n                whand = \" and \";\n            }\n\n            // Don't order by if lock\n            if (this.type$ == SQLType.select && this.order$ != null)\n                sql += \" order by \"+this.order$;\n\n            if (this.limit$ != null)\n                sql += \" \"+this.limit$;\n\n        }\n\n        let bindvalues:BindValue[] = this.bindvalues;\n\n        if (this.condition$ != null)\n            this.condition$.getAllBindvalues().forEach((bind) => {bindvalues.push(bind);});\n\n        let bindvals:bindvalue[] = [];\n\n        bindvalues.forEach((bindv) =>\n        {\n            bindvals.push\n            ({\n                name: bindv.name,\n                type: Column[bindv.type].toLowerCase(),\n                value: bindv.value\n            });\n        });\n\n        if (this.subquery$ != null)\n        {\n            this.subquery$.bindvalues.forEach((bindv) =>\n            {bindvals.push(bindv)});\n        }\n\n        let sqlstmt:SQL = {sql: sql, bindvalues: bindvals};\n        if (this.rows$ != null) sqlstmt[\"rows\"] = this.rows$;\n\n        return(sqlstmt);\n    }\n}","import { Column } from \"./Column\";\nimport { Key } from \"../blocks/Key\";\nimport { Field } from \"../input/Field\";\nimport { Connection } from \"./Connection\";\nimport { TableDefinition } from \"./TableDefinition\";\nimport { FieldData, Row } from \"../blocks/FieldData\";\nimport { ColumnDefinition } from \"./ColumnDefinition\";\nimport { NameValuePair } from \"../utils/NameValuePair\";\nimport { FieldDefinition } from \"../input/FieldDefinition\";\nimport { SQL, SQLType, Statement } from \"../database/Statement\";\n\n\nexport class Table\n{\n    private key:Key;\n    private select:SQL;\n    private eof:boolean;\n    private fetch$:number;\n    private cursor:string;\n    private keys:any[] = [];\n    private cnames:string[];\n    private conn:Connection;\n    private dates:boolean[] = [];\n    private fielddata$:FieldData;\n    private table:TableDefinition;\n    private criterias:NameValuePair[];\n    private columns$:ColumnDefinition[];\n    private fielddef:Map<string,FieldDefinition>;\n    private index:Map<string,ColumnDefinition> = new Map<string,ColumnDefinition>();\n\n\n    constructor(conn:Connection, table:TableDefinition, key:Key, columns:ColumnDefinition[], fielddef:Map<string,FieldDefinition>, rows:number)\n    {\n        this.key = key;\n        this.conn = conn;\n        this.table = table;\n        this.fetch$ = rows;\n        this.criterias = [];\n        this.columns$ = columns;\n        this.fielddef = fielddef;\n        this.cursor = table.name + Date.now();\n\n        if (this.key == null)\n        {\n            this.key = new Key(\"primary\");\n            this.columns$.forEach((col) => {this.key.addColumn(col.name)});\n        }\n\n        if (this.table.where != null)\n        {\n            this.table.where = this.table.where.trim();\n\n            if (this.table.where.startsWith(\"where \"))\n                this.table.where = this.table.where.substring(6);\n\n            if (this.table.where.startsWith(\"and \"))\n                this.table.where = this.table.where.substring(4);\n\n            if (this.table.where.length == 0)\n                this.table.where = null;\n        }\n\n        this.fetch$ *= 4;\n        if (this.fetch$ < 10) this.fetch$ = 10;\n\n        this.cnames = [];\n        this.columns$.forEach((column) =>\n        {\n            this.cnames.push(column.name);\n            this.index.set(column.name,column);\n\n            let date:boolean = false;\n            if (column.type == Column.date)\n                date = true;\n\n            this.dates.push(date);\n        });\n    }\n\n\n    public get name() : string\n    {\n        return(this.table.name);\n    }\n\n\n    public get tabdef()\n    {\n        return(this.table)\n    }\n\n\n    public get columns() : string[]\n    {\n        return(this.cnames);\n    }\n\n\n    public mandatory(column:string) : boolean\n    {\n        let def:ColumnDefinition = this.index.get(column);\n        if (def == null || def.mandatory == null) return(false);\n        return(def.mandatory);\n    }\n\n\n    public databasecolumn(column:string) : boolean\n    {\n        return(this.index.has(column.toLowerCase()));\n    }\n\n\n    public set fielddata(fielddata:FieldData)\n    {\n        this.fielddata$ = fielddata;\n    }\n\n\n    public get fielddata() : FieldData\n    {\n        return(this.fielddata$);\n    }\n\n\n    public get searchfilter() : NameValuePair[]\n    {\n        return(this.criterias);\n    }\n\n\n    public set searchfilter(filter:NameValuePair[])\n    {\n        this.criterias = filter;\n    }\n\n\n    public async lock(record:number, data:any[]) : Promise<any>\n    {\n        let cols:NameValuePair[] = [];\n\n        for (let i = 0; i < this.columns.length; i++)\n            cols.push({name: this.columns[i], value: data[i]});\n\n        let where:boolean = true;\n        let stmt:Statement = new Statement(SQLType.lock);\n\n        stmt.columns = this.columns;\n        stmt.table = this.table.name;\n\n        for (let i = 0; i < this.keys[record].length; i++)\n        {\n            let type:Column = this.index.get(this.columns[i]).type;\n\n            if (!where) stmt.and(this.columns[i],this.keys[record][i],type);\n            else        stmt.where(this.columns[i],this.keys[record][i],type);\n\n            where = false;\n        }\n\n        let lock:SQL = stmt.build();\n        let response:any = await this.conn.invoke(\"lock\",lock);\n\n        if (response[\"status\"] == \"failed\")\n        {\n            console.log(JSON.stringify(response));\n            return({status: \"failed\", message: \"Row is locked by another user. Try later\"});\n        }\n\n        let rows:any[] = response[\"rows\"];\n\n        if (rows.length == 0)\n        {\n            console.log(\"Row[\"+record+\"] has been deleted by another user. Requery to see changes\")\n            return({status: \"failed\", message: \"Row[\"+record+\"] has been deleted by another user. Requery to see changes\"});\n        }\n\n        let row:any = rows[0];\n\n        for (let i = 0; i < this.columns.length; i++)\n        {\n            let cval:any = cols[i].value;\n\n            if (cval != null && this.dates[i])\n                cval = (cval as Date).getTime();\n\n            if (row[this.columns[i]] != cval)\n            {\n                let problem:string = cols[i].name+\"[\"+record+\"], db: \"+row[this.columns[i]]+\" != \"+cval;\n                console.log(\"Row has been changed by another user. Requery to see changes\");\n                return({status: \"failed\", message: \"Row has been changed by another user. Requery to see changes\"});\n            }\n        }\n\n        return({status: \"ok\"});\n    }\n\n\n    public async insert(record:number, data:any[]) : Promise<any>\n    {\n        let cols:NameValuePair[] = [];\n\n        for (let i = 0; i < this.columns.length; i++)\n            cols.push({name: this.columns[i], value: data[i]});\n\n        let stmt:Statement = new Statement(SQLType.insert);\n\n        stmt.columns = this.columns;\n        stmt.table = this.table.name;\n\n        let keyval:any[] = [];\n\n        for (let i = 0; i < this.columns.length; i++)\n        {\n            let cval:any = cols[i].value;\n            let type:Column = this.index.get(this.columns[i]).type;\n\n            if (cval != null && this.dates[i])\n                cval = (cval as Date).getTime();\n\n            if (i < this.key.columns().length)\n                keyval.push(cval);\n\n            stmt.bind(cols[i].name,cval,type);\n        }\n\n        let insert:SQL = stmt.build();\n        this.keys.splice(+record,0,keyval);\n        let response:any = await this.conn.invoke(\"insert\",insert);\n\n        return(response);\n    }\n\n\n    public async update(record:number, data:NameValuePair[]) : Promise<any>\n    {\n        let keyupd:any[] = [];\n        let keyval:any[] = this.keys[+record];\n        let stmt:Statement = new Statement(SQLType.update);\n\n        for (let i = 0; i < data.length; i++)\n        {\n            if (i < this.key.columns().length)\n                keyupd.push(keyval[i]);\n\n            if (data[i].value.updated)\n            {\n                let val:any = data[i].value.newvalue;\n                let type:Column = this.index.get(data[i].name).type;\n\n                if (val != null && this.dates[i])\n                    val = (val as Date).getTime();\n\n                if (i < this.key.columns().length)\n                    keyupd[i] = val;\n\n                stmt.update(data[i].name,val,type);\n            }\n        }\n\n        let where:boolean = true;\n\n        if (this.table.where != null && this.table.where.trim.length > 0)\n        {\n            where = false;\n            stmt.constraint = this.table.where;\n        }\n\n        for (let i = 0; i < keyval.length; i++)\n        {\n            let type:Column = this.index.get(this.columns[i]).type;\n\n            if (!where) stmt.and(this.columns[i],keyval[i],type);\n            else        stmt.where(this.columns[i],keyval[i],type);\n\n            where = false;\n        }\n\n        stmt.table = this.table.name;\n\n        let update:SQL = stmt.build();\n        let response:any = await this.conn.invoke(\"update\",update);\n\n        if (response[\"status\"] != \"failed\")\n            this.keys[+record] = keyupd;\n\n        return(response);\n    }\n\n\n    public async delete(record:number) : Promise<any>\n    {\n        let keyval:any[] = this.keys[+record];\n        let stmt:Statement = new Statement(SQLType.delete);\n\n        let where:boolean = true;\n\n        if (this.table.where != null && this.table.where.trim.length > 0)\n        {\n            where = false;\n            stmt.constraint = this.table.where;\n        }\n\n        for (let i = 0; i < keyval.length; i++)\n        {\n            let type:Column = this.index.get(this.columns[i]).type;\n\n            if (!where) stmt.and(this.columns[i],keyval[i],type);\n            else        stmt.where(this.columns[i],keyval[i],type);\n\n            where = false;\n        }\n\n        stmt.table = this.table.name;\n\n        let delrow:SQL = stmt.build();\n        let response:any = await this.conn.invoke(\"delete\",delrow);\n\n        if (response[\"status\"] == \"failed\")\n            return(response);\n\n        let keys:any[] = this.keys.slice(0,record);\n        keys = keys.concat(this.keys.slice(+record+1,this.keys.length));\n\n        this.keys = keys;\n        return(response);\n    }\n\n\n    public parseQuery(keys:Key[], subquery:SQL, fields:Field[]) : Statement\n    {\n        let stmt:Statement = new Statement(SQLType.select);\n\n        stmt.cursor = this.cursor;\n        stmt.columns = this.cnames;\n        stmt.table = this.table.name;\n        stmt.order = this.table.order;\n\n        let where:boolean = true;\n\n        if (this.table.limit != null)\n            stmt.limit = this.table.limit;\n\n        if (this.table.where != null)\n        {\n            where = false;\n            stmt.constraint = this.table.where;\n        }\n\n        if (fields.length > 0)\n        {\n            this.criterias = [];\n            fields.forEach((field) =>\n            {\n                if (field.value != null && (\"\"+field.value).trim() != \"\")\n                    this.criterias.push({name: field.name, value: field.value});\n            });\n        }\n\n        keys.forEach((key) =>\n        {\n            key.values.forEach((part) =>\n            {\n                let col:string = part.name;\n\n                // Check if key column is mapped to diff. name\n                let def:FieldDefinition = this.fielddef.get(col);\n                if (def != null) col = def.column;\n\n                let type:Column = this.index.get(col).type;\n\n                if (!where) stmt.and(col,part.value,type);\n                else        stmt.where(col,part.value,type);\n\n                where = false;\n            });\n        });\n\n        this.criterias.forEach((field) =>\n        {\n            let def:FieldDefinition = this.fielddef.get(field.name);\n\n            if (def.column != null)\n            {\n                let type:Column = this.index.get(def.column).type;\n\n                if (!where) stmt.and(def.column,field.value,type);\n                else        stmt.where(def.column,field.value,type);\n\n                where = false;\n            }\n        });\n\n        if (subquery != null)\n            stmt.subquery = subquery;\n\n        return(stmt);\n    }\n\n\n    public async executequery(stmt:Statement) : Promise<any>\n    {\n        this.keys = [];\n        this.eof = false;\n        this.fielddata.clear();\n        this.select = stmt.build();\n\n        this.select.rows = this.fetch$;\n        this.select.cursor = stmt.cursor;\n\n        let response:any = await this.conn.invoke(\"select\",this.select);\n\n        if (response[\"status\"] == \"failed\")\n            return(response);\n\n        this.addRows(response[\"rows\"]);\n        return(response);\n    }\n\n\n    public async fetch(stmt:Statement) : Promise<any>\n    {\n        if (this.eof) return({status: \"ok\"});\n\n        let fetch:any = {cursor: stmt.cursor, rows: this.fetch$};\n        let response:any = await this.conn.invoke(\"fetch\",fetch);\n\n        if (response[\"status\"] == \"failed\")\n            return(response);\n\n        this.addRows(response[\"rows\"]);\n        return(response);\n    }\n\n\n    private addRows(rows:any[]) : void\n    {\n        let klen:number = this.key.values.length;\n        if (rows.length < this.fetch$) this.eof = true;\n\n        rows.forEach((row) =>\n        {\n            // Table is not defined\n            if (this.cnames.length == 0)\n            {\n                let keys:string[] = Object.keys(row);\n                let flds:string[] = this.fielddata.fields;\n\n                for(let i = 0; i < keys.length; i++)\n                    this.cnames.push(keys[i]);\n\n                for(let i = 0; i < keys.length - flds.length; i++)\n                    flds.unshift(keys[i]);\n\n                this.fielddata.fields = flds;\n            }\n\n            let col:number = 0;\n            let keyval:any[] = [];\n            let drow:Row = this.fielddata.newrow();\n\n            Object.keys(row).forEach((key) =>\n            {\n                let val = row[key];\n\n                if (this.dates[col] && (\"\"+val).length > 0)\n                    val = new Date(+val);\n\n                drow.setValue(col++,val);\n                if (keyval.length < klen) keyval.push(val);\n            });\n\n            this.keys.push(keyval);\n            this.fielddata.add(drow);\n        });\n    }\n}","import { Key } from \"./Key\";\nimport { RecordState } from \"./Record\";\nimport { Field } from \"../input/Field\";\nimport { BlockImpl } from \"./BlockImpl\";\nimport { Table } from \"../database/Table\";\nimport { Trigger } from \"../events/Triggers\";\nimport { NameValuePair } from \"../utils/NameValuePair\";\nimport { SQL, Statement } from \"../database/Statement\";\nimport { SQLTriggerEvent } from \"../events/TriggerEvent\";\nimport { FieldDefinition } from \"../input/FieldDefinition\";\nimport { TableDefinition } from \"../database/TableDefinition\";\n\n\nexport class FieldData\n{\n    private table$:Table;\n    private query:Statement;\n    private block:BlockImpl;\n    private data:Row[] = [];\n    private fields$:string[];\n    private fielddef:Map<string,FieldDefinition>;\n    private index:Map<string,number> = new Map<string,number>();\n\n\n    public constructor(block:BlockImpl, table:Table, fields:string[], fielddef:Map<string,FieldDefinition>)\n    {\n        this.block = block;\n        this.table$ = table;\n        this.fields$ = fields;\n        this.fielddef = fielddef;\n\n        if (table != null)\n            this.table$.fielddata = this;\n\n        if (fields != null)\n        {\n            for(let i = 0; i < fields.length; i++)\n                this.index.set(fields[i].toLowerCase(),i);\n        }\n    }\n\n\n    public get table() : Table\n    {\n        return(this.table$);\n    }\n\n\n    public get tabdef() : TableDefinition\n    {\n        return(this.table$?.tabdef);\n    }\n\n\n    public get database() : boolean\n    {\n        return(this.table != null);\n    }\n\n\n    public databasecolumn(column:string) : boolean\n    {\n        if (this.table == null) return(false);\n        return(this.table.databasecolumn(column));\n    }\n\n\n    public get fields() : string[]\n    {\n        return(this.fields$);\n    }\n\n\n    public set fields(fields:string[])\n    {\n        this.index.clear();\n        this.fields$ = fields;\n\n        for(let i = 0; i < fields.length; i++)\n            this.index.set(fields[i].toLowerCase(),i);\n    }\n\n\n    public get columns() : string[]\n    {\n        if (this.table == null) return(null);\n        else return(this.table.columns);\n    }\n\n\n    public get fetched() : number\n    {\n        return(this.data.length);\n    }\n\n\n    public removeLocks() : void\n    {\n        this.data.forEach((row) => {row.locked = false});\n    }\n\n\n    public async lock(record:number) : Promise<any>\n    {\n        if (record < 0 || record >= this.data.length)\n            return({status: \"failed\", message: \"row \"+record+\" does not exist\"});\n\n        if (this.data[record].locked)\n            return({status: \"failed\", message: \"row \"+record+\" already locked\"});\n\n        if (this.table == null)\n            return({status: \"ok\"});\n\n        let response:any = {status: \"ok\"};\n\n        if (this.table != null)\n        {\n            response = await this.table.lock(record,this.data[+record].values);\n\n            if (response[\"status\"] == \"failed\")\n                return(response);\n        }\n\n        this.data[record].locked = true;\n        return(response);\n    }\n\n\n    public locked(record:number) : boolean\n    {\n        if (record < 0 || record >= this.data.length) return(false);\n        if (this.data[+record].state == RecordState.insert) return(true);\n        return(this.data[+record].locked);\n    }\n\n\n    public mandatory(column:string) : boolean\n    {\n        let md:boolean = false;\n\n        if (this.table != null)\n            md = this.table.mandatory(column);\n\n        if (!md)\n        {\n            md = this.fielddef.get(column)?.mandatory;\n            if (md == null) md = false;\n        }\n\n        return(md);\n    }\n\n\n    public getNonValidated(record:number) : string[]\n    {\n        if (record < 0 || record >= this.data.length) return([]);\n\n        let row:Row = this.data[record];\n\n        let cols:string[] = [];\n\n        for (let i = 0; i < row.fields.length; i++)\n        {\n            if (this.mandatory(this.fields[i]) && row.fields[i].value$ == null)\n            {\n                cols.push(this.columns[i]);\n            }\n            else if (!row.fields[i].validated)\n            {\n                cols.push(this.columns[i]);\n            }\n        }\n\n        return(cols);\n    }\n\n\n    public validated(record:number, fields:boolean) : boolean\n    {\n        if (record < 0 || record >= this.data.length) return(true);\n\n        let row:Row = this.data[record];\n\n        if (fields)\n        {\n            for (let i = 0; i < row.fields.length; i++)\n            {\n                if (this.mandatory(this.fields[i]) && row.fields[i].value$ == null)\n                    return(false);\n\n                if (!row.fields[i].validated) return(false);\n            }\n            return(true);\n        }\n\n        return(row.validated);\n    }\n\n\n    public newrow() : Row\n    {\n        let row:Row = new Row(0,this);\n        return(row);\n    }\n\n\n    public add(row:Row)\n    {\n        this.data.push(row);\n    }\n\n\n    public column(fname:string) : number\n    {\n        return(this.index.get(fname.toLowerCase()));\n    }\n\n\n    public clear() : void\n    {\n        this.data = [];\n    }\n\n\n    public getValue(record:number, column:string) : any\n    {\n        if (+record < 0 || +record >= +this.data.length)\n        {\n            console.log(\"get \"+column+\"[\"+record+\"] record does not exist\");\n            return(null);\n        }\n\n        let colno:number = this.index.get(column.toLowerCase());\n\n        if (colno == null)\n        {\n            console.log(\"get \"+column+\"[\"+record+\"] column does not exist\");\n            return(null);\n        }\n\n        let rec:Row = this.data[+record];\n        return(rec.fields[+colno].value$);\n    }\n\n\n    public getValidated(record:number, column?:string) : boolean\n    {\n        if (record < 0 || record >= this.data.length)\n        {\n            console.log(\"set \"+column+\"[\"+record+\"] row does not exist\");\n            return(true);\n        }\n\n        let rec:Row = this.data[+record];\n        if (column == null) return(rec.validated);\n\n        let colno:number = this.index.get(column.toLowerCase());\n\n        if (colno == null)\n        {\n            console.log(\"set \"+column+\"[\"+record+\"] column does not exist\");\n            return;\n        }\n\n        return(rec.fields[+colno].validated);\n    }\n\n\n    public async setValidated(record:number, column?:string) : Promise<any>\n    {\n        if (record < 0 || record >= this.data.length)\n            return({status: \"failed\", message: \"set \"+column+\"[\"+record+\"] validated failed, row does not exist\"});\n\n        let rec:Row = this.data[+record];\n\n        if (column == null)\n        {\n            if (rec.validated)\n                return({status: \"failed\", message: \"Record already validated\"});\n\n            if (rec.state == RecordState.insert)\n            {\n                if (this.table != null)\n                {\n                    let scn:number = rec.scn;\n                    let response:any = await this.table.insert(record,this.data[+record].values);\n\n                    if (response[\"status\"] == \"failed\")\n                        return(response);\n\n                    rec.dbn = scn;\n                }\n            }\n            else if (this.table != null)\n            {\n                let scn:number = rec.scn;\n                let columns:NameValuePair[] = [];\n\n                for (let i = 0; i < this.columns.length; i++)\n                {\n                    let status:any = {updated: false};\n\n                    if (+rec.fields[i].scn > +rec.dbn)\n                    {\n                        status.updated = true;\n                        status.newvalue = rec.fields[i].value$;\n                    }\n\n                    columns.push({name: this.columns[i], value: status});\n                }\n\n                let response:any = await this.table.update(record,columns);\n\n                if (response[\"status\"] == \"failed\")\n                    return(response);\n\n                rec.dbn = scn;\n            }\n\n            rec.validated = true;\n\n            if (rec.state == RecordState.insert)\n                rec.state = RecordState.update;\n\n            return({status: \"ok\"});\n        }\n\n        let colno:number = this.index.get(column.toLowerCase());\n\n        if (colno == null)\n            return({status: \"failed\", message: \"set \"+column+\"[\"+record+\"] validated failed, column does not exist\"});\n\n        if (this.table != null && +colno < this.table.columns.length)\n            rec.fields[+colno].validated = true;\n\n        return({status: \"ok\"});\n    }\n\n\n    public setValue(record:number, column:string, value:any) : boolean\n    {\n        if (record < 0 || record >= this.data.length)\n        {\n            console.log(\"set \"+column+\"[\"+record+\"] row does not exist\");\n            return(false);\n        }\n\n        let colno:number = this.index.get(column.toLowerCase());\n\n        if (colno == null)\n        {\n            console.log(\"set \"+column+\"[\"+record+\"] column does not exist\");\n            return(false);\n        }\n\n        let rec:Row = this.data[+record];\n\n        if (rec.fields[+colno].value$ == value)\n            return(false);\n\n        let scn:number = +rec.scn + 1;\n\n        if (this.table != null && +colno < this.table.columns.length)\n        {\n            rec.validated = false;\n            rec.fields[+colno].validated = false;\n        }\n\n        rec.scn = scn;\n        rec.fields[+colno].setValue(scn,value);\n\n        return(true);\n    }\n\n\n    public state(record:number, state?:RecordState) : RecordState\n    {\n        if (record >= this.data.length) return(RecordState.na);\n        if (state != null) this.data[record].state = state;\n        return(this.data[record].state);\n    }\n\n\n    public get searchfilter() : NameValuePair[]\n    {\n        if (this.table == null) return(null);\n        return(this.table.searchfilter);\n    }\n\n\n    public set searchfilter(filter:NameValuePair[])\n    {\n        if (this.table != null)\n            this.table.searchfilter = filter;\n    }\n\n\n    public parseQuery(keys:Key[], subquery:SQL, fields:Field[]) : Statement\n    {\n        if (this.table == null) return(null);\n        return(this.table.parseQuery(keys,subquery,fields));\n    }\n\n\n    public async executequery(stmt:Statement) : Promise<any>\n    {\n        this.query = stmt;\n        if (this.table == null) return({status: \"ok\"});\n\n        let response:any = await this.table.executequery(stmt);\n\n        if (response[\"status\"] != \"failed\")\n        {\n            let rows:any[] = response[\"rows\"];\n\n            for (let i = 0; i < rows.length; i++)\n            {\n                let event:SQLTriggerEvent = new SQLTriggerEvent(this.block.alias,i,null);\n                this.block.invokeTriggers(Trigger.PostQuery,event);\n            }\n        }\n\n        return(response);\n    }\n\n\n    public insert(record:number) : boolean\n    {\n        let data:Row[] = [];\n        if (record > this.data.length) record = this.data.length;\n\n        data = this.data.slice(0,record);\n\n        data[+record] = new Row(0,this);\n\n        data[+record].locked = true;\n        data[+record].state = RecordState.insert;\n        data = data.concat(this.data.slice(record,this.data.length));\n\n        this.data = data;\n        return(true);\n    }\n\n\n    public async delete(record:number) : Promise<any>\n    {\n        let data:Row[] = [];\n        let response:any = {status: \"ok\"};\n\n        if (record < 0 || record >= this.data.length)\n            return(response);\n\n        if (this.data[+record].state == RecordState.insert)\n        {\n            data = this.data.slice(0,record);\n            data = data.concat(this.data.slice(+record+1,this.data.length));\n\n            this.data = data;\n            return(response);\n        }\n\n        if (this.table != null)\n        {\n            response = await this.table.delete(record);\n\n            if (response[\"status\"] == \"failed\")\n                return(response);\n        }\n\n        data = this.data.slice(0,record);\n        data = data.concat(this.data.slice(+record+1,this.data.length));\n\n        this.data = data;\n        return(response);\n    }\n\n\n    public get rows() : number\n    {\n        return(this.data.length);\n    }\n\n\n    public async fetch(offset:number, rows:number) : Promise<number>\n    {\n        if (this.data.length <= +offset + rows && this.query != null)\n        {\n            let response:any = await this.table.fetch(this.query);\n\n            if (response[\"status\"] == \"failed\")\n            {\n                this.block.alert(JSON.stringify(response),\"Database\");\n                return(0);\n            }\n            else\n            {\n                let rows:any[] = response[\"rows\"];\n\n                if (rows != null)\n                {\n                    for (let i = 1; i <= rows.length; i++)\n                    {\n                        let event:SQLTriggerEvent = new SQLTriggerEvent(this.block.alias,+i + +offset,null);\n                        this.block.invokeTriggers(Trigger.PostQuery,event);\n                    }\n                }\n            }\n        }\n\n        let avail:number = this.data.length - offset - 1;\n        if (avail < 0) avail = 0;\n\n        return(avail);\n    }\n\n\n    public get(start:number, rows:number) : any[][]\n    {\n        let values:any[][] = [];\n        if (start < 0) start = 0;\n        let end:number = +start + rows;\n        if (end > this.data.length) end = this.data.length;\n\n        for(let i = start; i < end; i++)\n            values.push(this.data[i].values);\n\n        return(values);\n    }\n}\n\n\nexport class Row\n{\n    public scn:number = 0;\n    public dbn:number = 0;\n    public fields:Column[] = [];\n    public locked:boolean = false;\n    public validated:boolean = true;\n    public state:RecordState = RecordState.na;\n\n\n    constructor(scn:number, table:FieldData, values?:any[])\n    {\n        this.scn = scn;\n\n        for(let i = 0; i < table.fields.length; i++)\n            this.fields.push(new Column(scn));\n\n        let i:number = 0;\n\n        if (values != null) this.fields.forEach((column) =>\n        {column.setValue(scn,values[i++])});\n    }\n\n\n    public setValue(col:number, value:any) : void\n    {\n        // Used by table\n        this.fields[col].value$ = value;\n    }\n\n\n    public get values() : any[]\n    {\n        let values:any[] = [];\n        this.fields.forEach((col) =>\n        {\n            values.push(col.value$)\n        });\n        return(values);\n    }\n\n\n    public print() : void\n    {\n        let i:number = 0;\n        let values:string = \"\";\n        this.fields.forEach((col) =>\n        {\n            let val:any = col.value$;\n            if (val == null) val = \"\";\n            values += i+\" \"+col.value$ + \", \";\n            i++;\n        });\n\n        values = values.substring(0,values.length-2);\n        console.log(values);\n    }\n}\n\n\nclass Column\n{\n    public value$:any;\n    public scn:number = 0;\n    public validated:boolean = true;\n\n    constructor(scn:number, value?:any)\n    {\n        this.scn = scn;\n        this.value$ = value;\n        if (value == undefined) this.value$ = null;\n    }\n\n    public setValue(scn:number, value:any) : void\n    {\n        this.scn = scn;\n        this.value$ = value;\n        if (value == undefined) this.value$ = null;\n    }\n}","import { Popup } from \"../popup/Popup\";\nimport { Field } from \"../input/Field\";\nimport { keymap } from \"../keymap/KeyMap\";\nimport { Record } from \"../blocks/Record\";\nimport { Table } from \"../database/Table\";\nimport { Trigger } from \"../events/Triggers\";\nimport { ListOfValues } from \"./ListOfValues\";\nimport { FieldType } from \"../input/FieldType\";\nimport { BlockImpl } from \"../blocks/BlockImpl\";\nimport { FieldData } from \"../blocks/FieldData\";\nimport { Context } from \"../application/Context\";\nimport { Statement } from \"../database/Statement\";\nimport { PopupWindow } from \"../popup/PopupWindow\";\nimport { Container } from \"../container/Container\";\nimport { Connection } from \"../database/Connection\";\nimport { PopupInstance } from \"../popup/PopupInstance\";\nimport { FieldDefinition } from \"../input/FieldDefinition\";\nimport { ApplicationImpl } from \"../application/ApplicationImpl\";\nimport { OnInit, AfterViewInit, Component } from \"@angular/core\";\nimport { FieldTriggerEvent, KeyTriggerEvent, SQLTriggerEvent } from \"../events/TriggerEvent\";\n\n\n@Component({\n    template:\n    `\n        <div class=\"lov\">\n        <table>\n            <tr>\n                <td class=\"lov-center\"><field class=\"lov-search\" size=\"15\" name=\"filter\" block=\"search\"></field></td>\n            </tr>\n\n            <tr class=\"lov-spacer\"></tr>\n\n            <tr *ngFor=\"let item of [].constructor(rows); let row = index\">\n                <td><field class=\"lov-result\" size=\"{{size}}\" name=\"description\" row=\"{{row}}\" block=\"result\"></field></td>\n            </tr>\n\n            <tr class=\"lov-spacer\"></tr>\n        </table>\n        </div>\n    `,\n    styles:[\n        `\n            .lov-spacer\n            {\n                height: 8px;\n            }\n\n            .lov-center\n            {\n                border: none;\n                display: flex;\n                justify-content: center;\n            }\n        `\n    ]\n})\n\n\nexport class ListOfValuesImpl implements Popup, OnInit, AfterViewInit\n{\n    private fetch:number;\n    private filter:Field;\n    private description:Field;\n    private lov:ListOfValues;\n\n    private last:string = \"\";\n    private minlen:number = 0;\n    private prefix:string = \"\";\n    private postfix:string = \"\";\n    private wait:boolean = false;\n\n    private win:PopupWindow;\n    private iblock:BlockImpl;\n    private sblock:BlockImpl;\n    private rblock:BlockImpl;\n    private app:ApplicationImpl;\n\n    public rows:    number = 10;\n    public size:    number = 20;\n    public top:     string = null;\n    public left:    string = null;\n    public width:   string = null;\n    public height:  string = null;\n    public title:   string = null;\n\n\n    public static show(app:ApplicationImpl, impl:BlockImpl[], lov:ListOfValues)\n    {\n        let pinst:PopupInstance = new PopupInstance();\n        pinst.display(app,ListOfValuesImpl);\n\n        let lovwin:ListOfValuesImpl = pinst.popup() as ListOfValuesImpl;\n\n        lovwin.setDefinition(lov);\n        lovwin.setBlockImpl(impl);\n    }\n\n\n    constructor(ctx:Context)\n    {\n        this.app = ctx.app[\"_impl_\"];\n    }\n\n\n    public setDefinition(lov:ListOfValues) : void\n    {\n        this.lov = lov;\n        this.title = lov.title;\n        this.width = lov.width;\n        this.height = lov.height;\n\n        this.rows = lov.rows ? lov.rows : 12;\n        this.fetch = lov.rows ? lov.rows : 12;\n\n        if (this.size == null) this.size = 25;\n\n        let width:number = this.size*12;\n        let height:number = this.rows*28+16;\n\n        if (this.width == null) this.width = width+\"px\";\n        if (this.height == null) this.height = height+\"px\";\n\n        this.win.title = this.title;\n        this.win.width = this.width;\n        this.win.height = this.height;\n\n        if (this.lov.minlen != null) this.minlen = this.lov.minlen;\n        if (this.lov.prefix != null) this.prefix = this.lov.prefix;\n        if (this.lov.postfix != null) this.postfix = this.lov.postfix;\n    }\n\n\n    public setBlockImpl(impl:BlockImpl[]) : void\n    {\n        this.iblock = impl[0];\n        this.sblock = impl[1];\n        this.rblock = impl[2];\n    }\n\n\n    public close(_cancel: boolean): void\n    {\n        this.app.enable();\n        this.win.closeWindow();\n        this.app.getCurrentForm()?.focus();\n    }\n\n\n    public setWin(win: PopupWindow): void\n    {\n        this.win = win;\n    }\n\n\n    public ngOnInit(): void\n    {\n        this.app.disable();\n        this.app.setContainer();\n    }\n\n\n    public ngAfterViewInit(): void\n    {\n        let container:Container = this.app.getContainer();\n        container.finish();\n\n        this.sblock.setFields(container.getBlock(\"search\").fields);\n        this.rblock.setFields(container.getBlock(\"result\").fields);\n\n        this.rblock.usage = {query: true};\n\n        container.getBlock(\"search\").records.forEach((rec) =>\n        {\n            this.sblock.addRecord(new Record(rec.row,rec.fields,rec.index));\n\n            this.filter = this.sblock.getField(rec.row,\"filter\");\n            let filtdef:FieldDefinition = {name: \"filter\", type: FieldType.text};\n\n            if (this.lov.case != null) filtdef.case = this.lov.case;\n            this.filter.setDefinition(filtdef,true);\n            this.filter.enable(false);\n\n        })\n\n        let fielddef:Map<string,FieldDefinition> = new Map<string,FieldDefinition>();\n        let descdef:FieldDefinition = {name: \"description\", type: FieldType.text, fieldoptions: {update: false}};\n\n        fielddef.set(\"description\",descdef);\n\n        container.getBlock(\"result\").records.forEach((rec) =>\n        {\n            this.rblock.addRecord(new Record(rec.row,rec.fields,rec.index));\n            this.description = this.rblock.getField(rec.row,\"description\");\n\n            this.description.setDefinition(descdef,true);\n            this.description.enable(true);\n        });\n\n        let conn:Connection = this.app.appstate.connection;\n        let table:Table = new Table(conn,{name: \"none\"},null,[],null,this.fetch);\n\n        this.rblock.setApplication(this.app);\n        this.rblock.data = new FieldData(this.rblock,table,[\"description\"],fielddef);\n\n        this.app.dropContainer();\n\n        let keys:keymap[] =\n        [\n            keymap.enter,\n            keymap.escape,\n            keymap.nextrecord,\n            keymap.prevrecord,\n            keymap.nextfield,\n            keymap.prevfield\n        ];\n\n        this.sblock.addKeyTrigger(this,this.onkey,keys);\n        this.rblock.addKeyTrigger(this,this.onkey,keys);\n\n        this.sblock.addTrigger(this,this.search,Trigger.Typing);\n        this.rblock.addTrigger(this,this.prequery,Trigger.PreQuery);\n        this.rblock.addTrigger(this,this.onMouse,Trigger.MouseDoubleClick);\n\n        this.rblock.navigable = false;\n\n        this.filter.focus();\n        this.filter.value = this.lov.value;\n\n        if (this.lov.autoquery)\n        {\n            this.last = \" \";\n            this.search(this.filter.value);\n        }\n    }\n\n\n    private async search(_event:FieldTriggerEvent) : Promise<boolean>\n    {\n        this.execute();\n        return(true);\n    }\n\n\n    private async execute() : Promise<void>\n    {\n        if (this.wait)\n        {\n            setTimeout(() => {this.execute();},200);\n            return;\n        }\n\n        if (this.filter.value == this.last)\n            return;\n\n        this.wait = true;\n        this.last = this.filter.value;\n        if (this.last == null) this.last = \"\";\n\n        if (this.last.length < this.minlen) this.rblock.clear();\n        else                                await this.rblock.keyexeqry();\n\n        this.wait = false;\n    }\n\n\n    private async prequery(event:SQLTriggerEvent) : Promise<boolean>\n    {\n        let stmt:Statement = new Statement(this.lov.sql);\n\n        stmt.cursor = event.stmt.cursor;\n\n        if (this.lov.bindvalues != null)\n            this.lov.bindvalues.forEach((bv) => {stmt.bind(bv.name,bv.value,bv.type)});\n\n        let filter:string = this.filter.value;\n\n        if (this.lov.modfunc != null)\n            filter = this.lov.modfunc(this.filter.value);\n\n        if (filter == null) filter = \"\";\n        stmt.bind(\"filter\",this.prefix+filter+this.postfix);\n\n        event.stmt = stmt;\n        return(true);\n    }\n\n\n    public async onMouse(event:FieldTriggerEvent) : Promise<boolean>\n    {\n        this.picked(event.record);\n        return(true);\n    }\n\n\n    public async onkey(event:KeyTriggerEvent) : Promise<boolean>\n    {\n        if (event.type == Trigger.Key && event.field == \"filter\")\n        {\n            if (event.key == keymap.prevfield)\n                event.event.preventDefault();\n\n            if (event.key == keymap.nextfield || event.key == keymap.nextrecord)\n            {\n                this.rblock.navigable = true;\n                this.rblock.focus(0);\n            }\n        }\n\n        if (event.type == Trigger.Key && event.field == \"description\")\n        {\n            if (event.key == keymap.nextfield || event.key == keymap.prevfield)\n            {\n                this.sblock.focus();\n                event.event.preventDefault();\n                this.rblock.navigable = false;\n            }\n        }\n\n        if (event.type == Trigger.Key && event.key == keymap.escape)\n            this.close(false);\n\n        if (event.type == Trigger.Key && event.key == keymap.enter)\n        {\n            let record:number = -1;\n\n            if (event.field == \"filter\" && this.rblock.fetched == 1)\n                record = 0;\n\n            if (event.field == \"description\")\n                record = event.record;\n\n            if (record >= 0) this.picked(record);\n        }\n\n        return(true);\n    }\n\n\n    private picked(record:number) : void\n    {\n        this.lov.fieldmap.forEach((col,fld) =>\n        {\n            let val:any = this.rblock.getValue(record,fld);\n            this.iblock.setValue(this.iblock.record,col,val);\n        });\n\n        this.close(false);\n    }\n}","import { Key } from \"./Key\";\nimport { Block } from \"./Block\";\nimport { Field } from \"../input/Field\";\nimport { Utils } from \"../utils/Utils\";\nimport { FieldData } from \"./FieldData\";\nimport { keymap } from \"../keymap/KeyMap\";\nimport { FormImpl } from \"../forms/FormImpl\";\nimport { FieldType } from \"../input/FieldType\";\nimport { Record, RecordState } from \"./Record\";\nimport { FormState } from \"../forms/FormState\";\nimport { DatePicker } from \"../dates/DatePicker\";\nimport { MessageBox } from \"../popup/MessageBox\";\nimport { MasterDetail } from \"../forms/MasterDetail\";\nimport { SQL, Statement } from \"../database/Statement\";\nimport { FieldInstance } from \"../input/FieldInstance\";\nimport { Trigger, Triggers } from \"../events/Triggers\";\nimport { ListOfValues } from \"../listval/ListOfValues\";\nimport { NameValuePair } from \"../utils/NameValuePair\";\nimport { DatabaseUsage } from \"../database/DatabaseUsage\";\nimport { FieldDefinition } from \"../input/FieldDefinition\";\nimport { TriggerFunction } from \"../events/TriggerFunction\";\nimport { TableDefinition } from \"../database/TableDefinition\";\nimport { LOVDefinition } from \"../annotations/LOVDefinitions\";\nimport { ListOfValuesImpl } from \"../listval/ListOfValuesImpl\";\nimport { ApplicationImpl } from \"../application/ApplicationImpl\";\nimport { ListOfValuesFunction } from \"../listval/ListOfValuesFunction\";\nimport { FieldTriggerEvent, KeyTriggerEvent, Origin, SQLTriggerEvent, TriggerEvent } from \"../events/TriggerEvent\";\n\n\nexport class BlockImpl\n{\n    private name$:string;\n    private alias$:string;\n    private row$:number = 0;\n    private data$:FieldData;\n    private offset:number = 0;\n    private app:ApplicationImpl;\n    private field$:FieldInstance;\n    private form$:FormImpl = null;\n    private ready$:boolean = false;\n    private dbusage$:DatabaseUsage;\n    private records$:Record[] = [];\n    private querying$:boolean = false;\n    private disabled$:boolean = false;\n    private navigable$:boolean = true;\n    private masterdetail:MasterDetail;\n    private lastqry:NameValuePair[] = [];\n    private fields$:FieldInstance[] = [];\n    private lovs:Map<string,LOVDefinition>;\n    private idlovs:Map<string,LOVDefinition>;\n    private triggers:Triggers = new Triggers();\n    private state:FormState = FormState.normal;\n    private fieldidx$:Map<string,FieldInstance> = new Map<string,FieldInstance>();\n\n\n    constructor(public block?:Block)\n    // Can be used as standalone (null)\n    {\n        this.dbusage$ =\n        {\n            query: false,\n            update: true,\n            insert: false,\n            delete: false\n        };\n\n        if (block != null)\n        {\n            this.name$ = block.constructor.name;\n            if (this.name$ == \"Block\") this.name$ = \"anonymous\";\n        }\n    }\n\n\n    public get name() : string\n    {\n        return(this.name$);\n    }\n\n    public set alias(alias:string)\n    {\n        this.alias$ = alias;\n    }\n\n\n    public get alias() : string\n    {\n        return(this.alias$);\n    }\n\n\n    public get table() : TableDefinition\n    {\n        return(this.data?.tabdef);\n    }\n\n\n    public set row(row:number)\n    {\n        this.row$ = row;\n    }\n\n\n    public get row() : number\n    {\n        return(this.row$);\n    }\n\n\n    public exists(record:number) : boolean\n    {\n        if (+record < +this.data.rows) return(true);\n        return(false);\n    }\n\n\n    public displayed(record:number) : boolean\n    {\n        if (+record < +this.offset) return(false);\n        if (+record > +this.sum(this.offset,this.rows)) return(false);\n\n        let row:number = +record - +this.offset;\n        let state:RecordState = this.records[+row].state;\n\n        if (state == RecordState.na || state == RecordState.qmode)\n            return(false);\n\n        return(true);\n    }\n\n\n    public get rows() : number\n    {\n        return(this.records$.length);\n    }\n\n\n    public database() : boolean\n    {\n        return(this.data?.database);\n    }\n\n\n    public get datarows() : number\n    {\n        if (this.data == null) return(0);\n        return(this.data.rows);\n    }\n\n\n    public get columns() : string[]\n    {\n        if (this.data == null) return(null);\n        else return(this.data.columns);\n    }\n\n\n    public get ready()\n    {\n        return(this.ready$);\n    }\n\n\n    public set ready(ready:boolean)\n    {\n        this.ready$ = ready;\n        let rec:Record = this.getRecord(0);\n\n        if (rec != null)\n        {\n            rec.enable(true);\n            rec.current = true;\n        }\n    }\n\n\n    public get navigable()\n    {\n        return(this.navigable$);\n    }\n\n\n    public set navigable(navigable:boolean)\n    {\n        this.navigable$ = navigable;\n    }\n\n\n    public get record() : number\n    {\n        return(this.sum(this.row,this.offset));\n    }\n\n\n    public get fetched() : number\n    {\n        if (this.data == null) return(0);\n        return(this.data.fetched);\n    }\n\n\n    public get field() : FieldInstance\n    {\n        return(this.field$);\n    }\n\n\n    public get fields() : string[]\n    {\n        if (this.data == null) return(null);\n        else return(this.data.fields);\n    }\n\n\n    public get clazz() : string\n    {\n        if (this.block == null) return(null);\n        return(this.block.constructor.name.toLowerCase());\n    }\n\n\n    public get data() : FieldData\n    {\n        return(this.data$);\n    }\n\n\n    public set data(data:FieldData)\n    {\n        this.data$ = data;\n    }\n\n\n    public set form(form:FormImpl)\n    {\n        this.form$ = form;\n    }\n\n\n    public get form() : FormImpl\n    {\n        return(this.form$);\n    }\n\n\n    public setFieldDefinition(def:FieldDefinition) : boolean\n    {\n        let inst:FieldInstance = this.fieldidx$.get(def.name);\n\n        if (inst != null)\n        {\n            let fields:FieldInstance[] = inst.parent.fields;\n            let cfields:FieldInstance[] = inst.parent.cfields;\n\n            fields.forEach((fld) => {if (fld.id == inst.id) fld.definition = def;})\n            cfields.forEach((fld) => {if (fld.id == inst.id) fld.definition = def;})\n\n            return(true);\n        }\n\n        return(false);\n    }\n\n\n    public setPossibleValues(field:string, values:Set<any>|Map<string,any>, enforce:boolean) : boolean\n    {\n        let inst:FieldInstance = this.fieldidx$.get(field);\n\n        if (inst != null)\n        {\n            let fields:FieldInstance[] = inst.parent.fields;\n            let cfields:FieldInstance[] = inst.parent.cfields;\n\n            fields.forEach((fld) => {if (fld.id == inst.id) fld.setPossibleValues(values, enforce);})\n            cfields.forEach((fld) => {if (fld.id == inst.id) fld.setPossibleValues(values, enforce);})\n\n            return(true);\n        }\n\n        return(false);\n    }\n\n\n    public setFields(fields:FieldInstance[])\n    {\n        this.fields$ = fields;\n\n        fields.forEach((inst) =>\n        {\n            let name:string = inst.name;\n\n            if (inst.id != null && inst.id.length > 0)\n                name += \".\"+inst.id;\n\n            this.fieldidx$.set(name,inst);\n        });\n    }\n\n\n    public setMasterDetail(md:MasterDetail) : void\n    {\n        this.masterdetail = md;\n    }\n\n\n    public setListOfValues(lovs:Map<string,LOVDefinition>) : void\n    {\n        this.lovs = lovs;\n    }\n\n\n    public setIdListOfValues(lovs:Map<string,LOVDefinition>) : void\n    {\n        this.idlovs = lovs;\n    }\n\n\n    public addListOfValues(form:boolean, func:ListOfValuesFunction, field:string, id?:string) : void\n    {\n        let utils:Utils = new Utils();\n\n        let lovdef:LOVDefinition = null;\n        let params:string[] = utils.getParams(func);\n\n        if (!form) lovdef = {inst: this.block, func: func.name, params: params};\n        else       lovdef = {inst: this.form.form, func: func.name, params: params};\n\n        if (id == null) this.lovs.set(field.toLowerCase(),lovdef);\n        else            this.idlovs.set(field.toLowerCase(),lovdef);\n    }\n\n\n    public removeListOfValues(field:string, id?:string) : void\n    {\n        if (id == null) this.lovs.delete(field.toLowerCase());\n        else this.idlovs.delete(field.toLowerCase()+\".\"+id.toLowerCase());\n    }\n\n\n    public get querymode() : boolean\n    {\n        return(this.state == FormState.entqry);\n    }\n\n\n    public focus(row?:number) : void\n    {\n        if (!this.navigable) return;\n\n        if (row != null && row >= 0 && row < this.rows)\n        {\n            if (this.records[+row]?.enabled)\n            {\n                this.row = row;\n                this.records[+row].current = true;\n            }\n        }\n\n        let rec:Record = this.records[+this.row];\n\n        if (this.field != null)\n        {\n            let field:Field = rec.getField(this.field.name);\n            let inst:FieldInstance = rec.getFieldByGuid(this.field.name,this.field.guid);\n\n            if (inst?.focus()) return;\n            if (field?.focus()) return;\n        }\n\n        for(let i = 0; i < this.fields$.length; i++)\n        {\n            if (this.fields$[i].row == this.row)\n                if (this.fields$[i].focus()) return;\n        }\n\n        rec?.focus();\n    }\n\n\n    public getValue(record:number, column:string) : any\n    {\n        if (this.state == FormState.entqry)\n        {\n            let field:Field = this.records[0].getField(column);\n            return(field?.value);\n        }\n\n        if (this.data == null) return(null);\n        return(this.data.getValue(+record,column));\n    }\n\n\n    public async setValue(record:number, column:string, value:any) : Promise<boolean>\n    {\n        if (this.data == null) return(false);\n\n        if (this.state == FormState.entqry)\n        {\n            let field:Field = this.records[0].getField(column);\n            if (field != null) field.value = value;\n            return(true);\n        }\n\n        let previous:any = this.data.getValue(+record,column);\n\n        if (!await this.lockrecord(record,column))\n            return(false);\n\n        if (!this.data.setValue(+record,column,value))\n            return(false);\n\n        this.data.setValidated(record,column);\n\n        let trgevent:FieldTriggerEvent = new FieldTriggerEvent(this.alias,column,null,+record,value,previous);\n        this.invokeFieldTriggers(Trigger.PostChange,column,trgevent);\n\n        if (+record >= +this.offset && +record < this.sum(this.offset,this.rows))\n        {\n            let field:Field = this.records[record-this.offset].getField(column);\n            if (field != null) field.value = value;\n        }\n\n        if (record == this.record && this.masterdetail != null && value != previous)\n            this.masterdetail.sync(this,column);\n    }\n\n\n    public get records() : Record[]\n    {\n        return(this.records$);\n    }\n\n\n    public getRecord(row:number) : Record\n    {\n        if (+row < +this.records$.length)\n            return(this.records$[+row]);\n\n        return(null);\n    }\n\n\n    public getField(row:number, name:string) : Field\n    {\n        return(this.records[+row]?.getField(name));\n    }\n\n\n    public addRecord(record:Record)\n    {\n        this.records.push(record);\n        record.fields.forEach((inst) => {inst.block = this});\n\n        if (this.records.length == 1)\n        {\n            record.current = true;\n            this.field$ = record.fields[0].getFirstInstance();\n        }\n    }\n\n\n    public set usage(usage:DatabaseUsage)\n    {\n        this.dbusage$ = usage;\n    }\n\n\n    public get usage() : DatabaseUsage\n    {\n        return(this.dbusage$);\n    }\n\n\n    public setApplication(app:ApplicationImpl) : void\n    {\n        this.app = app;\n    }\n\n\n    public async sendkey(event:any,key:keymap) : Promise<boolean>\n    {\n        if (event == null) event = new KeyTriggerEvent(Origin.Block,this.alias,null,key,null);\n        return(await this.onEvent(event,this.field,\"key\",key));\n    }\n\n\n    public get searchfilter() : NameValuePair[]\n    {\n        if (this.data == null) return(null);\n        return(this.data.searchfilter);\n    }\n\n\n    public set searchfilter(filter:NameValuePair[])\n    {\n        if (this.data != null)\n            this.data.searchfilter = filter;\n    }\n\n\n    public removeLocks() : void\n    {\n        if (this.data != null)\n            this.data.removeLocks();\n    }\n\n\n    public async execute(stmt:Statement, firstrow?:boolean, firstcolumn?:boolean) : Promise<any>\n    {\n        if (stmt == null) return(null);\n\n        let errors:string[] = stmt.validate();\n\n        if (errors.length > 0)\n        {\n            let msg:string = \"<table>\";\n            errors.forEach((err) => {msg += \"<tr><td>\"+err+\"</td></tr>\"});\n            msg += \"</table>\";\n\n            this.alert(msg,\"Execute\");\n            return(null);\n        }\n\n        let response:any = await this.app.appstate.connection.invokestmt(stmt);\n\n        if (response[\"status\"] == \"failed\")\n            this.alert(JSON.stringify(response),\"Execute SQL Failed\");\n\n        let rows:any[] = response[\"rows\"];\n\n        if (rows == null)\n        {\n            if (firstcolumn) return(null);\n            return([]);\n        }\n\n        if (!firstrow) return(rows);\n\n        let row:any = [];\n        if (rows.length > 0) row = rows[0];\n\n        if (!firstcolumn) return(row);\n\n        let columns:string[] = Object.keys(row);\n        if (columns.length == 0) return(null);\n\n        return(row[columns[0]]);\n    }\n\n\n    public showDatePicker(field:string, row?:number) : void\n    {\n        if (row == null || row == -1)\n            row = this.row;\n\n        let record:number = this.sum(this.offset,row);\n\n        if (record >= this.records.length)\n            return;\n\n        if (this.records[record].state == RecordState.na)\n            return;\n\n        if (this.records[record].state == RecordState.update && !this.usage.update)\n            return;\n\n        let fld:Field = this.records[+record].getField(field);\n\n        let value:Date = new Date();\n        if (fld != null) value = fld.value;\n\n        DatePicker.show(this.app,this,record,field,value);\n    }\n\n\n    public showListOfValues(field:string, id?:string, row?:number) : void\n    {\n        if (field == null)\n            return;\n\n        if (row == null || row == -1)\n            row = this.row;\n\n        if (!this.app.connected) return;\n        if (!this.records[+row].enabled) return;\n        if (this.records[+row].state == RecordState.na) return;\n\n        let ldef:LOVDefinition = null;\n        field = field.trim().toLowerCase();\n\n        if (this.idlovs != null && id != null && id.trim().length > 0)\n        {\n            id = id.trim().toLowerCase();\n            ldef = this.idlovs.get(field+\".\"+id);\n        }\n        else if (this.lovs != null)\n        {\n            ldef = this.lovs.get(field);\n        }\n\n        if (ldef != null)\n        {\n            let lov:ListOfValues = null;\n            let record:number = this.sum(row,this.offset);\n\n            if (ldef.params.length == 0) lov = ldef.inst[ldef.func]();\n            else                         lov = ldef.inst[ldef.func](record);\n\n            let blocks:BlockImpl[] = [this,new BlockImpl(),new BlockImpl()];\n\n            if (!lov.force && this.records[+row].getField(field)?.readonly)\n                return;\n\n            ListOfValuesImpl.show(this.app,blocks,lov);\n        }\n    }\n\n\n    private async keyinsert(after:boolean) : Promise<boolean>\n    {\n        if (this.data == null) return(false);\n        if (!this.usage.insert) return(false);\n\n        if (this.data.database && !this.app.connected)\n            return(false);\n\n        return(await this.insert(after));\n    }\n\n\n    private async keydelete() : Promise<boolean>\n    {\n        if (this.data == null) return(false);\n        if (this.row >= this.data.rows) return(true);\n        if (this.state == FormState.entqry) return(true);\n\n        let rec:Record = this.records[+this.row];\n        if (rec.state == RecordState.na) return(true);\n\n        if (this.data.database && !this.app.connected)\n            return(false);\n\n        if (!this.usage.delete && rec.state != RecordState.insert)\n            return(false);\n\n        return(await this.delete());\n    }\n\n\n    public async keyentqry(force?:boolean) : Promise<boolean>\n    {\n        if (force == null) force = false;\n\n        if (!force)\n        {\n            if (this.data == null) return(false);\n            if (!this.usage.query) return(false);\n\n            if (this.data.database && !this.app.connected)\n                return(false);\n        }\n\n        let event:KeyTriggerEvent = new KeyTriggerEvent(Origin.Block,this.alias,null,keymap.enterquery,null);\n        this.invokeTriggers(Trigger.Key,event,keymap.enterquery);\n\n        if (!await this.enterqry())\n            return(false);\n\n        if (this.masterdetail != null)\n            this.masterdetail.enterquery(this);\n\n        this.focus(0);\n        return(true);\n    }\n\n\n    public async keyexeqry(force?:boolean) : Promise<boolean>\n    {\n        if (this.masterdetail != null)\n        {\n            if (this.masterdetail.master != null && this.masterdetail.master != this)\n                return(this.masterdetail.master.keyexeqry(force));\n\n            if (this.state != FormState.entqry)\n                this.masterdetail.clearfilters(this);\n        }\n\n        if (force == null) force = false;\n\n        if (!force)\n        {\n            if (this.data == null || !this.usage.query)\n            {\n                if (this.masterdetail != null)\n                    this.masterdetail.master = null;\n\n                return(false);\n            }\n\n            if (this.data.database && !this.app.connected)\n            {\n                if (this.masterdetail != null)\n                    this.masterdetail.master = null;\n\n                return(false);\n            }\n        }\n\n        let subquery:SQL = null;\n\n        if (this.masterdetail != null)\n        {\n            subquery = await this.masterdetail.getDetailQuery();\n            this.masterdetail.querydetails(this,true,false);\n        }\n\n        let status = await this.executeqry(subquery);\n        this.focus(0);\n\n        return(status);\n    }\n\n\n    public cancelqry() : void\n    {\n        this.records[0].current = true;\n\n        this.records[0].clear();\n        this.records[0].disable();\n\n        this.state = FormState.normal;\n        this.records[0].state = RecordState.na;\n\n        this.records[0].enable(true);\n    }\n\n\n    public async enterqry() : Promise<boolean>\n    {\n        if (this.data.database && !this.app.connected)\n            return(false);\n\n        if (!await this.validate())\n            return(false);\n\n        await this.clear();\n\n        this.row = 0;\n\n        this.searchfilter = [];\n        this.state = FormState.entqry;\n        this.records[0].state = RecordState.qmode;\n\n        this.records[0].enable(false);\n        return(true);\n    }\n\n\n    public get querying() : boolean\n    {\n        return(this.querying$);\n    }\n\n\n    // Public because of master-detail. Dont call direct\n    public async executeqry(subquery?:SQL) : Promise<boolean>\n    {\n        if (this.data.database && !this.app.connected)\n            return(false);\n\n        if (!await this.validate())\n            return(false);\n\n        let keys:Key[] = [];\n        let fields:Field[] = [];\n\n        if (this.querying$)\n        {\n            if (this.masterdetail != null)\n                this.masterdetail.done(this,false);\n\n            return(false);\n        }\n\n        this.querying$ = true;\n\n        if (this.state == FormState.entqry)\n        {\n            fields = this.records[0].fields;\n            this.records[0].disable();\n        }\n\n        if (this.masterdetail != null)\n            keys = this.masterdetail.getKeys(this);\n\n        let stmt:Statement = this.data.parseQuery(keys,subquery,fields);\n        this.lastqry = this.searchfilter;\n\n        await this.clear();\n        let errors:string[] = stmt.validate();\n\n        if (errors.length > 0)\n        {\n            let msg:string = \"<table>\";\n            errors.forEach((err) => {msg += \"<tr><td>\"+err+\"</td></tr>\"});\n            msg += \"</table>\";\n\n            this.alert(msg,\"Query Condition\");\n\n            this.querying$ = false;\n\n            if (this.masterdetail != null)\n                this.masterdetail.done(this,false);\n\n            return(false);\n        }\n\n        let event:SQLTriggerEvent = new SQLTriggerEvent(this.alias,0,stmt);\n        if (!await this.invokeTriggers(Trigger.PreQuery,event))\n        {\n            this.querying$ = false;\n\n            if (this.masterdetail != null)\n                this.masterdetail.done(this,false);\n\n            return(false);\n        }\n\n        this.state = FormState.exeqry;\n\n        stmt = event.stmt; // could be replaced by trigger\n        let response:any = await this.data.executequery(stmt);\n\n        if (response[\"status\"] == \"failed\")\n        {\n            this.alert(JSON.stringify(response),\"Database Query\");\n\n            this.querying$ = false;\n\n            if (this.masterdetail != null)\n                this.masterdetail.done(this,false);\n\n            this.state = FormState.normal;\n            return(false);\n        }\n\n        if (this.masterdetail != null)\n            this.masterdetail.querydetails(this,false,true);\n\n        this.row = 0;\n        await this.display(0);\n\n        this.querying$ = false;\n        this.state = FormState.normal;\n        this.records[0].current = true;\n\n        if (this.masterdetail != null)\n            this.masterdetail.done(this,true);\n\n        return(true);\n    }\n\n\n    public async createControlRecord() : Promise<number>\n    {\n        if (!this.data.database)\n        {\n            if (!this.data.insert(this.sum(this.row,this.offset,1)))\n                return(-1);\n\n            this.records[+this.row].state = RecordState.update;\n            this.records[+this.row].enable(false);\n            return(this.record);\n        }\n\n        return(-1);\n    }\n\n\n    public async insert(after:boolean) : Promise<boolean>\n    {\n        if (this.data.database && !this.app.connected)\n            return(false);\n\n        if (!await this.validate())\n            return(false);\n\n        let off:number = after ? 1 : 0;\n\n        if (!this.data.insert(this.sum(this.row,this.offset,off)))\n            return(false);\n\n        if (this.masterdetail != null)\n            this.masterdetail.cleardetails(this);\n\n        // Is first row\n        if (this.data.rows == 1)\n        {\n            await this.display(this.offset);\n\n            if (this.form == null) this.disableall();\n            else                   this.form.disableall();\n\n            this.records[0].enable(false);\n\n            this.focus(0);\n            return(true);\n        }\n\n        let scroll:number = 0;\n        let row:number = this.row;\n\n        if (after && this.row == this.rows - 1)\n            scroll = 1;\n\n        if (!after && this.row == 0)\n            scroll = -1;\n\n        let move:number = 0;\n        if (scroll == 0) move = after ? 1 : 0;\n\n        await this.display(this.sum(this.offset,scroll));\n\n        row = this.sum(row,move);\n        let rec:Record = this.records[+row];\n\n        rec.current = true;\n\n        if (this.form == null) this.disableall();\n        else                   this.form.disableall();\n\n        this.records[+row].enable(false);\n\n        this.focus(row);\n        return(true);\n    }\n\n\n    public async delete() : Promise<boolean>\n    {\n        if (this.data == null) return(false);\n\n        if (this.data.database && !this.app.connected)\n            return(false);\n\n        let record:number = this.sum(this.row,this.offset);\n\n        // Lock the record\n        if (!this.data.locked(record))\n        {\n            let response:any = await this.data.lock(record);\n\n            if (response[\"status\"] == \"failed\")\n            {\n                this.alert(response[\"message\"],\"Lock Failure\")\n                return(false);\n            }\n        }\n\n        let response:any = await this.data.delete(this.sum(this.row,this.offset));\n\n        if (response[\"status\"] == \"failed\")\n        {\n            this.alert(JSON.stringify(response),\"Delete Failed\")\n            return(false);\n        }\n\n        if (this.masterdetail != null)\n            this.masterdetail.cleardetails(this);\n\n        // current view is not full\n        if (+this.data.rows - this.offset < this.rows)\n        {\n            this.offset--;\n            if (this.offset < 0) this.offset = 0;\n        }\n\n        let row:number = this.row;\n        await this.display(this.offset);\n\n        // no records at current position\n        if (this.sum(row,this.offset) >= this.data.rows)\n            row = this.data.rows - this.offset - 1;\n\n        if (row < 0) this.row = 0;\n\n        this.focus(row);\n\n        if (this.masterdetail != null)\n            this.masterdetail.querydetails(this,true,true);\n    }\n\n\n    private async lockrecord(record:number, field:string) : Promise<boolean>\n    {\n        if (this.data == null) return(true);\n        if (this.state != FormState.normal) return(true);\n        if (!this.data.databasecolumn(field)) return(true);\n\n        if (this.data.locked(record))\n            return(true);\n\n        let trgevent:TriggerEvent = new TriggerEvent(this.alias,record,null);\n\n        if (!await this.invokeTriggers(Trigger.Lock,trgevent))\n            return(false);\n\n        let response:any = await this.data.lock(record);\n\n        if (response[\"status\"] == \"failed\")\n        {\n            let row:number = +record - +this.offset;\n            this.alert(response[\"message\"],\"Lock Failure\")\n            let value:any = this.getValue(record,field);\n            let ffield:Field = this.records[+row].getField(field);\n            if (ffield != null) ffield.value = value;\n            return(false);\n        }\n\n        return(true);\n    }\n\n\n    public async validate() : Promise<boolean>\n    {\n        if (!await this.validatefield(this.field))\n            return(false);\n\n        return(await this.validaterecord());\n    }\n\n\n    private async validatefield(field:FieldInstance) : Promise<boolean>\n    {\n        if (field == null) return(true);\n        if (this.data == null) return(true);\n        if (this.row >= this.data.rows) return(true);\n        if (this.state != FormState.normal) return(true);\n        if (this.records[+this.row].state == RecordState.na) return(true);\n\n        let previous:any = this.data.getValue(this.sum(field.row,this.offset),field.name);\n\n        // Nothing has changed\n        if (field.value == previous) return(this.data.getValidated(this.sum(field.row,this.offset),field.name));\n\n        if (!await this.lockrecord(this.sum(field.row,this.offset),field.name))\n            return(true);\n\n        if (!field.validate())\n        {\n            field.valid = false;\n            this.data.setValue(this.sum(field.row,this.offset),field.name,field.value);\n            return(false);\n        }\n\n        this.data.setValue(+field.row+this.offset,field.name,field.value);\n\n        let trgevent:FieldTriggerEvent = new FieldTriggerEvent(this.alias,field.name,field.id,this.sum(field.row,this.offset),field.value,previous,null);\n        if (!await this.invokeFieldTriggers(Trigger.WhenValidateField,field.name,trgevent))\n        {\n            field.valid = false;\n            return(false);\n        }\n\n        field.parent.valid = true;\n        this.data.setValidated(this.sum(field.row,this.offset),field.name);\n\n        if  (field.value != previous)\n        {\n            if (this.sum(field.row,this.offset) == this.record && this.masterdetail != null)\n                this.masterdetail.sync(this,field.name);\n\n            if (!await this.invokeFieldTriggers(Trigger.PostChange,field.name,trgevent))\n                return(false);\n\n            if (this.records[+this.row].state == RecordState.insert)\n            {\n                if (this.data.validated(this.record,true))\n                    this.validaterecord();\n            }\n        }\n\n        return(true);\n    }\n\n\n    private async validaterecord() : Promise<boolean>\n    {\n        if (this.data == null) return(true);\n        if (this.row >= this.data.rows) return(true);\n        if (this.state == FormState.entqry) return(true);\n\n        let rec:Record = this.records[+this.row];\n        if (rec.state == RecordState.na) return(true);\n\n        // Check fields is validated\n        if (!this.data.validated(this.record,true))\n        {\n            let cols:string[] = this.data.getNonValidated(this.record);\n            this.alert(\"The following columns are not valid:<br><br>\"+cols,\"Validate Record\");\n\n            cols.forEach((col) =>\n            {this.records[+this.record].getField(col).valid = false;});\n\n            return(false);\n        }\n\n        // Check record is validated\n        if (this.data.validated(this.record,false)) return(true);\n\n        let trgevent:TriggerEvent = new TriggerEvent(this.alias,this.record,null);\n\n        if (!await this.invokeTriggers(Trigger.WhenValidateRecord,trgevent))\n            return(false);\n\n        let insert:boolean = (rec.state == RecordState.insert);\n        let response:any = await this.data.setValidated(this.record);\n\n        if (response[\"status\"] == \"failed\")\n        {\n            let title:string = insert ? \"Insert\" : \"Update\";\n            this.alert(JSON.stringify(response),title+\" Failed\");\n            return(false);\n        }\n\n        if (insert)\n        {\n            if (this.form == null) this.enableall();\n            else                   this.form.enableall();\n        }\n\n        return(true);\n    }\n\n\n    public async clearblock()\n    {\n        await this.clear();\n\n        this.focus(0);\n        this.searchfilter = [];\n        if (this.data) this.data.clear();\n    }\n\n\n    public async clear()\n    {\n        if (this.rows == null) return;\n\n        this.field$ = this.fields$[0];\n\n        for(let r = 0; r < this.rows; r++)\n        {\n            this.records[+r].clear();\n            this.records[+r].disable();\n            this.records[+r].state = RecordState.na;\n        }\n\n        this.records[0].current = true;\n        this.records[0].state = RecordState.na;\n        if (!this.disabled$) this.records[0].enable(true);\n    }\n\n\n    public async disableall()\n    {\n        this.disabled$ = true;\n        for(let r = 0; r < this.rows; r++)\n            this.records[+r].disable();\n    }\n\n\n    public async enableall()\n    {\n        this.disabled$ = false;\n        for(let r = 0; r < this.rows; r++)\n        {\n            if (this.records[+r].state != RecordState.na)\n                this.records[+r].enable(false);\n        }\n    }\n\n\n    public async display(start:number) : Promise<void>\n    {\n        await this.clear();\n\n        this.offset = start;\n        if (this.data == null) return;\n\n        if (this.sum(this.offset,this.rows) > +this.data.rows)\n            this.offset = this.data.rows - this.rows;\n\n        if (this.offset < 0) this.offset = 0;\n\n        let columns:string[] = this.data.fields;\n        let rows:any[][] = this.data.get(this.offset,this.rows);\n\n        for(let r = 0; r < rows.length; r++)\n        {\n            let rec:Record = this.getRecord(r);\n            let state:RecordState = this.data.state(this.sum(this.offset,r));\n\n            for(let c = 0; c < rows[r].length; c++)\n            {\n                let field:Field = rec.getField(columns[c]);\n                if (field != null) field.value = rows[r][c];\n            }\n\n            if (state == RecordState.na)\n            {\n                let execs:Promise<boolean>[] = [];\n\n                for(let c = 0; c < rows[r].length; c++)\n                {\n                    let field:Field = rec.getField(columns[c]);\n\n                    let value:any = rows[r][c];\n                    let fname:string = columns[c];\n                    if (field != null) fname = field.name;\n\n                    let trgevent:FieldTriggerEvent = new FieldTriggerEvent(this.alias,fname,null,this.sum(r,this.offset),value,value);\n                    execs.push(this.invokeFieldTriggers(Trigger.PostChange,fname,trgevent));\n                }\n\n                execs.push(this.invokeTriggers(Trigger.PostChange, new TriggerEvent(this.alias,this.sum(r,this.offset))));\n                state = this.data.state(this.sum(this.offset,r),RecordState.update);\n\n                for (let i = 0; i < execs.length; i++) await execs[i];\n            }\n\n            rec.state = state;\n            if (!this.disabled$) rec.enable(false);\n        }\n    }\n\n\n    public addTrigger(instance:any, func:TriggerFunction, types:Trigger|Trigger[]) : void\n    {\n        this.triggers.addTrigger(instance,func,types)\n    }\n\n\n    public addKeyTrigger(instance:any, func:TriggerFunction, keys:keymap|keymap[]) : void\n    {\n        this.triggers.addTrigger(instance,func,Trigger.Key,null,keys)\n    }\n\n\n    public addFieldTrigger(instance:any, func:TriggerFunction, types:Trigger|Trigger[], fields:string|string[], keys?:keymap|keymap[]) : void\n    {\n        this.triggers.addTrigger(instance,func,types,fields,keys)\n    }\n\n\n    public async onEvent(event:any, field:FieldInstance, type:string, key?:keymap) : Promise<boolean>\n    {\n        let trgevent:TriggerEvent = null;\n        if (event == null) event = {type: type};\n        if (this.records.length == 0) return(true);\n\n        if (type == \"focus\")\n        {\n            this.field$ = field;\n\n            if (this.form != null)\n                this.form.block = this;\n\n            if (this.state == FormState.entqry)\n                return(true);\n\n            if (this.row != field.row)\n            {\n                if (!await this.validate())\n                {\n                    this.records[+this.row].current = true;\n                    this.field.focus();\n                    return(false);\n                }\n\n                let state:RecordState = this.records[field.row].state\n\n                if (this.masterdetail != null && state != RecordState.na)\n                    this.masterdetail.querydetails(this,true,true);\n            }\n\n            this.row = field.row;\n            this.records$[+field.row].current = true;\n\n            trgevent = new FieldTriggerEvent(this.alias,field.name,field.id,this.sum(field.row,this.offset),field.value,field.value,event);\n            return(await this.invokeFieldTriggers(Trigger.PreField,field.name,trgevent));\n        }\n\n        if (type == \"blur\")\n        {\n            if (this.state == FormState.entqry)\n                return(true);\n\n            trgevent = new FieldTriggerEvent(this.alias,field.name,field.id,this.sum(field.row,this.offset),field.value,field.value,event);\n            return(await this.invokeFieldTriggers(Trigger.PostField,field.name,trgevent));\n        }\n\n        if (type == \"fchange\")\n        {\n            if (this.state == FormState.entqry || this.data == null)\n                return(true);\n\n            return(await this.lockrecord(this.sum(field.row,this.offset),field.name));\n        }\n\n        if (type == \"cchange\")\n        {\n            if (this.state == FormState.entqry)\n                return(true);\n\n            let previous:any = this.getValue(this.sum(field.row,this.offset),field.name);\n            trgevent = new FieldTriggerEvent(this.alias,field.name,field.id,this.sum(field.row,this.offset),field.value,previous,event);\n\n            return(this.invokeFieldTriggers(Trigger.Typing,field.name,trgevent));\n        }\n\n        if (type == \"change\")\n        {\n            // Current row field firing after move\n            if (field.row != this.row) return(true);\n\n            // This will fire appropiate triggers\n            if (!await this.validatefield(field))\n            {\n                this.field.focus();\n                return(false);\n            }\n\n            return(true);\n        }\n\n        // Enter\n        if (type == \"key\" && key == keymap.enter)\n        {\n            if (this.state == FormState.entqry)\n                key = keymap.executequery;\n\n            if (this.records[+this.row]?.state == RecordState.insert)\n            {\n                if (!await this.validaterecord())\n                    return(false);\n            }\n\n            if (this.records[+this.row]?.state == RecordState.update)\n            {\n                if (!await this.validaterecord())\n                    return(false);\n            }\n        }\n\n        // Cancel\n        if (type == \"key\" && key == keymap.escape)\n        {\n            if (this.state == FormState.entqry)\n            {\n                this.cancelqry();\n                this.focus();\n            }\n\n            if (this.records[+this.row]?.state == RecordState.insert)\n            {\n                this.enableall();\n                key = keymap.delete;\n            }\n        }\n\n        // ListOfValues / Datepicker\n        if (type == \"key\" && key == keymap.listval)\n        {\n            if (event != null && event[\"preventDefault\"] != null)\n                event.preventDefault();\n\n            let type:FieldType = field.definition.type;\n            if (type == FieldType.date || type == FieldType.datetime)\n            {\n                if (!field.readonly)\n                    DatePicker.show(this.app,this,this.record,field.name,field.value);\n\n                return(true);\n            }\n\n            this.showListOfValues(field.name,field.id,this.row);\n            return(true);\n        }\n\n        // Enter query\n        if (type == \"key\" && key == keymap.enterquery)\n        {\n            if (this.state == FormState.entqry)\n            {\n                for (let i = 0; i < this.lastqry.length; i++)\n                {\n                    let nvp:NameValuePair = this.lastqry[i];\n                    await this.setValue(0,nvp.name,nvp.value);\n                }\n\n                return(true);\n            }\n\n            if (!await this.validate()) return(false);\n\n            if (!await this.keyentqry())\n            {\n                field.focus();\n                return(false);\n            }\n\n            trgevent = new KeyTriggerEvent(Origin.Block,this.alias,field,key,event);\n\n            return(await this.invokeTriggers(Trigger.Key,trgevent,key));\n        }\n\n        // Execute query\n        if (type == \"key\" && key == keymap.executequery)\n        {\n            if (!await this.validate()) return(false);\n            trgevent = new KeyTriggerEvent(Origin.Block,this.alias,field,key,event);\n\n            if (!await this.invokeTriggers(Trigger.Key,trgevent,key))\n                return(true);\n\n            return(await this.keyexeqry());\n        }\n\n        // Delete\n        if (type == \"key\" && key == keymap.delete)\n        {\n            if (event != null && event[\"preventDefault\"] != null)\n                event.preventDefault();\n\n            trgevent = new KeyTriggerEvent(Origin.Block,this.alias,field,key,event);\n\n            if (this.records[+this.row]?.state == RecordState.update)\n            {\n                if (!await this.invokeTriggers(Trigger.Key,trgevent,key))\n                    return(false);\n            }\n\n            return(await this.keydelete());\n        }\n\n        // Insert after\n        if (type == \"key\" && key == keymap.insertafter)\n        {\n            if (!await this.validate()) return(false);\n\n            trgevent = new KeyTriggerEvent(Origin.Block,this.alias,field,key,event);\n\n            if (!await this.invokeTriggers(Trigger.Key,trgevent,key))\n                return(true);\n\n            if (!await this.keyinsert(true))\n            {\n                field.focus();\n                return(false);\n            }\n\n            return(true);\n        }\n\n        // Insert before\n        if (type == \"key\" && key == keymap.insertbefore)\n        {\n            if (!await this.validate()) return(false);\n\n            trgevent = new KeyTriggerEvent(Origin.Block,this.alias,field,key,event);\n\n            if (!await this.invokeTriggers(Trigger.Key,trgevent,key))\n                return(true);\n\n            if (!await this.keyinsert(false))\n            {\n                field.focus();\n                return(false);\n            }\n\n            return(true);\n        }\n\n        // Next/Previous field\n        if (type == \"key\" && (key == keymap.nextfield || key == keymap.prevfield))\n        {\n            if (this.state != FormState.entqry && this.records[+this.row]?.state != RecordState.na)\n            {\n                let previous:any = this.data.getValue(this.sum(field.row,this.offset),field.name)\n\n                if (field.dirty)\n                {\n                    // ctrl-z doesn't refresh\n                    if (field.value == previous) field.parent.copy(field);\n                }\n\n                trgevent = new FieldTriggerEvent(this.alias,field.name,field.id,this.sum(field.row,this.offset),field.value,previous,event);\n\n                if (key == keymap.prevfield)\n                {\n                    if (!await this.invokeFieldTriggers(Trigger.KeyPrevField,field.name,trgevent,key))\n                        return(false);\n                }\n\n                if (key == keymap.nextfield)\n                {\n                    if (!await this.invokeFieldTriggers(Trigger.KeyNextField,field.name,trgevent,key))\n                        return(false);\n                }\n            }\n        }\n\n        // Next record\n        if (type == \"key\" && key == keymap.nextrecord)\n        {\n            if (!await this.validate())\n                return(false);\n\n            trgevent = new KeyTriggerEvent(Origin.Block,this.alias,field,key,event);\n\n            if (!await this.invokeTriggers(Trigger.Key,trgevent,key))\n                return(true);\n\n            let row:number = this.sum(field.row,1);\n            if (this.data == null) return(false);\n\n            if (+row >= +this.rows)\n            {\n                row = +this.rows - 1;\n                if (this.data == null) return(false);\n\n                let offset:number = this.sum(field.row,this.offset);\n                let fetched:number = await this.data.fetch(offset,1);\n\n                if (fetched == 0) return(false);\n                await this.display(this.sum(this.offset,1));\n            }\n\n            if (this.records[+row]?.enabled)\n            {\n                this.focus(row);\n\n                if (this.masterdetail != null)\n                    this.masterdetail.querydetails(this,true,true);\n            }\n\n            return(true);\n        }\n\n        // Previous record\n        if (type == \"key\" && key == keymap.prevrecord)\n        {\n            if (this.record == 0)\n                return(true);\n\n            if (!await this.validate())\n                return(false);\n\n            trgevent = new KeyTriggerEvent(Origin.Block,this.alias,field,key,event);\n\n            if (!await this.invokeTriggers(Trigger.Key,trgevent,key))\n                return(true);\n\n            let row:number = +field.row - 1;\n            if (this.data == null) return(false);\n\n            if (+row < 0)\n            {\n                row = 0;\n                await this.display(this.offset - 1);\n            }\n\n            this.focus(row);\n\n            if (this.masterdetail != null)\n                this.masterdetail.querydetails(this,true,true);\n\n            return(true);\n        }\n\n        // Page down\n        if (type == \"key\" && key == keymap.pagedown)\n        {\n            if (!await this.validate())\n                return(false);\n\n            trgevent = new KeyTriggerEvent(Origin.Block,this.alias,field,key,event);\n\n            if (!await this.invokeTriggers(Trigger.Key,trgevent,key))\n                return(true);\n\n            let offset:number = this.sum(this.offset,field.row);\n            let fetched:number = await this.data.fetch(offset,this.rows);\n\n            if (fetched == 0) return(false);\n\n            await this.display(this.sum(this.offset,this.rows));\n            this.focus();\n\n            if (this.masterdetail != null)\n                this.masterdetail.querydetails(this,true,true);\n\n            return(true);\n        }\n\n        // Page up\n        if (type == \"key\" && key == keymap.pageup)\n        {\n            if (this.record == 0)\n                return(true);\n\n            if (!await this.validate())\n                return(false);\n\n            trgevent = new KeyTriggerEvent(Origin.Block,this.alias,field,key,event);\n\n            if (!await this.invokeTriggers(Trigger.Key,trgevent,key))\n                return(true);\n\n            await this.display(+this.offset-this.rows);\n            this.focus();\n\n            if (this.masterdetail != null)\n                this.masterdetail.querydetails(this,true,true);\n\n            return(true);\n        }\n\n        // Next/Prev block\n        if (type == \"key\" && (key == keymap.prevblock || key == keymap.nextblock))\n        {\n            if (this.state != FormState.entqry && this.records[+this.row]?.state != RecordState.na)\n            {\n                if (!await this.validate())\n                    return(false);\n\n                trgevent = new FieldTriggerEvent(this.alias,field.name,field.id,this.sum(field.row,this.offset),field.value,null,event);\n\n                if (key == keymap.prevblock)\n                {\n                    if (!await this.invokeFieldTriggers(Trigger.KeyPrevBlock,field.name,trgevent,key))\n                        return(false);\n                }\n\n                if (key == keymap.nextblock)\n                {\n                    if (!await this.invokeFieldTriggers(Trigger.KeyNextBlock,field.name,trgevent,key))\n                        return(false);\n                }\n            }\n        }\n\n        if (type == \"key\" && key == keymap.clearblock)\n        {\n            trgevent = new KeyTriggerEvent(Origin.Block,this.alias,null,keymap.clearblock,null);\n            if (!await this.invokeTriggers(Trigger.Key,event,keymap.clearblock)) return(false);\n            this.clearblock();\n        }\n\n        if (type == \"key\" && key == keymap.clearform && this.form != null)\n            await this.form.onEvent(event,field,type,key);\n\n        if (type == \"key\" && key == keymap.prevfield && this.form != null)\n            await this.form.onEvent(event,field,type,key);\n\n        if (type == \"key\" && key == keymap.nextfield && this.form != null)\n            await this.form.onEvent(event,field,type,key);\n\n        if (type == \"key\" && key == keymap.prevblock && this.form != null)\n            await this.form.onEvent(event,field,type,key);\n\n        if (type == \"key\" && key == keymap.nextblock && this.form != null)\n            await this.form.onEvent(event,field,type,key);\n\n        if (type == \"key\")\n        {\n            if (event != null && event[\"preventDefault\"] != null)\n                event.preventDefault();\n\n            trgevent = new KeyTriggerEvent(Origin.Block,this.alias,field,key,event);\n            return(await this.invokeTriggers(Trigger.Key,trgevent,key));\n        }\n\n        if (type == \"click\")\n        {\n            trgevent = new FieldTriggerEvent(this.alias,field.name,field.id,this.sum(field.row,this.offset),field.value,field.value,event);\n            return(await this.invokeFieldTriggers(Trigger.MouseClick,field.name,trgevent,key));\n        }\n\n        if (type == \"dblclick\")\n        {\n            trgevent = new FieldTriggerEvent(this.alias,field.name,field.id,this.sum(field.row,this.offset),field.value,field.value,event);\n            return(await this.invokeFieldTriggers(Trigger.MouseDoubleClick,field.name,trgevent,key));\n        }\n\n        return(true);\n    }\n\n\n    public async invokeTriggers(type:Trigger, event:TriggerEvent, key?:keymap) : Promise<boolean>\n    {\n        if (this.form != null) if (!await this.form.invokeTriggers(type,event,key)) return(false);\n        return(await this.triggers.invokeTriggers(type,event,key));\n    }\n\n\n    public async invokeFieldTriggers(type:Trigger, field:string, event:TriggerEvent, key?:keymap) : Promise<boolean>\n    {\n        if (this.form != null) if (!await this.form.invokeFieldTriggers(type,field,event,key)) return(false);\n        return(await this.triggers.invokeFieldTriggers(type,field,event,key));\n    }\n\n\n    public sleep(ms:number) : Promise<void>\n    {\n        return(new Promise(resolve => setTimeout(resolve,ms)));\n    }\n\n\n    public alert(msg:string, title?:string, width?:string, height?:string) : void\n    {\n        if (title == null) title = this.alias;\n        MessageBox.show(this.app,msg,title,width,height);\n    }\n\n\n    private sum(n1:number,n2:number, n3?:number) : number\n    {\n        let s:number = +n1 + +n2;\n        if (n3 != null) s = +s + +n3;\n        return(s);\n    }\n}","import { Form } from \"../forms/Form\";\nimport { RecordState } from \"./Record\";\nimport { BlockImpl } from \"./BlockImpl\";\nimport { keymap } from \"../keymap/KeyMap\";\nimport { Trigger } from \"../events/Triggers\";\nimport { Statement } from \"../database/Statement\";\nimport { NameValuePair } from \"../utils/NameValuePair\";\nimport { FieldDefinition } from \"../input/FieldDefinition\";\nimport { TriggerFunction } from \"../events/TriggerFunction\";\nimport { TableDefinition } from \"../database/TableDefinition\";\nimport { ListOfValuesFunction } from \"../listval/ListOfValuesFunction\";\n\n\nexport class Block\n{\n    private _impl_:BlockImpl;\n    // dont rename impl as it is read behind the scenes\n\n    constructor()\n    {\n        this._impl_ = new BlockImpl(this);\n    }\n\n    public get form(): Form\n    {\n        return(this._impl_.form.form);\n    }\n\n    public get table() : TableDefinition\n    {\n        return(this._impl_.table);\n    }\n\n    public get connected() : boolean\n    {\n        return(this.form.connected);\n    }\n\n    public getValue(record:number, field:string) : any\n    {\n        return(this._impl_.getValue(record,field));\n    }\n\n    public async setValue(record:number, field:string, value:any) : Promise<boolean>\n    {\n        return(await this._impl_.setValue(record,field,value));\n    }\n\n    public get querymode() : boolean\n    {\n        return(this._impl_.querymode);\n    }\n\n    public empty() : boolean\n    {\n        return(this._impl_.getRecord(0).state == RecordState.na);\n    }\n\n    public cancel() : void\n    {\n        this._impl_.sendkey(null,keymap.escape);\n    }\n\n    public goField(field:string, row?:number) : void\n    {\n        if (row == null) row = this._impl_.row;\n        this._impl_.getField(row,field).focus();\n    }\n\n    public get ready() : boolean\n    {\n        return(this._impl_.ready)\n    }\n\n    public get searchfilter() : NameValuePair[]\n    {\n        return(this._impl_.searchfilter);\n    }\n\n    public set searchfilter(filter:NameValuePair[])\n    {\n        this._impl_.searchfilter = filter;\n    }\n\n    public async sendKey(key:keymap) : Promise<boolean>\n    {\n        return(await this._impl_.sendkey(null,key));\n    }\n\n    public async enterquery(override?:boolean) : Promise<boolean>\n    {\n        return(this._impl_.keyentqry(override));\n    }\n\n    public async executequery(override?:boolean) :  Promise<boolean>\n    {\n        return(this._impl_.keyexeqry(override));\n    }\n\n    public nextrecord() : void\n    {\n        this._impl_.sendkey(null,keymap.nextrecord);\n    }\n\n    public prevrecord() : void\n    {\n        this._impl_.sendkey(null,keymap.prevrecord);\n    }\n\n    public nextblock() : void\n    {\n        this._impl_.sendkey(null,keymap.nextblock);\n    }\n\n    public prevblock() : void\n    {\n        this._impl_.sendkey(null,keymap.prevblock);\n    }\n\n    public pageup() : void\n    {\n        this._impl_.sendkey(null,keymap.pageup);\n    }\n\n    public pagedown() : void\n    {\n        this._impl_.sendkey(null,keymap.pagedown);\n    }\n\n    public get row() : number\n    {\n        return(this._impl_.row);\n    }\n\n    public get record() : number\n    {\n        return(this._impl_.record);\n    }\n\n    public async createControlRecord() : Promise<number>\n    {\n        return(this._impl_.createControlRecord());\n    }\n\n    public async delete(override?:boolean) : Promise<boolean>\n    {\n        if (override) return(this._impl_.delete());\n        else return(this._impl_.sendkey(null,keymap.delete));\n    }\n\n    public setFieldDefinition(def:FieldDefinition) : boolean\n    {\n        return(this._impl_.setFieldDefinition(def));\n    }\n\n    public setPossibleValues(field:string, values:Set<any>|Map<string,any>, enforce?:boolean) : boolean\n    {\n        return(this._impl_.setPossibleValues(field,values,enforce));\n    }\n\n    public showDatePicker(field:string, row?:number) : void\n    {\n        this._impl_.showDatePicker(field,row);\n    }\n\n    public showListOfValues(field:string, id?:string, row?:number) : void\n    {\n        this._impl_.showListOfValues(field,id,row);\n    }\n\n    public async insert(above?:boolean, override?:boolean) : Promise<boolean>\n    {\n        if (above == null) above = false;\n        if (override) return(this._impl_.insert(!above));\n        else\n        {\n            if (!above) return(this._impl_.sendkey(null,keymap.insertafter));\n            else        return(this._impl_.sendkey(null,keymap.insertbefore));\n        }\n    }\n\n    public async execute(stmt:Statement, firstrow?:boolean, firstcolumn?:boolean) : Promise<any>\n    {\n        return(this._impl_.execute(stmt,firstrow,firstcolumn));\n    }\n\n\n    public addListOfValues(func:ListOfValuesFunction, field:string, id?:string) :  void\n    {\n        this._impl_.addListOfValues(false,func,field,id);\n    }\n\n\n    public addTrigger(listener:TriggerFunction, types:Trigger|Trigger[]) : void\n    {\n        this._impl_.addTrigger(this,listener,types);\n    }\n\n    public addKeyTrigger(listener:TriggerFunction, keys:keymap|keymap[]) : void\n    {\n        this._impl_.addKeyTrigger(this,listener,keys);\n    }\n\n    public addFieldTrigger(listener:TriggerFunction, types:Trigger|Trigger[], fields?:string|string[]) : void\n    {\n        this._impl_.addFieldTrigger(this,listener,types,fields);\n    }\n\n    public alert(message:string, title?:string, width?:string, height?:string) : void\n    {\n        this._impl_.alert(message,title,width,height);\n    }\n}","import { BlockImpl } from \"../blocks/BlockImpl\";\nimport { dependencies, MasterDetail } from \"./MasterDetail\";\n\n\nexport class MasterDetailQuery\n{\n    private root$:BlockImpl;\n    private finished:number = 0;\n    private detailblks:Map<string,number> = new Map<string,number>();\n    private masterblks:Map<string,boolean> = new Map<string,boolean>();\n\n\n    constructor(private md:MasterDetail, private links:Map<string,dependencies>, block:BlockImpl, col?:string)\n    {\n        this.root$ = block;\n        this.findblocks(block.alias,col);\n    }\n\n\n    public get root() : BlockImpl\n    {\n        return(this.root$);\n    }\n\n\n    private findblocks(block:string, col:string) : void\n    {\n        let dep:dependencies = this.links.get(block);\n\n        if (this.details(dep))\n        {\n            this.masterblks.set(block,false);\n\n            dep.details.forEach((det) =>\n            {\n                if (col == null || det.mkey.partof(col))\n                {\n                    this.findblocks(det.block.alias,null);\n                    this.detailblks.set(det.block.alias,0);\n                }\n            });\n        }\n    }\n\n\n    public waitfor(block:BlockImpl) : void\n    {\n        this.detailblks.set(block.alias,1);\n    }\n\n\n    public ready(block:BlockImpl) : void\n    {\n        this.masterblks.set(block.alias,true);\n        let dep:dependencies = this.links.get(block.alias);\n\n        if (this.detailblks.size == 0)\n        {\n            this.md.finished();\n            return;\n        }\n\n        if (this.details(dep)) this.execute(dep);\n        else                   this.state(block,2);\n    }\n\n\n    public done(block:BlockImpl) : void\n    {\n        this.finished++;\n        this.state(block,3);\n\n        if (this.finished == this.detailblks.size)\n            this.md.finished();\n    }\n\n\n    public failed(block:BlockImpl) : void\n    {\n        this.remove(block);\n\n        if (this.finished == this.detailblks.size)\n            this.md.finished();\n    }\n\n\n    private remove(block:BlockImpl) : void\n    {\n        if (this.detailblks.get(block.alias) < 2)\n        {\n            this.detailblks.delete(block.alias);\n            let dep:dependencies = this.links.get(block.alias);\n\n            if (dep != null && dep.details != null)\n            {\n                dep.details.forEach((det) =>\n                {this.remove(det.block);});\n            }\n        }\n        else\n        {\n            this.finished++;\n            this.state(block,3);\n        }\n    }\n\n\n    public status(state:string)\n    {\n        console.log(state+\" finished: \"+this.finished+\" \"+this.detailblks.size);\n        this.detailblks.forEach((state,blk) => {console.log(blk+\" \"+state)})\n    }\n\n\n    private async execute(dep:dependencies)\n    {\n        if (dep.details != null)\n        {\n            for (let i = 0; i < dep.details.length; i++)\n            {\n                if (this.isready(dep.details[i].block))\n                {\n                    dep.details[i].block.executeqry();\n                    this.state(dep.details[i].block,1);\n                }\n            }\n        }\n    }\n\n\n    private isready(block:BlockImpl) : boolean\n    {\n        let ready:boolean = true;\n        let dep:dependencies = this.links.get(block.alias);\n\n        if (dep.masters != null)\n        {\n            dep.masters.forEach((master) =>\n            {\n                let alias:string = master.block.alias;\n                let ok:boolean = this.masterblks.get(alias);\n                if (ok == null || !ok) ready = false;\n            });\n        }\n\n        return(ready);\n    }\n\n\n    private state(block:BlockImpl,state:number) : void\n    {\n        this.detailblks.set(block.alias,state);\n    }\n\n\n    private details(dep:dependencies) : boolean\n    {\n       return(dep != null && dep.details != null);\n    }\n}","import { Key } from \"../blocks/Key\";\nimport { FormImpl } from \"./FormImpl\";\nimport { Field } from \"../input/Field\";\nimport { Column } from \"../database/Column\";\nimport { Trigger } from \"../events/Triggers\";\nimport { BlockImpl } from \"../blocks/BlockImpl\";\nimport { BindValue } from \"../database/BindValue\";\nimport { MasterDetailQuery } from \"./MasterDetailQuery\";\nimport { SQLTriggerEvent } from \"../events/TriggerEvent\";\nimport { JOINDefinition } from \"../annotations/JOINDefinitions\";\nimport { bindvalue, SQL, Statement } from \"../database/Statement\";\n\n\ninterface subquery\n{\n    lev:number;\n    sql:string;\n    mtab:string;\n    mcols:string[],\n    dcols:string[],\n    subs:subquery[];\n    bindvalues:BindValue[]\n}\n\n\nexport interface dependencies\n{\n    keycols:Set<string>;\n    masters?:{block:BlockImpl, mkey:Key, dkey:Key}[];\n    details?:{block:BlockImpl, mkey:Key, dkey:Key}[];\n}\n\n\nexport class MasterDetail\n{\n    private form:FormImpl = null;\n    private master$:BlockImpl = null;\n    private waiting:BlockImpl = null;\n    private query:MasterDetailQuery = null;\n    private blocks:Map<string,BlockImpl> = new Map<string,BlockImpl>();\n    private links:Map<string,dependencies> = new Map<string,dependencies>();\n    private defined:Map<string,Map<string,Key>> = new Map<string,Map<string,Key>>();\n\n\n    constructor(form:FormImpl)\n    {\n        this.form = form;\n    }\n\n\n    public get master() : BlockImpl\n    {\n        return(this.master$);\n    }\n\n\n    public set master(block:BlockImpl)\n    {\n        this.master$ = block;\n    }\n\n\n    public getRoot(block?:BlockImpl) : BlockImpl\n    {\n        if (block == null)\n            block = Array.from(this.blocks)[0][\"1\"];\n\n        let dep:dependencies = this.links.get(block.alias);\n\n        while(dep != null && dep.masters != null && dep.masters.length > 0)\n        {\n            block = dep.masters[0].block;\n            dep = this.links.get(block.alias);\n        }\n\n        return(block);\n    }\n\n\n    public cleardetails(block:BlockImpl) : void\n    {\n        let dep:dependencies = this.links.get(block.alias);\n\n        if (dep != null && dep.details != null)\n            dep.details.forEach((det) => this.clear(det.block));\n    }\n\n\n    private clear(block:BlockImpl) : void\n    {\n        block.clear();\n\n        let dep:dependencies = this.links.get(block.alias);\n\n        if (dep != null && dep.details != null)\n            dep.details.forEach((det) => this.clear(det.block))\n    }\n\n\n    public sync(block:BlockImpl, col:string) : void\n    {\n        let dep:dependencies = this.links.get(block.alias);\n\n        if (dep != null)\n        {\n            if (!dep.keycols.has(col)) return;\n\n            this.master = block;\n            this.query = new MasterDetailQuery(this,this.links,block,col);\n            this.query.ready(block);\n        }\n    }\n\n\n    public enterquery(block:BlockImpl) : void\n    {\n        this.master$ = block;\n        this.enterdetailquery(block);\n    }\n\n\n    private enterdetailquery(block:BlockImpl) : void\n    {\n        let dep:dependencies = this.links.get(block.alias);\n\n        if (dep != null && dep.details != null)\n        {\n            dep.details.forEach((det) =>\n            {\n                if (det.block.usage.query)\n                    det.block.enterqry();\n\n                this.enterdetailquery(det.block);\n            });\n        }\n    }\n\n\n    public clearfilters(block:BlockImpl) : void\n    {\n        block.searchfilter = [];\n        let dep:dependencies = this.links.get(block.alias);\n\n        if (dep != null && dep.details != null)\n        {\n            dep.details.forEach((det) =>\n            {\n                det.block.searchfilter = [];\n                this.clearfilters(det.block);\n            });\n        }\n    }\n\n\n    // Build subquery from details\n    public async getDetailQuery() : Promise<SQL>\n    {\n        let block:BlockImpl = this.master$;\n        this.master$ = null;\n\n        if (block == null) return(null);\n        let dep:dependencies = this.links.get(block.alias);\n\n        let sub:subquery =\n        {\n            lev: 0,\n            sql: null,\n            subs: [],\n            mcols: [],\n            dcols: [],\n            bindvalues: [],\n            mtab: null\n        };\n\n        if (dep != null && dep.details != null)\n        {\n            for (let i = 0; i < dep.details.length; i++)\n                await this.subquery(sub,dep.details[i]);\n        }\n\n        let subq:SQL = null;\n        this.buildsubquery(sub);\n\n        if (sub.sql.length > 0)\n        {\n            let bindvals:bindvalue[] = [];\n\n            sub.bindvalues.forEach((bindv) =>\n            {\n                bindvals.push\n                ({\n                    name: bindv.name,\n                    type: Column[bindv.type].toLowerCase(),\n                    value: bindv.value\n                });\n            });\n\n            subq = {sql: sub.sql, bindvalues: bindvals};\n        }\n\n        return(subq)\n    }\n\n\n    private async subquery(parent:subquery,detail:any)\n    {\n        let mkey:Key = detail.mkey;\n        let dkey:Key = detail.dkey;\n        let block:BlockImpl = detail.block;\n\n        if (block.querymode)\n        {\n            let sub:subquery =\n            {\n                sql: null,\n                subs: [],\n                bindvalues: [],\n                lev: +parent.lev + 1,\n                mcols: mkey.columns(),\n                dcols: dkey.columns(),\n                mtab: block.data?.table?.name\n            };\n\n            parent.subs.push(sub);\n\n            let fields:Field[] = block.records[0].fields;\n            let stmt:Statement = block.data.parseQuery([],null,fields);\n\n            let event:SQLTriggerEvent = new SQLTriggerEvent(block.alias,0,stmt);\n\n            if (!await block.invokeTriggers(Trigger.PreQuery,event))\n                return;\n\n            block.cancelqry();\n\n            if (block.searchfilter.length > 0)\n            {\n                stmt.order = null;\n                stmt.columns = dkey.columns();\n\n                sub.sql = stmt.build().sql;\n                sub.bindvalues = stmt.getCondition().getAllBindvalues();\n            }\n\n            let dep:dependencies = this.links.get(block.alias);\n\n            if (dep != null && dep.details != null)\n            {\n                for (let i = 0; i < dep.details.length; i++)\n                    await this.subquery(sub,dep.details[i]);\n            }\n        }\n    }\n\n\n    private buildsubquery(sub:subquery)\n    {\n        let children:boolean = false;\n\n        for (let i = 0; i < sub.subs.length; i++)\n        {\n            this.buildsubquery(sub.subs[i]);\n\n            if (sub.subs[i].sql != null && sub.subs[i].sql.length > 0)\n                children = true;\n        }\n\n        let sql:string = \"\";\n        let and:boolean = false;\n        let where:boolean = false;\n\n        if (sub.sql != null)\n        {\n            and = true;\n        }\n        else if (children && sub.mtab != null)\n        {\n            where = true;\n            sub.sql = \"select \"+sub.dcols+\" from \"+sub.mtab;\n        }\n\n        if (children)\n        {\n            for (let i = 0; i < sub.subs.length; i++)\n            {\n                if (sub.subs[i].sql != null && sub.subs[i].sql.length > 0)\n                {\n                    if (and) sql += \" and \";\n                    if (where) sql += \" where \";\n\n                    sql += \"(\"+sub.subs[i].mcols+\") in (\";\n                    sql += sub.subs[i].sql;\n                    sql += \")\";\n\n                    sub.subs[i].bindvalues.forEach((bind) => {sub.bindvalues.push(bind)});\n\n                    and = true;\n                    where = false;\n                }\n            }\n        }\n\n        if (sub.sql == null) sub.sql = sql;\n        else                 sub.sql += sql;\n    }\n\n\n    public querydetails(block:BlockImpl, init:boolean, ready:boolean) : void\n    {\n        if (init == null)\n            init = false;\n\n        if (init)\n        {\n            if (this.query != null)\n            {\n                this.waiting = block;\n                return;\n            }\n\n            this.master = block;\n            this.query = new MasterDetailQuery(this,this.links,block);\n        }\n\n        if (ready) this.query.ready(block);\n        else       this.query.waitfor(block);\n    }\n\n\n    public done(block:BlockImpl,success:boolean)\n    {\n        if (success) this.query.done(block);\n        else         this.query.failed(block);\n    }\n\n\n    public finished() : void\n    {\n        let block:BlockImpl = null;\n\n        if (this.waiting != null)\n        {\n            block = this.waiting;\n\n            this.waiting = null;\n\n            this.query = new MasterDetailQuery(this,this.links,block);\n            this.query.ready(block);\n        }\n        else\n        {\n            this.query = null;\n            this.master = null;\n        }\n    }\n\n\n    public getKeys(block:BlockImpl) : Key[]\n    {\n        let keys:Key[] = [];\n        let dep:dependencies = this.links.get(block.alias);\n\n        if (dep != null && dep.masters != null)\n        {\n            dep.masters.forEach((master) =>\n            {\n                let c:number = 0;\n                let record:number = master.block.record;\n\n                master.mkey.columns().forEach((col) =>\n                {\n                    let val:any = null;\n\n                    if (record < master.block.datarows)\n                        val = master.block.getValue(record,col);\n\n                    master.dkey.set(c++,val);\n                });\n\n                keys.push(master.dkey);\n            });\n        }\n\n        return(keys);\n    }\n\n\n    public addBlock(block:BlockImpl) : void\n    {\n        this.blocks.set(block.alias,block);\n    }\n\n\n    public addKeys(block:BlockImpl, keys:Map<string,Key>) : void\n    {\n        this.defined.set(block.alias,keys);\n    }\n\n\n    public addJoins(joins:JOINDefinition[]) : void\n    {\n        if (joins == null) return;\n\n        joins.forEach((join) =>\n        {\n            let skip:boolean = false;\n\n            let master:BlockImpl = this.blocks.get(join.master.alias);\n            let detail:BlockImpl = this.blocks.get(join.detail.alias);\n\n            if (master == null)\n            {\n                skip = true;\n                console.log(\"Master block \"+join.master.alias+\" in join on form \"+this.form.name+\" does not exist\");\n            }\n\n            if (detail == null)\n            {\n                skip = true;\n                console.log(\"Detail block \"+join.detail.alias+\" in join on form \"+this.form.name+\" does not exist\");\n            }\n\n            if (!skip)\n            {\n                let keys:Map<string,Key> = null;\n\n                keys = this.defined.get(join.master.alias);\n                let mkey:Key = keys?.get(join.master.key);\n\n                keys = this.defined.get(join.detail.alias);\n                let dkey:Key = keys?.get(join.detail.key);\n\n                if (mkey == null)\n                {\n                    skip = true;\n                    console.log(\"Join on form \"+this.form.name+\". Cannot find key \"+join.master.key+\" on block \"+join.master.alias);\n                }\n\n                if (dkey == null)\n                {\n                    skip = true;\n                    console.log(\"Join on form \"+this.form.name+\". Cannot find key \"+join.detail.key+\" on block \"+join.detail.alias);\n                }\n\n                if (!skip)\n                {\n                    let mdep:dependencies = this.links.get(master.alias);\n\n                    if (mdep == null)\n                    {\n                        mdep = {keycols: new Set<string>()};\n                        this.links.set(master.alias,mdep);\n                    }\n\n                    if (mdep.details == null)\n                        mdep.details = [];\n\n                    dkey.columns().forEach((col) => {mdep.keycols.add(col)});\n                    mdep.details.push({block: detail, mkey: mkey, dkey: dkey});\n\n                    let ddep:dependencies = this.links.get(detail.alias);\n\n                    if (ddep == null)\n                    {\n                        ddep = {keycols: new Set<string>()};\n                        this.links.set(detail.alias,ddep);\n                    }\n\n                    if (ddep.masters == null)\n                        ddep.masters = [];\n\n                    ddep.masters.push({block: master, mkey: mkey, dkey: dkey});\n                }\n            }\n        });\n    }\n}","import { Key } from \"../blocks/Key\";\nimport { Menu } from \"../menu/Menu\";\nimport { Utils } from \"../utils/Utils\";\nimport { Block } from \"../blocks/Block\";\nimport { Form, CallBack } from \"./Form\";\nimport { Table } from \"../database/Table\";\nimport { Record } from \"../blocks/Record\";\nimport { keymap } from \"../keymap/KeyMap\";\nimport { InstanceID } from \"./InstanceID\";\nimport { ModalWindow } from \"./ModalWindow\";\nimport { ComponentRef } from \"@angular/core\";\nimport { FormInstance } from \"./FormInstance\";\nimport { MasterDetail } from \"./MasterDetail\";\nimport { BlockImpl } from \"../blocks/BlockImpl\";\nimport { FieldData } from \"../blocks/FieldData\";\nimport { MessageBox } from \"../popup/MessageBox\";\nimport { Statement } from \"../database/Statement\";\nimport { DefaultMenu } from \"../menu/DefaultMenu\";\nimport { Container } from \"../container/Container\";\nimport { Connection } from \"../database/Connection\";\nimport { DropDownMenu } from \"../menu/DropDownMenu\";\nimport { FieldInstance } from \"../input/FieldInstance\";\nimport { Trigger, Triggers } from \"../events/Triggers\";\nimport { FieldImplementation } from \"../input/FieldType\";\nimport { FieldDefinition } from \"../input/FieldDefinition\";\nimport { BlockDefinition } from '../blocks/BlockDefinition';\nimport { TriggerFunction } from \"../events/TriggerFunction\";\nimport { KeyDefinition } from \"../annotations/KeyDefinition\";\nimport { TableDefinition } from \"../database/TableDefinition\";\nimport { ColumnDefinition } from \"../database/ColumnDefinition\";\nimport { JOINDefinitions } from \"../annotations/JOINDefinitions\";\nimport { ApplicationImpl } from \"../application/ApplicationImpl\";\nimport { BlockDefinitions } from \"../annotations/BlockDefinitions\";\nimport { DatabaseUsage, DBUsage } from \"../database/DatabaseUsage\";\nimport { FieldDefinitions } from \"../annotations/FieldDefinitions\";\nimport { TableDefinitions } from \"../annotations/TableDefinitions\";\nimport { ColumnDefinitions } from \"../annotations/ColumnDefinitions\";\nimport { DatabaseDefinitions } from \"../annotations/DatabaseDefinitions\";\nimport { LOVDefinition, LOVDefinitions } from \"../annotations/LOVDefinitions\";\nimport { KeyTriggerEvent, Origin, TriggerEvent } from \"../events/TriggerEvent\";\nimport { TriggerDefinition, TriggerDefinitions } from \"../annotations/TriggerDefinitions\";\n\n\nexport class FormImpl\n{\n    private static id:number = 0;\n\n    private menu$:Menu;\n    private name$:string;\n    private path$:string;\n    private guid$:number;\n    private title$:string;\n    private root:FormImpl;\n    private next:FormImpl;\n    private conn:Connection;\n    private win:ModalWindow;\n    private inst:InstanceID;\n    private parent:FormImpl;\n    private block$:BlockImpl;\n    private app:ApplicationImpl;\n    private callbackfunc:CallBack;\n    private depencies:MasterDetail;\n    private blocks:BlockImpl[] = [];\n    private cancelled:boolean = false;\n    private initiated$:boolean = false;\n    private fields$:FieldInstance[] = [];\n    private ddmenu:ComponentRef<DropDownMenu>;\n    private triggers:Triggers = new Triggers();\n    private parameters:Map<string,any> = new Map<string,any>();\n    private stack:Map<string,InstanceID> = new Map<string,InstanceID>();\n    private blkindex:Map<string,BlockImpl> = new Map<string,BlockImpl>();\n\n\n    constructor(private form$:Form)\n    {\n        this.guid$ = FormImpl.id++;\n        let utils:Utils = new Utils();\n        this.name$ = utils.getName(form$);\n    }\n\n\n    public get guid() : number\n    {\n        return(this.guid$);\n    }\n\n\n    public get form() : Form\n    {\n        return(this.form$);\n    }\n\n\n    public get name() : string\n    {\n        return(this.name$);\n    }\n\n\n    public set path(path:string)\n    {\n        this.path$ = path;\n    }\n\n\n    public get path() : string\n    {\n        return(this.path$);\n    }\n\n\n    public set title(title:string)\n    {\n        this.title$ = title;\n    }\n\n\n    public get title() : string\n    {\n        return(this.title$);\n    }\n\n\n    public get block() : BlockImpl\n    {\n        return(this.block$);\n    }\n\n\n    public enterquery(force?:boolean) : void\n    {\n        this.depencies.getRoot()?.keyentqry(force);\n    }\n\n\n    public executequery(force?:boolean) : void\n    {\n        this.depencies.getRoot()?.keyexeqry(force);\n    }\n\n\n    public get popup() : boolean\n    {\n        return(this.win != null);\n    }\n\n\n    public getCurrentRow(block:string) : number\n    {\n        let blk:BlockImpl = this.getBlock(block);\n        if (blk == null) return(0);\n        return(blk.row);\n    }\n\n\n    public getCurrentRecord(block:string) : number\n    {\n        let blk:BlockImpl = this.getBlock(block);\n        if (blk == null) return(0);\n        return(blk.record);\n    }\n\n\n    public getBlock(bname:string)\n    {\n        return(this.blkindex.get(bname.toLowerCase()));\n    }\n\n\n    public async clear() : Promise<boolean>\n    {\n        for (let i = 0; i < this.blocks.length; i++)\n        {\n            let event:KeyTriggerEvent = new KeyTriggerEvent(Origin.Form,this.blocks[i].alias,null,keymap.clearblock,null);\n            await this.blocks[i].sendkey(event,keymap.clearblock);\n        }\n\n        if (this.blocks.length > 0) this.block = this.blocks[0];\n        this.block?.focus();\n\n        return(true);\n    }\n\n\n    public enableall() : void\n    {\n        this.blocks.forEach((block) => {block.enableall()});\n    }\n\n\n    public disableall() : void\n    {\n        this.blocks.forEach((block) => {block.disableall()});\n    }\n\n\n    public focus() : void\n    {\n        this.block?.focus();\n    }\n\n\n    public set block(block:BlockImpl)\n    {\n        if (this.block != null && this.block != block)\n            if (!this.block?.validate()) return;\n        this.block$ = block;\n    }\n\n\n    public getChain() : FormImpl\n    {\n        if (this.next == null) return(this);\n        return(this.next.getChain());\n    }\n\n\n    public initiated() : boolean\n    {\n        return(this.initiated$);\n    }\n\n\n    public setMenu(menu:Menu) : void\n    {\n        if (this.app == null)\n        {\n            this.menu$ = menu;\n            return;\n        }\n\n        this.app.deletemenu(this.menu$);\n        this.ddmenu = this.app.createmenu(menu);\n        this.app.showMenu(this.ddmenu);\n        this.menu$ = menu;\n    }\n\n\n    public getMenu() : Menu\n    {\n        return(this.menu$);\n    }\n\n\n    public getApplication() : ApplicationImpl\n    {\n        return(this.app);\n    }\n\n\n    public setRoot(root:FormImpl) : void\n    {\n        this.root = root;\n    }\n\n\n    public setParent(parent:FormImpl) : void\n    {\n        this.parent = parent;\n    }\n\n\n    public setApplication(app:ApplicationImpl) : void\n    {\n        this.app = app;\n\n        if (this.menu$ == null)\n            this.menu$ = new DefaultMenu();\n\n        this.conn = app.appstate.connection;\n        this.ddmenu = app.createmenu(this.menu$);\n    }\n\n\n    public getInstanceID() : InstanceID\n    {\n        return(this.inst);\n    }\n\n\n    public setInstanceID(inst:InstanceID) : void\n    {\n        this.inst = inst;\n    }\n\n\n    public setModalWindow(win:ModalWindow) : void\n    {\n        this.win = win;\n    }\n\n\n    public getModalWindow() : ModalWindow\n    {\n        return(this.win);\n    }\n\n\n    public setCallback(func:CallBack) : void\n    {\n        this.callbackfunc = func;\n    }\n\n\n    public setParameters(params:Map<string,any>) : void\n    {\n        if (params != null) this.parameters = params;\n        else this.parameters = new Map<string,InstanceID>();\n    }\n\n\n    public getParameters() : Map<string,any>\n    {\n        return(this.parameters);\n    }\n\n\n    public getDropDownMenu() : ComponentRef<DropDownMenu>\n    {\n        return(this.ddmenu);\n    }\n\n\n    public async onCommit()\n    {\n        this.blocks.forEach((blk) => {blk.removeLocks()});\n    }\n\n\n    public async execute(stmt:Statement, firstrow?:boolean, firstcolumn?:boolean) : Promise<any>\n    {\n        let response:any = await this.app.appstate.connection.invokestmt(stmt);\n\n        if (response[\"status\"] == \"failed\")\n            this.alert(JSON.stringify(response),\"Execute SQL Failed\");\n\n        let rows:any[] = response[\"rows\"];\n\n        if (rows == null)\n        {\n            if (firstcolumn) return(null);\n            return([]);\n        }\n\n        if (!firstrow) return(rows);\n\n        let row:any = [];\n        if (rows.length > 0) row = rows[0];\n\n        if (!firstcolumn) return(row);\n\n        let columns:string[] = Object.keys(row);\n        if (columns.length == 0) return(null);\n\n        return(row[columns[0]]);\n    }\n\n\n    private creationerror:boolean = false;\n    public newForm(container:Container) : void\n    {\n        let utils:Utils = new Utils();\n        this.depencies = new MasterDetail(this);\n\n        // Add all form key triggers\n        let fktriggers:Map<string,TriggerDefinition> = TriggerDefinitions.getFormKeyTriggers(this.name);\n        fktriggers.forEach((def) => {this.triggers.addTrigger(this.form,def.func, def.trigger, def.field, def.key);});\n\n        // Create blocks\n        let blockdef:BlockDefinition[] = BlockDefinitions.getBlocks(this.name);\n        blockdef.forEach((bdef) => {this.createBlock(bdef)});\n\n        if (this.creationerror) return;\n\n        // DatabaseUsage for this form\n        let fusage:DatabaseUsage = DatabaseDefinitions.getFormUsage(this.name);\n\n        // Merge form, block and block usage. Form usage overides\n        blockdef.forEach((bdef) => {this.setBlockUsage(fusage,bdef);});\n\n        container.finish();\n\n        // Get all fields per block\n        let bfields:Map<string,FieldInstance[]> = new Map<string,FieldInstance[]>();\n\n        container.getBlocks().forEach((cb) =>\n        {\n            let block:BlockImpl = this.blkindex.get(cb.name);\n\n            if (block == null)\n            {\n                let dblk = new Block();\n                block = dblk[\"_impl_\"];\n\n                this.blocks.push(block);\n                this.blkindex.set(cb.name,block);\n\n                block.form = this;\n                block.alias = cb.name;\n                block.setApplication(this.app);\n\n                console.log(\"Block \"+cb.name+\" auto-created\");\n            }\n\n            bfields.set(block.alias,cb.fields);\n\n            cb.records.forEach((rec) =>\n            // Copy records from container\n            {block.addRecord(new Record(rec.row,rec.fields,rec.index))});\n        });\n\n        this.blkindex.forEach((block) =>\n        {\n            this.depencies.addBlock(block);\n            block.setMasterDetail(this.depencies);\n\n            // Finish setup for each block\n            let keydefs:KeyDefinition[] = BlockDefinitions.getKeys(block.clazz);\n            let tabdef:TableDefinition = utils.clone(TableDefinitions.get(block.clazz));\n\n            // Column definitions\n            let colindex:Map<string,ColumnDefinition> = ColumnDefinitions.getIndex(block.clazz);\n\n            // Columns mapped to fields. Form definitions overrides\n            let colfields:Map<string,FieldDefinition> = FieldDefinitions.getColumnIndex(block.clazz);\n            let colffields:Map<string,FieldDefinition> = FieldDefinitions.getFormColumnIndex(this.name,block.alias);\n            colffields.forEach((def,fld) => {colfields.set(fld,def)});\n\n            // Create keys and decide on primary\n            let pkey:Key = null;\n            let keys:Map<string,Key> = new Map<string,Key>();\n\n            keydefs.forEach((kdef) =>\n            {\n                let key:Key = keys.get(kdef.name);\n\n                if (key == null)\n                {\n                    key = new Key(kdef.name);\n                    keys.set(kdef.name,key);\n\n                    kdef.columns.forEach((col) =>\n                    {\n                        let fdef:FieldDefinition = colfields.get(col);\n\n                        if (fdef != null)\n                            col = fdef.name;\n\n                        key.addColumn(col);\n                    });\n\n                    if (kdef.unique && pkey == null) pkey = key;\n                    if (kdef.name.startsWith(\"primary\")) pkey = key;\n                }\n                else\n                {\n                    console.log(\"key \"+kdef.name+\" is defined twice\");\n                }\n            });\n\n            this.depencies.addKeys(block,keys);\n\n            let fields:string[] = [];\n            let sorted:ColumnDefinition[] = [];\n\n            // List of data-fields. First pkey\n            if (pkey != null)\n            {\n                pkey.columns().forEach((part) =>\n                {\n                    let fname:string = part;\n                    let fdef:FieldDefinition = colfields.get(part);\n\n                    if (fdef != null) fname = fdef.name;\n                    sorted.push(colindex.get(part));\n\n                    fields.push(fname);\n                });\n            }\n\n            // Then other columns. First gather all definitions\n            let columns:ColumnDefinition[] = ColumnDefinitions.get(block.clazz);\n            let fieldidx:Map<string,FieldDefinition> = FieldDefinitions.getFieldIndex(block.clazz);\n            let ffieldidx:Map<string,FieldDefinition> = FieldDefinitions.getFormFieldIndex(this.name,block.alias);\n\n            // Override by form\n            ffieldidx.forEach((def,fld) => {fieldidx.set(fld,def);});\n\n            columns.forEach((column) =>\n            {\n                let nonkey:boolean = true;\n                if (pkey != null && pkey.partof(column.name)) nonkey = false;\n\n                if (nonkey)\n                {\n                    sorted.push(column);\n                    let fname:string = null;\n                    let field:FieldDefinition = colfields.get(column.name);\n\n                    if (field != null) fname = field.name;\n                    else\n                    {\n                        field = fieldidx.get(column.name);\n                        if (field == null) fname = column.name;\n                        else\n                        {\n                            fname = field.name;\n                            field.column = column.name;\n                        }\n                    }\n\n                    fields.push(fname);\n                }\n            });\n\n            columns = sorted;\n\n            // Then other defined fields (block or form)\n            fieldidx.forEach((field) => {if (!fields.includes(field.name,0)) fields.push(field.name)});\n\n            // Field overrides.\n            let overideidx:Map<string,FieldDefinition> = FieldDefinitions.getFieldIndex(block.clazz);\n\n            // Set field properties and add undefined fields\n            let bfieldlist:FieldInstance[] = bfields.get(block.alias);\n            if (bfieldlist != null) bfieldlist.forEach((inst) =>\n            {\n                let fdef:FieldDefinition = utils.clone(fieldidx.get(inst.name));\n\n                if (fdef == null)\n                {\n                    // Auto create field definition\n                    fdef = {name: inst.name};\n                    fieldidx.set(inst.name,fdef);\n                    if (!fields.includes(inst.name,0)) fields.push(inst.name);\n                }\n\n                if (fdef.column == null)\n                {\n                    // Map to column, unless column is mapped otherwise\n                    let cdef:ColumnDefinition = colindex.get(fdef.name);\n\n                    if (cdef != null && colfields.get(fdef.name) == null)\n                        fdef.column = fdef.name;\n                }\n\n                // Save default definition\n                fieldidx.set(inst.name,fdef);\n\n                // Override def\n                if (inst.id.length > 0)\n                {\n                    let id:string = inst.name+\".\"+inst.id;\n                    let iddef:FieldDefinition = utils.clone(FieldDefinitions.getFormFieldOverride(this.name,block.alias,id));\n\n                    if (iddef == null)\n                        iddef = utils.clone(FieldDefinitions.getFieldOverride(block.clazz,id));\n\n                    if (iddef != null)\n                    {\n                        overideidx.set(id,iddef);\n                        iddef.column = fdef.column;\n                        fdef = iddef;\n                    }\n                }\n\n                let cdef:ColumnDefinition = colindex.get(fdef.column);\n\n                if (fdef.column != null && !fdef.hasOwnProperty(\"case\"))\n                    fdef.case = cdef.case;\n\n                if (fdef.column != null && !fdef.hasOwnProperty(\"default\"))\n                    fdef.default = cdef.default;\n\n                if (fdef.column != null && !fdef.hasOwnProperty(\"mandatory\"))\n                    fdef.mandatory = cdef.mandatory;\n\n                if (fdef.type == null)\n                    fdef.type = FieldImplementation.guess(cdef?.type);\n\n                if (fdef.fieldoptions == null)\n                        fdef.fieldoptions = {};\n\n                if (!block.usage.update)\n                    fdef.fieldoptions.update = false;\n\n                inst.definition = fdef;\n\n                if (inst.parent.definition == null)\n                    inst.parent.setDefinition(fdef,false);\n            });\n\n            let def:Map<string,LOVDefinition> = new Map<string,LOVDefinition>();\n            let ovf:Map<string,LOVDefinition> = new Map<string,LOVDefinition>();\n            let lovs:Map<string,LOVDefinition> = new Map<string,LOVDefinition>();\n            let idlovs:Map<string,LOVDefinition> = new Map<string,LOVDefinition>();\n\n            def = LOVDefinitions.getblock(block.name);\n            def.forEach((lov,fld) =>\n            {\n                lov.inst = block;\n                lovs.set(fld,lov);\n            });\n\n            def = LOVDefinitions.getblockid(block.name);\n            def.forEach((lov,fld) =>\n            {\n                lov.inst = block;\n                lovs.set(fld,lov);\n            });\n\n            ovf = LOVDefinitions.getform(this.name,block.alias);\n            ovf.forEach((lov,fld) =>\n            {\n                lov.inst = this.form;\n                lovs.set(fld,lov);\n            });\n\n            ovf = LOVDefinitions.getidform(this.name,block.alias);\n            ovf.forEach((lov,fld) =>\n            {\n                lov.inst = this.form;\n                idlovs.set(fld,lov);\n            });\n\n            block.setListOfValues(lovs);\n            block.setIdListOfValues(idlovs);\n\n            // Form triggers\n            let ftriggers:Map<string,TriggerDefinition> = TriggerDefinitions.getFormFieldTriggers(this.name,null);\n\n            // Field triggers for block\n            let bftriggers:Map<string,TriggerDefinition> = TriggerDefinitions.getFieldTriggers(block.name);\n            let fftriggers:Map<string,TriggerDefinition> = TriggerDefinitions.getFormFieldTriggers(this.name,block.alias);\n\n            // Form overrides\n            ftriggers.forEach((def,trg) => {bftriggers.set(trg,def);});\n            fftriggers.forEach((def,trg) => {bftriggers.set(trg,def);});\n\n            bftriggers.forEach((def) =>\n            {\n                if (!def.blktrg && def.block == block.alias)\n                {\n                    // Blocktrigger defined on form\n                    block[\"triggers\"].addTrigger(this.form,def.func,def.trigger,def.field);\n                }\n                else\n                {\n                    if (!def.blktrg) this.triggers.addTrigger(this.form,def.func,def.trigger,def.field);\n                    else             block[\"triggers\"].addTrigger(block.block,def.func,def.trigger,def.field);\n                }\n            });\n\n            // Key triggers for block\n            let bktriggers:Map<string,TriggerDefinition> = TriggerDefinitions.getKeyTriggers(block.name);\n\n            // delete block-triggers if defined on form\n            fktriggers.forEach((_def,trg) => {bktriggers.delete(trg)});\n            bktriggers.forEach((def) => {block[\"triggers\"].addTrigger(block.block, def.func, def.trigger, def.field, def.key);});\n\n            // Create data-backing table\n            let table:Table = null;\n            let rows:number = block.records.length;\n\n            if (tabdef != null)\n                table = new Table(this.conn,tabdef,pkey,columns,fieldidx,rows);\n\n            block.data = new FieldData(block,table,fields,fieldidx);\n\n            // Start form\n            block.ready = true;\n        });\n\n        // Get all fields on form\n        this.fields$ = container.fields;\n\n        if (this.blocks.length > 0)\n            this.block$ = this.blocks[0];\n\n        this.groupfields();\n\n        this.blocks.forEach((block) =>\n        {\n            if (block.records.length > 0)\n                block.records[0].enable(true);\n        });\n\n        this.depencies.addJoins(JOINDefinitions.get(this.name));\n\n        this.app.newForm(this);\n        this.initiated$ = true;\n\n        if (this.fields$.length > 0)\n            this.fields$[0].focus();\n    }\n\n\n    public async showform(form:any, destroy:boolean, parameters?:Map<string,any>)\n    {\n        if (!this.validate())\n            return;\n\n        if (this.win == null)\n        {\n            await this.app.showform(form,destroy,parameters);\n        }\n        else\n        {\n            await this.replaceform(form,destroy,parameters);\n        }\n    }\n\n\n    private async replaceform(form:any, destroy:boolean, parameters?:Map<string,any>)\n    {\n        let utils:Utils = new Utils();\n        let name:string = utils.getName(form);\n        let id:InstanceID = this.parent.stack.get(name);\n\n        this.onHide();\n\n        // newform\n        if (destroy)\n            this.app.closeform(this,destroy);\n\n        // create\n        if (id == null)\n        {\n            id = this.app.getNewInstance(form);\n            this.parent.stack.set(id.name,id);\n        }\n\n        this.parent.next = id.impl;\n        id.impl.setParent(this.parent);\n\n        let inst:FormInstance = this.app.getInstance(id);\n        await this.app.preform(id.impl,parameters,inst,false);\n\n        if (this.win != null)\n        {\n            this.win.newForm(inst);\n            id.impl.setRoot(this.root);\n        }\n        else\n        {\n            id.impl.setRoot(this);\n            this.app.showinstance(inst);\n        }\n    }\n\n\n    public async callform(form:any, destroy:boolean, parameters?:Map<string,any>) : Promise<FormImpl>\n    {\n        let utils:Utils = new Utils();\n        let name:string = utils.getName(form);\n        let id:InstanceID = this.stack.get(name);\n\n        this.onHide();\n\n        // newform\n        if (id != null && destroy)\n        {\n            this.app.closeform(id.impl,destroy);\n            id = null;\n        }\n\n        // create\n        if (id == null)\n        {\n            id = this.app.getNewInstance(form);\n            if (id == null) return(null);\n            this.stack.set(name,id);\n        }\n\n        this.next = id.impl;\n        id.impl.setParent(this);\n\n        let inst:FormInstance = this.app.getInstance(id);\n        await this.app.preform(id.impl,parameters,inst,false);\n\n        if (this.win != null)\n        {\n            this.win.newForm(inst);\n            id.impl.setRoot(this.root);\n        }\n        else\n        {\n            id.impl.setRoot(this);\n            this.app.showinstance(inst);\n        }\n\n        return(id.impl);\n    }\n\n\n    public wasCancelled() : boolean\n    {\n        return(this.cancelled);\n    }\n\n\n    public cancel() : void\n    {\n        this.cancelled = true;\n        this.close(true);\n    }\n\n\n    public onClose(impl:FormImpl,cancelled:boolean) : void\n    {\n        this.next = null;\n\n        try\n        {\n            if (this.callbackfunc != null)\n                this.form[this.callbackfunc.name](impl.form,cancelled);\n        }\n        catch (error)\n        {\n            console.log(error);\n        }\n\n        if (cancelled && this.parent != null)\n            this.parent.onClose(this,cancelled);\n    }\n\n\n    public async close(destroy?:boolean)\n    {\n        let win:boolean = (this.win != null);\n        let menu:boolean = (this.root == null);\n        let root:boolean = (this.parent == null);\n\n        if (!this.cancelled && !destroy && !await this.validate())\n            return;\n\n        this.next = null;\n\n        if (this.parent != null)\n            this.parent.onClose(this,this.cancelled);\n\n        if (this.cancelled)\n        {\n            this.cancelled = false;\n\n            if (menu)\n            {\n                //chain, started from \"menu\", was cancelled\n                this.app.closeform(this,true);\n            }\n            else\n            {\n                //chain, started from form, was cancelled\n                this.parent.stack.delete(this.name);\n                this.app.closeInstance(this.inst,true);\n                this.app.showTitle(this.root.title);\n            }\n\n            if (!menu)\n                this.root.onShow();\n\n            return;\n        }\n\n        if (!win)\n        {\n            //Normal behaivior\n            this.app.closeform(this,destroy);\n            if (!root) this.parent.onShow();\n            return;\n        }\n\n        if (win && root)\n        {\n            //Root window\n            this.app.closeform(this,destroy);\n            if (!root) this.parent.onShow();\n            this.win.closeWindow();\n            return;\n        }\n\n        //child closed\n        this.app.closeInstance(this.inst,destroy);\n        if (destroy) this.parent.stack.delete(this.name);\n\n        let pinst:InstanceID = this.parent.getInstanceID();\n        this.app.showTitle(this.parent.title);\n\n        if (pinst != null)\n        {\n            //Parent is modal\n            let inst:FormInstance = this.app.getInstance(pinst);\n            this.win.newForm(inst);\n        }\n        else this.win.closeWindow();\n\n        this.parent.onShow();\n    }\n\n\n    public getCallStack() : Form[]\n    {\n        let stack:Form[] = [];\n\n        this.stack.forEach((id) =>\n        {\n            stack.push(id.impl.form)\n        });\n\n        return(stack);\n    }\n\n\n    public clearStack() : void\n    {\n        this.stack.forEach((id) =>\n        {\n            id.impl.clearStack();\n\n            if (id.ref != null)\n                this.app.closeInstance(id,true);\n        });\n\n        this.stack.clear();\n    }\n\n\n    private createBlock(blockdef:BlockDefinition) : void\n    {\n        let impl:BlockImpl = this.blkindex.get(blockdef.alias);\n\n        if (impl != null)\n        {\n            console.log(\"Block alias \"+blockdef.alias+\" defined twice\");\n            return;\n        }\n\n        let block:Block = null;\n\n        if (blockdef.prop != null)\n        {\n            block = this.form[blockdef.prop];\n\n            if (block == null && blockdef.component != null)\n            {\n                block = new blockdef.component();\n                this.form[blockdef.prop] = block;\n            }\n        }\n        else\n        {\n            if (blockdef.component != null)\n                block = new blockdef.component();\n        }\n\n        if (block != null)\n            impl = block[\"_impl_\"];\n\n        if (impl == null)\n        {\n            this.creationerror = true;\n            console.log(this.name+\" cannot create instance of \"+blockdef.alias+\" bailing out\");\n            return;\n        }\n\n        let cname:string = block.constructor.name;\n\n        if (!(impl instanceof BlockImpl))\n        {\n            this.creationerror = true;\n            console.log(\"component: \"+cname+\" is not an instance of block bailing out\");\n            return;\n        }\n\n        let alias:string = blockdef.alias;\n\n        if (alias == null)\n        {\n            alias = block.constructor.name;\n            alias = BlockDefinitions.getDefaultAlias(alias);\n        }\n\n        alias = alias.toLowerCase();\n\n        impl.alias = alias;\n        blockdef.alias = alias;\n        this.blocks.push(impl);\n        this.blkindex.set(alias,impl);\n\n        impl.form = this;\n        impl.setApplication(this.app);\n    }\n\n\n    private setBlockUsage(fusage:DatabaseUsage, blockdef:BlockDefinition) : void\n    {\n        let block:BlockImpl = this.blkindex.get(blockdef.alias);\n\n        let usage:DatabaseUsage = {};\n        let pusage:DatabaseUsage = blockdef.databaseopts;\n        let dusage:DatabaseUsage = DatabaseDefinitions.getBlockDefault(block.clazz);\n\n        if (dusage == null) dusage = {};\n        if (pusage == null) pusage = {};\n        if (fusage == null) fusage = {};\n\n        usage = DBUsage.merge(pusage,dusage);\n        usage = DBUsage.override(fusage,usage);\n        usage = DBUsage.complete(usage);\n\n        block.usage = usage;\n    }\n\n\n    // Sort fields by group and set tabindex\n    public groupfields(groups?:string[]) : void\n    {\n        let seq:number = 1;\n        if (groups == null) groups = [];\n\n        let index:Map<string,FieldInstance[]> = new Map<string,FieldInstance[]>();\n\n        this.fields$.forEach((field) =>\n        {\n            let group:FieldInstance[] = index.get(field.group);\n\n            if (group == null)\n            {\n                group = [];\n                index.set(field.group,group);\n\n                let exists:boolean = false;\n                for(let i = 0; i < groups.length; i++)\n                {\n                    if (groups[i] == field.group)\n                    {\n                        exists = true;\n                        break;\n                    }\n                }\n\n                if (!exists) groups.push(field.group);\n            }\n\n            group.push(field);\n        });\n\n        groups.forEach((name) =>\n        {\n            let group:FieldInstance[] = index.get(name);\n            if (group != null) {group.forEach((field) => {field.seq = seq++});}\n        });\n\n        this.fields$ = this.fields$.sort((a,b) => {return(a.seq - b.seq)});\n\n        let blocks:Map<string,FieldInstance[]> = new Map<string,FieldInstance[]>();\n\n        this.fields$.forEach((field) =>\n        {\n            let fields:FieldInstance[] = blocks.get(field.block);\n\n            if (fields == null)\n            {\n                fields = [];\n                blocks.set(field.block,fields);\n            }\n\n            fields.push(field);\n        });\n\n        blocks.forEach((fields,bname) =>\n        {this.blkindex.get(bname).setFields(fields);});\n    }\n\n\n    public async validate() : Promise<boolean>\n    {\n        if (this.block == null) return(true);\n        else return(await this.block.validate());\n    }\n\n\n    public onShow() : void\n    {\n    }\n\n\n    public onHide() : void\n    {\n    }\n\n\n    public async sendkey(event:any,key:keymap) : Promise<boolean>\n    {\n        if (key == keymap.close)\n        {\n            await this.close(false);\n            return(true);\n        }\n\n        if (event == null) event = new KeyTriggerEvent(Origin.Form,null,null,keymap.clearblock,null);\n        return(await this.block?.sendkey(event,key));\n    }\n\n\n    public addTrigger(instance:any, func:TriggerFunction, types?:Trigger|Trigger[]) : void\n    {\n        this.triggers.addTrigger(instance,func,types)\n    }\n\n\n    public addKeyTrigger(instance:any, func:TriggerFunction, keys?:keymap|keymap[]) : void\n    {\n        this.triggers.addTrigger(instance,func,Trigger.Key,null,keys)\n    }\n\n\n    public addFieldTrigger(instance:any, func:TriggerFunction, types:Trigger|Trigger[], fields:string|string[], keys?:keymap|keymap[]) : void\n    {\n        this.triggers.addTrigger(instance,func,types,fields,keys)\n    }\n\n\n    public async onEvent(event:any, field:FieldInstance, type:string, key:keymap)\n    {\n        if (this.app == null)\n            return;\n\n        if (type == \"focus\")\n            this.block = this.blkindex.get(field.block);\n\n        if (type == \"key\" && key == keymap.prevfield)\n        {\n            if (event[\"preventDefault\"] != null)\n                event.preventDefault();\n\n            let row:number = field.row;\n            let seq:number = field.seq - 1;\n            let block:string = field.block;\n\n            for(let i = 0; i < this.fields$.length; i++)\n            {\n                if (--seq < 0) seq = this.fields$.length - 1;\n\n                if (this.fields$[seq].row == row && this.fields$[seq].block == block)\n                {\n                    if (this.fields$[seq].enabled)\n                    {\n                        this.fields$[seq].focus();\n                        break;\n                    }\n                }\n            }\n        }\n\n        if (type == \"key\" && key == keymap.nextfield)\n        {\n            if (event[\"preventDefault\"] != null)\n                event.preventDefault();\n\n            let row:number = field.row;\n            let seq:number = field.seq - 1;\n            let block:string = field.block;\n\n            for(let i = 0; i < this.fields$.length; i++)\n            {\n                if (++seq >= this.fields$.length) seq = 0;\n\n                if (this.fields$[seq].row == row && this.fields$[seq].block == block)\n                {\n                    if (this.fields$[seq].enabled)\n                    {\n                        this.fields$[seq].focus();\n                        break;\n                    }\n                }\n            }\n        }\n\n\n        if (type == \"key\" && key == keymap.prevblock)\n        {\n            if (event[\"preventDefault\"] != null)\n                event.preventDefault();\n\n            let seq:number = field.seq - 1;\n            let block:string = field.block;\n\n            let row:number = 0;\n            let next:string = \"\";\n\n            for(let i = 0; i < this.fields$.length; i++)\n            {\n                if (--seq < 0) seq = this.fields$.length - 1;\n\n                if (this.fields$[seq].block != block)\n                {\n                    let blk:string = this.fields$[seq].block;\n\n                    if (blk != next)\n                    {\n                        let nb:BlockImpl = this.blkindex.get(blk);\n                        let nf:FieldInstance = nb.field;\n\n                        if (nf.enabled)\n                        {\n                            nf.focus();\n                            break;\n                        }\n\n                        next = blk;\n                        row = nb.row;\n                    }\n\n                    if (this.fields$[seq].row == row && this.fields$[seq].enabled)\n                    {\n                        this.fields$[seq].focus();\n                        break;\n                    }\n                }\n            }\n        }\n\n        if (type == \"key\" && key == keymap.nextblock)\n        {\n            if (event[\"preventDefault\"] != null)\n                event.preventDefault();\n\n            let seq:number = field.seq - 1;\n            let block:string = field.block;\n\n            let row:number = 0;\n            let next:string = \"\";\n\n            for(let i = 0; i < this.fields$.length; i++)\n            {\n                if (++seq >= this.fields$.length) seq = 0;\n\n                if (this.fields$[seq].block != block)\n                {\n                    let blk:string = this.fields$[seq].block;\n\n                    if (blk != next)\n                    {\n                        let nb:BlockImpl = this.blkindex.get(blk);\n                        let nf:FieldInstance = nb.field;\n\n                        if (nf.enabled)\n                        {\n                            nf.focus();\n                            break;\n                        }\n\n                        next = blk;\n                        row = nb.row;\n                    }\n\n                    if (this.fields$[seq].row == row && this.fields$[seq].enabled)\n                    {\n                        this.fields$[seq].focus();\n                        break;\n                    }\n                }\n            }\n        }\n\n        if (type == \"key\" && key == keymap.clearform)\n        {\n            let event:KeyTriggerEvent = new KeyTriggerEvent(Origin.Form,null,null,keymap.clearform,null);\n            if (!await this.invokeTriggers(Trigger.Key,event,keymap.clearform)) return(false);\n            this.clear();\n        }\n    }\n\n\n    public async invokeTriggers(type:Trigger, event:TriggerEvent, key?:keymap) : Promise<boolean>\n    {\n        return(await this.triggers.invokeTriggers(type,event,key));\n    }\n\n\n    public async invokeFieldTriggers(type:Trigger, field:string, event:TriggerEvent, key?:keymap) : Promise<boolean>\n    {\n        return(await this.triggers.invokeFieldTriggers(type,field,event,key));\n    }\n\n\n    public alert(msg:string, title:string, width?:string, height?:string) : void\n    {\n        MessageBox.show(this.app,msg,title,width,height);\n    }\n }","import { Menu } from \"../menu/Menu\";\nimport { FormImpl } from \"./FormImpl\";\nimport { Block } from \"../blocks/Block\";\nimport { keymap } from \"../keymap/KeyMap\";\nimport { Trigger } from \"../events/Triggers\";\nimport { Theme } from \"../application/Themes\";\nimport { BlockImpl } from \"../blocks/BlockImpl\";\nimport { Statement } from \"../database/Statement\";\nimport { Container } from \"../container/Container\";\nimport { TriggerFunction } from \"../events/TriggerFunction\";\nimport { TableDefinition } from \"../database/TableDefinition\";\nimport { Component, AfterViewInit, OnInit } from \"@angular/core\";\nimport { ListOfValuesFunction } from \"../listval/ListOfValuesFunction\";\n\n\nexport interface CallBack\n{\n    (form:Form, cancel:boolean) : void;\n}\n\n\n@Component({template: ''})\n\n\nexport class Form implements OnInit, AfterViewInit\n{\n    private _impl_:FormImpl;\n    // dont rename impl as it is read behind the scenes\n\n    constructor()\n    {\n        this._impl_ = new FormImpl(this);\n    }\n\n    public get name() : string\n    {\n        return(this.constructor.name);\n    }\n\n    public set title(title:string)\n    {\n        this._impl_.title = title;\n    }\n\n    public get title() : string\n    {\n        return(this._impl_.title);\n    }\n\n    public set menu(menu:Menu)\n    {\n        this._impl_.setMenu(menu);\n    }\n\n    public get menu()\n    {\n        return(this._impl_.getMenu());\n    }\n\n    public focus() : void\n    {\n        this._impl_.focus();\n    }\n\n    public get block() : Block\n    {\n        return(this._impl_.block?.block);\n    }\n\n    public get connected() : boolean\n    {\n        return(this._impl_.getApplication().connected);\n    }\n\n    public groupfields(groups:string[]) : void\n    {\n        this._impl_.groupfields(groups);\n    }\n\n    public get popup() : boolean\n    {\n        return(this._impl_.popup);\n    }\n\n    public get colors() : Theme\n    {\n        return(this._impl_.getApplication().config.colors);\n    }\n\n    public getBlockFilter(block:string) : string\n    {\n        let blk:Block = this.getBlock(block);\n\n        if (blk != null && blk.searchfilter.length > 0)\n            return(this.colors.rowindicator);\n\n        return(\"\");\n    }\n\n    public showRowIndicator(block:string, row:number) : boolean\n    {\n        if (row == this.getCurrentRow(block)) return(true);\n        return(false);\n    }\n\n    public getRowIndicator(block:string, row:number) : string\n    {\n        if (row == this.getCurrentRow(block)) return(this.colors.rowindicator);\n        return(\"\");\n    }\n\n    public getCurrentRow(block:string) : number\n    {\n        return(this._impl_.getCurrentRow(block));\n    }\n\n    public getCurrentRecord(block:string) : number\n    {\n        return(this._impl_.getCurrentRecord(block));\n    }\n\n    public getBlock(block:string) : Block\n    {\n        let impl:BlockImpl = this._impl_.getBlock(block);\n        if (impl != null) return(impl.block);\n        return(null);\n    }\n\n    public addListOfValues(block:string, func:ListOfValuesFunction, field:string, id?:string) :  void\n    {\n        let impl:BlockImpl = this._impl_.getBlock(block);\n        if (impl != null) impl.addListOfValues(true,func,field,id);\n    }\n\n    public newform(form:any, parameters?:Map<string,any>) : void\n    {\n        this._impl_.showform(form,true,parameters);\n    }\n\n    public showform(form:any, parameters?:Map<string,any>) : void\n    {\n        this._impl_.showform(form,false,parameters);\n    }\n\n    public async callform(form:any, parameters?:Map<string,any>) : Promise<Form>\n    {\n        let impl:FormImpl = await this._impl_.callform(form,false,parameters);\n        if (impl != null) return(impl.form);\n        return(null);\n    }\n\n    public getCallStack() : Form[]\n    {\n        return(this._impl_.getCallStack());\n    }\n\n    public clearCallStack() : void\n    {\n        this._impl_.clearStack();\n    }\n\n    public getTable(block:string) : TableDefinition\n    {\n        return(this.getBlock(block)?.table);\n    }\n\n    public get parameters() : Map<string,any>\n    {\n        return(this._impl_.getParameters());\n    }\n\n    public getValue(block:string, record:number, field:string) : any\n    {\n        let blk:Block = this.getBlock(block);\n        if (blk != null) return(blk.getValue(record,field));\n        return(null);\n    }\n\n    public async setValue(block:string, record:number, field:string, value:any) : Promise<boolean>\n    {\n        let blk:Block = this.getBlock(block);\n        if (blk != null) return(await blk.setValue(record,field,value));\n        return(false);\n    }\n\n    public cancelled() : boolean\n    {\n        return(this._impl_.wasCancelled());\n    }\n\n    public async clear() : Promise<boolean>\n    {\n        return(await this._impl_.clear());\n    }\n\n    public cancel() : void\n    {\n        this._impl_.cancel();\n    }\n\n    public async close(dismiss?:boolean) : Promise<void>\n    {\n        await this._impl_.close(dismiss);\n    }\n\n    public async sendKey(key:keymap) : Promise<boolean>\n    {\n        return(await this._impl_.sendkey(null,key));\n    }\n\n    public setCallback(func:CallBack) : void\n    {\n        this._impl_.setCallback(func);\n    }\n\n    public addTrigger(func:TriggerFunction, types?:Trigger|Trigger[]) : void\n    {\n        this._impl_.addTrigger(this,func,types);\n    }\n\n\n    public addKeyTrigger(func:TriggerFunction, keys?:keymap|keymap[]) : void\n    {\n        this._impl_.addKeyTrigger(this,func,keys);\n    }\n\n\n    public enterquery(force?:boolean) : void\n    {\n        this._impl_.enterquery(force);\n    }\n\n\n    public executequery(force?:boolean) : void\n    {\n        this._impl_.executequery(force);\n    }\n\n\n    public prevBlock() : void\n    {\n        this._impl_.block.sendkey(null,keymap.prevblock);\n    }\n\n\n    public nextBlock() : void\n    {\n        this._impl_.block.sendkey(null,keymap.nextblock);\n    }\n\n\n    public async execute(stmt:Statement, firstrow?:boolean, firstcolumn?:boolean) : Promise<any>\n    {\n        return(this._impl_.execute(stmt,firstrow,firstcolumn));\n    }\n\n\n    public addFieldTrigger(listener:TriggerFunction, types:Trigger|Trigger[], fields?:string|string[]) : void\n    {\n        this._impl_.addFieldTrigger(this,listener,types,fields);\n    }\n\n    public ngOnInit()\n    {\n        this._impl_.getApplication().setContainer();\n    }\n\n    public ngAfterViewInit(): void\n    {\n\n        let container:Container = this._impl_.getApplication().getContainer();\n        this._impl_.getApplication().dropContainer();\n        this._impl_.newForm(container);\n    }\n\n    public alert(message:string, title?:string, width?:string, height?:string) : void\n    {\n        if (title == null) title = this.name;\n        this._impl_.alert(message,title,width,height);\n    }\n}","export enum Case\n{\n    upper,\n    lower,\n    mixed\n}","import { Field } from './Field';\nimport { CheckBox } from './CheckBox';\nimport { Case } from '../database/Case';\nimport { RadioButton } from './RadioButton';\nimport { KeyCodes } from '../keymap/KeyCodes';\nimport { RecordState } from '../blocks/Record';\nimport { Context } from '../application/Context';\nimport { Key, keymap, KeyMapper } from '../keymap/KeyMap';\nimport { ApplicationImpl } from \"../application/ApplicationImpl\";\nimport { FieldDefinition, FieldOptions } from './FieldDefinition';\nimport { FieldImplementation, FieldInterface, FieldType } from './FieldType';\nimport { AfterViewInit, Component, ElementRef, Input, ViewChild } from \"@angular/core\";\n\n\n@Component({\n    selector: 'field',\n    template: '<span #container></span>'\n})\n\n\nexport class FieldInstance implements AfterViewInit\n{\n    private lvalue:any;\n    private guid$:string;\n    private def:FieldDefinition;\n    private app:ApplicationImpl;\n    private clazz:FieldInterface;\n    private fgroup$:Field = null;\n    private valid$:boolean = true;\n    private lvalid:boolean = true;\n    private enforce:boolean = false;\n    private enabled$:boolean = false;\n    private readonly$:boolean = false;\n    private mandatory$:boolean = false;\n    private firstchange:boolean = true;\n    private values:Map<string,any> = null;\n    private container:HTMLSpanElement = null;\n    private state$:RecordState = RecordState.na;\n    private options$:FieldOptions = {query: true, insert: true, update: true, navigable: true};\n\n    @Input(\"id\")    public id$:string = \"\";\n    @Input(\"row\")   public row$:number = -1;\n    @Input(\"name\")  public name$:string = \"\";\n    @Input(\"block\") public block$:string = \"\";\n    @Input(\"group\") public group$:string = \"\";\n    @Input(\"class\") public class$:string = \"\";\n    @Input(\"style\") public style$:string = \"\";\n    @Input(\"size\")  public size$:string = null;\n    @Input(\"value\") public value$:string = null;\n\n    @ViewChild(\"container\", {read: ElementRef}) private containerelem: ElementRef;\n\n\n    constructor(ctx:Context)\n    {\n        this.app = ctx.app[\"_impl_\"];\n    }\n\n    public get id() : string\n    {\n        return(this.id$);\n    }\n\n    public get row() : number\n    {\n        return(this.row$);\n    }\n\n    public set row(row:number)\n    {\n        this.row$ = row;\n    }\n\n    public set seq(seq:number)\n    {\n        if (this.clazz != null)\n        this.clazz.tabindex = seq;\n    }\n\n    public get seq() : number\n    {\n        if (this.clazz == null) return(0);\n        else return(this.clazz.tabindex);\n    }\n\n    public get name() : string\n    {\n        return(this.name$);\n    }\n\n    public get fname() : string\n    {\n        let name:string = this.block$+\".\"+this.name;\n        if (this.id.length > 0) name += \".\"+this.id;\n        name += \"[\"+this.row+\"](\"+this.guid+\")\";\n        return(name);\n    }\n\n    public set guid(guid:string)\n    {\n        this.guid$ = guid;\n    }\n\n    public get guid() : string\n    {\n        return(this.guid$);\n    }\n\n    public get block() : string\n    {\n        return(this.block$);\n    }\n\n    public get group() : string\n    {\n        return(this.group$);\n    }\n\n    public get value() : any\n    {\n        if (this.clazz == null) return(null);\n\n        let value:any = this.clazz.value;\n        if ((\"\"+value).trim().length == 0) value = null;\n\n        return(value);\n    }\n\n    public get parent() : Field\n    {\n        return(this.fgroup$);\n    }\n\n    public set parent(field:Field)\n    {\n        this.fgroup$ = field;\n    }\n\n    public get fieldoptions() : FieldOptions\n    {\n        return(this.options$);\n    }\n\n    public get enabled() : boolean\n    {\n        return(this.enabled$);\n    }\n\n    public get state() : RecordState\n    {\n        return(this.state$);\n    }\n\n    public set state(state:RecordState)\n    {\n        this.state$ = state;\n    }\n\n    public set readonly(flag:boolean)\n    {\n        this.readonly$ = flag;\n    }\n\n    public get readonly() : boolean\n    {\n        return(this.readonly$);\n    }\n\n    public get mandatory() : boolean\n    {\n        return(this.mandatory$);\n    }\n\n    public setPossibleValues(values:Set<any>|Map<string,any>, enforce:boolean) : void\n    {\n        this.enforce = enforce;\n        let type:string = this.clazz.constructor.name;\n\n        if (type == \"DropDown\") this.setDropDownValues(values);\n        if (type == \"TextField\") this.setTextFieldValues(values);\n    }\n\n    private setTextFieldValues(values:Set<any>|Map<string,any>) : void\n    {\n        let name:string = this.block+\".\"+this.name;\n        if (this.id.length > 0) name += \".\"+this.id;\n        let list:HTMLElement = document.getElementById(name);\n\n        if (list == null)\n        {\n            let kvpair:boolean = true;\n\n            if (values instanceof Map) this.values = new Map(values);\n            else\n            {\n                kvpair = false;\n                this.values = new Map<string,any>();\n                values.forEach((val) => this.values.set(val,val));\n            }\n\n            list = document.createElement(\"datalist\");\n            list.setAttribute(\"id\",name);\n\n            this.values.forEach((val,key) =>\n            {\n                let option:HTMLOptionElement = document.createElement(\"option\");\n\n                option.text = val;\n                if (kvpair) option.value = key;\n\n                list.append(option);\n            })\n\n            this.clazz.element.appendChild(list);\n        }\n\n        this.clazz.element.setAttribute(\"list\",name);\n    }\n\n    private setDropDownValues(xvalues:Set<any>|Map<string,any>) : void\n    {\n        if (xvalues instanceof Map) this.values = new Map(xvalues);\n        else\n        {\n            this.values = new Map<string,any>();\n            xvalues.forEach((val) => this.values.set(val,val));\n        }\n\n        this.values.forEach((val,key) =>\n        {\n            let option:HTMLOptionElement = document.createElement(\"option\");\n\n            option.text = val;\n            option.value = key;\n\n            this.clazz.element.appendChild(option);\n        });\n    }\n\n    public set mandatory(flag:boolean)\n    {\n        this.mandatory$ = flag;\n        if (flag) this.addClass(\"mandatory\");\n        else      this.removeClass(\"mandatory\");\n    }\n\n    public focus() : boolean\n    {\n        if (!this.enabled) return(false);\n        setTimeout(() => {this.clazz.focus()},0);\n        return(true);\n    }\n\n    public blur() : void\n    {\n        setTimeout(() => {this.clazz.element.blur()},0);\n    }\n\n    public addClass(clazz:string) : void\n    {\n        if (this.clazz != null)\n            this.clazz.element.classList.add(clazz);\n    }\n\n    public removeClass(clazz:string) : void\n    {\n        if (this.clazz != null)\n            this.clazz.element.classList.remove(clazz);\n    }\n\n    public get current() : boolean\n    {\n        return(this.guid.startsWith(\"c\"));\n    }\n\n    public set value(value:any)\n    {\n        if (value == null) value = \"\";\n        if (this.clazz != null) this.clazz.value = value;\n    }\n\n    public get valid() : boolean\n    {\n        return(this.valid$);\n    }\n\n    public get dirty() : boolean\n    {\n        return(!this.firstchange);\n    }\n\n    public validate() : boolean\n    {\n        if (this.state == RecordState.qmode || this.state == RecordState.na)\n            return(true);\n\n        if (!this.clazz.validate())\n            return(false);\n\n        if (this.mandatory && (this.value == null || (\"\"+this.value).length == 0))\n            return(false);\n\n        if (this.enforce && this.values != null && this.value != null)\n            if (!this.values.has(this.value)) return(false);\n\n        return(true);\n    }\n\n    public set valid(flag:boolean)\n    {\n        if (flag == this.valid$)\n            return;\n\n        if (flag)\n        {\n            this.valid$ = flag;\n            this.removeClass(\"invalid\");\n        }\n        else\n        {\n            if (this.enabled && !this.readonly)\n            {\n                this.valid$ = flag;\n                this.addClass(\"invalid\");\n            }\n        }\n    }\n\n    public enable()\n    {\n        this.setInputState();\n    }\n\n    public disable() : void\n    {\n        this.valid = true;\n        this.enabled$ = false;\n        this.readonly$ = true;\n        this.state = RecordState.na;\n\n        if (this.clazz != null)\n        {\n            this.clazz.enable = false;\n            this.clazz.readonly = true;\n        }\n    }\n\n    private setInputState() : void\n    {\n        this.enabled$ = false;\n\n        if (!this.options$.navigable)\n        {\n            if (this.clazz != null)\n                this.clazz.enable = false;\n\n            return;\n        }\n\n        if (this.state$ == RecordState.na) this.enabled$ = true;\n        else if (this.state$ == RecordState.insert && this.options$.insert) this.enabled$ = true;\n        else if (this.state$ == RecordState.update && this.options$.update) this.enabled$ = true;\n        else if (this.state$ == RecordState.qmode && this.options$.query) this.enabled$ = true;\n\n        if (this.clazz != null)\n        {\n            if (!this.enabled$ && this.state$ == RecordState.update)\n            {\n                this.enabled$ = true;\n                this.readonly$ = true;\n            }\n\n            this.clazz.enable = this.enabled$;\n            this.clazz.readonly = this.readonly$;\n        }\n    }\n\n    public get definition() : FieldDefinition\n    {\n        return(this.def);\n    }\n\n    public set definition(def:FieldDefinition)\n    {\n        let override:boolean = false;\n\n        if (this.def != null)\n        {\n            override = true;\n\n            if (def.hasOwnProperty(\"case\"))\n                this.def.case = def.case;\n\n            if (def.hasOwnProperty(\"mandatory\"))\n                this.def.mandatory = def.mandatory;\n\n            if (def.hasOwnProperty(\"type\"))\n                this.def.type = def.type;\n\n            if (def.hasOwnProperty(\"fieldoptions\"))\n            {\n                if (def.hasOwnProperty(\"query\"))  this.def.fieldoptions.query = def.fieldoptions.query;\n                if (def.hasOwnProperty(\"insert\")) this.def.fieldoptions.insert = def.fieldoptions.insert;\n                if (def.hasOwnProperty(\"update\")) this.def.fieldoptions.update = def.fieldoptions.update;\n                if (def.hasOwnProperty(\"navigable\")) this.def.fieldoptions.navigable = def.fieldoptions.navigable;\n            }\n        }\n\n        this.def = def;\n        this.setType(def.type);\n\n        if (!this.def.hasOwnProperty(\"case\"))\n            this.def.case = Case.mixed;\n\n        if (this.def.hasOwnProperty(\"mandatory\"))\n            this.mandatory = this.def.mandatory;\n\n        if (this.def.fieldoptions != null)\n        {\n            this.options$ = this.def.fieldoptions;\n            if (!this.options$.hasOwnProperty(\"query\"))  this.options$.query = true;\n            if (!this.options$.hasOwnProperty(\"insert\")) this.options$.insert = true;\n            if (!this.options$.hasOwnProperty(\"update\")) this.options$.update = true;\n            if (!this.options$.hasOwnProperty(\"navigable\")) this.options$.navigable = true;\n        }\n\n        if (override)\n            this.setInputState();\n    }\n\n\n    private setType(type:FieldType) : void\n    {\n        let seq:number = this.seq;\n        this.container.innerHTML = null;\n        let cname:any = FieldImplementation.getClass(FieldType[type]);\n\n        if (cname != null)\n        {\n            this.clazz = new cname();\n\n            this.container.innerHTML = this.clazz.html;\n            this.clazz.element = this.container.children[0] as HTMLElement;\n\n            if (this.size$ != null) this.clazz.size = +this.size$;\n            if (this.value$ != null) this.clazz.value = this.value$;\n            if (this.class$ != \"\") this.clazz.element.classList.add(this.class$);\n            if (this.style$ != \"\") this.clazz.element.style.cssText = this.style$;\n\n            this.seq = seq;\n\n            this.disable();\n            this.addTriggers();\n\n            // Ugly, but need to set name\n            (this.clazz.element as any).name = this.name;\n        }\n    }\n\n\n    public async onEvent(event:any)\n    {\n        let keypress:boolean = false;\n\n        if (this.fgroup$ == null)\n            return;\n\n        if (event.type == \"focus\")\n        {\n            this.firstchange = true;\n            this.lvalue = this.value;\n            this.lvalid = this.valid$;\n            this.fgroup$[\"onEvent\"](event,this,\"focus\");\n        }\n\n        if (event.type == \"blur\")\n        {\n            if (this.dirty && this.value == this.lvalue && !this.lvalid)\n                this.valid = false;\n\n            this.fgroup$[\"onEvent\"](event,this,\"blur\");\n        }\n\n        if (event.type == \"click\" || event.type == \"dblclick\")\n            this.fgroup$[\"onEvent\"](event,this,event.type);\n\n        if (event.type == \"change\")\n        {\n            if (this.enabled && !this.readonly)\n                if (!this.valid) this.fgroup$.valid = false;\n\n            this.valid = this.validate();\n\n            if (this.clazz instanceof CheckBox)\n                this.value = this.value$;\n\n            if (this.clazz instanceof RadioButton)\n                this.value = this.value$;\n\n            this.fgroup$[\"onEvent\"](event,this,\"change\");\n        }\n\n        if (event.type == \"keydown\" && event.keyCode == 8)\n            keypress = true;\n\n        if (event.type == \"keydown\" && !keypress)\n        {\n            if (+event.keyCode >= 16 && +event.keyCode <= 20)\n                return;\n\n            let keydef:Key =\n            {\n                code  : event.keyCode,\n                alt   : event.altKey,\n                ctrl  : event.ctrlKey,\n                meta  : event.metaKey,\n                shift : event.shiftKey\n            }\n\n            let map:string = KeyMapper.map(keydef);\n            let key:keymap = KeyMapper.keymap(map);\n\n            if (key == keymap.paste)\n                console.log(\"paste\");\n\n            if (key == keymap.undo || key == keymap.paste)\n            {\n                setTimeout(() => {this.blur()},1);\n                setTimeout(() => {this.focus()},1);\n                return;\n            }\n\n            if (key != null)\n            {\n                // handled by application\n                if\n                (\n                    key == keymap.close           ||\n                    key == keymap.listval         ||\n                    key == keymap.connect         ||\n                    key == keymap.disconnect      ||\n                    key == keymap.commit          ||\n                    key == keymap.rollback        ||\n                    key == keymap.delete          ||\n                    key == keymap.clearform       ||\n                    key == keymap.insertafter     ||\n                    key == keymap.insertbefore    ||\n                    key == keymap.enterquery      ||\n                    key == keymap.executequery\n                )\n                {\n                    this.fgroup$.copy(this);\n                    return;\n                }\n\n                this.fgroup$[\"onEvent\"](event,this,\"key\",key);\n            }\n        }\n\n        if (event.type == \"keypress\" || keypress)\n        {\n            if (this.readonly) return;\n\n            if (this.firstchange && (event.key.length == 1 || event.keyCode == KeyCodes.backspace))\n            {\n                this.firstchange = false;\n                if (!this.valid) this.fgroup$.valid = true;\n                this.fgroup$[\"onEvent\"](event,this,\"fchange\");\n            }\n\n            let value:any = this.value;\n            setTimeout(() => {this.continious(event,value);},0);\n        }\n    }\n\n\n    private continious(event:any, value:any) : void\n    {\n        if (this.value == value)\n            return;\n\n        if (this.def.type == FieldType.integer)\n        {\n            if (!this.valnumber(value))\n                return;\n        }\n\n        if (this.def.type == FieldType.decimal)\n        {\n            if (!this.valdecimal(value))\n                return;\n        }\n\n        if (this.value != null && this.def.case == Case.lower)\n            this.value = (\"\"+this.value).toLowerCase();\n\n        if (this.value != null && this.def.case == Case.upper)\n            this.value = (\"\"+this.value).toUpperCase();\n\n        this.fgroup$.onEvent(event,this,\"cchange\");\n    }\n\n\n    private valnumber(value:string) : boolean\n    {\n        if (this.state == RecordState.qmode)\n            return(true);\n\n        let nvalue:string = this.value;\n\n        if (nvalue == null || nvalue.trim().length == 0)\n            return(true);\n\n        let numeric:boolean = !isNaN(+nvalue);\n\n        if (!numeric || nvalue.indexOf(\".\") >= 0)\n        {\n            this.value = value;\n            return(false);\n        }\n\n        return(true);\n    }\n\n\n    private valdecimal(value:string) : boolean\n    {\n        if (this.state == RecordState.qmode)\n            return(true);\n\n        let nvalue:string = this.value;\n\n        if (nvalue == null || nvalue.trim().length == 0)\n            return(true);\n\n        let numeric:boolean = !isNaN(+nvalue);\n\n        if (!numeric)\n        {\n            this.value = value;\n            return(false);\n        }\n\n        return(true);\n    }\n\n\n    public ngAfterViewInit(): void\n    {\n\t\tthis.container = this.containerelem?.nativeElement as HTMLSpanElement;\n\n        this.id$ = this.id$.toLowerCase();\n        this.name$ = this.name$.toLowerCase();\n        this.block$ = this.block$.toLowerCase();\n\n        this.app.getContainer().register(this);\n    }\n\n\n    private addTriggers() : void\n    {\n        let impl:Node = this.container.firstChild;\n\n        if (impl == null) return;\n        impl.addEventListener(\"blur\", (event) => {this.onEvent(event)});\n        impl.addEventListener(\"focus\", (event) => {this.onEvent(event)});\n        impl.addEventListener(\"change\", (event) => {this.onEvent(event)});\n        impl.addEventListener(\"click\", (event) => {this.onEvent(event)});\n        impl.addEventListener(\"keydown\", (event) => {this.onEvent(event)});\n        impl.addEventListener(\"keypress\", (event) => {this.onEvent(event)});\n        impl.addEventListener(\"dblclick\", (event) => {this.onEvent(event)});\n    }\n}","import { dates } from \"./dates\";\n\nexport class DateUtils\n{\n    public parse(datestr:string, format?:string) : Date\n    {\n        return(dates.parse(datestr,format));\n    }\n\n    public format(date:Date, format?:string) : string\n    {\n        return(dates.format(date,format));\n    }\n}","import { Config } from '../application/Config';\nimport { Context } from '../application/Context';\nimport { FormInstance } from '../forms/FormInstance';\nimport { ApplicationImpl } from '../application/ApplicationImpl';\nimport { Component, AfterViewInit, Input, ViewChild, ElementRef } from '@angular/core';\n\n\ninterface Form\n{\n\tname:string;\n\tdef:FormInstance;\n}\n\n\n@Component({\n    selector: 'formlist',\n    template:\n\t`\n\t\t<div #html style=\"display: inline-block; white-space: nowrap;\"></div>\n\t`,\n    styles: []\n  })\n\nexport class FormList implements AfterViewInit\n{\n\tprivate root:Folder;\n\tprivate conf:Config;\n\tprivate page:string = \"\";\n\tprivate app:ApplicationImpl;\n\tprivate html:HTMLDivElement;\n\tprivate ready:boolean = false;\n\tprivate formsdef:FormInstance[];\n\n    @Input('root') name: string = \"/\";\n    @ViewChild(\"html\", {read: ElementRef}) private elem: ElementRef;\n\n    constructor(ctx:Context)\n    {\n\t\tthis.conf = ctx.conf;\n\t\tthis.app = ctx.app[\"_impl_\"];\n\t\tthis.root = new Folder(this.name);\n\t\tthis.conf.notify(this,\"setColors\");\n\n\t\tthis.app.setFormList(this);\n\n\t\tthis.formsdef = this.app.getFormsList();\n\t\tthis.parse();\n\n\t\tthis.page += \"<style>\\n\";\n\t\tthis.page += this.styles()+ \"\\n\";\n\t\tthis.page += \"</style>\\n\";\n\t\tthis.page += \"<div class='formlist'>\\n\";\n\t\tthis.page += this.print(\"/\",this.root,0,[true]);\n\t\tthis.page += \"</div>\\n\";\n\t}\n\n\n\tpublic open(folder:string) : void\n\t{\n\t\tif (!this.ready)\n\t\t{\n\t\t\tsetTimeout(() => {this.open(folder);},10);\n\t\t\treturn;\n\t\t}\n\n\t\tfolder = folder.trim();\n\t\tlet parts:string[] = folder.split(\"/\");\n\n\t\tlet current:Folder = this.root;\n\t\tfor(let i = 0; i < parts.length; i++)\n\t\t{\n\t\t\tcurrent = current.findFolder([parts[i]]);\n\t\t\tif (current == null) return;\n\n\t\t\tif (!current.content.classList.contains(\"formlist-active\"))\n\t\t\t{\n\t\t\t\tcurrent.img.src = \"/assets/images/open.jpg\";\n\t\t\t\tcurrent.content.classList.toggle(\"formlist-active\");\n\t\t\t}\n\t\t}\n\t}\n\n\n\tprivate print(path:string, root:Folder, level:number, last:boolean[]) : string\n\t{\n\t\tlet html:string = \"\";\n\n\t\thtml += this.folder(path,root,level,last);\n\t\thtml += \"<div class='formlist-folder-content' id='\"+path+\"-content'>\";\n\n\t\tlevel++;\n\t\tlast.push(false);\n\t\tif (path == \"/\") path = \"\";\n\t\tlet subs:number = root.folders.length;\n\t\tlet forms:number = root.forms.length;\n\n\t\tfor(let i = 0; i < subs; i++)\n\t\t{\n\t\t\tlet folder:Folder = root.folders[i];\n\n\t\t\tif (i == subs - 1 && forms == 0)\n\t\t\t\tlast[level] = true;\n\n\t\t\thtml += this.print(path+\"/\"+folder.name,folder,level,last);\n\t\t}\n\n\t\tlast[level] = false;\n\t\thtml += this.forms(root,level,last);\n\t\tlast.pop();\n\n\t\thtml += \"</div>\";\n\t\treturn(html);\n\t}\n\n\n\tprivate parse() : void\n\t{\n\t\tfor(let i = 0; i < this.formsdef.length; i++)\n\t\t{\n\t\t\tlet path:string = this.formsdef[i].path;\n\t\t\tif (!this.formsdef[i].navigable) continue;\n\n\t\t\tlet form:string = path;\n\t\t\tlet folder:string = \"/\";\n\n\t\t\tlet pos:number = path.lastIndexOf(\"/\");\n\n\t\t\tif (pos >= 0)\n\t\t\t{\n\t\t\t\tform = path.substring(pos+1);\n\t\t\t\tfolder = path.substring(0,pos);\n\t\t\t}\n\n\t\t\tlet current:Folder = this.root;\n\t\t\tlet parts:string[] = folder.split(\"/\");\n\n\t\t\tfor(let p = 1; p < parts.length; p++)\n\t\t\t{\n\t\t\t\tif (parts[p] == \"\") parts[p] = \"/\";\n\t\t\t\tcurrent = current.getFolder(parts[p].trim());\n\t\t\t}\n\n\t\t\tcurrent.addForm(form,this.formsdef[i]);\n\t\t}\n\t}\n\n\n\tpublic ngAfterViewInit(): void\n\t{\n\t\tthis.html = this.elem?.nativeElement as HTMLDivElement;\n\n\t\tthis.html.innerHTML = this.page;\n\t\tlet folders:HTMLCollectionOf<Element> = this.html.getElementsByClassName(\"formlist-folder\");\n\n\t\tfor (let i = 0; i < folders.length; i++)\n\t\t{\n\t\t\tlet container:Element = folders.item(i);\n\t\t\tlet content:Element = document.getElementById(container.id+\"-content\");\n\t\t\tlet lnk:Element = container.querySelector(\"[id='\"+container.id+\"-lnk']\");\n\t\t\tlet img:HTMLImageElement = container.querySelector(\"[id='\"+container.id+\"-img']\");\n\n\t\t\tlet folder:Folder = this.root.findFolder(container.id.split(\"/\"));\n\n\t\t\tfolder.img = img;\n\t\t\tfolder.lnk = lnk;\n\t\t\tfolder.content = content;\n\t\t\tfolder.img.addEventListener(\"click\",(event) => this.toggle(event));\n\t\t\tfolder.lnk.addEventListener(\"click\",(event) => this.toggle(event));\n\t\t}\n\n\t\tlet forms:HTMLCollectionOf<Element> = this.html.getElementsByClassName(\"formlist-form\");\n\n\t\tfor(let i = 0; i < forms.length; i++)\n\t\t{\n\t\t\tlet form:Element = forms.item(i);\n\t\t\tlet lnk:Element = form.querySelector(\"[id='\"+form.id+\"-lnk']\");\n\t\t\tlnk.addEventListener(\"click\", (event) => this.show(event));\n\t\t}\n\n\t\tthis.setColors();\n\n\t\tthis.open(\"/\");\n\t\tthis.root.lnk.innerHTML = this.name;\n\t\tthis.ready = true;\n\t}\n\n\n\tpublic setColors() : void\n\t{\n\t\tlet link:string = this.conf.colors.link;\n\t\tlet tree:string = this.conf.colors.foldertree;\n\t\tlet list:HTMLCollectionOf<Element> = null;\n\n\t\tlist = this.html.getElementsByClassName(\"formlist-txt\");\n\t\tfor (let i = 0; i < list.length; i++)(list[i] as HTMLElement).style.color = tree;\n\n\t\tlist = this.html.getElementsByClassName(\"formlist-link\");\n\t\tfor (let i = 0; i < list.length; i++)(list[i] as HTMLElement).style.color = link;\n\n\t\tlist = this.html.getElementsByClassName(\"formlist-off\");\n\t\tfor (let i = 0; i < list.length; i++)(list[i] as HTMLElement).style.borderLeft = \"1px solid \"+tree;\n\n\t\tlist = this.html.getElementsByClassName(\"formlist-vln\");\n\t\tfor (let i = 0; i < list.length; i++)(list[i] as HTMLElement).style.borderLeft = \"1px solid \"+tree;\n\n\t\tlist = this.html.getElementsByClassName(\"formlist-cnr\");\n\t\tfor (let i = 0; i < list.length; i++)\n\t\t{\n\t\t\t(list[i] as HTMLElement).style.borderLeft = \"1px solid \"+tree;\n\t\t\t(list[i] as HTMLElement).style.borderBottom = \"1px solid \"+tree;\n\t\t}\n\t}\n\n\n\tprivate toggle(event:any) : void\n\t{\n\t\tlet fname:string = event.target.id;\n\t\tfname = fname.substring(0,fname.length-4);\n\n\t\tlet folder:Folder = this.root.findFolder(fname.split(\"/\"));\n\t\tfolder.content.classList.toggle(\"formlist-active\");\n\n\t\tif (folder.content.classList.contains(\"formlist-active\"))\n\t\t{\n\t\t\tfolder.img.src = \"/assets/images/open.jpg\";\n\t\t}\n\t\telse\n\t\t{\n\t\t\tfolder.img.src = \"/assets/images/closed.jpg\";\n\t\t}\n\t}\n\n\n\tprivate show(event:any) : void\n\t{\n\t\tlet fname:string = event.target.id;\n\t\tfname = fname.substring(0,fname.length-4);\n\t\tthis.app.showform(fname,false);\n\t}\n\n\n\tprivate folder(path:string, root:Folder, level:number, last:boolean[]) : string\n\t{\n\t\tlet html:string = \"\";\n\t\thtml += \"<div id='\"+path+\"' class='formlist-folder'>\\n\";\n\n\t\tif (level > 0)\n\t\t{\n\t\t\thtml += this.half();\n\t\t\tfor(let i = 1; i < level; i++)\n\t\t\t\thtml += this.indent(last[i]);\n\t\t}\n\n\t\tif (level > 0) html += this.pre(last[level]);\n\t\thtml += \"<img class='formlist-img' id='\"+path+\"-img' src='/assets/images/closed.jpg'>\\n\";\n\t\thtml += \"<span class='formlist-txt' id='\"+path+\"-lnk'>\"+root.name+\"</span>\\n\";\n\t\thtml += \"</div>\\n\";\n\n\t\treturn(html);\n\t}\n\n\n\tprivate forms(root:Folder, level:number, last:boolean[]) : string\n\t{\n\t\tlet html:string = \"\";\n\n\t\tfor(let i = 0; i < root.forms.length; i++)\n\t\t{\n\t\t\tif (i == root.forms.length - 1) last[level] = true;\n\t\t\thtml += this.form(root.forms[i],level,last);\n\t\t}\n\n\t\treturn(html);\n\t}\n\n\n\tprivate form(form:Form, level:number, last:boolean[])\n\t{\n\t\tlet html:string = \"\";\n\t\thtml += \"<div id='\"+form.def.name+\"' class='formlist-form'>\\n\";\n\n\t\thtml += this.half();\n\t\tfor(let i = 1; i < level; i++)\n\t\t\thtml += this.indent(last[i]);\n\n\t\tif (level > 0) html += this.pre(last[last.length-1]);\n\n\t\thtml += \"<span class='formlist-link' id='\"+form.def.name+\"-lnk'> \"+form.name+\"</span>\\n\";\n\t\thtml += \"</div>\\n\";\n\n\t\treturn(html);\n\t}\n\n\n\tprivate pre(last:boolean) : string\n\t{\n\t\tlet html:string = \"\";\n\n\t\thtml += \"<span class='formlist-lct'>\\n\";\n\t\thtml += \" <span class='formlist-off'></span>\\n\";\n\t\thtml += \" <span class='formlist-cnr'></span>\\n\";\n\n\t\tif (last) html += \"<span class='formlist-end'></span>\\n\";\n\t\telse\t  html += \"<span class='formlist-vln'></span>\\n\";\n\n\t\thtml += \"</span>\\n\";\n\n\t\treturn(html);\n\t}\n\n\n\tprivate indent(skip:boolean) : string\n\t{\n\t\tlet html:string = \"\";\n\t\tif (skip)\n\t\t{\n\t\t\thtml += \"<span class='formlist-lct'>\\n\";\n\t\t\thtml += \"</span>\\n\";\n\t\t\thtml += \" <span class='formlist-ind'></span>\\n\";\n\t\t}\n\t\telse\n\t\t{\n\t\t\thtml += \"<span class='formlist-lct'>\\n\";\n\t\t\thtml += \" <span class='formlist-vln'></span>\\n\";\n\t\t\thtml += \" <span class='formlist-vln'></span>\\n\";\n\t\t\thtml += \" <span class='formlist-vln'></span>\\n\";\n\t\t\thtml += \"</span>\\n\";\n\t\t\thtml += \" <span class='formlist-ind'></span>\\n\";\n\t\t}\n\t\treturn(html);\n\t}\n\n\n\tprivate half() : string\n\t{\n\t\tlet html:string = \"\";\n\t\thtml += \" <span class='formlist-ind'></span>\\n\";\n\t\treturn(html);\n\t}\n\n\n\tprivate styles() : string\n\t{\n\t\tlet styles:string =\n\t\t`\n\t\t.formlist\n\t\t{\n\t\t\twidth: 1px;\n\t\t\tposition: relative;\n\t\t}\n\n    \t.formlist-folder\n    \t{\n\t\t\tmargin: 0;\n\t\t\tpadding: 0;\n\t\t\twidth: 100%;\n\t\t\theight: 100%;\n\t\t\tfont-size: 0;\n\t\t\tposition: relative;\n\t\t\tborder-collapse: collapse;\n    \t}\n\n\t\t.formlist-folder-content\n\t\t{\n\t\t\tdisplay: none;\n\t\t}\n\n\t\t.formlist-lct\n\t\t{\n\t\t\twidth: 16px;\n\t\t\theight: 24px;\n\t\t\tpointer-events:none;\n\t\t\twhite-space: nowrap;\n\t\t\tdisplay: inline-block;\n\t\t\tvertical-align: middle;\n\t\t}\n\n\t\t.formlist-txt\n\t\t{\n\t\t\twidth: 16px;\n\t\t\theight: 21px;\n\t\t\tfont-size: 15px;\n\t\t\tcursor: pointer;\n\t\t\twhite-space: nowrap;\n\t\t\tdisplay: inline-block;\n\t\t\tvertical-align: bottom;\n\t\t}\n\n\t\t.formlist-off\n\t\t{\n\t\t\twidth: 16px;\n\t\t\theight: 4px;\n\t\t\tdisplay: block;\n\t\t\tpointer-events:none;\n\t\t}\n\n\t\t.formlist-vln\n\t\t{\n\t\t\twidth: 16px;\n\t\t\theight: 12px;\n\t\t\tdisplay: block;\n\t\t\tpointer-events:none;\n\t\t}\n\n\t\t.formlist-cnr\n\t\t{\n\t\t\twidth: 16px;\n\t\t\theight: 8px;\n\t\t\tdisplay: block;\n\t\t\tpointer-events:none;\n\t\t}\n\n\t\t.formlist-end\n\t\t{\n\t\t\twidth: 16px;\n\t\t\theight: 12px;\n\t\t\tdisplay: block;\n\t\t\tpointer-events:none;\n\t\t}\n\n\t\t.formlist-ind\n\t\t{\n\t\t\twidth: 12px;\n\t\t\theight: 24px;\n\t\t\twhite-space: nowrap;\n\t\t\tpointer-events:none;\n\t\t\tdisplay: inline-block;\n\t\t\tvertical-align: middle;\n\t\t}\n\n\t\t.formlist-img\n\t\t{\n\t\t\twidth: 24px;\n\t\t\theight: 24px;\n\t\t\tcursor: pointer;\n\t\t\tvertical-align: middle;\n\t\t}\n\n\t\t.formlist-link\n\t\t{\n\t\t\twidth: 16px;\n\t\t\theight: 22px;\n\t\t\tcursor: pointer;\n\t\t\tfont-size: 15px;\n\t\t\tmargin-left: 8px;\n\t\t\tfont-style: italic;\n\t\t\twhite-space: nowrap;\n\t\t\tdisplay: inline-block;\n\t\t\tvertical-align: bottom;\n\t\t}\n\n\t\t.formlist-form\n\t\t{\n\t\t\tmargin: 0;\n\t\t\tpadding: 0;\n\t\t\tfont-size: 0;\n\t\t\tdisplay: block;\n\t\t\tborder-collapse: collapse;\n\t\t}\n\n\t\t.formlist-active\n\t\t{\n\t\t\tdisplay: block;\n\t\t}\n\t\t`;\n\n\t\treturn(styles);\n\t}\n}\n\n\nclass Folder\n{\n\tname:string;\n\tforms:Form[] = [];\n\tfolders:Folder[] = [];\n\n\tlnk:Element;\n\tcontent:Element;\n\timg:HTMLImageElement;\n\n\tconstructor(name:string)\n\t{\n\t\tthis.name = name;\n\t}\n\n\tgetFolder(next:string) : Folder\n\t{\n\t\tif (next == this.name) return(this);\n\n\t\tfor(let i = 0; i < this.folders.length; i++)\n\t\t\tif (this.folders[i].name == next) return(this.folders[i]);\n\n\t\tlet folder:Folder = new Folder(next);\n\t\tthis.folders.push(folder);\n\n\t\treturn(folder);\n\t}\n\n\tfindFolder(path:string[]) : Folder\n\t{\n\t\twhile(path[0] == \"\") path.shift();\n\t\tif (path.length == 0) return(this);\n\n\t\tlet next:Folder = null;\n\t\tfor(let i = 0; i < this.folders.length; i++)\n\t\t{\n\t\t\tif (this.folders[i].name == path[0])\n\t\t\t{\n\t\t\t\tnext = this.folders[i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (next == null)\n\t\t\treturn(null);\n\n\t\tpath.shift();\n\t\treturn(next.findFolder(path));\n\t}\n\n\taddForm(name:string, form:FormInstance) : void\n\t{\n\t\tthis.forms.push({name:name, def:form});\n\t}\n\n\tprint() : void\n\t{\n\t\tconsole.log(\"\");\n\t\tconsole.log(\"Folder: \"+this.name);\n\n\t\tfor(let i = 0; i < this.forms.length; i++)\n\t\t\tconsole.log(\"Form: \"+this.forms[i].name);\n\n\t\tfor(let i = 0; i < this.folders.length; i++)\n\t\t\tthis.folders[i].print();\n\t}\n}","import { Context } from '../application/Context';\nimport { Application } from '../application/Application';\nimport { ApplicationImpl } from '../application/ApplicationImpl';\nimport { Component, ViewChild, ElementRef, AfterViewInit } from '@angular/core';\n\n\n@Component({\n  selector: 'formarea',\n  template: '<div #formarea></div>',\n  styleUrls: []\n})\n\n\nexport class FormArea implements AfterViewInit\n{\n\tprivate app:Application = null;\n\t@ViewChild(\"formarea\", {read: ElementRef}) private formarea: ElementRef;\n\n\tconstructor(ctx:Context)\n\t{\n\t\tthis.app = ctx.app;\n\t}\n\n\tpublic getFormsArea() : HTMLElement\n\t{\n        return(this.formarea.nativeElement);\n\t}\n\n\tpublic ngAfterViewInit(): void\n\t{\n\t\tlet impl:ApplicationImpl = this.app[\"_impl_\"];\n\t\timpl.setFormArea(this);\n\t}\n}","import { Context } from \"./Context\";\nimport { Popup } from \"../popup/Popup\";\nimport { PopupWindow } from \"../popup/PopupWindow\";\nimport { ApplicationImpl } from \"./ApplicationImpl\";\nimport { PopupInstance } from \"../popup/PopupInstance\";\nimport { AfterViewInit, Component, ElementRef, ViewChild } from \"@angular/core\";\n\n\n@Component({\n    template:\n    `\n        <div #keymap></div>\n        <button style=\"width: 100%; height: 1px\" #ok></button>\n    `\n})\n\n\nexport class KeyMapHelp implements Popup, AfterViewInit\n{\n    public top?: string;\n    public left?: string;\n    public width?: string = \"300px\";\n    public height?: string = \"475px\";\n    public title: string = \"ShortKeys\";\n\n    private html:string = null;\n    private win:PopupWindow = null;\n    private map:HTMLDivElement = null;\n    private okbtn:HTMLButtonElement = null;\n\n    @ViewChild(\"ok\", {read: ElementRef}) private okelem: ElementRef;\n    @ViewChild(\"keymap\", {read: ElementRef}) private mapelem: ElementRef;\n\n\n    public static show(app:ApplicationImpl)\n    {\n        let pinst:PopupInstance = new PopupInstance();\n        pinst.display(app,KeyMapHelp);\n    }\n\n\n    constructor(ctx:Context)\n    {\n        this.title = ctx.conf.keymaptitle;\n        this.html = ctx.conf.keymapping.map;\n    }\n\n\n    public close(_cancel: boolean): void\n    {\n        this.win.closeWindow();\n    }\n\n\n    public setWin(win: PopupWindow): void\n    {\n        this.win = win;\n    }\n\n\n    public ngAfterViewInit(): void\n    {\n\t\tthis.map = this.mapelem?.nativeElement as HTMLDivElement;\n\t\tthis.okbtn = this.okelem?.nativeElement as HTMLButtonElement;\n\n        this.okbtn.addEventListener(\"keydown\",() => this.close(true));\n        this.okbtn.addEventListener(\"keypress\",() => this.close(true));\n\n        this.map.innerHTML = this.html;\n        this.okbtn.focus();\n    }\n}","import { Popup } from \"../popup/Popup\";\nimport { Field } from \"../input/Field\";\nimport { Block } from \"../blocks/Block\";\nimport { keymap } from \"../keymap/KeyMap\";\nimport { Record } from \"../blocks/Record\";\nimport { FieldType } from \"../input/FieldType\";\nimport { Context } from \"../application/Context\";\nimport { Container} from \"../container/Container\";\nimport { PopupWindow } from \"../popup/PopupWindow\";\nimport { KeyTriggerEvent } from \"../events/TriggerEvent\";\nimport { FieldDefinition } from \"../input/FieldDefinition\";\nimport { ApplicationImpl } from \"../application/ApplicationImpl\";\nimport { AfterViewInit, Component, OnInit } from \"@angular/core\";\n\n\n@Component({\n    selector: '',\n    template:\n    `\n        <table style='margin-top: \"20px\"; margin-right: \"10px\"'>\n          <tr>\n            <td>Username</td><td>: <field name='usr'></field> </td>\n          </tr>\n          <tr>\n            <td>Password</td><td>: <field name='pwd'></field> </td>\n          </tr>\n        </table>\n    `\n})\n\n\nexport class LoginForm extends Block implements Popup, OnInit, AfterViewInit\n{\n    private usr:Field;\n    private pwd:Field;\n    private win:PopupWindow;\n    private app:ApplicationImpl;\n\n    public top:string    = \"20%\";\n    public left:string   = \"25%\";\n    public width:string  = \"300px\";\n    public height:string = \"150px\";\n    public tmargin:string = \"20px\";\n    public title:string  = \"Login\";\n\n    constructor(ctx:Context)\n    {\n        super();\n\n        this.app = ctx.app[\"_impl_\"];\n\n        this.addKeyTrigger(this.onEvent,\n        [\n            keymap.enter,\n            keymap.escape,\n            keymap.nextfield,\n            keymap.prevfield\n        ]);\n    }\n\n    public setWin(win:PopupWindow): void\n    {\n        this.win = win;\n    }\n\n    public close(cancel:boolean) : void\n    {\n        this.app.enable();\n        this.win.closeWindow();\n        if (!cancel) this.app.appstate.connection.connect(this.usr.value,this.pwd.value);\n        this.app.getCurrentForm()?.focus();\n    }\n\n    public async onEvent(kevent:KeyTriggerEvent) : Promise<boolean>\n    {\n        if (kevent.key == keymap.enter) this.close(false);\n        if (kevent.key == keymap.escape) this.close(true);\n\n        if (kevent.key == keymap.nextfield && kevent.field == \"usr\")\n        {\n            kevent.event.preventDefault();\n            this.pwd.focus();\n        }\n\n        if (kevent.key == keymap.nextfield && kevent.field == \"pwd\")\n        {\n            kevent.event.preventDefault();\n            this.usr.focus();\n        }\n\n        if (kevent.key == keymap.prevfield && kevent.field == \"usr\")\n        {\n            kevent.event.preventDefault();\n            this.pwd.focus();\n        }\n\n        if (kevent.key == keymap.prevfield && kevent.field == \"pwd\")\n        {\n            kevent.event.preventDefault();\n            this.usr.focus();\n        }\n\n        return(true);\n    }\n\n    public ngOnInit(): void\n    {\n        this.app.disable();\n        this.app.setContainer();\n    }\n\n    public ngAfterViewInit(): void\n    {\n        let container:Container = this.app.getContainer();\n        container.finish();\n\n        container.getBlock(\"\").records.forEach((rec) =>\n        {this[\"_impl_\"].addRecord(new Record(0,rec.fields,rec.index));});\n\n        this.usr = this[\"_impl_\"].getField(0,\"usr\");\n        this.pwd = this[\"_impl_\"].getField(0,\"pwd\");\n\n        let usr:FieldDefinition = {name: \"usr\", mandatory: true, type: FieldType.text};\n        let pwd:FieldDefinition = {name: \"pwd\", mandatory: true, type: FieldType.password};\n\n        this.usr.setDefinition(usr,true);\n        this.pwd.setDefinition(pwd,true);\n\n        this.usr.enable(false);\n        this.pwd.enable(false);\n\n        let field:HTMLInputElement = document.getElementsByName(\"usr\")[1] as HTMLInputElement;\n\n        let width:string = (1.75*field.offsetWidth+10)+\"px\";\n        let height:string = (6*field.offsetHeight+20)+\"px\";\n\n        this.win.resize(width,height);\n\n        this.usr.focus();\n        this.app.dropContainer();\n    }\n}","import { ApplicationImpl } from '../application/ApplicationImpl';\nimport { AfterViewInit, Component, ComponentRef, ElementRef, EmbeddedViewRef, ViewChild } from '@angular/core';\n\n\n@Component({\n    selector: '',\n    template: `\n                <div class=\"wait-modal\">\n                    <canvas #canvas class=\"wait-canvas\" id=\"canvas\"></canvas>\n                    <input #input class=\"wait-input\">\n                </div>\n              `,\n    styles:\n    [\n        `\n        .wait-input\n        {\n            width: 0;\n            height: 0;\n            opacity: 0;\n            filter:alpha(opacity=0);\n        }\n\n        .wait-canvas\n        {\n            top: 25%;\n            left: 40%;\n            width: 320px;\n            height: 160px;\n            position: fixed;\n        }\n\n        .wait-modal\n        {\n            top: 0;\n            left: 0;\n            z-index: 1;\n            opacity: 1;\n            width: 100%;\n            height: 100%;\n            display: block;\n            overflow: auto;\n            position: fixed;\n            box-shadow: inset 0px 0px 400px 110px rgba(0, 0, 0, .2);\n        }\n        `\n    ]\n})\n\nexport class Wait implements AfterViewInit\n{\n    private static ready:boolean = false;\n    private static displayed:boolean = false;\n    private static win:ComponentRef<Wait> = null;\n\n\n    public static show(app:ApplicationImpl) : void\n    {\n        if (Wait.displayed)\n            return;\n\n        Wait.ready = false;\n        Wait.displayed = true;\n        Wait.win = app.builder.createComponent(Wait);\n\n        let element:HTMLElement = (Wait.win.hostView as EmbeddedViewRef<any>).rootNodes[0] as HTMLElement;\n        app.builder.getAppRef().attachView(Wait.win.hostView);\n\n        document.body.appendChild(element);\n        Wait.ready = true;\n    }\n\n\n    public static waiting() : boolean\n    {\n        return(Wait.displayed);\n    }\n\n\n    public static close(app:ApplicationImpl) : void\n    {\n        if (!Wait.displayed)\n            return;\n\n        if (!Wait.ready)\n        {\n            setTimeout(() => {Wait.close(app)},1);\n            return;\n        }\n\n        Wait.displayed = false;\n        let element:HTMLElement = (Wait.win.hostView as EmbeddedViewRef<any>).rootNodes[0] as HTMLElement;\n\t\tdocument.body.removeChild(element);\n\n\t\tapp.builder.getAppRef().detachView(Wait.win.hostView);\n\t\tWait.win.destroy();\n\n        app.getCurrentForm().focus();\n    }\n\n\n    private input:HTMLInputElement = null;\n    private canvas:HTMLCanvasElement = null;\n\n    @ViewChild(\"input\", {read: ElementRef}) private inputElement: ElementRef;\n    @ViewChild(\"canvas\", {read: ElementRef}) private canvasElement: ElementRef;\n\n\n    public ngAfterViewInit(): void\n    {\n\t\tthis.input = this.inputElement?.nativeElement as HTMLInputElement;\n\t\tthis.canvas = this.canvasElement?.nativeElement as HTMLCanvasElement;\n        let ctx:CanvasRenderingContext2D = this.canvas.getContext(\"2d\");\n        setTimeout(() => {this.focus()},10);\n        setTimeout(() => {this.showrunning(ctx,0)},250);\n    }\n\n\n    private focus() : void\n    {\n        if (!Wait.displayed)\n            return;\n\n        this.input.focus();\n        setTimeout(() => {this.focus()},100);\n    }\n\n\n    private showrunning(ctx:CanvasRenderingContext2D, pick:number) : void\n    {\n        if (!Wait.displayed)\n            return;\n\n        ctx.lineWidth = 5;\n        let pcolor:string = \"black\";\n        let bcolor:string = \"#DCDCDC\";\n\n        pick = pick % 3;\n        let rad:number = 6;\n        let off:number = 64;\n\n        ctx.beginPath();\n\n        ctx.strokeStyle=bcolor;\n        if (pick == 0) ctx.strokeStyle=pcolor;\n\n        ctx.arc(rad+off, 2*rad, rad, 0, 2 * Math.PI);\n        ctx.stroke();\n        ctx.closePath();\n\n        ctx.beginPath();\n\n        ctx.strokeStyle=bcolor;\n        if (pick == 1) ctx.strokeStyle=pcolor;\n\n        ctx.arc(6*rad+off, 2*rad, rad, 0, 2 * Math.PI);\n        ctx.stroke();\n        ctx.closePath();\n\n        ctx.beginPath();\n\n        ctx.strokeStyle=bcolor;\n        if (pick == 2) ctx.strokeStyle=pcolor;\n\n        ctx.arc(11*rad+off, 2*rad, rad, 0, 2 * Math.PI);\n        ctx.stroke();\n        ctx.closePath();\n\n        setTimeout(() => {this.showrunning(ctx,pick+1)}, 250);\n    }\n}","import { DropDownMenu } from \"./DropDownMenu\";\nimport { Application } from \"../application/Application\";\nimport { ApplicationImpl } from \"../application/ApplicationImpl\";\n\nexport class MenuInterface\n{\n    private menu$:DropDownMenu;\n    private app$:ApplicationImpl;\n\n\n    constructor(menu:DropDownMenu)\n    {\n        this.menu$ = menu;\n        this.app$ = this.menu$.getApplication()[\"_impl_\"];\n    }\n\n    public get app() : Application\n    {\n        return(this.app$.getApplication());\n    }\n\n    public isConnected() : boolean\n    {\n        return(this.app$.connected);\n    }\n\n    public enable(menu?:string)\n    {\n        this.menu$.enable(menu);\n    }\n\n    public disable(menu?:string)\n    {\n        this.menu$.disable(menu);\n    }\n}","import { Menu } from './Menu';\nimport { Form } from '../forms/Form';\nimport { MenuEntry } from './MenuEntry';\nimport { Config } from '../application/Config';\nimport { MenuInterface } from './MenuInterface';\nimport { Context } from '../application/Context';\nimport { Application } from '../application/Application';\nimport { ApplicationImpl } from '../application/ApplicationImpl';\nimport { WindowListener, onEventListener } from '../events/WindowListener';\nimport { Component, ComponentRef, ViewChild, ElementRef, AfterViewInit } from '@angular/core';\n\n@Component({\n    selector: '',\n    template: '<div #html></div>'\n})\n\n\nexport class DropDownMenu implements onEventListener, AfterViewInit\n{\n    private menu:Menu;\n    private conf:Config;\n    private instance:string;\n    private app$:ApplicationImpl;\n    private html:HTMLDivElement;\n    private static instances:number = 0;\n    private options:Map<string,Option> = new Map<string,Option>();\n    private menus:Map<string,MenuOption> = new Map<string,MenuOption>();\n\n    @ViewChild(\"html\", {read: ElementRef}) private elem: ElementRef;\n\n    private static calls:number = 0;\n    public static setForm(inst:ComponentRef<DropDownMenu>, form:Form) : void\n    {\n        if (inst.instance.getMenu() == null)\n        {\n            if (DropDownMenu.calls++ > 10) return;\n            setTimeout(() => {DropDownMenu.setForm(inst,form)},10);\n            return;\n        }\n\n        inst.instance.getMenu().getHandler().onFormChange(form);\n    }\n\n\n    constructor(private ctx:Context)\n    {\n        this.conf = ctx.conf;\n        this.app$ = ctx.app[\"_impl_\"]; // might not be initialized\n        this.instance = \"DropDownMenu-\"+(DropDownMenu.instances++);\n    }\n\n\n    public getMenu() : Menu\n    {\n        return(this.menu);\n    }\n\n\n    public getApplication() : Application\n    {\n        return(this.app$.getApplication());\n    }\n\n\n    public enable(menu?:string) : void\n    {\n        if (menu == null)\n        {\n            this.menus.forEach((mopt) =>\n            {\n                mopt.elem.classList.remove(\"ddmenu-disabled\");\n                mopt.options.forEach((opt) => {opt.elem.children[0].classList.remove(\"ddmenu-disabled\")});\n            });\n            return;\n        }\n\n        menu = menu.toLowerCase();\n        let mopt:MenuOption = this.menus.get(menu);\n\n        if (mopt != null)\n        {\n            mopt.elem.classList.remove(\"ddmenu-disabled\");\n            mopt.options.forEach((opt) => {opt.elem.children[0].classList.remove(\"ddmenu-disabled\")});\n            return;\n        }\n\n        let option:string = menu;\n        mopt = this.menus.get(menu.substring(0,menu.lastIndexOf(\"/\")));\n        if (mopt == null) return;\n\n        let enabled:number = 0;\n        mopt.options.forEach((opt) =>\n        {\n            if (opt.elem.id == option)\n                opt.elem.children[0].classList.remove(\"ddmenu-disabled\");\n\n            if (!opt.elem.children[0].classList.contains(\"ddmenu-disabled\"))\n                enabled++;\n        });\n\n        if (enabled > 0) mopt.elem.classList.remove(\"ddmenu-disabled\");\n    }\n\n\n    public disable(menu?:string) : void\n    {\n        if (menu == null)\n        {\n            this.menus.forEach((mopt) =>\n            {\n                mopt.elem.classList.add(\"ddmenu-disabled\");\n                mopt.options.forEach((opt) => {opt.elem.children[0].classList.add(\"ddmenu-disabled\")});\n            });\n            return;\n        }\n\n        menu = menu.toLowerCase();\n        let mopt:MenuOption = this.menus.get(menu);\n\n        if (mopt != null)\n        {\n            mopt.elem.classList.add(\"ddmenu-disabled\");\n            mopt.options.forEach((opt) => {opt.elem.children[0].classList.add(\"ddmenu-disabled\")});\n            return;\n        }\n\n        let option:string = menu;\n        mopt = this.menus.get(menu.substring(0,menu.lastIndexOf(\"/\")));\n        if (mopt == null) return;\n\n        let enabled:number = 0;\n        mopt.options.forEach((opt) =>\n        {\n            if (opt.elem.id == option)\n                opt.elem.children[0].classList.add(\"ddmenu-disabled\");\n\n            if (!opt.elem.children[0].classList.contains(\"ddmenu-disabled\"))\n                enabled++;\n        });\n\n        if (enabled == 0) mopt.elem.classList.add(\"ddmenu-disabled\");\n    }\n\n\n    public display(menu?:Menu) : void\n    {\n        if (menu == null)\n            return;\n\n        if (this.html == null)\n        {\n            setTimeout(() => {this.display(menu);},10);\n            return;\n        }\n\n        this.app$ = this.ctx.app[\"_impl_\"];\n\n        this.menu = menu;\n        let intf:MenuInterface = new MenuInterface(this);\n        menu.getHandler()[\"__menu__\"] = intf;\n\n        this.menu = menu;\n        this.html.innerHTML = this.menuhtml();\n        let menus:HTMLCollectionOf<Element> = this.html.getElementsByClassName(\"ddmenu-menu\");\n        let options:HTMLCollectionOf<Element> = this.html.getElementsByClassName(\"ddmenu-option\");\n\n        for(let i = 0; i < menus.length; i++)\n        {\n            let mopt:MenuOption = new MenuOption(menus[i].children[0]);\n            this.menus.set(mopt.elem.id,mopt);\n            mopt.elem.classList.add(\"ddmenu-default\");\n            mopt.elem.classList.add(\"ddmenu-disabled\");\n\t\t\tmopt.elem.addEventListener(\"click\", (event) => {this.toggle(event)});\n        }\n\n        for(let i = 0; i < options.length; i++)\n        {\n            let id:string = options[i].id;\n            let menu:string = id.substring(0,id.lastIndexOf(\"/\"));\n\n            let opt:Option = this.options.get(id);\n            options[i].children[0].classList.add(\"ddmenu-disabled\");\n\t\t\toptions[i].addEventListener(\"click\", (event) => {this.action(event)});\n            opt.elem = options[i];\n\n            let mopt:MenuOption = this.menus.get(menu);\n            mopt.options.push(opt);\n        }\n\n        menu.getHandler().onInit();\n    }\n\n\n    public onEvent(event:any) : void\n    {\n        if (!event.target.matches('.ddmenu-entry'))\n        {\n            this.closeall();\n            WindowListener.remove(this.instance,\"click\");\n        }\n    }\n\n\n    private action(event:any) : void\n    {\n        let handler:any = this.menu.getHandler();\n\n        let link:Element = null;\n        let text:Element = event.target;\n\n        if (text.classList.contains(\"ddmenu-linktext\"))\n        {\n            link = text.parentElement;\n        }\n        else\n        {\n            link = text;\n            text = text.children[0];\n        }\n\n        if (text.classList.contains(\"ddmenu-disabled\"))\n            return;\n\n        let opt:Option = this.options.get(link.id);\n        if (opt.option.action != null) handler[opt.option.action]();\n    }\n\n\n\tprivate toggle(event:any) : void\n\t{\n\t\tlet menu:HTMLElement = event.target;\n        let container:HTMLDivElement = menu.parentNode.children[1] as HTMLDivElement;\n        if (menu.classList.contains(\"ddmenu-disabled\")) return;\n\n        container.classList.toggle(\"ddmenu-show\");\n\n        if (container.classList.contains(\"ddmenu-show\"))\n        {\n            this.closeall(container);\n            WindowListener.add(this.instance,this,\"click\");\n        }\n        else\n        {\n            container.classList.remove(\"ddmenu-show\");\n        }\n\t}\n\n\n    private closeall(except?:Element) : void\n    {\n        let open:HTMLCollectionOf<Element> = this.html.getElementsByClassName(\"ddmenu-show\");\n\n        for(let i = 0; i < open.length; i++)\n        {\n            if (except == null || open[i].id != except.id)\n                open[i].classList.remove(\"ddmenu-show\");\n        }\n    }\n\n\n    private menuhtml() : string\n    {\n        let html:string = \"\";\n\n\t\thtml += \"<style>\\n\";\n\t\thtml += this.styles()+ \"\\n\";\n\t\thtml += \"</style>\\n\";\n\t\thtml += \"<span class='ddmenu-bar'>\\n\";\n\t\thtml += this.entries(\"\",\"\",this.menu.getEntries());\n\t\thtml += \"</span>\\n\";\n\n        return(html);\n    }\n\n\n    private entries(indent:string, path:string, entries:MenuEntry[]) : string\n    {\n        let html:string = \"\";\n\n        for(let i = 0; i < entries.length; i++)\n        {\n            let id:string = path+\"/\"+entries[i].name.toLowerCase();\n\n            html += indent+\"<div class='ddmenu-menu'>\\n\";\n            html += indent+\"  <button class='ddmenu-entry' id='\"+id+\"'>\\n\";\n            html += indent+entries[i].name;\n            html += indent+\"  </button>\\n\";\n            html += indent+\"  <div class='ddmenu-content' id='\"+id+\"-content'>\\n\";\n\n            if (entries[i].options != null)\n            {\n                for(let f = 0; f < entries[i].options.length; f++)\n                {\n                    let entry:MenuEntry = entries[i].options[f];\n                    let oid:string = id+\"/\"+entry.name.toLowerCase();\n                    this.options.set(oid,new Option(entries[i].options[f]));\n\n                    html += indent+\"    <a class='ddmenu-option' id='\"+oid+\"'>\\n\";\n                    html += indent+\"      <span class='ddmenu-linktext'>\"+entry.name+\"</span>\\n\";\n                    html += indent+\"    </a>\\n\";\n                }\n            }\n\n            html += indent+\"  </div>\\n\";\n            html += indent+\"</div>\\n\";\n        }\n\n        return(html);\n    }\n\n\n\tprivate styles() : string\n\t{\n        let style:string =\n        `\n            .ddmenu-bar\n            {\n                width: 100%;\n                height: 100%;\n                display: flex;\n                position: relative;\n                white-space: nowrap;\n                background: transparent;\n            }\n\n            .ddmenu-entry\n            {\n                padding: 0;\n                border: none;\n                color: `+this.conf.colors.menuoption+`;\n                outline:none;\n                cursor: pointer;\n                font-size: 15px;\n                margin-top: 1px;\n                margin-left: 4px;\n                margin-right: 4px;\n                margin-bottom: 1px;\n                background: transparent;\n            }\n\n            .ddmenu-default\n            {\n                color: `+this.conf.colors.enabled+`;\n            }\n\n            .ddmenu-disabled\n            {\n                color: `+this.conf.colors.disabled+`;\n            }\n\n            .ddmenu-menu\n            {\n                position: relative;\n                display: inline-block;\n            }\n\n            .ddmenu-content\n            {\n                z-index: 1;\n                display: none;\n                overflow: none;\n                min-width: 80px;\n                position: absolute;\n                background-color: #f1f1f1;\n                color: `+this.conf.colors.menuoption+`;\n                box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);\n            }\n\n            .ddmenu-option\n            {\n                border: none;\n                color: black;\n                outline:none;\n                cursor: pointer;\n                font-size: 15px;\n                background: transparent;\n            }\n\n            .ddmenu-content .ddmenu-option\n            {\n                color: black;\n                display: block;\n                padding: 12px 16px;\n                text-decoration: none;\n            }\n\n            .ddmenu-content .ddmenu-option:hover\n            {\n                background-color: #ddd;\n            }\n\n            .ddmenu-show\n            {\n                display: block;\n            }\n        `;\n\n        return(style);\n    }\n\n    public ngAfterViewInit(): void\n    {\n        this.html = this.elem?.nativeElement as HTMLDivElement;\n    }\n}\n\n\nclass MenuOption\n{\n    elem:Element;\n    options:Option[] = [];\n\n    constructor(elem:Element)\n    {\n        this.elem = elem;\n    }\n}\n\n\nclass Option\n{\n    elem:Element;\n    option:MenuEntry;\n\n    constructor(option:MenuEntry)\n    {\n        this.option = option;\n    }\n}","import { Menu } from './Menu';\nimport { Builder } from \"../utils/Builder\";\nimport { ComponentRef } from '@angular/core';\nimport { DropDownMenu } from './DropDownMenu';\nimport { ApplicationImpl } from '../application/ApplicationImpl';\n\n\nexport class MenuFactory\n{\n    constructor(private builder:Builder) {}\n\n    public create(menu?:Menu) : ComponentRef<DropDownMenu>\n    {\n        let ref:ComponentRef<DropDownMenu> = this.builder.createComponent(DropDownMenu);\n        (ref.instance as DropDownMenu).display(menu);\n        return(ref);\n    }\n}","import { Utils } from \"../utils/Utils\";\nimport { FormInstance } from \"./FormInstance\";\nimport { WindowOptions } from \"./WindowOptions\";\nimport { FormDefinition } from \"../../public-api\";\n\n\nexport class FormUtil\n{\n    private utils:Utils = new Utils();\n\n    public complete(options:WindowOptions, create?:boolean) : WindowOptions\n    {\n        if (options == null)\n        {\n            if (create) options = {};\n            else        return(null);\n        }\n\n        if (!options.hasOwnProperty(\"wizard\")) options.wizard = false;\n        if (!options.hasOwnProperty(\"inherit\")) options.inherit = true;\n\n        if (!options.hasOwnProperty(\"width\")) options.width = \"99.65vw\";\n        if (!options.hasOwnProperty(\"height\")) options.height = \"99.5vh\";\n        if (!options.hasOwnProperty(\"offsetTop\")) options.offsetTop = \"0\";\n        if (!options.hasOwnProperty(\"offsetLeft\")) options.offsetLeft = \"0\";\n        return(options);\n    }\n\n\n    public convert(form:FormDefinition) : FormInstance\n    {\n        let fname:string = this.utils.getName(form.component);\n\n        let navigable:boolean = true;\n\n        form.windowopts = this.complete(form.windowopts);\n        if (form.hasOwnProperty(\"navigable\")) navigable = form.navigable;\n\n        let path:string = \"/\"+fname;\n        if (form.hasOwnProperty(\"path\")) path = form.path;\n\n        path = path.trim();\n        if (!path.startsWith(\"/\")) path = \"/\" + path;\n\n        let def:FormInstance =\n        {\n            name: fname,\n            path: form.path,\n            title: form.title,\n            navigable: navigable,\n            component: form.component,\n            windowdef: form.windowopts\n        };\n\n        return(def);\n    }\n\n\n    public clone(base:FormInstance) : FormInstance\n    {\n        let clone:FormInstance =\n        {\n            name: base.name,\n            path: base.path,\n            title: base.title,\n            windowdef: base.windowdef,\n            windowopts: base.windowdef,\n            component: base.component,\n            navigable: base.navigable\n        }\n        return(clone);\n    }\n}","import { Form } from \"./Form\";\nimport { FormImpl } from \"./FormImpl\";\nimport { FormInstance } from './FormInstance';\nimport { Config } from \"../application/Config\";\nimport { Context } from \"../application/Context\";\nimport { DropDownMenu } from \"../menu/DropDownMenu\";\nimport { ApplicationImpl } from '../application/ApplicationImpl';\nimport { WindowListener, onEventListener } from \"../events/WindowListener\";\nimport { Component, ViewChild, ElementRef, AfterViewInit, EmbeddedViewRef, ChangeDetectionStrategy, ChangeDetectorRef, ComponentRef } from '@angular/core';\n\n\n@Component({\n  selector: 'modalwindow',\n  template:\n  `\n    <div class=\"modalwindow\">\n      <div #window class=\"modalwindow-modal-block\" style=\"top: {{top}}; left: {{left}}\">\n        <div class=\"modalwindow-container\" style=\"width: {{width}}; height: {{height}};\">\n\t\t  <div #topbar class=\"modalwindow-topbar\" style=\"color: {{tcolor}}; background-color: {{bcolor}}\">\n\t\t    <span class=\"modalwindow-center\" style=\"color: {{tcolor}};\">\n\t\t\t\t<span class=\"modalwindow-corner\"></span>\n\t\t\t\t<div #menu></div>\n\t\t\t\t<span class=\"modalwindow-close\">\n\t\t\t\t\t<button class=\"modalwindow-button\" style=\"color: {{btncolor}};\" (click)=\"close()\">X</button>\n\t\t\t\t</span>\n\t\t\t</span>\n\t\t  </div>\n          <div class=\"modalwindow-block\" style=\"margin-top: {{tmargin}};\"><div #content></div></div>\n        </div>\n      </div>\n    </div>\n  `,\n  styles:\n  [`\n    .modalwindow\n    {\n        top: 0;\n        left: 0;\n        z-index: 1;\n        width: 100%;\n        height: 100%;\n        display: block;\n        overflow: auto;\n        position: fixed;\n    }\n\n    .modalwindow-modal-block\n    {\n      position: absolute;\n      background-color: #fefefe;\n    }\n\n    .modalwindow-container\n    {\n        position: relative;\n        border: 2px solid black;\n    }\n\n    .modalwindow-topbar\n    {\n        height: 1.70em;\n        margin-left: 0;\n        margin-right: 0;\n        cursor:default;\n\t\tjustify-content: center;\n        border-bottom: 2px solid black;\n    }\n\n\t.modalwindow-corner\n\t{\n\t\twidth: 2.5em;\n\t\tdisplay: block;\n\t\tposition: relative;\n\t}\n\n\t.modalwindow-close\n\t{\n\t\ttop: 0;\n\t\tright: 0;\n\t\twidth: 1.75em;\n\t\theight: 1.70em;\n\t\tposition: absolute;\n\t\tborder-left: 1px solid black;\n\t}\n\n\t.modalwindow-button\n\t{\n\t\ttop: 50%;\n\t\twidth: 100%;\n\t\theight: 100%;\n\t\toutline:none;\n\t\tfont-size: 0.75em;\n\t\tfont-weight: bold;\n\t\tposition: relative;\n\t\tbackground: transparent;\n\t\ttransform: translateY(-50%);\n\t\tborder: 0px solid transparent;\n\t\tbox-shadow: 0px 0px 0px transparent;\n\t\ttext-shadow: 0px 0px 0px transparent;\n\t}\n\n\t.modalwindow-center\n\t{\n\t\ttop: 0;\n\t\tbottom: 0;\n\t\twidth: 93%;\n\t\theight: 100%;\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tjustify-content: center;\n\t}\n\n    .modalwindow-block\n    {\n        left: 0;\n        top: 3vh;\n        right: 0;\n        bottom: 0;\n\t\tdisplay: flex;\n        overflow: auto;\n        position: absolute;\n\t\tjustify-content: center;\n    }\n`],\nchangeDetection: ChangeDetectionStrategy.OnPush\n})\n\nexport class ModalWindow implements onEventListener, AfterViewInit\n{\n\tprivate conf:Config;\n\tprivate form:FormInstance;\n\tprivate app:ApplicationImpl;\n\tprivate element:HTMLElement;\n\tprivate menu:HTMLDivElement;\n\tprivate menuelem:HTMLElement;\n    private window:HTMLDivElement;\n    private topbar:HTMLDivElement;\n\tprivate content:HTMLDivElement;\n\tprivate winref:ComponentRef<any>;\n\tprivate menuref:ComponentRef<any>;\n\n    public top : string = null;\n    public left : string = null;\n    public width : string = \"99vw\";\n    public height : string = \"98vh\";\n    public tmargin : string = \"1vh\";\n\n    @ViewChild(\"menu\", {read: ElementRef}) private menuElement: ElementRef;\n    @ViewChild(\"window\", {read: ElementRef}) private windowElement: ElementRef;\n    @ViewChild(\"topbar\", {read: ElementRef}) private topbarElement: ElementRef;\n\t@ViewChild('content', {read: ElementRef}) private contentElement:ElementRef;\n\n\tprivate minw:number = 0;\n\tprivate minh:number = 0;\n\n\tprivate offx:number = 0;\n\tprivate offy:number = 0;\n\n\tprivate posy:number;\n\tprivate posx:number;\n\n\tprivate sizex:number;\n\tprivate sizey:number;\n\n\tprivate move:boolean = false;\n\tprivate resz:boolean = false;\n\n\tprivate resizex:boolean = false;\n\tprivate resizey:boolean = false;\n\n\n\tconstructor(ctx:Context, private change:ChangeDetectorRef)\n\t{\n\t\tthis.conf = ctx.conf;\n\t}\n\n\tpublic get tcolor() : string\n\t{\n\t\treturn(this.conf.colors.title);\n\t}\n\n\tpublic get bcolor() : string\n\t{\n\t\treturn(this.conf.colors.topbar);\n\t}\n\n\tpublic get btncolor() : string\n\t{\n\t\treturn(this.conf.colors.menuoption);\n\t}\n\n\n\tpublic setForm(form:FormInstance) : void\n\t{\n\t\tthis.resize(form,true);\n\n\t\tlet impl:FormImpl = form.formref.instance[\"_impl_\"];\n\t\timpl.setModalWindow(this);\n\n\t\tthis.form = form;\n\t}\n\n\n\tpublic getForm() : Form\n\t{\n\t\treturn(this.form.formref.instance);\n\t}\n\n\n\tpublic newForm(form:FormInstance) : void\n\t{\n\t\tif (!form.windowopts?.inherit)\n\t\t\tthis.resize(form,false);\n\n\t\tlet formelem:Element = this.content.firstElementChild;\n\t\tif (formelem != null) this.content.removeChild(formelem);\n\t\tthis.app.builder.getAppRef().detachView(this.form.formref.hostView);\n\n\t\tif (this.menuelem != null)\n\t\t{\n\t\t\tlet menuelem = this.menu.firstElementChild;\n\t\t\tif (menuelem != null) this.menu.removeChild(this.menuelem);\n\t\t\tthis.app.builder.getAppRef().detachView(this.menuref.hostView);\n\t\t}\n\n\t\tlet impl:FormImpl = form.formref.instance[\"_impl_\"];\n\t\timpl.setModalWindow(this);\n\n\t\tthis.form = form;\n\t\tthis.display();\n\t}\n\n\n\tpublic setWinRef(winref:ComponentRef<any>) : void\n\t{\n\t\tthis.winref = winref;\n\t}\n\n\n\tpublic setApplication(app:ApplicationImpl) : void\n\t{\n\t\tthis.app = app;\n\t}\n\n\n\tpublic close() : void\n\t{\n\t\tlet impl:FormImpl = this.form.formref.instance[\"_impl_\"];\n\t\tthis.closeWindow();\n\t\timpl.cancel();\n\t}\n\n\n\tpublic closeWindow() : void\n\t{\n\t\tWindowListener.remove(\"modal\",\"mouseup\");\n\t\tWindowListener.remove(\"modal\",\"mousemove\");\n\t\tWindowListener.remove(\"modal\",\"mousedown\");\n\n\t\tlet formelem:Element = this.content.firstElementChild;\n\t\tif (formelem != null) this.content.removeChild(formelem);\n\t\tthis.app.builder.getAppRef().detachView(this.form.formref.hostView);\n\n\t\tlet element:HTMLElement = (this.winref.hostView as EmbeddedViewRef<any>).rootNodes[0] as HTMLElement;\n\t\tdocument.body.removeChild(element);\n\n\t\tthis.app.builder.getAppRef().detachView(this.winref.hostView);\n\t\tthis.winref.destroy();\n\n\t\tthis.winref = null;\n\t}\n\n\n\tprivate resize(form:FormInstance, pos:boolean) : void\n\t{\n\t\tif (form.windowopts.offsetLeft != null && form.windowopts.offsetLeft.trim().endsWith(\"%\"))\n\t\t{\n\t\t\tlet s:string = form.windowopts.offsetLeft.trim();\n\t\t\tlet n:number = +s.substring(0,s.length-1);\n\t\t\tform.windowopts.offsetLeft = (window.innerWidth*n/100)+\"px\";\n\t\t}\n\n\t\tif (form.windowopts.width != null && form.windowopts.width.trim().endsWith(\"%\"))\n\t\t{\n\t\t\tlet s:string = form.windowopts.width.trim();\n\t\t\tlet n:number = +s.substring(0,s.length-1);\n\t\t\tform.windowopts.width = (window.innerWidth*n/100)+\"px\";\n\t\t}\n\n\t\tif (form.windowopts.offsetTop != null && form.windowopts.offsetTop.trim().endsWith(\"%\"))\n\t\t{\n\t\t\tlet s:string = form.windowopts.offsetTop.trim();\n\t\t\tlet n:number = +s.substring(0,s.length-1);\n\t\t\tform.windowopts.offsetTop = (window.innerHeight*n/100)+\"px\";\n\t\t}\n\n\t\tif (form.windowopts.height != null && form.windowopts.height.trim().endsWith(\"%\"))\n\t\t{\n\t\t\tlet s:string = form.windowopts.height.trim();\n\t\t\tlet n:number = +s.substring(0,s.length-1);\n\t\t\tform.windowopts.height = (window.innerHeight*n/100)+\"px\";\n\t\t}\n\n\t\tif (pos)\n\t\t{\n\t\t\tthis.top = form.windowopts.offsetTop;\n\t\t\tthis.left = form.windowopts.offsetLeft;\n\n\t\t\tif (this.top == \"undefined\") this.top = null;\n\t\t\tif (this.left == \"undefined\") this.left = null;\n\t\t}\n\n\t\tthis.width = form.windowopts.width;\n\t\tthis.height = form.windowopts.height;\n\n\t\tif (form.windowopts.width == \"\")\n\t\t{\n\t\t\tthis.left = \"0\";\n\t\t\tthis.width = \"100%\";\n\t\t}\n\n\t\tif (form.windowopts.height == \"\")\n\t\t{\n\t\t\tthis.top = \"0\";\n\t\t\tthis.height = \"100%\";\n\t\t}\n\n\t\tthis.change.detectChanges();\n\t}\n\n\n\tprivate display() : void\n\t{\n\t\tif (this.form == null)\n\t\t{\n\t\t\tsetTimeout(() => {this.display();},10);\n\t\t\treturn;\n\t\t}\n\n\t\tthis.element = (this.form.formref.hostView as EmbeddedViewRef<any>).rootNodes[0] as HTMLElement;\n\t\tthis.app.builder.getAppRef().attachView(this.form.formref.hostView);\n\t\tthis.content.appendChild(this.element);\n\n\t\tthis.minh = 100;\n\t\tthis.minw = 450;\n\n\t\tthis.showmenu()\n\t\tthis.change.detectChanges();\n\n\t\tthis.posy = this.window.offsetTop;\n\t\tthis.posx = this.window.offsetLeft;\n\t\tthis.sizex = this.window.offsetWidth;\n\t\tthis.sizey = this.window.offsetHeight;\n\n\t\tlet resize:boolean = false;\n\n\t\tif (this.sizex < this.minw)\n\t\t{\n\t\t\tresize = true;\n\t\t\tthis.sizex = this.minw;\n\t\t\tthis.width = this.sizex+\"px\";\n\t\t}\n\n\t\tif (this.sizey < this.minh)\n\t\t{\n\t\t\tresize = true;\n\t\t\tthis.sizey = this.minh;\n\t\t\tthis.height = this.sizey+\"px\";\n\t\t}\n\n\t\tif (this.top == null || this.top.trim().length == 0)\n\t\t{\n\t\t\tresize = true;\n\t\t\tthis.top = ((+window.innerHeight - this.sizey)/3)+\"px\";\n\t\t}\n\n\t\tif (this.left == null || this.left.trim().length == 0)\n\t\t{\n\t\t\tresize = true;\n\t\t\tthis.left = ((+window.innerWidth - this.sizex)/3)+\"px\";\n\t\t}\n\n\t\tif (resize)\n\t\t{\n\t\t\tthis.change.detectChanges();\n\n\t\t\tthis.posy = this.window.offsetTop;\n\t\t\tthis.posx = this.window.offsetLeft;\n\t\t\tthis.sizex = this.window.offsetWidth;\n\t\t\tthis.sizey = this.window.offsetHeight;\n\t\t}\n\t}\n\n\n\tprivate showmenu() : void\n\t{\n\t\tlet impl:FormImpl = this.form.formref.instance[\"_impl_\"];\n\n\t\tthis.menuelem = null;\n\t\tthis.menuref = impl.getDropDownMenu();\n\n\t\tif (this.menuref == null) return;\n\t\tthis.menuelem = (this.menuref.hostView as EmbeddedViewRef<any>).rootNodes[0] as HTMLElement;\n\t\tthis.app.builder.getAppRef().attachView(this.menuref.hostView);\n\t\tthis.menu.appendChild(this.menuelem);\n\n\t\tlet ddmenu:DropDownMenu = this.menuref.instance;\n\t\tthis.initmenu(ddmenu);\n\t}\n\n\n\tprivate initmenu(ddmenu:DropDownMenu) : void\n\t{\n\t\tif (ddmenu.getMenu() == null)\n\t\t{\n\t\t\tsetTimeout(() => {this.initmenu(ddmenu)},10);\n\t\t\treturn;\n\t\t}\n\n\t\tlet impl:FormImpl = this.form.formref.instance[\"_impl_\"];\n\t\tddmenu.getMenu().getHandler().onFormChange(impl.form);\n\n\t\tthis.minw = this.menu.clientWidth + 50;\n\n\t\tif (this.sizex < this.minw)\n\t\t{\n\t\t\tthis.sizex = this.minw;\n\t\t\tthis.width = this.sizex+\"px\";\n\t\t\tthis.change.detectChanges();\n\t\t}\n\t}\n\n\n\tpublic ngAfterViewInit(): void\n\t{\n\t\tthis.menu = this.menuElement?.nativeElement as HTMLDivElement;\n\t\tthis.window = this.windowElement?.nativeElement as HTMLDivElement;\n\t\tthis.topbar = this.topbarElement?.nativeElement as HTMLDivElement;\n\t\tthis.content = this.contentElement?.nativeElement as HTMLDivElement;\n\n\t\tthis.display();\n\n\t\tWindowListener.add(\"modal\",this,\"mouseup\");\n\t\tWindowListener.add(\"modal\",this,\"mousemove\");\n\t\tWindowListener.add(\"modal\",this,\"mousedown\");\n\n\t\tthis.topbar.addEventListener(\"mousedown\", (event) => {this.startmove(event);});\n\t}\n\n\n    public onEvent(event:any) : void\n\t{\n\t\tswitch(event.type)\n\t\t{\n\t\t\tcase \"mouseup\":\n\t\t\t\tthis.mouseup();\n\t\t\t\tbreak;\n\n\t\t\tcase \"mousemove\":\n\t\t\t\tthis.movePopup(event);\n\t\t\t\tthis.resizePopup(event);\n\t\t\t\tthis.resizemousemove(event);\n\t\t\t\tbreak;\n\n\t\t\tcase \"mousedown\":\n\t\t\t\tthis.startresize(event);\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\tprivate startmove(event:any) : void\n\t{\n\t\tif (this.resizexy)\n\t\t\treturn;\n\n\t\tthis.move = true;\n\n\t\tevent = event || window.event;\n\t\tevent.preventDefault();\n\n\t\tthis.offy = +event.clientY - this.posy;\n\t\tthis.offx = +event.clientX - this.posx;\n\t}\n\n\tprivate mouseup()\n\t{\n\t\tif (!this.move && !this.resz)\n\t\t\treturn;\n\n\t\tthis.move = false;\n\t\tthis.resz = false;\n\t\tthis.resizexy = false;\n\n\t\tthis.window.style.cursor = \"default\";\n\t\tdocument.body.style.cursor = \"default\";\n\t}\n\n\tprivate movePopup(event:any) : void\n\t{\n\t\tif (!this.move) return;\n\t  \tevent = event || window.event;\n\n\t\tlet deltay:number = +event.clientY - this.posy;\n\t\tlet deltax:number = +event.clientX - this.posx;\n\n\t\tthis.posy += (deltay - this.offy);\n\t\tthis.posx += (deltax - this.offx);\n\n\t\tif (this.posy > 0)\n\t\t\tthis.top = this.posy + \"px\";\n\n\t\tif (this.posx > 0)\n\t\t\tthis.left = this.posx + \"px\";\n\n\t\tthis.change.detectChanges();\n\t}\n\n\n\tprivate resizemousemove(event:any) : any\n\t{\n\t\tif (this.resz) return;\n\n\t\tevent = event || window.event;\n\t\tlet posx:number = +event.clientX;\n\t\tlet posy:number = +event.clientY;\n\n\t\tlet offx:number = this.posx + this.sizex - posx;\n\t\tlet offy:number = this.posy + this.sizey - posy;\n\n\t\tlet before:boolean = false;\n\t\tif (this.resizex || this.resizey) before = true;\n\n\t\tthis.resizex = false;\n\t\tthis.resizey = false;\n\n\t\tif (offx > -7 && offx < 10 && posy > this.posy - 7 && posy < this.posy + this.sizey + 7) this.resizex = true;\n\t\tif (offy > -7 && offy < 10 && posx > this.posx - 7 && posx < this.posx + this.sizex + 7) this.resizey = true;\n\n\t\tif (this.resizex && this.resizey)\n\t\t{\n\t\t\tthis.resizex = true;\n\t\t\tthis.resizey = true;\n\t\t}\n\n\t\tif (this.resizex && !this.resizey)\n\t\t{\n\t\t\tthis.window.style.cursor = \"e-resize\";\n\t\t\tdocument.body.style.cursor = \"e-resize\";\n\t\t}\n\n\t\tif (this.resizey && !this.resizex)\n\t\t{\n\t\t\tthis.window.style.cursor = \"s-resize\";\n\t\t\tdocument.body.style.cursor = \"s-resize\";\n\t\t}\n\n\t\tif (this.resizex && this.resizey)\n\t\t{\n\t\t\tthis.window.style.cursor = \"se-resize\";\n\t\t\tdocument.body.style.cursor = \"se-resize\";\n\t\t}\n\n\t\tif (before && !this.resizexy)\n\t\t{\n\t\t\tthis.window.style.cursor = \"default\";\n\t\t\tdocument.body.style.cursor = \"default\";\n\t\t}\n\t}\n\n\tprivate startresize(event:any) : void\n\t{\n\t  \tif (!this.resizexy)\n\t\t  return;\n\n\t\tthis.resz = true;\n\t\tevent = event || window.event;\n\t\tevent.preventDefault();\n\n\t\tthis.offy = +event.clientY;\n\t\tthis.offx = +event.clientX;\n\t}\n\n\tprivate resizePopup(event:any) : void\n\t{\n\t\tif (!this.resz) return;\n\t  \tevent = event || window.event;\n\n\t\tlet deltay:number = +event.clientY - this.offy;\n\t\tlet deltax:number = +event.clientX - this.offx;\n\n\t\tif (this.resizex && (this.sizex > this.minw || deltax > 0))\n\t\t{\n\t\t\tthis.sizex += deltax;\n\t\t\tthis.width = this.sizex+\"px\";\n\t\t}\n\n\t\tif (this.resizey && (this.sizey > this.minh || deltay > 0))\n\t\t{\n\t\t\tthis.sizey += deltay;\n\t\t\tthis.height = this.sizey+\"px\";\n\t\t}\n\n\t\tthis.offy = +event.clientY;\n\t\tthis.offx = +event.clientX;\n\n\t\tthis.change.detectChanges();\n\t}\n\n\tprivate get resizexy() : boolean\n\t{\n\t\tif (this.resizex || this.resizey) return(true);\n\t\treturn(false);\n\t}\n\n\tprivate set resizexy(on:boolean)\n\t{\n\t\tthis.resizex = on;\n\t\tthis.resizey = on;\n\t}\n}","import { Form } from \"./Form\";\nimport { FormUtil } from \"./FormUtil\";\nimport { FormImpl } from \"./FormImpl\";\nimport { FormArea } from \"./FormArea\";\nimport { Utils } from \"../utils/Utils\";\nimport { InstanceID } from \"./InstanceID\";\nimport { Builder } from \"../utils/Builder\";\nimport { ModalWindow } from \"./ModalWindow\";\nimport { FormInstance } from \"./FormInstance\";\nimport { FormDefinition } from \"./FormsDefinition\";\nimport { EmbeddedViewRef, ComponentRef } from '@angular/core';\nimport { ApplicationImpl } from \"../application/ApplicationImpl\";\n\n\ninterface Current\n{\n    formdef:FormInstance,\n    element:HTMLElement\n}\n\n\nexport class FormsControl\n{\n    private current:Current;\n    private formarea:FormArea;\n    private utils:Utils = new Utils();\n    private formlist:FormInstance[] = [];\n    private forms:Map<string,FormInstance> = new Map<string,FormInstance>();\n\n    constructor(private app:ApplicationImpl, private builder:Builder) {}\n\n\n    public setFormArea(formarea:FormArea) : void\n    {\n        this.formarea = formarea;\n    }\n\n\n    public setFormsDefinitions(forms:FormDefinition[]) : Map<string,FormInstance>\n    {\n        let futil:FormUtil = new FormUtil();\n\n        for(let i=0; i < forms.length; i++)\n        {\n            let form:FormDefinition = forms[i];\n            let def:FormInstance = futil.convert(form);\n\n            this.formlist.push(def);\n            this.forms.set(def.name,def);\n        }\n\n        return(this.forms);\n    }\n\n\n    public findFormByPath(path:string) : string\n    {\n        for(let i = 0; i < this.formlist.length; i++)\n        {\n            if (this.formlist[i].path == path)\n                return(this.formlist[i].name);\n        }\n\n        return(null);\n    }\n\n\n    public getFormsList() : FormInstance[]\n    {\n        return(this.formlist);\n    }\n\n\n    public getFormsDefinitions() : Map<string,FormInstance>\n    {\n        return(this.forms);\n    }\n\n\n    public closeform(form:any, destroy:boolean) : void\n    {\n        let name:string = this.utils.getName(form);\n        let formdef:FormInstance = this.forms.get(name);\n\n        if (formdef == null || formdef.formref == null) return;\n        this.close(formdef,destroy);\n    }\n\n\n    public close(formdef:FormInstance, destroy:boolean) : void\n    {\n        if (formdef.formref == null) return;\n        let formsarea:HTMLElement = this.formarea.getFormsArea();\n        let element:HTMLElement = (formdef.formref.hostView as EmbeddedViewRef<any>).rootNodes[0] as HTMLElement;\n\n        if (this.current != null && this.current.element == element)\n        {\n            this.current = null;\n            formsarea.removeChild(element);\n            this.builder.getAppRef().detachView(formdef.formref.hostView);\n        }\n\n        if (destroy)\n        {\n            formdef.formref.destroy();\n            formdef.windowopts = null;\n            formdef.formref = null;\n        }\n    }\n\n\n    public display(formdef:FormInstance) : void\n    {\n        if (formdef == null || formdef.formref == null) return;\n        let formsarea:HTMLElement = this.formarea.getFormsArea();\n        let element:HTMLElement = (formdef.formref.hostView as EmbeddedViewRef<any>).rootNodes[0] as HTMLElement;\n\n        let impl:FormImpl = formdef.formref.instance[\"_impl_\"];\n\n        if (formdef.windowopts == null)\n        {\n            this.current = {formdef: formdef, element: element};\n            this.builder.getAppRef().attachView(formdef.formref.hostView);\n\n            formsarea.appendChild(element);\n        }\n        else\n        {\n            let id:InstanceID =\n            {\n                impl: impl,\n                ref: formdef.formref,\n                name: formdef.name,\n                modalopts: formdef.windowopts\n            }\n\n            impl.setInstanceID(id);\n            let win:ModalWindow = this.createWindow();\n\n            win.setForm(formdef);\n            win.setApplication(this.app);\n        }\n    }\n\n\n    public createWindow() : ModalWindow\n    {\n        let winref:ComponentRef<any> = this.app.builder.createComponent(ModalWindow);\n        let win:ModalWindow = winref.instance;\n\n        win.setWinRef(winref);\n\n        let element:HTMLElement = (winref.hostView as EmbeddedViewRef<any>).rootNodes[0] as HTMLElement;\n        this.builder.getAppRef().attachView(winref.hostView);\n\n        document.body.appendChild(element);\n        return(win);\n    }\n\n\n    public getFormInstance(form:any) : FormInstance\n    {\n        let name:string = this.utils.getName(form);\n        let formdef:FormInstance = this.forms.get(name);\n        if (formdef == null) return(null);\n\n        if (formdef.formref == null)\n        {\n            formdef.formref = this.createForm(formdef.component);\n\n            if (formdef.windowdef != null && formdef.windowdef.wizard)\n                formdef.windowopts = formdef.windowdef;\n        }\n\n        return(formdef);\n    }\n\n\n    public createForm(component:any) : ComponentRef<any>\n    {\n        let ref:ComponentRef<any> = this.builder.createComponent(component);\n\n        if (!(ref.instance instanceof Form))\n        {\n            let name:string = ref.instance.constructor.name;\n            console.log(\"Component \"+name+\" is not an instance of Form\");\n            return;\n        }\n\n        let impl:FormImpl = ref.instance[\"_impl_\"];\n        impl.setApplication(this.app);\n\n        return(ref);\n    }\n}","import { Wait } from \"../utils/Wait\";\nimport { MessageBox } from \"../popup/MessageBox\";\nimport { SQLType, Statement } from \"./Statement\";\nimport { ApplicationImpl } from \"../application/ApplicationImpl\";\nimport { HttpClient, HttpErrorResponse } from \"@angular/common/http\";\n\n\nexport class Connection\n{\n    private url:string = null;\n    private conn:string = null;\n    private keepalive:number = 0;\n    private client:HttpClient = null;\n\n    private stmtid:number = 0;\n    private waitlim:number = 250;\n    private running:Map<number,number> = new Map<number,number>();\n\n\n    public constructor(private app:ApplicationImpl)\n    {\n        this.client = app.client;\n    }\n\n\n    public async connect(usr:string, pwd:string) : Promise<void>\n    {\n        if (this.url == null)\n        {\n            await this.app.config.ready();\n            let conf:any = await this.app.config.others;\n\n            this.url = conf[\"database.js\"];\n            if (this.url == null || this.url.length == 0)\n                this.url = window.location.origin;\n        }\n\n        if (this.conn != null)\n        {\n            this.alert(\"Already logged on\");\n            return;\n        }\n\n        if (usr == null || pwd == null)\n        {\n            this.alert(\"Username and password must be specified to logon\");\n            return;\n        }\n\n        let credentials = {usr: usr, pwd: pwd};\n        let response:any = await this.invoke(\"connect\",credentials);\n\n        if (response[\"status\"] == \"failed\")\n        {\n            this.alert(response[\"message\"]);\n            return;\n        }\n\n        this.conn = response[\"id\"];;\n        this.keepalive = response[\"keep-alive\"];\n\n        this.app.appstate.onConnect();\n        this.keepAlive();\n\n        return(response);\n    }\n\n\n    public async commit() : Promise<boolean>\n    {\n        if (this.conn != null)\n        {\n            let response:any = await this.invoke(\"commit\",{});\n\n            if (response[\"status\"] != \"ok\")\n                this.alert(JSON.stringify(response));\n\n            this.app.appstate.transactionChange(false);\n            return(false);\n        }\n\n        return(true);\n    }\n\n\n    public async rollback() : Promise<boolean>\n    {\n        if (this.conn != null)\n        {\n            let response:any = await this.invoke(\"rollback\",{});\n\n            if (response[\"status\"] != \"ok\")\n            {\n                this.alert(JSON.stringify(response));\n                return(false);\n            }\n\n            this.app.appstate.transactionChange(false);\n            return(false);\n        }\n\n        return(true);\n    }\n\n\n    public get connected() : boolean\n    {\n        return(this.conn != null);\n    }\n\n\n    public async disconnect() : Promise<void>\n    {\n        if (this.conn == null)\n        {\n            this.alert(\"not logged on\");\n            return;\n        }\n\n        let response:any = await this.invoke(\"disconnect\",{});\n\n        if (response[\"status\"] != \"ok\")\n            this.alert(JSON.stringify(response));\n\n        this.conn = null;\n        this.keepalive = 0;\n\n        this.app.appstate.transactionChange(false);\n        this.app.appstate.onDisconnect();\n    }\n\n\n    private async keepAlive()\n    {\n        if (this.conn != null && +this.keepalive > 0)\n        {\n            let response:any = null;\n            let body:any = {\"keep-alive\": true};\n\n            await this.client.post<any>(this.url+\"/\"+this.conn+\"/ping\",body).toPromise().then\n            (\n                data => {response = data},\n                error => {response = error}\n            )\n\n            if (response[\"status\"] != \"ok\")\n            {\n                this.keepalive = 0;\n                this.alert(JSON.stringify(response),\"KeepAlive stopped\");\n            }\n\n            setTimeout(() => {this.keepAlive()},this.keepalive*1000);\n        }\n    }\n\n\n    public async invokestmt(stmt:Statement) : Promise<any>\n    {\n        return(this.invoke(SQLType[stmt.type],stmt.build()));\n    }\n\n\n    public async invoke(cmd:string, body:any) : Promise<any>\n    {\n        let url:string = this.url + \"/\";\n        if (this.conn != null) url = url + this.conn + \"/\";\n\n        if (this.conn == null && cmd != \"connect\")\n            return({status: \"failed\", message: \"Not logged on\"});\n\n        if (cmd == \"lock\" || cmd == \"insert\" || cmd == \"update\" || cmd == \"delete\")\n            this.app.appstate.transactionChange(true);\n\n        let stid:number = this.stmtid++;\n        let start:number = new Date().getTime();\n\n        this.running.set(stid,start);\n        setTimeout(() => {this.showwait()},+this.waitlim + +10);\n\n        return(\n            this.client.post<any>(url+cmd,body).toPromise().then\n            (\n                data => {return(this.onReply(stid,data));},\n                error => {return(this.onReply(stid,error));}\n            )\n        );\n    }\n\n\n    private onReply(stid:number, data:any) : any\n    {\n        let response:any = null;\n\n        this.running.delete(stid);\n        this.showwait();\n\n        if (!(data instanceof HttpErrorResponse)) response = data;\n        else response = {status: \"failed\", error: \"500\", message: JSON.stringify(data.message)};\n        return(response);\n    }\n\n\n    private alert(msg:string, title?:string) : void\n    {\n        if (title == null) title = \"Database Call Failed\";\n        MessageBox.show(this.app,msg,title);\n    }\n\n\n    private showwait() : void\n    {\n        let now:number = new Date().getTime();\n        let min:number = now;\n\n        this.running.forEach((start) =>\n        {\n            if (+start < +min) min = start;\n        });\n\n        let show:boolean = false;\n        if (now - min > +this.waitlim) show = true;\n\n        if (show) Wait.show(this.app);\n        else      Wait.close(this.app);\n    }\n}","import { Menu } from \"../menu/Menu\";\nimport { FormImpl } from \"../forms/FormImpl\";\nimport { ComponentRef } from \"@angular/core\";\nimport { MessageBox } from \"../popup/MessageBox\";\nimport { MenuHandler } from \"../menu/MenuHandler\";\nimport { DefaultMenu } from \"../menu/DefaultMenu\";\nimport { Connection } from \"../database/Connection\";\nimport { DropDownMenu } from \"../menu/DropDownMenu\";\nimport { ApplicationImpl } from \"./ApplicationImpl\";\nimport { FormDefinitions } from \"../annotations/FormDefinitions\";\n\n\nexport class ApplicationState\n{\n    public menu:Menu = null;\n    public form:FormImpl = null;\n    public connection:Connection;\n    public transaction:boolean = false;\n    public appmenu:ComponentRef<DropDownMenu> = null;\n    public forms:Map<number,FormImpl> = new Map<number,FormImpl>();\n    public menus:Map<number,MenuHandler> = new Map<number,MenuHandler>();\n\n\n    constructor(private app:ApplicationImpl)\n    {\n        this.menu = new DefaultMenu();\n        this.connection = new Connection(app);\n    }\n\n\n    public addForm(form:FormImpl) : void\n    {\n        this.forms.set(form.guid,form);\n    }\n\n\n    public dropForm(form:FormImpl) : void\n    {\n        this.forms.delete(form.guid);\n    }\n\n\n    public addMenu(menu:Menu) : void\n    {\n        let mhdl:MenuHandler = menu.getHandler();\n        this.menus.set(mhdl.guid,mhdl);\n    }\n\n\n    public dropMenu(menu:Menu) : void\n    {\n        if (menu != null)\n        {\n            let mhdl:MenuHandler = menu.getHandler();\n            this.menus.delete(mhdl.guid);\n        }\n    }\n\n\n    public async clearAllForms()\n    {\n        this.forms.forEach((form) => {form.clear()});\n    }\n\n\n    public async onConnect() : Promise<boolean>\n    {\n        this.menus.forEach((mhdl) => {mhdl.onConnect()});\n\n        let forms:FormImpl[] = [];\n        this.forms.forEach(async (form) => {forms.push(form)});\n\n        for (let f = 0; f < forms.length; f++)\n        {\n            let funcs:string[] = FormDefinitions.getOnConnect(forms[f].name);\n            for(let i = 0; i < funcs.length; i++) await this.app.execfunc(forms[f],funcs[i]);\n        }\n\n        return(true);\n    }\n\n\n    public transactionChange(trans:boolean) : void\n    {\n        if (!trans)\n            this.forms.forEach((form) => {form.onCommit()});\n\n        if (trans+\"\" != this.transaction+\"\")\n        {\n            this.transaction = trans;\n            this.menus.forEach((mhdl) => {mhdl.onTransactionChange()});\n        }\n    }\n\n\n    public async onDisconnect() : Promise<boolean>\n    {\n        this.menus.forEach((mhdl) => {mhdl.onDisconnect()});\n\n        let forms:FormImpl[] = [];\n        this.forms.forEach(async (form) => {forms.push(form)});\n\n        for (let f = 0; f < forms.length; f++)\n        {\n            let funcs:string[] = FormDefinitions.getOnDisconnect(forms[f].name);\n            for(let i = 0; i < funcs.length; i++) await this.app.execfunc(forms[f],funcs[i]);\n        }\n\n        return(true);\n    }\n\n\n    public get connected() : boolean\n    {\n        return(this.connection.connected);\n    }\n\n\n    public alert(message:string, title?:string, width?:string, height?:string) : void\n    {\n        MessageBox.show(this.app,message,title,width,height);\n    }\n}","import { FormImpl } from \"./FormImpl\";\nimport { FormUtil } from \"./FormUtil\";\nimport { Utils } from \"../utils/Utils\";\nimport { InstanceID } from \"./InstanceID\";\nimport { ComponentRef } from \"@angular/core\";\nimport { FormInstance } from \"./FormInstance\";\nimport { FormsControl } from \"./FormsControl\";\nimport { WindowOptions } from \"./WindowOptions\";\n\n\nexport class InstanceControl\n{\n    private utils:Utils = new Utils();\n    private forms:Map<string,FormInstance>;\n    private futil:FormUtil = new FormUtil();\n\n    constructor(private ctrl:FormsControl) {}\n\n\n    public setFormsDefinitions(forms:Map<string,FormInstance>)\n    {\n        this.forms = forms;\n    }\n\n\n    public getNewInstance(form:any, modal?:WindowOptions) : InstanceID\n    {\n        let name:string = this.utils.getName(form);\n        if (name == null) return(null);\n\n        let def:FormInstance = this.forms.get(name);\n        if (def == null) return(null);\n\n        let ref:ComponentRef<any> = this.ctrl.createForm(def.component);\n        if (ref == null) return(null);\n\n        let impl:FormImpl = ref.instance[\"_impl_\"];\n\n        if (modal == null) modal = def.windowdef;\n        modal = this.futil.complete(modal,true);\n\n        let id:InstanceID =\n        {\n            ref: ref,\n            impl: impl,\n            name: def.name,\n            modalopts: modal\n        }\n\n        impl.setInstanceID(id);\n\n        return(id);\n    }\n\n\n    public getInstance(id:InstanceID) : FormInstance\n    {\n        let def:FormInstance = this.forms.get(id.name);\n        let instance:FormInstance = this.futil.clone(def);\n        if (id.ref == null) id.ref = this.ctrl.createForm(def.component);\n\n        instance.formref = id.ref;\n        instance.windowopts = id.modalopts;\n\n        return(instance);\n    }\n\n\n    public closeInstance(id:InstanceID, destroy:boolean) : void\n    {\n        let inst:FormInstance = this.getInstance(id);\n\n        if (destroy)\n        {\n            inst.formref.destroy();\n            inst.windowopts = null;\n            inst.formref = null;\n        }\n    }\n}","import { FieldType } from \"./FieldType\";\nimport { keymap } from \"../keymap/KeyMap\";\nimport { RecordState } from \"../blocks/Record\";\nimport { BlockImpl } from \"../blocks/BlockImpl\";\nimport { FieldInstance } from \"./FieldInstance\";\nimport { FieldDefinition } from \"./FieldDefinition\";\n\n\nexport class Field\n{\n    private row$:number;\n    private name$:string;\n    private seq:number = 0;;\n    private value$:any = \"\";\n    private block$:BlockImpl;\n    private def:FieldDefinition;\n    private current$:boolean = false;\n    private enabled$:boolean = false;\n    private field:FieldInstance = null;\n    private fields$:FieldInstance[] = [];\n    private cfields$:FieldInstance[] = [];\n    private state$:RecordState = RecordState.na;\n    private ids:Map<string,FieldInstance> = new Map<string,FieldInstance>();\n    private index:Map<string,FieldInstance> = new Map<string,FieldInstance>();\n\n    constructor(name:string, row:number)\n    {\n        this.row$ = row;\n        this.name$ = name;\n    }\n\n    public get name() : string\n    {\n        return(this.name$);\n    }\n\n    public get row() : number\n    {\n        return(this.row$);\n    }\n\n    public set block(block:BlockImpl)\n    {\n        this.block$ = block;\n    }\n\n    public get block() : BlockImpl\n    {\n        return(this.block$);\n    }\n\n    public get fields() : FieldInstance[]\n    {\n        return(this.fields$);\n    }\n\n\n    public get cfields() : FieldInstance[]\n    {\n        return(this.cfields$);\n    }\n\n    public set valid(valid:boolean)\n    {\n        this.fields.forEach((inst) => {inst.valid = valid;});\n        if (this.current) this.cfields.forEach((inst) => {inst.valid = valid;});\n    }\n\n    public getInstance(guid:string)\n    {\n        return(this.index.get(guid));\n    }\n\n    public getFirstInstance() : FieldInstance\n    {\n        if (this.fields.length > 0)\n            return(this.fields[0]);\n\n        if (this.current && this.cfields.length > 0)\n        {\n            let inst:FieldInstance = this.cfields[0];\n            inst.row = this.row;\n            return(inst);\n        }\n\n        return(null);\n    }\n\n    public get state() : RecordState\n    {\n        return(this.state$);\n    }\n\n    public get readonly() : boolean\n    {\n        for (let i = 0; i < this.fields.length; i++)\n        {\n            if (this.fields[i].enabled)\n            {\n                if (!this.fields[i].readonly)\n                    return(false);\n            }\n        }\n\n        if (this.current$)\n        {\n            for (let i = 0; i < this.cfields.length; i++)\n            {\n                if (this.cfields[i].enabled)\n                {\n                    if (!this.cfields[i].readonly)\n                        return(false);\n                }\n            }\n        }\n\n        return(true);\n    }\n\n    public get current() : boolean\n    {\n        return(this.current$);\n    }\n\n    public set current(flag:boolean)\n    {\n        this.current$ = flag;\n\n        if (!flag) this.cfields.forEach((inst) =>\n        {\n            inst.value = null;\n            inst.disable();\n        });\n        else this.cfields.forEach((inst) =>\n        {\n            inst.parent = this;\n            inst.row = this.row;\n            inst.value = this.value$;\n\n            inst.state = this.state;\n            inst.readonly = this.readonly;\n\n            inst.enable();\n        });\n    }\n\n    public get value() : any\n    {\n        return(this.value$);\n    }\n\n    public set value(value:any)\n    {\n        this.value$ = value;\n        this.fields.forEach((inst) => {inst.value = value;});\n        if (this.current) this.cfields.forEach((inst) => {inst.value = value;});\n    }\n\n    public get enabled() : boolean\n    {\n        return(this.enabled$);\n    }\n\n    public focus() : boolean\n    {\n        if (this.field != null && this.field.enabled)\n        {\n            if (this.field.focus())\n                return(true);\n        }\n\n        for (let i = 0; i < this.fields.length; i++)\n        {\n            if (this.fields[i].enabled)\n            {\n                if (this.fields[i].focus())\n                    return(true);\n            }\n        }\n\n        if (this.current$)\n        {\n            for (let i = 0; i < this.cfields.length; i++)\n            {\n                if (this.cfields[i].enabled)\n                {\n                    if (this.cfields[i].focus())\n                        return(true);\n                }\n            }\n        }\n\n        return(false);\n    }\n\n    public add(field:FieldInstance) : void\n    {\n        field.parent = this;\n\n        if (field.row == -1)\n        {\n            this.cfields.push(field);\n            if (field.guid == null) field.guid = \"c:\"+(this.seq++);\n        }\n        else\n        {\n            this.fields.push(field);\n            field.guid = \"f:\"+(this.seq++);\n        }\n\n        this.index.set(field.guid,field);\n\n        if (field.id.length > 0)\n            this.ids.set(field.id,field);\n    }\n\n    public get definition() : FieldDefinition\n    {\n        return(this.def);\n    }\n\n    public setDefinition(def:FieldDefinition, cascade:boolean)\n    {\n        this.def = def;\n\n        if (cascade)\n        {\n            for (let i = 0; i < this.fields.length; i++)\n                this.fields[i].definition = def;\n\n            for (let i = 0; i < this.cfields.length; i++)\n                this.cfields[i].definition = def;\n        }\n    }\n\n\n    public set state(state:RecordState)\n    {\n        this.state$ = state;\n        this.fields.forEach((field) => {field.state = state;});\n        if (this.current) this.cfields.forEach((field) => {field.state = state;});\n    }\n\n\n    public enable(readonly:boolean) : void\n    {\n        this.enabled$ = true;\n        this.fields.forEach((field) => {field.readonly = readonly; field.enable();});\n        if (this.current) this.cfields.forEach((field) => {field.readonly = readonly; field.enable();});\n    }\n\n\n    public disable() : void\n    {\n        this.enabled$ = false;\n        this.fields.forEach((field) => {field.disable()});\n        if (this.current) this.cfields.forEach((field) =>  {field.disable()});\n    }\n\n\n    public validate() : boolean\n    {\n        let valid:boolean = true;\n        let inst:FieldInstance = null;\n\n        for (let i = 0;  i < this.fields.length; i++)\n        {\n            inst = this.fields[i];\n\n            if (!this.fields[i].validate())\n            {\n                valid = false;\n                break;\n            }\n        }\n\n        if (valid && this.current)\n        {\n            for (let i = 0;  i < this.cfields.length; i++)\n            {\n                inst = this.cfields[i];\n\n                if (!this.cfields[i].validate())\n                {\n                    valid = false;\n                    break;\n                }\n            }\n        }\n\n        this.valid = valid;\n        if (inst != null) this.copy(inst);\n\n        return(valid);\n    }\n\n\n    public async onEvent(event:any, field:FieldInstance, type:string, key?:keymap)\n    {\n        if (type == \"blur\") this.field = null;\n        if (type == \"focus\") this.field = field;\n        if (type == \"cchange\" || type == \"change\") this.copy(field);\n        if (this.block$ != null) this.block$.onEvent(event,field,type,key);\n    }\n\n\n    public copy(field:FieldInstance)\n    {\n        this.value$ = field.value;\n\n        this.fields.forEach((inst) =>\n        {if (inst != field) inst.value = this.value$;});\n\n        this.cfields.forEach((inst) =>\n        {if (inst != field) inst.value = this.value$;});\n    }\n}","import { Field } from \"../input/Field\";\nimport { FieldInstance } from \"../input/FieldInstance\";\n\n\nexport class Container\n{\n    private fields$:FieldInstance[] = [];\n    private blocks:Map<string,ContainerBlock> = new Map<string,ContainerBlock>();\n\n    public register(field:FieldInstance) : void\n    {\n        let bname:string = field.block;\n        let block:ContainerBlock = this.blocks.get(bname);\n\n        if (block == null)\n        {\n            block = new ContainerBlock(bname);\n            this.blocks.set(bname,block);\n        }\n\n        block.add(field);\n        block.fields.push(field);\n        this.fields$.push(field);\n    }\n\n    public get fields() : FieldInstance[]\n    {\n        return(this.fields$);\n    }\n\n    public getBlock(block:string) : ContainerBlock\n    {\n        return(this.blocks.get(block.toLowerCase()));\n    }\n\n    public getBlocks() : ContainerBlock[]\n    {\n        let blocks:ContainerBlock[] = [];\n        this.blocks.forEach((blk) => {blocks.push(blk)});\n        return(blocks);\n    }\n\n    public finish() : void\n    {\n        this.blocks.forEach((block) => {block[\"finish\"]();});\n    }\n}\n\nexport class ContainerBlock\n{\n    private name$:string;\n    private rows$:number = 0;\n    private fields$:FieldInstance[] = [];\n    private current$:FieldInstance[] = [];\n    private records$:Map<number,ContainerRecord> = new Map<number,ContainerRecord>();\n\n    constructor(name:string)\n    {\n        this.name$ = name;\n    }\n\n    public get name() : string\n    {\n        return(this.name$);\n    }\n\n    public get rows() : number\n    {\n        return(this.rows$);\n    }\n\n    public add(field:FieldInstance) : void\n    {\n        let row:number = field.row;\n\n        if (field.row == -1)\n        {\n            this.current$.push(field);\n            return;\n        }\n\n        let rec:ContainerRecord = this.records$.get(+row);\n\n        if (rec == null)\n        {\n            rec = new ContainerRecord(row);\n            this.records$.set(+row,rec);\n\n            if (field.row > this.rows$)\n                this.rows$ = field.row;\n        }\n\n        rec.add(field);\n    }\n\n    public get fields() : FieldInstance[]\n    {\n        return(this.fields$);\n    }\n\n    public get records() : ContainerRecord[]\n    {\n        let recs:ContainerRecord[] = [];\n        this.records$.forEach((rec) => {recs.push(rec)});\n        let sorted:ContainerRecord[] = recs.sort((a,b) => {return(a.row - b.row)});\n        return(sorted);\n    }\n\n    public getRecord(row:number) : ContainerRecord\n    {\n        return(this.records$.get(+row));\n    }\n\n    private finish() : void\n    {\n        if (this.rows$ == 0)\n        {\n            let rec:ContainerRecord = new ContainerRecord(0);\n            this.records$.set(0,rec);\n\n            this.current$.forEach((field) =>\n            {\n                field.row = 0;\n                rec.add(field);\n            });\n\n            this.current$ = [];\n        }\n        else\n        {\n            this.records$.forEach((rec) =>\n            {\n                this.current$.forEach((inst) =>\n                {\n                    let group:Field = rec.index.get(inst.name);\n                    if (group != null) group.add(inst)\n                    else rec.add(inst);\n                });\n            });\n        }\n    }\n}\n\n\nexport class ContainerRecord\n{\n    public row:number;\n    public fields:Field[] = [];\n    public index:Map<string,Field> = new Map<string,Field>();\n\n    constructor(row:number)\n    {\n        this.row = row;\n    }\n\n    public add(field:FieldInstance) : void\n    {\n        let group:Field = this.index.get(field.name);\n\n        if (group == null)\n        {\n            group = new Field(field.name,this.row);\n            this.index.set(field.name,group);\n            this.fields.push(group);\n        }\n\n        group.add(field);\n    }\n}","import { Container } from \"./Container\";\nimport { Builder } from \"../utils/Builder\";\n\n\nexport class ContainerControl\n{\n    private container:Container;\n\n    constructor(private builder:Builder) {}\n\n\n    public setContainer(container?:Container) : void\n    {\n        if (container == null) container = new Container();\n        this.container = container;\n    }\n\n\n    public getContainer() : Container\n    {\n        let cont:Container = this.container;\n        return(cont);\n    }\n\n\n    public dropContainer() : void\n    {\n        this.container = null;\n    }\n}","import { Config } from \"./Config\";\nimport { Menu } from \"../menu/Menu\";\nimport { Context } from \"./Context\";\nimport { Wait } from \"../utils/Wait\";\nimport { Builder } from \"../utils/Builder\";\nimport { Application } from \"./Application\";\nimport { FormList } from \"../menu/FormList\";\nimport { MenuArea } from \"../menu/MenuArea\";\nimport { FormArea } from \"../forms/FormArea\";\nimport { FormImpl } from \"../forms/FormImpl\";\nimport { ComponentRef } from \"@angular/core\";\nimport { InstanceID } from \"../forms/InstanceID\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { MenuFactory } from \"../menu/MenuFactory\";\nimport { Container } from \"../container/Container\";\nimport { DropDownMenu } from \"../menu/DropDownMenu\";\nimport { Connection } from \"../database/Connection\";\nimport { FormInstance } from '../forms/FormInstance';\nimport { FormsControl } from \"../forms/FormsControl\";\nimport { ApplicationState } from \"./ApplicationState\";\nimport { WindowOptions } from \"../forms/WindowOptions\";\nimport { Key, keymap, KeyMapper } from \"../keymap/KeyMap\";\nimport { FormDefinition } from \"../forms/FormsDefinition\";\nimport { WindowListener } from \"../events/WindowListener\";\nimport { InstanceControl } from \"../forms/InstanceControl\";\nimport { FormDefinitions } from \"../annotations/FormDefinitions\";\nimport { ContainerControl } from \"../container/ContainerControl\";\nimport { DatabaseDefinitions } from \"../annotations/DatabaseDefinitions\";\n\n\nexport class ApplicationImpl\n{\n    private app:Application;\n    private ready:number = 2;\n    private config$:Config = null;\n    private marea:MenuArea = null;\n    private apptitle:string = null;\n    private formlist:FormList = null;\n    private mfactory:MenuFactory = null;\n    private formsctl:FormsControl = null;\n    private state:ApplicationState = null;\n    private contctl:ContainerControl = null;\n    private instances:InstanceControl = null;\n\n\n    constructor(ctx:Context, public client:HttpClient, public builder:Builder)\n    {\n        this.app = ctx.app;\n        this.config$ = ctx.conf;\n\n        this.enable();\n        this.loadConfig();\n\n        this.state = new ApplicationState(this);\n        this.contctl = new ContainerControl(builder);\n        this.mfactory = new MenuFactory(this.builder);\n        this.formsctl = new FormsControl(this,builder);\n        this.instances = new InstanceControl(this.formsctl);\n        this.setFormsDefinitions(FormDefinitions.getForms());\n        this.state.appmenu = this.createmenu(this.state.menu);\n    }\n\n\n    private async loadConfig()\n    {\n        await this.config$.ready();\n\n        if (this.config$.others.hasOwnProperty(\"title\"))\n            this.setTitle(this.config$.others[\"title\"]);\n\n        if (this.config$.others.hasOwnProperty(\"theme\"))\n            this.config$.setTheme(this.config$.others[\"theme\"]);\n\n        this.ready--;\n        this.showLinkedForm();\n    }\n\n\n    public get config() : Config\n    {\n        return(this.config$);\n    }\n\n\n    public enable() : void\n    {\n        WindowListener.add(\"app\",this,\"keydown\");\n    }\n\n\n    public disable() : void\n    {\n        WindowListener.remove(\"app\",\"keydown\");\n    }\n\n\n    public get appstate() : ApplicationState\n    {\n        return(this.state);\n    }\n\n\n    public getApplication() :Application\n    {\n        return(this.app);\n    }\n\n\n    public setTitle(title:string)\n    {\n        this.apptitle = title;\n        this.showTitle(title);\n    }\n\n\n    public close() : void\n    {\n        this.closeform(this.state.form,true);\n    }\n\n\n    public setMenu(menu:Menu) : void\n    {\n        this.deletemenu(this.state.menu);\n        this.state.menu = menu;\n        this.state.appmenu = this.createmenu(menu);\n        this.showMenu(this.state.appmenu);\n    }\n\n\n    public getMenu() : Menu\n    {\n        return(this.state.menu);\n    }\n\n\n    public showTitle(title:string) : void\n    {\n        if (title == null) title = this.apptitle;\n        document.title = title;\n    }\n\n\n    public showPath(name:string, path:string) : void\n    {\n        let state = {additionalInformation: 'None'};\n        let url:string = window.location.protocol + '//' + window.location.host;\n        window.history.replaceState(state,name,url+path);\n    }\n\n\n    public getFormsList() : FormInstance[]\n    {\n        return(this.formsctl.getFormsList());\n    }\n\n\n    public getFormsDefinitions() : Map<string,FormInstance>\n    {\n        return(this.formsctl.getFormsDefinitions());\n    }\n\n\n    public setFormList(formlist:FormList) : void\n    {\n        this.formlist = formlist;\n    }\n\n\n    public setMenuArea(area:MenuArea) : void\n    {\n        this.marea = area;\n        this.showMenu(this.state.appmenu);\n    }\n\n\n    public setFormArea(area:FormArea) : void\n    {\n        this.formsctl.setFormArea(area);\n        this.ready--;\n    }\n\n\n    public setContainer(container?:Container) : void\n    {\n        this.contctl.setContainer(container);\n    }\n\n\n    public getContainer() : Container\n    {\n        return(this.contctl.getContainer());\n    }\n\n\n    public dropContainer() : void\n    {\n        this.contctl.dropContainer();\n    }\n\n\n    public get connection() : Connection\n    {\n        return(this.appstate.connection);\n    }\n\n\n    public get connected() : boolean\n    {\n        return(this.appstate.connected);\n    }\n\n\n    public async disconnect() : Promise<void>\n    {\n        await this.appstate.connection.disconnect();\n        this.getCurrentForm()?.focus();\n    }\n\n\n    public async newForm(impl:FormImpl)\n    {\n        let funcs:string[] = FormDefinitions.getOnInit(impl.name);\n        for(let i = 0; i < funcs.length; i++)  await this.execfunc(impl,funcs[i]);\n\n        funcs = FormDefinitions.getOnShow(impl.name);\n        for(let i = 0; i < funcs.length; i++)  await this.execfunc(impl,funcs[i]);\n\n        impl.onShow();\n    }\n\n\n    public async preform(impl:FormImpl, parameters:Map<string,any>, formdef:FormInstance, path:boolean)\n    {\n        impl.setParameters(parameters);\n\n        if (!impl.initiated())\n        {\n            impl.path = formdef.path;\n            impl.title = formdef.title;\n\n            this.state.addForm(impl);\n            this.showTitle(formdef.title);\n\n            if (path) this.showPath(impl.name,formdef.path);\n            return;\n        }\n\n        this.showTitle(impl.title);\n        if (path) this.showPath(impl.name,impl.path);\n\n        let funcs:string[] = FormDefinitions.getOnShow(impl.name);\n        for(let i = 0; i < funcs.length; i++)  await this.execfunc(impl,funcs[i]);\n\n        impl.onShow();\n    }\n\n\n    private async postform(impl:FormImpl, destroy:boolean)\n    {\n        impl.onHide();\n\n        let funcs:string[] = FormDefinitions.getOnHide(impl.name);\n        for(let i = 0; i < funcs.length; i++)  await this.execfunc(impl,funcs[i]);\n\n        if (destroy)\n        {\n            this.state.dropForm(impl);\n            let funcs:string[] = FormDefinitions.getOnDestroy(impl.name);\n            for(let i = 0; i < funcs.length; i++) await this.execfunc(impl,funcs[i]);\n        }\n    }\n\n\n    public async execfunc(impl:FormImpl, func:string)\n    {\n        try\n        {\n            await impl.form[func]();\n        }\n        catch (error)\n        {\n            console.log(error);\n        }\n    }\n\n\n    public async callform(form:any, destroy:boolean, parameters?:Map<string,any>)\n    {\n        if (this.ready != 0)\n        {\n            setTimeout(() => {this.callform(form,destroy,parameters);},10);\n            return;\n        }\n\n        if (this.state.form != null)\n        {\n            // Make sure changes has been validated\n            if (!await this.state.form.validate()) return;\n\n            // get current form in chain\n            let curr:FormImpl = this.state.form.getChain();\n\n            // let form handle the showform\n            await curr.callform(form,destroy,parameters);\n        }\n    }\n\n\n    public getCurrentForm() : FormImpl\n    {\n        if (this.ready != 0)\n            return(null);\n\n        if (this.state.form == null)\n            return(null);\n\n        return(this.state.form.getChain());\n    }\n\n\n    public async showform(form:any, destroy:boolean, parameters?:Map<string,any>)\n    {\n        if (this.ready != 0)\n        {\n            setTimeout(() => {this.showform(form,destroy,parameters);},10);\n            return;\n        }\n\n        if (this.state.form != null)\n        {\n            // Make sure changes has been validated\n            if (!await this.state.form.validate()) return;\n\n            // if form has called anoother form\n            let curr:FormImpl = this.state.form.getChain();\n\n            if (curr != this.state.form)\n            {\n                // let form handle the showform\n                curr.showform(form,destroy,parameters);\n                return;\n            }\n\n            if (this.state.form.getModalWindow() != null)\n                return;\n\n            this.closeform(this.state.form,false);\n        }\n\n        if (destroy) this.formsctl.closeform(form,destroy);\n        let formdef:FormInstance = this.getFormInstance(form);\n\n        if (formdef == null) return;\n        let impl:FormImpl = formdef.formref.instance[\"_impl_\"];\n        await this.preform(impl,parameters,formdef,true);\n\n        this.state.form = impl;\n        let fmenu:ComponentRef<DropDownMenu> = impl.getDropDownMenu();\n\n        if (!formdef.windowopts?.wizard) this.showMenu(fmenu);\n        DropDownMenu.setForm(fmenu,formdef.formref.instance);\n\n        this.formsctl.display(formdef);\n    }\n\n\n    public showinstance(inst:FormInstance) : void\n    {\n        if (this.ready == 0) this.formsctl.display(inst);\n        else setTimeout(() => {this.showinstance(inst);},10);\n    }\n\n\n    public closeform(impl:FormImpl, destroy:boolean) : void\n    {\n        if (impl == null) return;\n        this.postform(impl,destroy);\n        this.formsctl.closeform(impl.name,destroy);\n\n        if (this.state.appmenu != null)\n            DropDownMenu.setForm(this.state.appmenu,null);\n\n        this.showPath(\"\",\"\");\n        this.showTitle(null);\n        this.state.form = null;\n\n        this.showMenu(this.state.appmenu);\n    }\n\n\n    public getFormInstance(form:any) : FormInstance\n    {\n        return(this.formsctl.getFormInstance(form));\n    }\n\n\n    public getNewInstance(form:any, modal?:WindowOptions) : InstanceID\n    {\n        return(this.instances.getNewInstance(form,modal));\n    }\n\n\n    public getInstance(id:InstanceID) : FormInstance\n    {\n        return(this.instances.getInstance(id));\n    }\n\n\n    public closeInstance(id:InstanceID, destroy:boolean) : void\n    {\n        this.postform(id.impl,destroy);\n        this.instances.closeInstance(id,destroy);\n    }\n\n\n    public showMenu(menu:ComponentRef<DropDownMenu>) : void\n    {\n        if (this.marea != null)\n            this.marea.display(menu);\n    }\n\n\n    public deletemenu(menu:Menu) : void\n    {\n        this.state.dropMenu(menu);\n    }\n\n\n    public createmenu(menu:Menu) : ComponentRef<DropDownMenu>\n    {\n        if (menu == null) return(null);\n\n        this.state.addMenu(menu);\n        let ddmenu:ComponentRef<DropDownMenu> = this.mfactory.create(menu);\n\n        return(ddmenu);\n    }\n\n\n    private setFormsDefinitions(forms:FormDefinition[]) : void\n    {\n        for(let i = 0; i < forms.length; i++)\n        {\n            let fname:string = forms[i].component.name.toLowerCase();\n            forms[i].windowopts = FormDefinitions.getWindowOpts(fname);\n            forms[i].databaseusage = DatabaseDefinitions.getFormUsage(fname);\n        }\n\n        let formsmap:Map<string,FormInstance> =\n            this.formsctl.setFormsDefinitions(forms);\n\n        this.instances.setFormsDefinitions(formsmap);\n    }\n\n\n    private showLinkedForm() : void\n    {\n        if (this.ready != 0)\n        {\n            // Make time for application setup\n            setTimeout(() => {this.showLinkedForm()},500);\n            return;\n        }\n\n        let form:string = decodeURI(window.location.pathname);\n\n        if (form.length > 0)\n            form = this.formsctl.findFormByPath(form);\n\n        if (form != null)\n        {\n            let inst:FormInstance = this.formsctl.getFormsDefinitions().get(form);\n\n            if (inst == null || !inst.navigable)\n            {\n                this.showPath(\"\",\"\");\n                return;\n            }\n\n            let params:Map<string,any> = new Map<string,any>();\n            let urlparams = new URLSearchParams(window.location.search);\n            urlparams.forEach((value,key) => {params.set(key,value)});\n            this.showform(form,false,params);\n        }\n    }\n\n\n    public async onEvent(event:any)\n    {\n        if (Wait.waiting())\n            return;\n\n        let keydef:Key =\n        {\n            code  : event.keyCode,\n            alt   : event.altKey,\n            ctrl  : event.ctrlKey,\n            meta  : event.metaKey,\n            shift : event.shiftKey\n        }\n\n        let map:string = KeyMapper.map(keydef);\n        let key:keymap = KeyMapper.keymap(map);\n\n        if (key == keymap.connect)\n        {\n            this.app.connect();\n            return;\n        }\n\n        if (key == keymap.disconnect)\n        {\n            this.app.disconnect();\n            return;\n        }\n\n        if\n        (\n            key == keymap.close           ||\n            key == keymap.delete          ||\n            key == keymap.listval         ||\n            key == keymap.commit          ||\n            key == keymap.rollback        ||\n            key == keymap.clearform       ||\n            key == keymap.insertafter     ||\n            key == keymap.insertbefore    ||\n            key == keymap.enterquery      ||\n            key == keymap.executequery\n        )\n        {\n            event.preventDefault();\n            let form:FormImpl = this.getCurrentForm();\n            if (form != null) form.sendkey(event,key);\n        }\n    }\n}","import { KeyCodes } from \"./KeyCodes\";\nimport { KeyMap, KeyMapper } from \"./KeyMap\";\n\nexport class MacKeyMap implements KeyMap\n{\n    zoom:string = KeyMapper.map({code: 90, ctrl: true});\n    close:string = KeyMapper.map({code: 87, ctrl: true});\n\n    undo:string = KeyMapper.map({code: 90, meta: true});\n    paste:string = KeyMapper.map({code: 86, meta: true});\n\n    enter:string = KeyMapper.map({code: KeyCodes.enter});\n    escape:string = KeyMapper.map({code: KeyCodes.escape});\n\n    listval:string = KeyMapper.map({code: 76, shift: true, ctrl: true});\n\n    clearblock:string = KeyMapper.map({code: KeyCodes.escape, ctrl: true});;\n    clearform:string = KeyMapper.map({code: KeyCodes.escape, shift: true, ctrl: true});\n\n    insertafter:string = KeyMapper.map({code: 73, ctrl: true});\n    insertbefore:string = KeyMapper.map({code: 73, shift:true, ctrl: true});\n\n    delete:string = KeyMapper.map({code: 68, ctrl: true});\n    dublicate:string = KeyMapper.map({code: 86, ctrl: true});\n\n    commit:string = KeyMapper.map({code: KeyCodes.enter, ctrl: true});\n    rollback:string = KeyMapper.map({code: KeyCodes.f1, ctrl: true, shift: true});\n\n    connect:string = KeyMapper.map({code: 67, ctrl: true});\n    disconnect:string = KeyMapper.map({code: 67, shift:true, ctrl: true});\n\n    nextfield:string = KeyMapper.map({code: KeyCodes.tab});\n    prevfield:string = KeyMapper.map({code: KeyCodes.tab, shift: true});\n\n    nextrecord:string = KeyMapper.map({code: KeyCodes.down, shift: false});\n    prevrecord:string = KeyMapper.map({code: KeyCodes.up, shift: false});\n\n    nextblock:string = KeyMapper.map({code: KeyCodes.down, shift: true});\n    prevblock:string = KeyMapper.map({code: KeyCodes.up, shift: true});\n\n    pageup:string = KeyMapper.map({code: 80, ctrl: true, shift: true});\n    pagedown:string = KeyMapper.map({code: 80, ctrl: true, shift: false});\n\n    enterquery:string = KeyMapper.map({code: 81, ctrl: true});\n    executequery:string = KeyMapper.map({code: 81, shift: true, ctrl: true});\n\n    map:string;\n\n\n    public constructor()\n    {\n        this.map =\n        `\n            <table>\n                <tr><td class=\"kmtd\">   connect            </td><td>   ctrl-c             </td></tr>\n                <tr><td class=\"kmtd\">   disconnect         </td><td>   ctrl-shift-c       </td></tr>\n                <tr><td class=\"kmtd\">   close              </td><td>   ctrl-w             </td></tr>\n                <tr><td class=\"kmtd\">   zoom               </td><td>   ctrl-z             </td></tr>\n                <tr><td class=\"kmtd\">   datepicker         </td><td>   ctrl-shift-l       </td></tr>\n                <tr><td class=\"kmtd\">   list of values     </td><td>   ctrl-shift-l       </td></tr>\n                <tr><td class=\"kmtd\">   clear block        </td><td>   ctrl-escape        </td></tr>\n                <tr><td class=\"kmtd\">   clear form         </td><td>   ctrl-shift-escape  </td></tr>\n                <tr><td class=\"kmtd\">   insert after       </td><td>   ctrl-i             </td></tr>\n                <tr><td class=\"kmtd\">   insert before      </td><td>   ctrl-shift-i       </td></tr>\n                <tr><td class=\"kmtd\">   delete             </td><td>   ctrl-d             </td></tr>\n                <tr><td class=\"kmtd\">   commit             </td><td>   ctrl-enter         </td></tr>\n                <tr><td class=\"kmtd\">   rollback           </td><td>   ctrl-shift-escape  </td></tr>\n                <tr><td class=\"kmtd\">   next record        </td><td>   key-down           </td></tr>\n                <tr><td class=\"kmtd\">   previous record    </td><td>   key-up             </td></tr>\n                <tr><td class=\"kmtd\">   page down          </td><td>   ctrl-p             </td></tr>\n                <tr><td class=\"kmtd\">   page up            </td><td>   ctrl-shift-p       </td></tr>\n                <tr><td class=\"kmtd\">   next block         </td><td>   shift-key-down     </td></tr>\n                <tr><td class=\"kmtd\">   previous block     </td><td>   shift-key-up       </td></tr>\n                <tr><td class=\"kmtd\">   enter query        </td><td>   ctrl-q             </td></tr>\n                <tr><td class=\"kmtd\">   execute query      </td><td>   ctrl-shift-q       </td ></tr>\n            </table>\n\n            <style>\n              .kmtd\n              {\n                  width: 150px;\n                  display: block;\n              }\n            </style>\n        `;\n    }\n}","import { KeyCodes } from \"./KeyCodes\";\nimport { KeyMap, KeyMapper } from \"./KeyMap\";\n\nexport class WinKeyMap implements KeyMap\n{\n    zoom:string = KeyMapper.map({code: 90, ctrl: true});\n    close:string = KeyMapper.map({code: 87, ctrl: true});\n\n    undo:string = KeyMapper.map({code: 90, meta: true});\n    paste:string = KeyMapper.map({code: 86, ctrl: true});\n\n    enter:string = KeyMapper.map({code: KeyCodes.enter});\n    escape:string = KeyMapper.map({code: KeyCodes.escape});\n\n    listval:string = KeyMapper.map({code: KeyCodes.f9});\n\n    clearblock:string = KeyMapper.map({code: KeyCodes.f5, shift: true});;\n    clearform:string = KeyMapper.map({code: KeyCodes.f7, shift: true});\n\n    insertafter:string = KeyMapper.map({code: KeyCodes.insert});\n    insertbefore:string = KeyMapper.map({code: KeyCodes.insert, shift:true});\n\n    dublicate:string = KeyMapper.map({code: 86, ctrl: true});\n    delete:string = KeyMapper.map({code: KeyCodes.delete, ctrl: true});\n\n    commit:string = KeyMapper.map({code: KeyCodes.f10, ctrl: false, shift: false});\n    rollback:string = KeyMapper.map({code: KeyCodes.f10, ctrl: false, shift: true});\n\n    connect:string = KeyMapper.map({code: 67, ctrl: true});\n    disconnect:string = KeyMapper.map({code: 67, shift:true, ctrl: true});\n\n    nextfield:string = KeyMapper.map({code: KeyCodes.tab});\n    prevfield:string = KeyMapper.map({code: KeyCodes.tab, shift: true});\n\n    nextrecord:string = KeyMapper.map({code: KeyCodes.down, shift: false});\n    prevrecord:string = KeyMapper.map({code: KeyCodes.up, shift: false});\n\n    prevblock:string = KeyMapper.map({code: KeyCodes.pageup, shift: true});\n    nextblock:string = KeyMapper.map({code: KeyCodes.pagedown, shift: true});\n\n    pageup:string = KeyMapper.map({code: KeyCodes.pageup});\n    pagedown:string = KeyMapper.map({code: KeyCodes.pagedown});\n\n    enterquery:string = KeyMapper.map({code: KeyCodes.f7});\n    executequery:string = KeyMapper.map({code: KeyCodes.f8});\n\n    map:string;\n\n\n    public constructor()\n    {\n        this.map =\n        `\n            <table>\n                <tr><td class=\"kmtd\">   connect            </td><td>   ctrl-c             </td></tr>\n                <tr><td class=\"kmtd\">   disconnect         </td><td>   ctrl-shift-c       </td></tr>\n                <tr><td class=\"kmtd\">   close              </td><td>   ctrl-w             </td></tr>\n                <tr><td class=\"kmtd\">   zoom               </td><td>   ctrl-z             </td></tr>\n                <tr><td class=\"kmtd\">   datepicker         </td><td>   F9                 </td></tr>\n                <tr><td class=\"kmtd\">   list of values     </td><td>   F9                 </td></tr>\n                <tr><td class=\"kmtd\">   clear block        </td><td>   shift-F5           </td></tr>\n                <tr><td class=\"kmtd\">   clear form         </td><td>   shift-F7           </td></tr>\n                <tr><td class=\"kmtd\">   insert after       </td><td>   insert             </td></tr>\n                <tr><td class=\"kmtd\">   insert before      </td><td>   shift-insert       </td></tr>\n                <tr><td class=\"kmtd\">   delete             </td><td>   delete             </td></tr>\n                <tr><td class=\"kmtd\">   commit             </td><td>   F10                </td></tr>\n                <tr><td class=\"kmtd\">   rollback           </td><td>   shift-F10          </td></tr>\n                <tr><td class=\"kmtd\">   next record        </td><td>   key-down           </td></tr>\n                <tr><td class=\"kmtd\">   previous record    </td><td>   key-up             </td></tr>\n                <tr><td class=\"kmtd\">   page down          </td><td>   pagedown           </td></tr>\n                <tr><td class=\"kmtd\">   page up            </td><td>   pageup             </td></tr>\n                <tr><td class=\"kmtd\">   next block         </td><td>   shift-pagedown     </td></tr>\n                <tr><td class=\"kmtd\">   previous block     </td><td>   shift-pageup       </td></tr>\n                <tr><td class=\"kmtd\">   enter query        </td><td>   F7                 </td></tr>\n                <tr><td class=\"kmtd\">   execute query      </td><td>   F8                 </td ></tr>\n            </table>\n\n            <style>\n              .kmtd\n              {\n                  width: 150px;\n                  display: block;\n              }\n            </style>\n        `;\n    }\n}","export interface Theme\n{\n    name:string;\n    link:string;\n    text:string;\n    title:string;\n    topbar:string;\n    enabled:string;\n    disabled:string;\n    foldertree:string;\n    buttontext:string;\n    menuoption:string;\n    rowindicator:string;\n}\n\nexport class defaultTheme implements Theme\n{\n    public name:string = \"default\";\n\n    public link:string = \"blue\";\n    public text:string = \"black\";\n    public title:string = \"white\";\n    public topbar:string = \"#303f9f\";\n    public enabled:string = \"white\";\n    public disabled:string = \"silver\";\n    public menuoption:string = \"white\";\n    public buttontext:string = \"white\";\n    public foldertree:string = \"#303f9f\";\n    public rowindicator:string = \"#303f9f\";\n}\n\n\nexport class Indigo extends defaultTheme\n{\n    public name:string = \"indigo\";\n}\n\n\nexport class Grey extends defaultTheme\n{\n    public name:string = \"grey\";\n    public link:string = \"grey\";\n    public topbar:string = \"grey\";\n    public foldertree:string = \"grey\";\n    public rowindicator:string = \"grey\";\n}\n\n\nexport class Pink extends defaultTheme\n{\n    public name:string = \"pink\";\n    public link:string = \"#ff4081\";\n    public topbar:string = \"#ff4081\";\n    public foldertree:string = \"#ff4081\";\n    public rowindicator:string = \"#ff4081\";\n}\n\n\nexport class Yellow implements Theme\n{\n    public name:string = \"yellow\";\n\n    public link:string = \"grey\";\n    public text:string = \"black\";\n    public title:string = \"black\";\n    public topbar:string = \"yellow\";\n    public foldertree:string = \"grey\";\n    public enabled:string = \"black\";\n    public disabled:string = \"silver\";\n    public menuoption:string = \"black\";\n    public buttontext:string = \"black\";\n    public rowindicator:string = \"yellow\";\n}\n","import { dates } from \"../dates/dates\";\nimport { Injectable } from \"@angular/core\";\nimport { MacKeyMap } from \"../keymap/MacKeyMap\";\nimport { WinKeyMap } from \"../keymap/WinKeyMap\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { KeyMap, KeyMapper } from \"../keymap/KeyMap\";\nimport { Theme, Pink, Grey, Yellow, Indigo, defaultTheme } from \"./Themes\";\n\n\n@Injectable({\n    providedIn: 'root',\n})\n\n\nexport class Config\n{\n    private keymap:KeyMap;\n    private colors$:Theme;\n    private datefmt$:string;\n    private config:any = null;\n    private notifications:any[] = [];\n    private invoker:Promise<any> = null;\n    private caltitle:string = \"Calendar\";\n    private keymaphelp:string = \"Shortkeys\";\n    private themes:Map<string,Theme> = new Map<string,Theme>();\n    private lang:string = Intl.DateTimeFormat().resolvedOptions().locale;\n\n\n    constructor(private client:HttpClient)\n    {\n        this.load();\n        this.themes.set(\"pink\",new Pink());\n        this.themes.set(\"grey\",new Grey());\n        this.themes.set(\"indigo\",new Indigo());\n        this.themes.set(\"yellow\",new Yellow());\n        this.themes.set(\"default\",new defaultTheme());\n\n        let os:string = this.os();\n\n        if (os == \"Windows\") this.keymap = new WinKeyMap();\n        else                 this.keymap = new MacKeyMap();\n\n        KeyMapper.index(this.keymap);\n        this.colors = this.themes.get(\"default\");\n    }\n\n    private os() : string\n    {\n        let os:string = \"unknown\";\n\n        if (navigator.appVersion.indexOf(\"Mac\") != -1)   os=\"MacOS\";\n        if (navigator.appVersion.indexOf(\"X11\") != -1)   os=\"UNIX\";\n        if (navigator.appVersion.indexOf(\"Linux\") != -1) os=\"Linux\";\n        if (navigator.appVersion.indexOf(\"Win\") != -1)   os=\"Windows\";\n\n        return(os);\n    }\n\n    private async load()\n    {\n        this.invoker = this.client.get<any>(\"/assets/config/config.json\").toPromise();\n        this.invoker.then(data => {this.loaded(data);}, error => {this.config = {}; console.log(\"Loading config failed: \"+error)});\n    }\n\n    private loaded(config:any) : void\n    {\n        this.config = config;\n\n        this.datefmt$ = this.config[\"datefmt\"];\n        dates.setFormat(this.datefmt$);\n\n        if (this.config[\"locale\"] != null)\n            this.lang = this.config[\"locale\"];\n\n        if (this.config[\"calendar\"] != null)\n            this.caltitle = this.config[\"calendar\"];\n\n        if (this.config[\"keymap\"] != null)\n            this.keymaphelp = this.config[\"keymap\"];\n    }\n\n    public async ready() : Promise<boolean>\n    {\n        if (this.invoker != null)\n        {\n            await this.invoker;\n            this.invoker = null;\n        }\n\n        return(true);\n    }\n\n    public get locale() : string\n    {\n        return(this.lang);\n    }\n\n    public get datefmt() : string\n    {\n        return(this.datefmt$);\n    }\n\n    public set colors(theme:Theme)\n    {\n        this.colors$ = theme;\n    }\n\n    public get colors() : Theme\n    {\n        return(this.colors$);\n    }\n\n    public get others() : any\n    {\n        return(this.config);\n    }\n\n    public notify(instance:any, func:string) : void\n    {\n        this.notifications.push({instance: instance, func: func});\n    }\n\n    public setTheme(theme:string|Theme) : void\n    {\n        let ttheme:Theme = null;\n\n        if (typeof theme == 'object') ttheme = theme as Theme;\n        else                          ttheme = this.themes.get(theme);\n\n        if (ttheme != null)\n        {\n            this.colors = ttheme;\n            this.notifications.forEach((notify) => {notify.instance[notify.func]()});\n        }\n    }\n\n\n    public get keymapping() : KeyMap\n    {\n        return(this.keymap);\n    }\n\n\n    public get keymaptitle() : string\n    {\n        return(this.keymaphelp);\n    }\n\n\n    public get calendarname() : string\n    {\n        return(this.caltitle);\n    }\n}","import { Injectable, Injector, ComponentFactoryResolver, ComponentRef, ApplicationRef } from '@angular/core';\n\n@Injectable({\n    providedIn: 'root',\n})\n\n\nexport class Builder\n{\n    constructor(private resolver:ComponentFactoryResolver, private injector:Injector, private app:ApplicationRef) {}\n\n    public createComponent(component:any) : ComponentRef<any>\n    {\n        let cref:ComponentRef<any> = this.resolver.resolveComponentFactory(component).create(this.injector);\n        return(cref);\n    }\n\n\n    public getAppRef() : ApplicationRef\n    {\n        return(this.app);\n    }\n}\n","import { Theme } from \"./Themes\";\nimport { Config } from \"./Config\";\nimport { Menu } from \"../menu/Menu\";\nimport { Context } from \"./Context\";\nimport { Form } from \"../forms/Form\";\nimport { KeyMapHelp } from \"./KeyMapHelp\";\nimport { Builder } from \"../utils/Builder\";\nimport { Injectable } from '@angular/core';\nimport { FormImpl } from \"../forms/FormImpl\";\nimport { MessageBox } from \"../popup/MessageBox\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { LoginForm } from \"../database/LoginForm\";\nimport { ApplicationImpl } from \"./ApplicationImpl\";\nimport { PopupInstance } from \"../popup/PopupInstance\";\n\n\n@Injectable({\n    providedIn: 'root',\n})\n\nexport class Application\n{\n    private title$:string;\n    private _impl_:ApplicationImpl;\n    // dont rename impl as it is read behind the scenes\n\n\n    constructor(ctx:Context, private conf:Config, client:HttpClient, builder:Builder)\n    {\n        ctx.app = this;\n        ctx.conf = conf;\n        this._impl_ = new ApplicationImpl(ctx,client,builder);\n    }\n\n    public get title() : string\n    {\n        return(this.title$);\n    }\n\n    public set title(title:string)\n    {\n        this.title$ = title;\n        this._impl_.setTitle(title);\n    }\n\n    public get form() : Form\n    {\n        return(this._impl_.getCurrentForm()?.form);\n    }\n\n    public set menu(menu:Menu)\n    {\n        this._impl_.setMenu(menu);\n    }\n\n    public get menu() : Menu\n    {\n        return(this._impl_.getMenu());\n    }\n\n    public get transaction() : boolean\n    {\n        return(this._impl_.appstate.transaction);\n    }\n\n    public newform(form:any, parameters?:Map<string,any>)\n    {\n        this._impl_.showform(form,true,parameters);\n    }\n\n    public showform(form:any, parameters?:Map<string,any>)\n    {\n        this._impl_.showform(form,false,parameters);\n    }\n\n    public callform(form:any, parameters?:Map<string,any>)\n    {\n        this._impl_.callform(form,false,parameters);\n    }\n\n    public get colors() : Theme\n    {\n        return(this.conf.colors);\n    }\n\n    public set theme(theme:string|Theme)\n    {\n        setTimeout(() => {this.conf.setTheme(theme);},50);\n    }\n\n    public closeform(destroy?:boolean) : void\n    {\n        if (destroy == undefined) destroy = false;\n        let form:FormImpl = this._impl_.getCurrentForm();\n        if (form != null) form.close(destroy);\n    }\n\n    public connect() : void\n    {\n        if (!this._impl_.connected)\n        {\n            let pinst:PopupInstance = new PopupInstance();\n            pinst.display(this._impl_,LoginForm);\n        }\n    }\n\n    public async disconnect()\n    {\n        if (this._impl_.connected)\n        {\n            await this._impl_.appstate.clearAllForms();\n            await this._impl_.connection.rollback();\n            await this._impl_.disconnect();\n        }\n    }\n\n    public async commit()\n    {\n        if (!this._impl_.connected)\n            return;\n\n        let form:FormImpl = this._impl_.getCurrentForm();\n\n        if (form != null)\n        {\n            if (!await form.validate())\n                return;\n        }\n\n        this._impl_.connection.commit();\n    }\n\n    public async rollback()\n    {\n        if (this._impl_.connected)\n        {\n            await this._impl_.appstate.clearAllForms();\n            await this._impl_.connection.rollback();\n        }\n    }\n\n    public showKeyMap() : void\n    {\n        KeyMapHelp.show(this._impl_);\n    }\n\n    public alert(message:string, title?:string, width?:string, height?:string) : void\n    {\n        MessageBox.show(this._impl_,message,title,width,height);\n    }\n}","import { Wait } from './utils/Wait';\nimport { NgModule } from '@angular/core';\nimport { MenuArea } from './menu/MenuArea';\nimport { FormList } from './menu/FormList';\nimport { FormArea } from './forms/FormArea';\nimport { CommonModule } from \"@angular/common\";\nimport { LoginForm } from './database/LoginForm';\nimport { ModalWindow } from './forms/ModalWindow';\nimport { FieldInstance } from './input/FieldInstance';\nimport { HttpClientModule } from '@angular/common/http';\nimport { ListOfValuesImpl } from './listval/ListOfValuesImpl';\n\n\n@NgModule({\n    declarations: [FormList, FormArea, ModalWindow, MenuArea, LoginForm, FieldInstance, ListOfValuesImpl, Wait],\n    exports     : [FormList, FormArea, MenuArea, FieldInstance],\n    imports     : [CommonModule, HttpClientModule]\n})\n\n\nexport class FormsLibrary\n{\n}","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["window","parseimpl","format","formatimpl","Column"],"mappings":"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"}},"fesm2015":{"code":"import { __awaiter } from 'tslib';\nimport * as i0 from '@angular/core';\nimport { Injectable, ElementRef, Component, ChangeDetectionStrategy, ViewChild, Input, NgModule } from '@angular/core';\nimport * as i1 from '@angular/common/http';\nimport { HttpErrorResponse, HttpClientModule } from '@angular/common/http';\nimport * as i1$1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\n\nclass Utils {\n    getName(component) {\n        if (component == null)\n            return (null);\n        let name = component.constructor.name;\n        if (name == \"String\")\n            name = component;\n        if (name == \"Function\")\n            name = component.name;\n        return (name.toLowerCase());\n    }\n    clone(obj) {\n        let clone = {};\n        if (obj == null)\n            return (null);\n        Object.keys(obj).forEach((key) => { clone[key] = obj[key]; });\n        return (clone);\n    }\n    getType(component) {\n        let type = null;\n        let code = component.toString();\n        if (code == \"[object Object]\")\n            code = component.constructor.toString();\n        if (code.startsWith(\"class\")) {\n            code = code.substring(0, code.indexOf(\"{\"));\n            let pos = code.indexOf(\"extends\");\n            if (pos > 0) {\n                let pos1 = code.indexOf(\"[\", pos);\n                let pos2 = code.indexOf(\"]\", pos1);\n                type = code.substring(pos1 + 2, pos2 - 1);\n            }\n        }\n        return (type);\n    }\n    getParams(func) {\n        let code = func.toString();\n        code = code.replace(/\\/\\*[\\s\\S]*?\\*\\//g, '')\n            .replace(/\\/\\/(.)*/g, '')\n            .replace(/{[\\s\\S]*}/, '')\n            .replace(/=>/g, '')\n            .trim();\n        let end = code.length - 1;\n        let start = code.indexOf(\"(\") + 1;\n        let params = [];\n        let tokens = code.substring(start, end).split(\", \");\n        tokens.forEach((element) => {\n            // Removing any default value\n            element = element.replace(/=[\\s\\S]*/g, '').trim();\n            if (element.length > 0)\n                params.push(element);\n        });\n        return (params);\n    }\n}\n\nclass BlockDefinitions {\n    static setDefaultAlias(block, alias) {\n        if (alias == null)\n            alias = block;\n        BlockDefinitions.alias.set(block, alias);\n    }\n    static getDefaultAlias(alias) {\n        alias = alias.toLowerCase();\n        let bname = BlockDefinitions.alias.get(alias);\n        if (bname == null)\n            bname = alias;\n        return (bname);\n    }\n    static setBlock(form, def) {\n        let blocks = BlockDefinitions.blocks.get(form.toLowerCase());\n        if (blocks == null) {\n            blocks = [];\n            BlockDefinitions.blocks.set(form.toLowerCase(), blocks);\n        }\n        if (def.prop != null)\n            blocks.push(def);\n        else\n            blocks.unshift(def);\n    }\n    static getBlocks(form) {\n        let blocks = BlockDefinitions.blocks.get(form.toLowerCase());\n        if (blocks == null)\n            blocks = [];\n        return (blocks);\n    }\n    static setKey(block, def) {\n        let keys = BlockDefinitions.keys.get(block.toLowerCase());\n        if (keys == null) {\n            keys = [];\n            BlockDefinitions.keys.set(block.toLowerCase(), keys);\n        }\n        keys.unshift(def);\n    }\n    static getKeys(block) {\n        let keys = BlockDefinitions.keys.get(block.toLowerCase());\n        if (keys == null)\n            keys = [];\n        return (keys);\n    }\n}\nBlockDefinitions.alias = new Map();\nBlockDefinitions.blocks = new Map();\nBlockDefinitions.keys = new Map();\n\nconst key = (name, unique, columns) => {\n    function define(comp) {\n        let utils = new Utils();\n        let cname = utils.getName(comp);\n        let ctype = utils.getType(comp);\n        if (ctype != \"Block\") {\n            console.log(\"@key(\" + name + \") can only be used on blocks\");\n            return;\n        }\n        let arr = true;\n        let cols = [];\n        if (columns.constructor.name == \"String\")\n            arr = false;\n        if (arr)\n            cols = columns;\n        else\n            cols.push(columns);\n        let lccols = [];\n        cols.forEach((col) => { lccols.push(col.toLowerCase()); });\n        let def = { name: name.toLowerCase(), unique: unique, columns: lccols };\n        BlockDefinitions.setKey(cname, def);\n    }\n    return (define);\n};\n\nclass FormDefinitions {\n    static setForm(def) {\n        FormDefinitions.forms.unshift(def);\n    }\n    static getForms() {\n        return (FormDefinitions.forms);\n    }\n    static getWindowOpts(form) {\n        let wopts = FormDefinitions.windowopts.get(form);\n        if (wopts == null) {\n            wopts = {};\n            FormDefinitions.windowopts.set(form, wopts);\n        }\n        return (wopts);\n    }\n    static setOnInit(form, func) {\n        let funcs = FormDefinitions.oninit.get(form);\n        if (funcs == null)\n            funcs = [];\n        funcs.push(func);\n        FormDefinitions.oninit.set(form, funcs);\n    }\n    static setOnShow(form, func) {\n        let funcs = FormDefinitions.onshow.get(form);\n        if (funcs == null)\n            funcs = [];\n        funcs.push(func);\n        FormDefinitions.onshow.set(form, funcs);\n    }\n    static setOnHide(form, func) {\n        let funcs = FormDefinitions.onhide.get(form);\n        if (funcs == null)\n            funcs = [];\n        funcs.push(func);\n        FormDefinitions.onhide.set(form, funcs);\n    }\n    static setOnConnect(form, func) {\n        let funcs = FormDefinitions.onconn.get(form);\n        if (funcs == null)\n            funcs = [];\n        funcs.push(func);\n        FormDefinitions.onconn.set(form, funcs);\n    }\n    static setOnDisconnect(form, func) {\n        let funcs = FormDefinitions.ondisc.get(form);\n        if (funcs == null)\n            funcs = [];\n        funcs.push(func);\n        FormDefinitions.ondisc.set(form, funcs);\n    }\n    static setOnDestroy(form, func) {\n        let funcs = FormDefinitions.ondest.get(form);\n        if (funcs == null)\n            funcs = [];\n        funcs.push(func);\n        FormDefinitions.ondest.set(form, funcs);\n    }\n    static getOnInit(form) {\n        let funcs = FormDefinitions.oninit.get(form);\n        if (funcs == null)\n            funcs = [];\n        return (funcs);\n    }\n    static getOnShow(form) {\n        let funcs = FormDefinitions.onshow.get(form);\n        if (funcs == null)\n            funcs = [];\n        return (funcs);\n    }\n    static getOnHide(form) {\n        let funcs = FormDefinitions.onhide.get(form);\n        if (funcs == null)\n            funcs = [];\n        return (funcs);\n    }\n    static getOnConnect(form) {\n        let funcs = FormDefinitions.onconn.get(form);\n        if (funcs == null)\n            funcs = [];\n        return (funcs);\n    }\n    static getOnDisconnect(form) {\n        let funcs = FormDefinitions.ondisc.get(form);\n        if (funcs == null)\n            funcs = [];\n        return (funcs);\n    }\n    static getOnDestroy(form) {\n        let funcs = FormDefinitions.ondest.get(form);\n        if (funcs == null)\n            funcs = [];\n        return (funcs);\n    }\n}\nFormDefinitions.forms = [];\nFormDefinitions.oninit = new Map();\nFormDefinitions.onshow = new Map();\nFormDefinitions.onhide = new Map();\nFormDefinitions.onconn = new Map();\nFormDefinitions.ondisc = new Map();\nFormDefinitions.ondest = new Map();\nFormDefinitions.windowopts = new Map();\n\nconst form = (component, title, path, navigable) => {\n    function define(_comp) {\n        let def = {\n            path: path,\n            title: title,\n            component: component,\n        };\n        if (navigable != undefined)\n            def[\"navigable\"] = navigable;\n        FormDefinitions.setForm(def);\n    }\n    return (define);\n};\n\nconst init = (form, func) => {\n    let utils = new Utils();\n    let fname = utils.getName(form);\n    let ctype = utils.getType(form);\n    if (ctype != \"Form\") {\n        console.log(\"@init can only be used on forms, found on '\" + fname + \"'\");\n        return;\n    }\n    FormDefinitions.setOnInit(fname, func);\n};\n\nconst show = (form, func) => {\n    let utils = new Utils();\n    let fname = utils.getName(form);\n    let ctype = utils.getType(form);\n    if (ctype != \"Form\") {\n        console.log(\"@show can only be used on forms, found on '\" + fname + \"'\");\n        return;\n    }\n    FormDefinitions.setOnShow(fname, func);\n};\n\nconst hide = (form, func) => {\n    let utils = new Utils();\n    let fname = utils.getName(form);\n    let ctype = utils.getType(form);\n    if (ctype != \"Form\") {\n        console.log(\"@hide can only be used on forms, found on '\" + fname + \"'\");\n        return;\n    }\n    FormDefinitions.setOnHide(fname, func);\n};\n\nclass JOINDefinitions {\n    static add(form, def) {\n        let joins = JOINDefinitions.defs.get(form);\n        if (joins == null) {\n            joins = [];\n            JOINDefinitions.defs.set(form, joins);\n        }\n        joins.unshift(def);\n    }\n    static get(form) {\n        return (JOINDefinitions.defs.get(form.toLowerCase()));\n    }\n}\nJOINDefinitions.defs = new Map();\n\nconst join = (definition) => {\n    function define(comp) {\n        let utils = new Utils();\n        let form = utils.getName(comp);\n        let ctype = utils.getType(comp);\n        if (ctype != \"Form\") {\n            console.log(\"@join(\" + JSON.stringify(definition) + \") can only be used on forms\");\n            return;\n        }\n        definition.master.key = definition.master.key.toLowerCase();\n        definition.master.alias = definition.master.alias.toLowerCase();\n        definition.detail.key = definition.detail.key.toLowerCase();\n        definition.detail.alias = definition.detail.alias.toLowerCase();\n        JOINDefinitions.add(form.toLowerCase(), definition);\n    }\n    return (define);\n};\n\nconst block = (definition) => {\n    function define(comp, prop) {\n        let utils = new Utils();\n        let name = utils.getName(comp);\n        let type = utils.getType(comp);\n        if (type != \"Form\" && prop == null) {\n            console.log(\"@block can only be used with forms\");\n            return;\n        }\n        if (definition.alias != null)\n            definition.alias = definition.alias.toLowerCase();\n        let def = {\n            prop: prop,\n            alias: definition.alias,\n            component: definition.component,\n            databaseopts: definition.databaseopts\n        };\n        BlockDefinitions.setBlock(name, def);\n    }\n    return (define);\n};\n\nconst alias = (alias) => {\n    function define(comp) {\n        let utils = new Utils();\n        let cname = utils.getName(comp);\n        let ctype = utils.getType(comp);\n        if (ctype != \"Block\") {\n            console.log(\"@alias(\" + alias + \") can only be used on blocks\");\n            return;\n        }\n        if (alias == null) {\n            console.log(\"@alias(\" + alias + \") cannot be null\");\n            return;\n        }\n        BlockDefinitions.setDefaultAlias(cname, alias.toLowerCase());\n    }\n    return (define);\n};\n\nclass TableDefinitions {\n    static set(block, table) {\n        let def = TableDefinitions.index.get(block.toLowerCase());\n        if (def != null) {\n            if (table.hasOwnProperty(\"name\"))\n                def.name = table.name;\n            if (table.hasOwnProperty(\"order\"))\n                def.order = table.order;\n        }\n        else {\n            TableDefinitions.index.set(block.toLowerCase(), table);\n        }\n    }\n    static get(block) {\n        return (TableDefinitions.index.get(block.toLowerCase()));\n    }\n}\nTableDefinitions.index = new Map();\n\nconst table = (definition) => {\n    function define(comp) {\n        let utils = new Utils();\n        let cname = utils.getName(comp);\n        let ctype = utils.getType(comp);\n        if (ctype != \"Block\") {\n            console.log(\"@table(\" + definition.name + \") can only be used on blocks\");\n            return;\n        }\n        TableDefinitions.set(cname, definition);\n    }\n    return (define);\n};\n\nclass FieldDefinitions {\n    static add(form, comp, def) {\n        let parts = FieldDefinitions.split(def.name);\n        if (form) {\n            if (parts.length < 2 || parts.length > 3) {\n                console.log(\"Form field \" + def.name + \" must be on the form block.field[.id], field definition ignored\");\n                return;\n            }\n            def.name = parts[1];\n            let id = null;\n            let block = parts[0];\n            if (parts.length > 2)\n                id = parts[2];\n            if (id != null)\n                FieldDefinitions.addformid(comp, block, id, def);\n            else\n                FieldDefinitions.addformfield(comp, block, def);\n        }\n        else {\n            if (parts.length > 2) {\n                console.log(\"Block field \" + def.name + \" must be on the form field[.id], field definition ignored\");\n                return;\n            }\n            let id = null;\n            if (parts.length > 1) {\n                id = parts[1];\n                def.name = parts[0];\n            }\n            if (id != null)\n                FieldDefinitions.addblockid(comp, id, def);\n            else\n                FieldDefinitions.addblockfield(comp, def);\n        }\n    }\n    static addformfield(form, block, def) {\n        let formbfd = FieldDefinitions.ffd.get(form);\n        let formbfx = FieldDefinitions.ffx.get(form);\n        let formbcx = FieldDefinitions.fcx.get(form);\n        if (formbfd == null) {\n            formbfd = new Map();\n            FieldDefinitions.ffd.set(form, formbfd);\n            formbfx = new Map();\n            FieldDefinitions.ffx.set(form, formbfx);\n            formbcx = new Map();\n            FieldDefinitions.fcx.set(form, formbcx);\n        }\n        let fields = formbfd.get(block);\n        let index = formbfx.get(block);\n        let columns = formbcx.get(block);\n        if (fields == null) {\n            fields = [];\n            formbfd.set(block, fields);\n            index = new Map();\n            formbfx.set(block, index);\n            columns = new Map();\n            formbcx.set(block, columns);\n        }\n        if (index.get(def.name) != null) {\n            console.log(\"Field \" + def.name + \" defined twice on block '\" + form + \".\" + block + \"', ignored\");\n            return;\n        }\n        if (columns.get(def.name) != null) {\n            console.log(\"Column \" + def.column + \" bound to more than 1 field on block '\" + form + \".\" + block + \"', ignored\");\n            def.column = null;\n        }\n        fields.unshift(def);\n        index.set(def.name, def);\n        if (def.column != null)\n            columns.set(def.column, def);\n    }\n    static addblockfield(block, def) {\n        let fields = FieldDefinitions.bfd.get(block);\n        let index = FieldDefinitions.bfx.get(block);\n        let columns = FieldDefinitions.bcx.get(block);\n        if (fields == null) {\n            fields = [];\n            FieldDefinitions.bfd.set(block, fields);\n            index = new Map();\n            FieldDefinitions.bfx.set(block, index);\n            columns = new Map();\n            FieldDefinitions.bcx.set(block, columns);\n        }\n        if (def.hasOwnProperty(\"column\")) {\n            if (def.column != null)\n                def.column = def.column.toLowerCase();\n        }\n        if (index.get(def.name) != null) {\n            console.log(\"Field \" + def.name + \" defined twice on block '\" + block + \"', ignored\");\n            return;\n        }\n        if (columns.get(def.name) != null) {\n            console.log(\"Column \" + def.column + \" bound to more than 1 field on block '\" + block + \"', ignored\");\n            def.column = null;\n        }\n        fields.unshift(def);\n        index.set(def.name, def);\n        if (def.column != null)\n            columns.set(def.column, def);\n    }\n    static addformid(form, block, id, def) {\n        let formids = FieldDefinitions.fidx.get(form);\n        if (formids == null) {\n            formids = new Map();\n            FieldDefinitions.fidx.set(form, formids);\n        }\n        let blockids = formids.get(block);\n        if (blockids == null) {\n            blockids = new Map();\n            formids.set(block, blockids);\n        }\n        if (blockids.get(def.name + \".\" + id) != null) {\n            console.log(\"Field \" + form + \".\" + def.name + \".\" + id + \" defined twice, ignored\");\n            return;\n        }\n        if (def.column != null) {\n            console.log(\"Field \" + form + \".\" + def.name + \".\" + id + \" cannot override column definition, ignored\");\n            def.column = null;\n        }\n        blockids.set(def.name + \".\" + id, def);\n    }\n    static addblockid(block, id, def) {\n        let blockids = FieldDefinitions.bidx.get(block);\n        if (blockids == null) {\n            blockids = new Map();\n            FieldDefinitions.bidx.set(block, blockids);\n        }\n        if (blockids.get(def.name + \".\" + id) != null) {\n            console.log(\"Field \" + def.name + \".\" + id + \" defined twice, ignored\");\n            return;\n        }\n        if (def.column != null) {\n            console.log(\"Field \" + def.name + \".\" + id + \" cannot override column definition, ignored\");\n            def.column = null;\n        }\n        blockids.set(def.name + \".\" + id, def);\n    }\n    static getFormFieldOverride(form, block, fldid) {\n        let formids = FieldDefinitions.fidx.get(form);\n        if (formids == null)\n            return (null);\n        let blockids = formids.get(block.toLowerCase());\n        if (blockids != null)\n            return (blockids.get(fldid.toLowerCase()));\n        return (null);\n    }\n    static getFieldOverride(block, fldid) {\n        let blockids = FieldDefinitions.bidx.get(block.toLowerCase());\n        if (blockids != null)\n            return (blockids.get(fldid.toLowerCase()));\n        return (null);\n    }\n    static getFormFields(form, block) {\n        let formbfd = FieldDefinitions.ffd.get(form.toLowerCase());\n        if (formbfd == null)\n            return ([]);\n        let fields = formbfd.get(block.toLowerCase());\n        if (fields == null)\n            return ([]);\n        return (fields);\n    }\n    static getFields(block) {\n        let fields = FieldDefinitions.bfd.get(block.toLowerCase());\n        if (fields == null)\n            return ([]);\n        return (fields);\n    }\n    static getFormFieldIndex(form, block) {\n        let formbfx = FieldDefinitions.ffx.get(form.toLowerCase());\n        if (formbfx == null)\n            return (new Map());\n        let index = formbfx.get(block.toLowerCase());\n        if (index == null)\n            return (new Map());\n        return (new Map(index));\n    }\n    static getFieldIndex(block) {\n        let index = FieldDefinitions.bfx.get(block.toLowerCase());\n        if (index == null)\n            return (new Map());\n        return (new Map(index));\n    }\n    static getFormColumnIndex(form, block) {\n        let formbcx = FieldDefinitions.fcx.get(form.toLowerCase());\n        if (formbcx == null)\n            return (new Map());\n        let index = formbcx.get(block.toLowerCase());\n        if (index == null)\n            return (new Map());\n        return (new Map(index));\n    }\n    static getColumnIndex(block) {\n        let index = FieldDefinitions.bcx.get(block.toLowerCase());\n        if (index == null)\n            index = new Map();\n        return (new Map(index));\n    }\n    static split(name) {\n        let tokens = name.split(\".\");\n        for (let i = 0; i < tokens.length; i++)\n            tokens[i] = tokens[i].trim().toLowerCase();\n        return (tokens);\n    }\n}\n// List and indexes for fields, columns and fields with id, respectively for form\nFieldDefinitions.bfd = new Map();\nFieldDefinitions.bfx = new Map();\nFieldDefinitions.bcx = new Map();\nFieldDefinitions.bidx = new Map();\nFieldDefinitions.ffd = new Map();\nFieldDefinitions.ffx = new Map();\nFieldDefinitions.fcx = new Map();\nFieldDefinitions.fidx = new Map();\n\nconst field = (definition) => {\n    function define(comp) {\n        let form = false;\n        let utils = new Utils();\n        let cname = utils.getName(comp);\n        let ctype = utils.getType(comp);\n        if (ctype != \"Block\" && ctype != \"Form\") {\n            console.log(\"@field(\" + JSON.stringify(definition) + \") can only be used on blocks and forms\");\n            return;\n        }\n        if (ctype == \"Form\")\n            form = true;\n        FieldDefinitions.add(form, cname, definition);\n    }\n    return (define);\n};\n\nclass ColumnDefinitions {\n    static add(block, def) {\n        let columns = ColumnDefinitions.bcols.get(block);\n        let index = ColumnDefinitions.bcidx.get(block);\n        if (columns == null) {\n            columns = [];\n            ColumnDefinitions.bcols.set(block, columns);\n            index = new Map();\n            ColumnDefinitions.bcidx.set(block, index);\n        }\n        if (index.get(def.name) != null) {\n            console.log(\"Block \" + block + \" column \" + def.name + \" defined twice, ignored\");\n            return;\n        }\n        columns.unshift(def);\n        index.set(def.name, def);\n    }\n    static get(block) {\n        let columns = ColumnDefinitions.bcols.get(block.toLowerCase());\n        if (columns == null)\n            columns = [];\n        return (columns);\n    }\n    static getIndex(block) {\n        let index = ColumnDefinitions.bcidx.get(block.toLowerCase());\n        if (index == null)\n            index = new Map();\n        return (index);\n    }\n}\nColumnDefinitions.bcols = new Map();\nColumnDefinitions.bcidx = new Map();\n\nconst column = (definition) => {\n    function define(comp) {\n        let utils = new Utils();\n        let cname = utils.getName(comp);\n        let ctype = utils.getType(comp);\n        if (ctype != \"Block\") {\n            console.log(\"@column(\" + definition.name + \",\" + definition.type + \") can only be used on blocks\");\n            return;\n        }\n        ColumnDefinitions.add(cname, definition);\n        definition.name = definition.name.toLowerCase();\n    }\n    return (define);\n};\n\nconst wizard = () => {\n    function define(form) {\n        let utils = new Utils();\n        let fname = utils.getName(form);\n        let ctype = utils.getType(form);\n        if (ctype != \"Form\") {\n            console.log(\"@wizard can only be used on forms\");\n            return;\n        }\n        let wopt = FormDefinitions.getWindowOpts(fname);\n        wopt.wizard = true;\n    }\n    return (define);\n};\n\nconst window$1 = (inherit, width, height, top, left) => {\n    function define(form) {\n        let utils = new Utils();\n        let fname = utils.getName(form);\n        let ctype = utils.getType(form);\n        if (ctype != \"Form\") {\n            console.log(\"@window can only be used on forms\");\n            return;\n        }\n        if (top != null && top.constructor.name == \"Number\")\n            top += \"px\";\n        if (left != null && left.constructor.name == \"Number\")\n            left += \"px\";\n        if (width != null && width.constructor.name == \"Number\")\n            width += \"px\";\n        if (height != null && height.constructor.name == \"Number\")\n            height += \"px\";\n        let wopt = FormDefinitions.getWindowOpts(fname);\n        wopt.inherit = inherit;\n        wopt.offsetTop = \"\" + top;\n        wopt.width = \"\" + width;\n        wopt.height = \"\" + height;\n        wopt.offsetLeft = \"\" + left;\n    }\n    return (define);\n};\n\nconst connect = (form, func) => {\n    let utils = new Utils();\n    let fname = utils.getName(form);\n    let ctype = utils.getType(form);\n    if (ctype != \"Form\") {\n        console.log(\"@connect can only be used on forms, found on '\" + fname + \"'\");\n        return;\n    }\n    FormDefinitions.setOnConnect(fname, func);\n};\n\nconst destroy = (form, func) => {\n    let utils = new Utils();\n    let fname = utils.getName(form);\n    let ctype = utils.getType(form);\n    if (ctype != \"Form\") {\n        console.log(\"@destroy can only be used on forms, found on '\" + fname + \"'\");\n        return;\n    }\n    FormDefinitions.setOnDestroy(fname, func);\n};\n\nvar keymap;\n(function (keymap) {\n    keymap[keymap[\"enter\"] = 0] = \"enter\";\n    keymap[keymap[\"escape\"] = 1] = \"escape\";\n    keymap[keymap[\"undo\"] = 2] = \"undo\";\n    keymap[keymap[\"paste\"] = 3] = \"paste\";\n    keymap[keymap[\"close\"] = 4] = \"close\";\n    keymap[keymap[\"listval\"] = 5] = \"listval\";\n    keymap[keymap[\"delete\"] = 6] = \"delete\";\n    keymap[keymap[\"dublicate\"] = 7] = \"dublicate\";\n    keymap[keymap[\"insertafter\"] = 8] = \"insertafter\";\n    keymap[keymap[\"insertbefore\"] = 9] = \"insertbefore\";\n    keymap[keymap[\"commit\"] = 10] = \"commit\";\n    keymap[keymap[\"rollback\"] = 11] = \"rollback\";\n    keymap[keymap[\"connect\"] = 12] = \"connect\";\n    keymap[keymap[\"disconnect\"] = 13] = \"disconnect\";\n    keymap[keymap[\"nextfield\"] = 14] = \"nextfield\";\n    keymap[keymap[\"prevfield\"] = 15] = \"prevfield\";\n    keymap[keymap[\"nextblock\"] = 16] = \"nextblock\";\n    keymap[keymap[\"prevblock\"] = 17] = \"prevblock\";\n    keymap[keymap[\"nextrecord\"] = 18] = \"nextrecord\";\n    keymap[keymap[\"prevrecord\"] = 19] = \"prevrecord\";\n    keymap[keymap[\"pageup\"] = 20] = \"pageup\";\n    keymap[keymap[\"pagedown\"] = 21] = \"pagedown\";\n    keymap[keymap[\"clearform\"] = 22] = \"clearform\";\n    keymap[keymap[\"clearblock\"] = 23] = \"clearblock\";\n    keymap[keymap[\"enterquery\"] = 24] = \"enterquery\";\n    keymap[keymap[\"executequery\"] = 25] = \"executequery\";\n    keymap[keymap[\"zoom\"] = 26] = \"zoom\";\n})(keymap || (keymap = {}));\nclass KeyMapper {\n    static index(map) {\n        Object.keys(map).forEach((key) => {\n            let val = map[key];\n            let km = keymap[key];\n            KeyMapper.keys.set(val, km);\n        });\n    }\n    static keymap(key) {\n        return (KeyMapper.keys.get(key));\n    }\n    static map(key) {\n        let sig = key.code + \":\";\n        sig += key.shift ? \"t\" : \"f\";\n        sig += key.ctrl ? \"t\" : \"f\";\n        sig += key.alt ? \"t\" : \"f\";\n        sig += key.meta ? \"t\" : \"f\";\n        return (sig);\n    }\n    static parse(key) {\n        let pos = key.indexOf(\":\");\n        let shf = key[pos + 1] == 't';\n        let ctl = key[pos + 2] == 't';\n        let alt = key[pos + 3] == 't';\n        let mta = key[pos + 4] == 't';\n        let code = +key.substring(0, pos);\n        return ({ code: code, shift: shf, ctrl: ctl, alt: alt, meta: mta });\n    }\n}\nKeyMapper.keys = new Map();\n\nclass TriggerEvents {\n    constructor() {\n        this.types = new Map();\n        this.fields = new Map();\n    }\n}\n\nvar Trigger;\n(function (Trigger) {\n    Trigger[Trigger[\"Key\"] = 0] = \"Key\";\n    Trigger[Trigger[\"Lock\"] = 1] = \"Lock\";\n    Trigger[Trigger[\"Typing\"] = 2] = \"Typing\";\n    Trigger[Trigger[\"MouseClick\"] = 3] = \"MouseClick\";\n    Trigger[Trigger[\"MouseDoubleClick\"] = 4] = \"MouseDoubleClick\";\n    Trigger[Trigger[\"PreField\"] = 5] = \"PreField\";\n    Trigger[Trigger[\"PostField\"] = 6] = \"PostField\";\n    Trigger[Trigger[\"PostChange\"] = 7] = \"PostChange\";\n    Trigger[Trigger[\"KeyPrevField\"] = 8] = \"KeyPrevField\";\n    Trigger[Trigger[\"KeyNextField\"] = 9] = \"KeyNextField\";\n    Trigger[Trigger[\"KeyPrevBlock\"] = 10] = \"KeyPrevBlock\";\n    Trigger[Trigger[\"KeyNextBlock\"] = 11] = \"KeyNextBlock\";\n    Trigger[Trigger[\"KeyEnterQuery\"] = 12] = \"KeyEnterQuery\";\n    Trigger[Trigger[\"KeyExecuteQuery\"] = 13] = \"KeyExecuteQuery\";\n    Trigger[Trigger[\"WhenValidateField\"] = 14] = \"WhenValidateField\";\n    Trigger[Trigger[\"WhenValidateRecord\"] = 15] = \"WhenValidateRecord\";\n    Trigger[Trigger[\"PreQuery\"] = 16] = \"PreQuery\";\n    Trigger[Trigger[\"PostQuery\"] = 17] = \"PostQuery\";\n    Trigger[Trigger[\"PreInsert\"] = 18] = \"PreInsert\";\n    Trigger[Trigger[\"PreUpdate\"] = 19] = \"PreUpdate\";\n    Trigger[Trigger[\"PreDelete\"] = 20] = \"PreDelete\";\n})(Trigger || (Trigger = {}));\nvar FieldTrigger;\n(function (FieldTrigger) {\n    FieldTrigger[FieldTrigger[\"Key\"] = 0] = \"Key\";\n    FieldTrigger[FieldTrigger[\"Typing\"] = 1] = \"Typing\";\n    FieldTrigger[FieldTrigger[\"MouseClick\"] = 2] = \"MouseClick\";\n    FieldTrigger[FieldTrigger[\"MouseDoubleClick\"] = 3] = \"MouseDoubleClick\";\n    FieldTrigger[FieldTrigger[\"PreField\"] = 4] = \"PreField\";\n    FieldTrigger[FieldTrigger[\"PostField\"] = 5] = \"PostField\";\n    FieldTrigger[FieldTrigger[\"PostChange\"] = 6] = \"PostChange\";\n    FieldTrigger[FieldTrigger[\"WhenValidateField\"] = 7] = \"WhenValidateField\";\n    FieldTrigger[FieldTrigger[\"WhenValidateRecord\"] = 8] = \"WhenValidateRecord\";\n})(FieldTrigger || (FieldTrigger = {}));\nclass Triggers {\n    constructor() {\n        this.triggers = new TriggerEvents();\n    }\n    static init() {\n        if (Triggers.fieldtriggers == null) {\n            Triggers.fieldtriggers = new Set();\n            Object.keys(FieldTrigger).forEach((type) => {\n                if (isNaN(Number(type)))\n                    Triggers.fieldtriggers.add(type);\n            });\n        }\n    }\n    addTrigger(instance, func, ttypes, tfields, tkeys) {\n        let keys = [];\n        let fields = [];\n        let types = [];\n        let tasa = false;\n        if (ttypes.constructor.name == \"Array\")\n            tasa = true;\n        if (tasa)\n            types = ttypes;\n        else\n            types.push(ttypes);\n        if (tfields != null) {\n            let fasa = false;\n            if (tfields.constructor.name == \"Array\")\n                fasa = true;\n            if (fasa)\n                fields = tfields;\n            else\n                fields.push(tfields);\n        }\n        if (tkeys != null) {\n            let kasa = false;\n            if (tkeys.constructor.name == \"Array\")\n                kasa = true;\n            if (kasa)\n                keys = tkeys;\n            else\n                keys.push(tkeys);\n        }\n        if (fields.length > 0) {\n            fields.forEach((field) => {\n                field = field.toLowerCase();\n                let triggers = this.triggers.fields.get(field);\n                if (triggers == null) {\n                    triggers = new Map();\n                    this.triggers.fields.set(field, triggers);\n                }\n                types.forEach((type) => {\n                    if (type == Trigger.Key) {\n                        keys.forEach((key) => {\n                            let code = this.keycode(key);\n                            let lsnrs = triggers.get(code);\n                            if (lsnrs == null) {\n                                lsnrs = [];\n                                triggers.set(code, lsnrs);\n                            }\n                            lsnrs.push({ inst: instance, func: func });\n                        });\n                    }\n                    else if (this.isFieldTrigger(type)) {\n                        let name = this.trgname(type);\n                        let lsnrs = triggers.get(name);\n                        if (lsnrs == null) {\n                            lsnrs = [];\n                            triggers.set(name, lsnrs);\n                        }\n                        lsnrs.push({ inst: instance, func: func });\n                    }\n                });\n            });\n        }\n        else {\n            types.forEach((type) => {\n                if (type == Trigger.Key) {\n                    keys.forEach((key) => {\n                        let code = this.keycode(key);\n                        let lsnrs = this.triggers.types.get(code);\n                        if (lsnrs == null) {\n                            lsnrs = [];\n                            this.triggers.types.set(code, lsnrs);\n                        }\n                        lsnrs.push({ inst: instance, func: func });\n                    });\n                }\n                else {\n                    let name = this.trgname(type);\n                    let lsnrs = this.triggers.types.get(name);\n                    if (lsnrs == null) {\n                        lsnrs = [];\n                        this.triggers.types.set(name, lsnrs);\n                    }\n                    lsnrs.push({ inst: instance, func: func });\n                }\n            });\n        }\n    }\n    invokeTriggers(type, event, key) {\n        return __awaiter(this, void 0, void 0, function* () {\n            event[\"type$\"] = type;\n            if (type == Trigger.Key && key != null) {\n                let code = this.keycode(key);\n                let lsnrs = this.triggers.types.get(code);\n                if (lsnrs != null) {\n                    for (let i = 0; i < lsnrs.length; i++)\n                        if (!(yield this.execfunc(lsnrs[i], event)))\n                            return (false);\n                }\n            }\n            else {\n                let name = this.trgname(type);\n                let lsnrs = this.triggers.types.get(name);\n                if (lsnrs != null) {\n                    for (let i = 0; i < lsnrs.length; i++)\n                        if (!(yield this.execfunc(lsnrs[i], event)))\n                            return (false);\n                }\n            }\n            return (true);\n        });\n    }\n    invokeFieldTriggers(type, field, event, key) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let triggers = this.triggers.fields.get(field);\n            if (triggers == null)\n                return (this.invokeTriggers(type, event, key));\n            event[\"type$\"] = type;\n            if (type == Trigger.Key && key != null) {\n                let code = this.keycode(key);\n                let lsnrs = triggers.get(code);\n                if (lsnrs != null) {\n                    for (let i = 0; i < lsnrs.length; i++)\n                        if (!(yield this.execfunc(lsnrs[i], event)))\n                            return (false);\n                }\n            }\n            else {\n                let name = this.trgname(type);\n                let lsnrs = triggers.get(name);\n                if (lsnrs != null) {\n                    for (let i = 0; i < lsnrs.length; i++)\n                        if (!(yield this.execfunc(lsnrs[i], event)))\n                            return (false);\n                }\n            }\n            return (this.invokeTriggers(type, event, key));\n        });\n    }\n    execfunc(lsnr, event) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                return (yield lsnr.inst[lsnr.func.name](event));\n            }\n            catch (error) {\n                console.log(error);\n                return (false);\n            }\n        });\n    }\n    isFieldTrigger(trigger) {\n        Triggers.init();\n        return (Triggers.fieldtriggers.has(Trigger[trigger]));\n    }\n    trgname(trigger) {\n        return (Trigger[trigger].toLowerCase());\n    }\n    keycode(key) {\n        return (keymap[key].toLowerCase());\n    }\n}\nTriggers.fieldtriggers = null;\n\nclass TriggerDefinitions {\n    static add(isblock, cname, def) {\n        if (def.key == null)\n            this.addft(isblock, cname, def);\n        else\n            this.addkt(isblock, cname, def);\n    }\n    static addkt(isblock, cname, def) {\n        if (isblock)\n            TriggerDefinitions.addKeyTrigger(cname, def);\n        else\n            TriggerDefinitions.addFormKeyTrigger(cname, def);\n    }\n    static addft(isblock, cname, def) {\n        let parts = TriggerDefinitions.split(def.field);\n        if (isblock && parts.length > 1) {\n            console.log(\"trigger must specify field without '.' or ' '\");\n            return;\n        }\n        if (!isblock && parts.length > 2) {\n            console.log(\"trigger must specify blockalias.field without ' '\");\n            return;\n        }\n        let form = null;\n        let block = null;\n        let field = null;\n        if (isblock) {\n            block = cname;\n            if (parts.length > 0)\n                field = parts.shift();\n        }\n        else {\n            form = cname;\n            block = parts.shift();\n            def.block = block;\n            if (parts.length > 0)\n                field = parts.shift();\n        }\n        def.field = field;\n        if (isblock)\n            TriggerDefinitions.addFieldTrigger(block, field, def);\n        else\n            TriggerDefinitions.addFormFieldTrigger(form, block, field, def);\n    }\n    static addFieldTrigger(block, field, def) {\n        let triggers = TriggerDefinitions.bftriggers.get(block);\n        if (triggers == null) {\n            triggers = new Map();\n            TriggerDefinitions.bftriggers.set(block, triggers);\n        }\n        triggers.set(field + \"[\" + Trigger[def.trigger] + \"]\", def);\n    }\n    static addKeyTrigger(block, def) {\n        let triggers = TriggerDefinitions.bktriggers.get(block);\n        if (triggers == null) {\n            triggers = new Map();\n            TriggerDefinitions.bktriggers.set(block, triggers);\n        }\n        triggers.set(keymap[def.key] + \"[\" + Trigger[def.trigger] + \"]\", def);\n    }\n    static addFormFieldTrigger(form, block, field, def) {\n        if (block == null)\n            block = \"\";\n        let ftriggers = TriggerDefinitions.fftriggers.get(form);\n        if (ftriggers == null) {\n            ftriggers = new Map();\n            TriggerDefinitions.fftriggers.set(form, ftriggers);\n        }\n        let triggers = ftriggers.get(block);\n        if (triggers == null) {\n            triggers = new Map();\n            ftriggers.set(block, triggers);\n        }\n        triggers.set(field + \"[\" + Trigger[def.trigger] + \"]\", def);\n    }\n    static addFormKeyTrigger(form, def) {\n        let triggers = TriggerDefinitions.fktriggers.get(form);\n        if (triggers == null) {\n            triggers = new Map();\n            TriggerDefinitions.fktriggers.set(form, triggers);\n        }\n        triggers.set(keymap[def.key] + \"[\" + Trigger[def.trigger] + \"]\", def);\n    }\n    static getFieldTriggers(block) {\n        return (new Map(TriggerDefinitions.bftriggers.get(block.toLowerCase())));\n    }\n    static getKeyTriggers(block) {\n        return (new Map(TriggerDefinitions.bktriggers.get(block.toLowerCase())));\n    }\n    static getFormFieldTriggers(form, block) {\n        if (block == null)\n            block = \"\";\n        let triggers = TriggerDefinitions.fftriggers.get(form.toLowerCase());\n        if (triggers != null)\n            return (new Map(triggers.get(block.toLowerCase())));\n        return (new Map());\n    }\n    static getFormKeyTriggers(form) {\n        return (new Map(TriggerDefinitions.fktriggers.get(form.toLowerCase())));\n    }\n    static split(name) {\n        if (name == null)\n            return ([]);\n        let tokens = name.trim().split(\".\");\n        for (let i = 0; i < tokens.length; i++)\n            tokens[i] = tokens[i].trim().toLowerCase();\n        return (tokens);\n    }\n}\nTriggerDefinitions.bftriggers = new Map();\nTriggerDefinitions.bktriggers = new Map();\nTriggerDefinitions.fktriggers = new Map();\nTriggerDefinitions.fftriggers = new Map();\n\nconst trigger = (trigger, field) => {\n    function define(comp, func) {\n        let utils = new Utils();\n        let cname = utils.getName(comp);\n        let ctype = utils.getType(comp);\n        let params = utils.getParams(comp[func]);\n        if (params.length != 1) {\n            console.log(\"function \" + func + \" must take 1 TriggerEvent argument\");\n            return;\n        }\n        if (ctype != \"Block\" && ctype != \"Form\") {\n            console.log(\"@trigger can only be applied on Block or Form\");\n            return;\n        }\n        let blktrg = false;\n        if (ctype == \"Block\")\n            blktrg = true;\n        let fields = [];\n        if (field == null)\n            field = [null];\n        if (field.constructor.name == \"Array\")\n            fields = field;\n        else\n            fields.push(field);\n        fields.forEach((fld) => {\n            let trg = {\n                field: fld,\n                block: null,\n                blktrg: blktrg,\n                params: params,\n                func: comp[func],\n                trigger: trigger\n            };\n            TriggerDefinitions.add(blktrg, cname, trg);\n        });\n    }\n    return (define);\n};\n\nclass DBUsage {\n    static merge(changes, base) {\n        let utils = new Utils();\n        if (changes == null)\n            return (base);\n        let merged = utils.clone(base);\n        if (changes.hasOwnProperty(\"query\"))\n            merged.query = changes.query;\n        if (changes.hasOwnProperty(\"insert\"))\n            merged.insert = changes.insert;\n        if (changes.hasOwnProperty(\"update\"))\n            merged.update = changes.update;\n        if (changes.hasOwnProperty(\"delete\"))\n            merged.delete = changes.delete;\n        return (merged);\n    }\n    static override(overide, base) {\n        let utils = new Utils();\n        if (overide == null)\n            return (base);\n        let merged = utils.clone(base);\n        if (overide.hasOwnProperty(\"query\") && !overide.query)\n            merged.query = false;\n        if (overide.hasOwnProperty(\"insert\") && !overide.insert)\n            merged.insert = false;\n        if (overide.hasOwnProperty(\"update\") && !overide.update)\n            merged.update = false;\n        if (overide.hasOwnProperty(\"delete\") && !overide.delete)\n            merged.delete = false;\n        return (merged);\n    }\n    static complete(base) {\n        let utils = new Utils();\n        if (base == null)\n            base = {};\n        else\n            base = utils.clone(base);\n        if (!base.hasOwnProperty(\"query\"))\n            base.query = true;\n        if (!base.hasOwnProperty(\"insert\"))\n            base.insert = true;\n        if (!base.hasOwnProperty(\"update\"))\n            base.update = true;\n        if (!base.hasOwnProperty(\"delete\"))\n            base.delete = true;\n        return (base);\n    }\n}\n\nclass DatabaseDefinitions {\n    static setFormUsage(form, usage) {\n        DatabaseDefinitions.fdefault.set(form, usage);\n    }\n    static getFormUsage(form) {\n        let usage = DatabaseDefinitions.fdefault.get(form.toLowerCase());\n        return (usage);\n    }\n    static setBlockDefault(block, usage) {\n        DatabaseDefinitions.bdefault.set(block, usage);\n    }\n    static getBlockDefault(block) {\n        let usage = null;\n        let base = {\n            query: true,\n            insert: true,\n            update: true,\n            delete: true\n        };\n        if (block != null)\n            usage = DatabaseDefinitions.bdefault.get(block.toLowerCase());\n        return (DBUsage.merge(usage, base));\n    }\n}\nDatabaseDefinitions.bdefault = new Map();\nDatabaseDefinitions.fdefault = new Map();\n\nconst database = (usage) => {\n    function define(component) {\n        let utils = new Utils();\n        let comp = utils.getName(component);\n        let type = utils.getType(component);\n        if (type == \"Form\") {\n            DatabaseDefinitions.setFormUsage(comp, usage);\n            return;\n        }\n        if (type == \"Block\") {\n            DatabaseDefinitions.setBlockDefault(comp, usage);\n            return;\n        }\n        console.log(\"@database can only be used in conjunction with Form or Block\");\n    }\n    return (define);\n};\n\nconst keytrigger = (key) => {\n    function define(comp, func) {\n        let utils = new Utils();\n        let cname = utils.getName(comp);\n        let ctype = utils.getType(comp);\n        let params = utils.getParams(comp[func]);\n        if (params.length != 1) {\n            console.log(\"function \" + func + \" must take 1 TriggerEvent argument\");\n            return;\n        }\n        if (ctype != \"Block\" && ctype != \"Form\") {\n            console.log(\"@keytrigger can only be applied on Block or Form\");\n            return;\n        }\n        let block = false;\n        if (ctype == \"Block\")\n            block = true;\n        let keys = [];\n        if (key.constructor.name == \"Array\")\n            keys = key;\n        else\n            keys.push(key);\n        keys.forEach((key) => {\n            let trg = {\n                key: key,\n                block: null,\n                blktrg: block,\n                params: params,\n                func: comp[func],\n                trigger: Trigger.Key\n            };\n            TriggerDefinitions.add(block, cname, trg);\n        });\n    }\n    return (define);\n};\n\nconst disconnect = (form, func) => {\n    let utils = new Utils();\n    let fname = utils.getName(form);\n    let ctype = utils.getType(form);\n    if (ctype != \"Form\") {\n        console.log(\"@disconnect can only be used on forms, found on '\" + fname + \"'\");\n        return;\n    }\n    FormDefinitions.setOnDisconnect(fname, func);\n};\n\nclass LOVDefinitions {\n    static add(isblock, cname, fieldspec, inst, func, params) {\n        let form = null;\n        let block = null;\n        let field = null;\n        let id = false;\n        let parts = LOVDefinitions.split(fieldspec);\n        if (isblock) {\n            block = cname;\n        }\n        else {\n            form = cname;\n            block = parts.shift();\n        }\n        if (parts.length == 0 || parts.length > 2) {\n            console.log(\"@listofvalues must specify [alias.]field[.id], not '\" + fieldspec + \"'\");\n            return;\n        }\n        field = parts.shift();\n        if (parts.length > 0) {\n            id = true;\n            field += \".\" + parts.shift();\n        }\n        let def = {\n            inst: inst,\n            func: func,\n            params: params\n        };\n        if (form != null) {\n            if (!id)\n                LOVDefinitions.addFormLov(form, block, field, def);\n            else\n                LOVDefinitions.addFormIdLov(form, block, field, def);\n        }\n        else {\n            if (!id)\n                LOVDefinitions.addBlockLov(block, field, def);\n            else\n                LOVDefinitions.addBlockIdLov(block, field, def);\n        }\n    }\n    static addFormLov(form, block, field, def) {\n        let fdefs = LOVDefinitions.fdefs.get(form);\n        if (fdefs == null) {\n            fdefs = new Map();\n            LOVDefinitions.fdefs.set(form, fdefs);\n        }\n        let bdefs = fdefs.get(block);\n        if (bdefs == null) {\n            bdefs = new Map();\n            fdefs.set(block, bdefs);\n        }\n        bdefs.set(field, def);\n    }\n    static addFormIdLov(form, block, field, def) {\n        let fdefs = LOVDefinitions.fiddefs.get(form);\n        if (fdefs == null) {\n            fdefs = new Map();\n            LOVDefinitions.fiddefs.set(form, fdefs);\n        }\n        let bdefs = fdefs.get(block);\n        if (bdefs == null) {\n            bdefs = new Map();\n            fdefs.set(block, bdefs);\n        }\n        bdefs.set(field, def);\n    }\n    static addBlockLov(block, field, def) {\n        let bdefs = LOVDefinitions.bdefs.get(block);\n        if (bdefs == null) {\n            bdefs = new Map();\n            LOVDefinitions.bdefs.set(block, bdefs);\n        }\n        bdefs.set(field, def);\n    }\n    static addBlockIdLov(block, field, def) {\n        let bdefs = LOVDefinitions.biddefs.get(block);\n        if (bdefs == null) {\n            bdefs = new Map();\n            LOVDefinitions.biddefs.set(block, bdefs);\n        }\n        bdefs.set(field, def);\n    }\n    static getblock(block) {\n        return (new Map(LOVDefinitions.bdefs.get(block.toLowerCase())));\n    }\n    static getblockid(block) {\n        return (new Map(LOVDefinitions.biddefs.get(block.toLowerCase())));\n    }\n    static getform(form, block) {\n        let fdefs = LOVDefinitions.fdefs.get(form.toLowerCase());\n        if (fdefs != null)\n            return (new Map(fdefs.get(block.toLowerCase())));\n        return (new Map());\n    }\n    static getidform(form, block) {\n        let fdefs = LOVDefinitions.fiddefs.get(form.toLowerCase());\n        if (fdefs != null)\n            return (new Map(fdefs.get(block.toLowerCase())));\n        return (new Map());\n    }\n    static split(name) {\n        let tokens = name.trim().split(\".\");\n        for (let i = 0; i < tokens.length; i++)\n            tokens[i] = tokens[i].trim().toLowerCase();\n        return (tokens);\n    }\n}\nLOVDefinitions.bdefs = new Map();\nLOVDefinitions.biddefs = new Map();\nLOVDefinitions.fdefs = new Map();\nLOVDefinitions.fiddefs = new Map();\n\nconst listofvalues = (field) => {\n    function define(comp, func) {\n        let utils = new Utils();\n        let cname = utils.getName(comp);\n        let ctype = utils.getType(comp);\n        let params = utils.getParams(comp[func]);\n        if (ctype != \"Block\" && ctype != \"Form\") {\n            console.log(\"@listofvalues can only be applied on Block or Form\");\n            return;\n        }\n        let block = false;\n        if (ctype == \"Block\")\n            block = true;\n        let fields = [];\n        if (field.constructor.name == \"Array\")\n            fields = field;\n        else\n            fields.push(field);\n        fields.forEach((fld) => { LOVDefinitions.add(block, cname, fld, comp, func, params); });\n    }\n    return (define);\n};\n\nvar Origin;\n(function (Origin) {\n    Origin[Origin[\"Form\"] = 0] = \"Form\";\n    Origin[Origin[\"Block\"] = 1] = \"Block\";\n    Origin[Origin[\"Field\"] = 2] = \"Field\";\n})(Origin || (Origin = {}));\nclass TriggerEvent {\n    constructor(block, record, jsevent) {\n        this.block$ = block;\n        this.record$ = record;\n        this.event$ = jsevent;\n    }\n    get block() {\n        return (this.block$);\n    }\n    get type() {\n        return (this.type$);\n    }\n    get event() {\n        return (this.event$);\n    }\n    get record() {\n        return (this.record$);\n    }\n}\nclass KeyTriggerEvent extends TriggerEvent {\n    constructor(origin, block, field, key, jsevent) {\n        super(block, 0, jsevent);\n        this.key$ = key;\n        this.origin$ = origin;\n        if (field != null) {\n            this.field$ = field.name;\n            this[\"record$\"] = field.row;\n        }\n    }\n    get key() {\n        return (this.key$);\n    }\n    get field() {\n        return (this.field$);\n    }\n    get origin() {\n        return (this.origin$);\n    }\n}\nclass FieldTriggerEvent extends TriggerEvent {\n    constructor(block, field, id, row, value, previous, jsevent) {\n        super(block, row, jsevent);\n        this.id$ = id;\n        this.field$ = field;\n        this.value$ = value;\n        this.previous$ = previous;\n    }\n    get value() {\n        return (this.value$);\n    }\n    get field() {\n        return (this.field$);\n    }\n    get id() {\n        return (this.id$);\n    }\n    get previous() {\n        return (this.previous$);\n    }\n}\nclass SQLTriggerEvent extends TriggerEvent {\n    constructor(block, row, stmt) {\n        super(block, row, null);\n        this.stmt$ = stmt;\n    }\n    get stmt() {\n        return (this.stmt$);\n    }\n    set stmt(stmt) {\n        this.stmt$ = stmt;\n    }\n}\n\nclass Context {\n}\nContext.ɵfac = function Context_Factory(t) { return new (t || Context)(); };\nContext.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: Context, factory: Context.ɵfac, providedIn: 'root' });\n(function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(Context, [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root',\n                }]\n        }], null, null);\n})();\n\nconst _c0$b = [\"menu\"];\nclass MenuArea {\n    constructor(ctx, change) {\n        this.change = change;\n        this.app = ctx.app[\"_impl_\"];\n    }\n    remove() {\n        if (this.element != null) {\n            let menuelem = this.menu.firstElementChild;\n            if (menuelem != null)\n                this.menu.removeChild(menuelem);\n            this.app.builder.getAppRef().detachView(this.menuref.hostView);\n        }\n        this.change.detectChanges();\n    }\n    display(menu) {\n        if (menu == null) {\n            this.remove();\n            return;\n        }\n        if (this.menu == null) {\n            setTimeout(() => { this.display(menu); }, 10);\n            return;\n        }\n        if (this.element != null) {\n            let menuelem = this.menu.firstElementChild;\n            if (menuelem != null)\n                this.menu.removeChild(menuelem);\n            this.app.builder.getAppRef().detachView(this.menuref.hostView);\n        }\n        this.menuref = menu;\n        this.element = menu.hostView.rootNodes[0];\n        this.app.builder.getAppRef().attachView(this.menuref.hostView);\n        this.menu.appendChild(this.element);\n        this.change.detectChanges();\n    }\n    ngAfterViewInit() {\n        var _a;\n        this.menu = (_a = this.elem) === null || _a === void 0 ? void 0 : _a.nativeElement;\n        this.app.setMenuArea(this);\n    }\n}\nMenuArea.ɵfac = function MenuArea_Factory(t) { return new (t || MenuArea)(i0.ɵɵdirectiveInject(Context), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };\nMenuArea.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: MenuArea, selectors: [[\"menuarea\"]], viewQuery: function MenuArea_Query(rf, ctx) {\n        if (rf & 1) {\n            i0.ɵɵviewQuery(_c0$b, 5, ElementRef);\n        }\n        if (rf & 2) {\n            let _t;\n            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.elem = _t.first);\n        }\n    }, decls: 2, vars: 0, consts: [[\"menu\", \"\"]], template: function MenuArea_Template(rf, ctx) {\n        if (rf & 1) {\n            i0.ɵɵelement(0, \"div\", null, 0);\n        }\n    }, encapsulation: 2, changeDetection: 0 });\n(function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MenuArea, [{\n            type: Component,\n            args: [{\n                    selector: 'menuarea',\n                    template: `\n\t\t<div #menu></div>\n\t`,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], function () { return [{ type: Context }, { type: i0.ChangeDetectorRef }]; }, { elem: [{\n                type: ViewChild,\n                args: [\"menu\", { read: ElementRef }]\n            }] });\n})();\n\nclass MenuHandler {\n    // dont rename __menu__ as it is set behind the scenes\n    constructor() {\n        this.__menu__ = null;\n        this.guid$ = MenuHandler._id++;\n    }\n    get guid() {\n        return (this.guid$);\n    }\n    get ready() {\n        return (this.__menu__ != null);\n    }\n    get app() {\n        return (this.__menu__.app);\n    }\n    enable(menu) {\n        this.__menu__.enable(menu);\n    }\n    disable(menu) {\n        this.__menu__.disable(menu);\n    }\n    get connected() {\n        return (this.__menu__.isConnected());\n    }\n    get transaction() {\n        return (this.app.transaction);\n    }\n    // For overwrite by application menus\n    onFormChange(form) {\n    }\n}\nMenuHandler._id = 0;\n\nclass DefaultMenuHandler extends MenuHandler {\n    onInit() {\n        this.init();\n    }\n    onConnect() {\n        this.init();\n    }\n    onDisconnect() {\n        this.init();\n    }\n    onFormChange(form) {\n        this.form = form;\n        if (this.ready)\n            this.init();\n    }\n    onTransactionChange() {\n        if (this.transaction)\n            this.enable(\"/transaction\");\n        else\n            this.disable(\"/transaction\");\n    }\n    init() {\n        this.disable();\n        this.enable(\"/form/shortkeys\");\n        if (this.form != null) {\n            this.enable(\"/form/close\");\n            this.enable(\"/section/next\");\n            this.enable(\"/section/previous\");\n            if (this.connected) {\n                this.enable(\"/form\");\n                this.enable(\"/section\");\n                this.enable(\"/record\");\n                this.enable(\"/connection/disconnect\");\n            }\n            else {\n                this.enable(\"/connection/connect\");\n            }\n        }\n        else {\n            if (this.connected) {\n                this.enable(\"/connection/disconnect\");\n            }\n            else {\n                this.enable(\"/connection/connect\");\n            }\n        }\n        this.onTransactionChange();\n    }\n    connect() {\n        this.app.connect();\n        this.init();\n    }\n    disconnect() {\n        this.app.disconnect();\n        this.init();\n    }\n    commit() {\n        this.app.commit();\n    }\n    rollback() {\n        this.app.rollback();\n    }\n    clear() {\n        var _a;\n        (_a = this.form) === null || _a === void 0 ? void 0 : _a.sendKey(keymap.clearform);\n    }\n    cancel() {\n        var _a, _b;\n        (_b = (_a = this.form) === null || _a === void 0 ? void 0 : _a.block) === null || _b === void 0 ? void 0 : _b.cancel();\n    }\n    enterFormQuery() {\n        var _a;\n        (_a = this.form) === null || _a === void 0 ? void 0 : _a.enterquery();\n    }\n    executeFormQuery() {\n        var _a;\n        (_a = this.form) === null || _a === void 0 ? void 0 : _a.executequery();\n    }\n    enterQuery() {\n        var _a, _b;\n        (_b = (_a = this.form) === null || _a === void 0 ? void 0 : _a.block) === null || _b === void 0 ? void 0 : _b.sendKey(keymap.enterquery);\n    }\n    executeQuery() {\n        var _a, _b;\n        (_b = (_a = this.form) === null || _a === void 0 ? void 0 : _a.block) === null || _b === void 0 ? void 0 : _b.sendKey(keymap.executequery);\n    }\n    deleteRecord() {\n        var _a, _b;\n        (_b = (_a = this.form) === null || _a === void 0 ? void 0 : _a.block) === null || _b === void 0 ? void 0 : _b.delete();\n    }\n    insertRecordAfter() {\n        var _a, _b;\n        (_b = (_a = this.form) === null || _a === void 0 ? void 0 : _a.block) === null || _b === void 0 ? void 0 : _b.insert(false);\n    }\n    insertRecordBefore() {\n        var _a, _b;\n        (_b = (_a = this.form) === null || _a === void 0 ? void 0 : _a.block) === null || _b === void 0 ? void 0 : _b.insert(true);\n    }\n    nextRecord() {\n        var _a, _b;\n        (_b = (_a = this.form) === null || _a === void 0 ? void 0 : _a.block) === null || _b === void 0 ? void 0 : _b.nextrecord();\n    }\n    prevRecord() {\n        var _a, _b;\n        (_b = (_a = this.form) === null || _a === void 0 ? void 0 : _a.block) === null || _b === void 0 ? void 0 : _b.prevrecord();\n    }\n    nextBlock() {\n        var _a, _b;\n        (_b = (_a = this.form) === null || _a === void 0 ? void 0 : _a.block) === null || _b === void 0 ? void 0 : _b.nextblock();\n    }\n    prevBlock() {\n        var _a, _b;\n        (_b = (_a = this.form) === null || _a === void 0 ? void 0 : _a.block) === null || _b === void 0 ? void 0 : _b.prevblock();\n    }\n    pageUp() {\n        var _a, _b;\n        (_b = (_a = this.form) === null || _a === void 0 ? void 0 : _a.block) === null || _b === void 0 ? void 0 : _b.pageup();\n    }\n    pageDown() {\n        var _a, _b;\n        (_b = (_a = this.form) === null || _a === void 0 ? void 0 : _a.block) === null || _b === void 0 ? void 0 : _b.pagedown();\n    }\n    close() {\n        var _a;\n        (_a = this.form) === null || _a === void 0 ? void 0 : _a.close(false);\n        this.init();\n    }\n    showkeymap() {\n        this.app.showKeyMap();\n    }\n}\n\nclass DefaultMenu {\n    constructor() {\n        this.entries =\n            [\n                {\n                    name: \"Form\", title: \"Form actions\", options: [\n                        { name: \"enter query\", action: \"enterFormQuery\" },\n                        { name: \"execute query\", action: \"executeFormQuery\" },\n                        { name: \"clear\", action: \"clear\" },\n                        { name: \"close\", action: \"close\" },\n                        { name: \"shortkeys\", action: \"showkeymap\" },\n                    ]\n                },\n                {\n                    name: \"Section\", title: \"Block actions\", options: [\n                        { name: \"enter query\", action: \"enterQuery\" },\n                        { name: \"execute query\", action: \"executeQuery\" },\n                        { name: \"clear filter\", action: \"executeQuery\" },\n                        { name: \"next\", action: \"nextBlock\" },\n                        { name: \"previous\", action: \"prevBlock\" },\n                    ]\n                },\n                {\n                    name: \"Record\", title: \"Record actions\", options: [\n                        { name: \"insert below\", action: \"insertRecordAfter\" },\n                        { name: \"insert above\", action: \"insertRecordBefore\" },\n                        { name: \"delete\", action: \"deleteRecord\" },\n                        { name: \"next\", action: \"nextRecord\" },\n                        { name: \"previous\", action: \"prevRecord\" },\n                        { name: \"pagedown\", action: \"pageDown\" },\n                        { name: \"pageup\", action: \"pageUp\" },\n                    ]\n                },\n                {\n                    name: \"Transaction\", title: \"Transaction Menu\", options: [\n                        { name: \"commit\", action: \"commit\" },\n                        { name: \"rollback\", action: \"rollback\" },\n                    ]\n                },\n                {\n                    name: \"Connection\", title: \"Connection to database\", options: [\n                        { name: \"connect\", action: \"connect\" },\n                        { name: \"disconnect\", action: \"disconnect\" },\n                    ]\n                }\n            ];\n        this.handler = new DefaultMenuHandler();\n    }\n    getHandler() {\n        return (this.handler);\n    }\n    getEntries() {\n        return (this.entries);\n    }\n}\n\nclass Key {\n    constructor(name) {\n        this.name = name;\n        this.values$ = [];\n        this.columns$ = [];\n        this.index = new Map();\n    }\n    get(part) {\n        let col = -1;\n        if (part.constructor.name == \"Number\")\n            col = +part;\n        else\n            col = this.index.get(\"\" + part);\n        return (this.values$[col]);\n    }\n    partof(part) {\n        return (this.columns$.includes(part, 0));\n    }\n    set(name, value) {\n        let col = -1;\n        if (name.constructor.name == \"Number\")\n            col = +name;\n        else\n            col = this.index.get(\"\" + name);\n        this.values$[col] = value;\n    }\n    addColumn(name) {\n        this.index.set(name, this.columns$.length);\n        this.values$.push(name);\n        this.columns$.push(name);\n    }\n    columns() {\n        return (this.columns$);\n    }\n    get values() {\n        let map = [];\n        for (let i = 0; i < this.columns$.length; i++)\n            map.push({ name: this.columns$[i], value: this.values$[i] });\n        return (map);\n    }\n    toString() {\n        let str = this.name + \" [\";\n        for (let i = 0; i < this.columns$.length; i++)\n            str += this.columns$[i] + \" = \" + this.values$[i] + \", \";\n        return (str.substring(0, str.length - 2) + \"]\");\n    }\n}\n\nvar RecordState;\n(function (RecordState) {\n    RecordState[RecordState[\"na\"] = 0] = \"na\";\n    RecordState[RecordState[\"qmode\"] = 1] = \"qmode\";\n    RecordState[RecordState[\"insert\"] = 2] = \"insert\";\n    RecordState[RecordState[\"update\"] = 3] = \"update\";\n})(RecordState || (RecordState = {}));\nclass Record {\n    constructor(row, fields, index) {\n        this.row$ = 0;\n        this.fields$ = [];\n        this.current$ = false;\n        this.enabled$ = false;\n        this.state$ = RecordState.na;\n        this.index = new Map();\n        this.row$ = row;\n        this.index = index;\n        this.fields$ = fields;\n    }\n    set row(row) {\n        this.row$ = row;\n    }\n    get row() {\n        return (this.row$);\n    }\n    get fields() {\n        return (this.fields$);\n    }\n    focus() {\n        for (let i = 0; i < this.fields$.length; i++)\n            if (this.fields$[i].focus())\n                return;\n    }\n    set current(flag) {\n        this.current$ = flag;\n        this.fields$.forEach((field) => { field.current = flag; });\n    }\n    get current() {\n        return (this.current$);\n    }\n    clear() {\n        this.fields$.forEach((field) => { field.value = null; field.disable(); });\n        if (this.current)\n            this.fields$.forEach((field) => { field.current = true; field.disable(); });\n    }\n    set state(state) {\n        this.state$ = state;\n        this.fields$.forEach((field) => { field.state = state; });\n    }\n    get state() {\n        return (this.state$);\n    }\n    get enabled() {\n        return (this.enabled$);\n    }\n    get readonly() {\n        for (let i = 0; i < this.fields$.length; i++)\n            if (!this.fields$[i].readonly)\n                return (false);\n        return (true);\n    }\n    enable(readonly) {\n        this.enabled$ = true;\n        this.fields$.forEach((field) => {\n            field.state = this.state$;\n            field.enable(readonly);\n        });\n    }\n    disable() {\n        this.enabled$ = false;\n        this.fields$.forEach((field) => { field.disable(); });\n    }\n    getField(name) {\n        if (name == null)\n            return (null);\n        return (this.index.get(name.toLowerCase()));\n    }\n    getFieldByGuid(name, guid) {\n        let field = this.index.get(name.toLowerCase());\n        if (field != null)\n            return (field.getInstance(guid));\n        return (null);\n    }\n}\n\nclass TextField {\n    get html() {\n        return (\"<input type='text'></input>\");\n    }\n    set size(size) {\n        this.element$.size = size;\n    }\n    get tabindex() {\n        return (this.element$.tabIndex);\n    }\n    get element() {\n        return (this.element$);\n    }\n    set tabindex(seq) {\n        this.element$.tabIndex = seq;\n    }\n    set element(element) {\n        this.element$ = element;\n    }\n    get enable() {\n        return (!this.element$.disabled);\n    }\n    set enable(flag) {\n        this.element$.disabled = !flag;\n    }\n    get readonly() {\n        return (this.element$.readOnly);\n    }\n    set readonly(flag) {\n        this.element$.readOnly = flag;\n    }\n    get value() {\n        return (this.element$.value);\n    }\n    set value(value) {\n        this.element$.value = value;\n    }\n    focus() {\n        this.element$.focus();\n        this.element$.select();\n    }\n    validate() {\n        return (true);\n    }\n}\n\nclass DropDown extends TextField {\n    get html() {\n        return (\"<select></select>\");\n    }\n    focus() {\n        this.element$.focus();\n    }\n}\n\nclass Password extends TextField {\n    get html() {\n        return (\"<input type='password'></input>\");\n    }\n}\n\nclass CheckBox extends TextField {\n    constructor() {\n        super(...arguments);\n        this.actvalue = null;\n        this.chkvalue = null;\n    }\n    get html() {\n        return (\"<input type='checkbox'></input>\");\n    }\n    get value() {\n        return (this.actvalue);\n    }\n    set value(value) {\n        if (this.chkvalue == null) {\n            this.chkvalue = value;\n            return;\n        }\n        this.actvalue = value;\n        // cheat compiler\n        let checkbox = this.element;\n        if (value == this.chkvalue)\n            checkbox.checked = true;\n        else\n            checkbox.checked = false;\n    }\n}\n\nconst token = /d{1,4}|M{1,4}|YY(?:YY)?|S{1,3}|Do|ZZ|Z|([HhMsDm])\\1?|[aA]|\"[^\"]*\"|'[^']*'/g;\nconst twoDigitsOptional = \"[1-9]\\\\d?\";\nconst twoDigits = \"\\\\d\\\\d\";\nconst threeDigits = \"\\\\d{3}\";\nconst fourDigits = \"\\\\d{4}\";\nconst word = \"[^\\\\s]+\";\nconst literal = /\\[([^]*?)\\]/gm;\nfunction shorten(arr, sLen) {\n    const newArr = [];\n    for (let i = 0, len = arr.length; i < len; i++) {\n        newArr.push(arr[i].substr(0, sLen));\n    }\n    return newArr;\n}\nconst monthUpdate = (arrName) => (v, i18n) => {\n    const lowerCaseArr = i18n[arrName].map(v => v.toLowerCase());\n    const index = lowerCaseArr.indexOf(v.toLowerCase());\n    if (index > -1) {\n        return index;\n    }\n    return null;\n};\nfunction assign(origObj, ...args) {\n    for (const obj of args) {\n        for (const key in obj) {\n            // @ts-ignore ex\n            origObj[key] = obj[key];\n        }\n    }\n    return origObj;\n}\nconst dayNames = [\n    \"Sunday\",\n    \"Monday\",\n    \"Tuesday\",\n    \"Wednesday\",\n    \"Thursday\",\n    \"Friday\",\n    \"Saturday\"\n];\nconst monthNames = [\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n    \"December\"\n];\nconst monthNamesShort = shorten(monthNames, 3);\nconst dayNamesShort = shorten(dayNames, 3);\nconst defaultI18n = {\n    dayNamesShort,\n    dayNames,\n    monthNamesShort,\n    monthNames,\n    amPm: [\"am\", \"pm\"],\n    DoFn(dayOfMonth) {\n        return (dayOfMonth +\n            [\"th\", \"st\", \"nd\", \"rd\"][dayOfMonth % 10 > 3\n                ? 0\n                : ((dayOfMonth - (dayOfMonth % 10) !== 10 ? 1 : 0) * dayOfMonth) % 10]);\n    }\n};\nlet globalI18n = assign({}, defaultI18n);\nconst setGlobalDateI18n = (i18n) => (globalI18n = assign(globalI18n, i18n));\nconst regexEscape = (str) => str.replace(/[|\\\\{()[^$+*?.-]/g, \"\\\\$&\");\nconst pad = (val, len = 2) => {\n    val = String(val);\n    while (val.length < len) {\n        val = \"0\" + val;\n    }\n    return val;\n};\nconst formatFlags = {\n    D: (dateObj) => String(dateObj.getDate()),\n    DD: (dateObj) => pad(dateObj.getDate()),\n    Do: (dateObj, i18n) => i18n.DoFn(dateObj.getDate()),\n    d: (dateObj) => String(dateObj.getDay()),\n    dd: (dateObj) => pad(dateObj.getDay()),\n    ddd: (dateObj, i18n) => i18n.dayNamesShort[dateObj.getDay()],\n    dddd: (dateObj, i18n) => i18n.dayNames[dateObj.getDay()],\n    M: (dateObj) => String(dateObj.getMonth() + 1),\n    MM: (dateObj) => pad(dateObj.getMonth() + 1),\n    MMM: (dateObj, i18n) => i18n.monthNamesShort[dateObj.getMonth()],\n    MMMM: (dateObj, i18n) => i18n.monthNames[dateObj.getMonth()],\n    YY: (dateObj) => pad(String(dateObj.getFullYear()), 4).substr(2),\n    YYYY: (dateObj) => pad(dateObj.getFullYear(), 4),\n    h: (dateObj) => String(dateObj.getHours() % 12 || 12),\n    hh: (dateObj) => pad(dateObj.getHours() % 12 || 12),\n    H: (dateObj) => String(dateObj.getHours()),\n    HH: (dateObj) => pad(dateObj.getHours()),\n    m: (dateObj) => String(dateObj.getMinutes()),\n    mm: (dateObj) => pad(dateObj.getMinutes()),\n    s: (dateObj) => String(dateObj.getSeconds()),\n    ss: (dateObj) => pad(dateObj.getSeconds()),\n    S: (dateObj) => String(Math.round(dateObj.getMilliseconds() / 100)),\n    SS: (dateObj) => pad(Math.round(dateObj.getMilliseconds() / 10), 2),\n    SSS: (dateObj) => pad(dateObj.getMilliseconds(), 3),\n    a: (dateObj, i18n) => dateObj.getHours() < 12 ? i18n.amPm[0] : i18n.amPm[1],\n    A: (dateObj, i18n) => dateObj.getHours() < 12\n        ? i18n.amPm[0].toUpperCase()\n        : i18n.amPm[1].toUpperCase(),\n    ZZ(dateObj) {\n        const offset = dateObj.getTimezoneOffset();\n        return ((offset > 0 ? \"-\" : \"+\") +\n            pad(Math.floor(Math.abs(offset) / 60) * 100 + (Math.abs(offset) % 60), 4));\n    },\n    Z(dateObj) {\n        const offset = dateObj.getTimezoneOffset();\n        return ((offset > 0 ? \"-\" : \"+\") +\n            pad(Math.floor(Math.abs(offset) / 60), 2) +\n            \":\" +\n            pad(Math.abs(offset) % 60, 2));\n    }\n};\nconst monthParse = (v) => +v - 1;\nconst emptyDigits = [null, twoDigitsOptional];\nconst emptyWord = [null, word];\nconst amPm = [\n    \"isPm\",\n    word,\n    (v, i18n) => {\n        const val = v.toLowerCase();\n        if (val === i18n.amPm[0]) {\n            return 0;\n        }\n        else if (val === i18n.amPm[1]) {\n            return 1;\n        }\n        return null;\n    }\n];\nconst timezoneOffset = [\n    \"timezoneOffset\",\n    \"[^\\\\s]*?[\\\\+\\\\-]\\\\d\\\\d:?\\\\d\\\\d|[^\\\\s]*?Z?\",\n    (v) => {\n        const parts = (v + \"\").match(/([+-]|\\d\\d)/gi);\n        if (parts) {\n            const minutes = +parts[1] * 60 + parseInt(parts[2], 10);\n            return parts[0] === \"+\" ? minutes : -minutes;\n        }\n        return 0;\n    }\n];\nconst parseFlags = {\n    D: [\"day\", twoDigitsOptional],\n    DD: [\"day\", twoDigits],\n    Do: [\"day\", twoDigitsOptional + word, (v) => parseInt(v, 10)],\n    M: [\"month\", twoDigitsOptional, monthParse],\n    MM: [\"month\", twoDigits, monthParse],\n    YY: [\n        \"year\",\n        twoDigits,\n        (v) => {\n            const now = new Date();\n            const cent = +(\"\" + now.getFullYear()).substr(0, 2);\n            return +(\"\" + (+v > 68 ? cent - 1 : cent) + v);\n        }\n    ],\n    h: [\"hour\", twoDigitsOptional, undefined, \"isPm\"],\n    hh: [\"hour\", twoDigits, undefined, \"isPm\"],\n    H: [\"hour\", twoDigitsOptional],\n    HH: [\"hour\", twoDigits],\n    m: [\"minute\", twoDigitsOptional],\n    mm: [\"minute\", twoDigits],\n    s: [\"second\", twoDigitsOptional],\n    ss: [\"second\", twoDigits],\n    YYYY: [\"year\", fourDigits],\n    S: [\"millisecond\", \"\\\\d\", (v) => +v * 100],\n    SS: [\"millisecond\", twoDigits, (v) => +v * 10],\n    SSS: [\"millisecond\", threeDigits],\n    d: emptyDigits,\n    dd: emptyDigits,\n    ddd: emptyWord,\n    dddd: emptyWord,\n    MMM: [\"month\", word, monthUpdate(\"monthNamesShort\")],\n    MMMM: [\"month\", word, monthUpdate(\"monthNames\")],\n    a: amPm,\n    A: amPm,\n    ZZ: timezoneOffset,\n    Z: timezoneOffset\n};\n// Some common format strings\nconst globalMasks = {\n    default: \"ddd MMM DD YYYY HH:mm:ss\",\n    shortDate: \"M/D/YY\",\n    mediumDate: \"MMM D, YYYY\",\n    longDate: \"MMMM D, YYYY\",\n    fullDate: \"dddd, MMMM D, YYYY\",\n    isoDate: \"YYYY-MM-DD\",\n    isoDateTime: \"YYYY-MM-DDTHH:mm:ssZ\",\n    shortTime: \"HH:mm\",\n    mediumTime: \"HH:mm:ss\",\n    longTime: \"HH:mm:ss.SSS\"\n};\nconst setGlobalDateMasks = (masks) => assign(globalMasks, masks);\n/***\n * Format a date\n * @method format\n * @param {Date|number} dateObj\n * @param {string} mask Format of the date, i.e. 'mm-dd-yy' or 'shortDate'\n * @returns {string} Formatted date string\n */\nconst format = (dateObj, mask = globalMasks[\"default\"], i18n = {}) => {\n    if (typeof dateObj === \"number\") {\n        dateObj = new Date(dateObj);\n    }\n    if (Object.prototype.toString.call(dateObj) !== \"[object Date]\" ||\n        isNaN(dateObj.getTime())) {\n        throw new Error(\"Invalid Date pass to format\");\n    }\n    mask = globalMasks[mask] || mask;\n    const literals = [];\n    // Make literals inactive by replacing them with @@@\n    mask = mask.replace(literal, function ($0, $1) {\n        literals.push($1);\n        return \"@@@\";\n    });\n    const combinedI18nSettings = assign(assign({}, globalI18n), i18n);\n    // Apply formatting rules\n    mask = mask.replace(token, $0 => formatFlags[$0](dateObj, combinedI18nSettings));\n    // Inline literal values back into the formatted value\n    return mask.replace(/@@@/g, () => literals.shift());\n};\n/**\n * Parse a date string into a Javascript Date object /\n * @method parse\n * @param {string} dateStr Date string\n * @param {string} format Date parse format\n * @param {i18n} I18nSettingsOptional Full or subset of I18N settings\n * @returns {Date|null} Returns Date object. Returns null what date string is invalid or doesn't match format\n */\nfunction parse(dateStr, format, i18n = {}) {\n    if (typeof format !== \"string\") {\n        throw new Error(\"Invalid format in fecha parse\");\n    }\n    // Check to see if the format is actually a mask\n    format = globalMasks[format] || format;\n    // Avoid regular expression denial of service, fail early for really long strings\n    // https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS\n    if (dateStr.length > 1000) {\n        return null;\n    }\n    // Default to the beginning of the year.\n    const today = new Date();\n    const dateInfo = {\n        year: today.getFullYear(),\n        month: 0,\n        day: 1,\n        hour: 0,\n        minute: 0,\n        second: 0,\n        millisecond: 0,\n        isPm: null,\n        timezoneOffset: null\n    };\n    const parseInfo = [];\n    const literals = [];\n    // Replace all the literals with @@@. Hopefully a string that won't exist in the format\n    let newFormat = format.replace(literal, ($0, $1) => {\n        literals.push(regexEscape($1));\n        return \"@@@\";\n    });\n    const specifiedFields = {};\n    const requiredFields = {};\n    // Change every token that we find into the correct regex\n    newFormat = regexEscape(newFormat).replace(token, $0 => {\n        const info = parseFlags[$0];\n        const [field, regex, , requiredField] = info;\n        // Check if the person has specified the same field twice. This will lead to confusing results.\n        if (specifiedFields[field]) {\n            throw new Error(`Invalid format. ${field} specified twice in format`);\n        }\n        specifiedFields[field] = true;\n        // Check if there are any required fields. For instance, 12 hour time requires AM/PM specified\n        if (requiredField) {\n            requiredFields[requiredField] = true;\n        }\n        parseInfo.push(info);\n        return \"(\" + regex + \")\";\n    });\n    // Check all the required fields are present\n    Object.keys(requiredFields).forEach(field => {\n        if (!specifiedFields[field]) {\n            throw new Error(`Invalid format. ${field} is required in specified format`);\n        }\n    });\n    // Add back all the literals after\n    newFormat = newFormat.replace(/@@@/g, () => literals.shift());\n    // Check if the date string matches the format. If it doesn't return null\n    const matches = dateStr.match(new RegExp(newFormat, \"i\"));\n    if (!matches) {\n        return null;\n    }\n    const combinedI18nSettings = assign(assign({}, globalI18n), i18n);\n    // For each match, call the parser function for that date part\n    for (let i = 1; i < matches.length; i++) {\n        const [field, , parser] = parseInfo[i - 1];\n        const value = parser\n            ? parser(matches[i], combinedI18nSettings)\n            : +matches[i];\n        // If the parser can't make sense of the value, return null\n        if (value == null) {\n            return null;\n        }\n        dateInfo[field] = value;\n    }\n    if (dateInfo.isPm === 1 && dateInfo.hour != null && +dateInfo.hour !== 12) {\n        dateInfo.hour = +dateInfo.hour + 12;\n    }\n    else if (dateInfo.isPm === 0 && +dateInfo.hour === 12) {\n        dateInfo.hour = 0;\n    }\n    const dateWithoutTZ = new Date(dateInfo.year, dateInfo.month, dateInfo.day, dateInfo.hour, dateInfo.minute, dateInfo.second, dateInfo.millisecond);\n    const validateFields = [\n        [\"month\", \"getMonth\"],\n        [\"day\", \"getDate\"],\n        [\"hour\", \"getHours\"],\n        [\"minute\", \"getMinutes\"],\n        [\"second\", \"getSeconds\"]\n    ];\n    for (let i = 0, len = validateFields.length; i < len; i++) {\n        // Check to make sure the date field is within the allowed range. Javascript dates allows values\n        // outside the allowed range. If the values don't match the value was invalid\n        if (specifiedFields[validateFields[i][0]] &&\n            dateInfo[validateFields[i][0]] !== dateWithoutTZ[validateFields[i][1]]()) {\n            return null;\n        }\n    }\n    if (dateInfo.timezoneOffset == null) {\n        return dateWithoutTZ;\n    }\n    return new Date(Date.UTC(dateInfo.year, dateInfo.month, dateInfo.day, dateInfo.hour, dateInfo.minute - dateInfo.timezoneOffset, dateInfo.second, dateInfo.millisecond));\n}\nvar fecha = {\n    format,\n    parse,\n    defaultI18n,\n    setGlobalDateI18n,\n    setGlobalDateMasks\n};\n\nclass dates {\n    static init(format) {\n        dates.deffmt = format;\n        this.tokens$ = dates.split(format, \"-/:. \");\n        for (let i = 0; i < this.tokens$.length; i++) {\n            if (this.tokens$[i].delim != \" \") {\n                dates.delim = this.tokens$[i].delim;\n                break;\n            }\n        }\n        dates.formattokens = new Set();\n        dates.formattokens.add(\"m\");\n        dates.formattokens.add(\"d\");\n        dates.formattokens.add(\"o\");\n        dates.formattokens.add(\"d\");\n        dates.formattokens.add(\"y\");\n        dates.formattokens.add(\"a\");\n        dates.formattokens.add(\"h\");\n        dates.formattokens.add(\"s\");\n        dates.formattokens.add(\"z\");\n    }\n    static setFormat(format) {\n        dates.init(format);\n    }\n    static parse(datestr, format) {\n        if (format == null)\n            format = dates.deffmt;\n        if (datestr == null || datestr.trim().length == 0)\n            return (null);\n        let date = parse(datestr, format);\n        if (date == null)\n            datestr = dates.reformat(datestr);\n        if (datestr == null)\n            return (null);\n        return (parse(datestr, format));\n    }\n    static format(date, format$1) {\n        if (format$1 == null)\n            format$1 = dates.deffmt;\n        return (format(date, format$1));\n    }\n    static reformat(datestr) {\n        let ndate = \"\";\n        if (!isNaN(+datestr)) {\n            let pos = 0;\n            for (let i = 0; i < 3; i++) {\n                let len = dates.tokens$[i].token.length;\n                ndate += datestr.substring(pos, pos + len) + dates.tokens$[i].delim;\n                pos += len;\n            }\n            return (ndate);\n        }\n        if (dates.delim != \"-\")\n            datestr = dates.replaceAll(datestr, \"-\", dates.delim);\n        if (dates.delim != \"/\")\n            datestr = dates.replaceAll(datestr, \"/\", dates.delim);\n        if (dates.delim != \".\")\n            datestr = dates.replaceAll(datestr, \".\", dates.delim);\n        let parts = dates.split(datestr, dates.delim + \": \");\n        for (let i = 0; i < parts.length; i++) {\n            let numeric = !isNaN(+parts[i].token);\n            if (numeric && parts[i].token.length == 1)\n                parts[i].token = \"0\" + parts[i].token;\n        }\n        parts.forEach((part) => { ndate += part.token + part.delim; });\n        return (ndate);\n    }\n    static split(str, splitter) {\n        let parts = [];\n        let delimiters = new Set();\n        for (let i = 0; i < splitter.length; i++)\n            delimiters.add(splitter[i] + \"\");\n        let pos = 0;\n        for (let i = 0; i < str.length; i++) {\n            if (delimiters.has(str[i] + \"\")) {\n                parts.push({ token: str.substring(pos, i), delim: str[i] });\n                pos = i + 1;\n            }\n        }\n        if (pos < str.length)\n            parts.push({ token: str.substring(pos, str.length), delim: \"\" });\n        return (parts);\n    }\n    static replaceAll(str, search, replace) {\n        while (str.indexOf(search) >= 0)\n            str = str.replace(search, replace);\n        return (str);\n    }\n}\n// Current implementation from\n// https://github.com/taylorhakes/fecha/blob/master/README.md\ndates.delim = null;\ndates.deffmt = null;\ndates.tokens$ = null;\ndates.formattokens = null;\n\nclass DateField extends TextField {\n    constructor() {\n        super(...arguments);\n        this.dateval = null;\n        this.formatted = null;\n    }\n    get value() {\n        if (this.element$.value == this.formatted) {\n            // Invalid date\n            if (this.formatted.length > 0 && this.dateval == null)\n                return (this.formatted);\n            return (this.dateval);\n        }\n        return (this.element$.value);\n    }\n    set value(value) {\n        if (value == null || value.constructor.name != \"Date\") {\n            if (value != this.formatted || value != this.element$.value) {\n                this.dateval = null;\n                this.formatted = value;\n                this.element$.value = value;\n            }\n        }\n        else {\n            this.dateval = value;\n            this.formatted = dates.format(value);\n            this.element$.value = this.formatted;\n        }\n    }\n    validate() {\n        let strval = this.element$.value;\n        if (strval == this.formatted) {\n            if (strval != null && dates.parse(strval) == null)\n                return (false);\n            return (true);\n        }\n        this.formatted = null;\n        this.dateval = dates.parse(strval);\n        if (this.dateval == null && strval != null)\n            return (false);\n        if (this.dateval != null)\n            this.formatted = dates.format(this.dateval);\n        this.element$.value = this.formatted;\n        return (true);\n    }\n}\n\nclass RadioButton extends TextField {\n    constructor() {\n        super(...arguments);\n        this.actvalue = null;\n        this.chkvalue = null;\n    }\n    get html() {\n        return (\"<input type='radio'></input>\");\n    }\n    get value() {\n        return (this.actvalue);\n    }\n    set value(value) {\n        if (this.chkvalue == null) {\n            this.chkvalue = value;\n            return;\n        }\n        this.actvalue = value;\n        // cheat compiler\n        let radio = this.element;\n        if (value == this.chkvalue)\n            radio.checked = true;\n        else\n            radio.checked = false;\n    }\n}\n\nvar Column$1;\n(function (Column) {\n    Column[Column[\"int\"] = 0] = \"int\";\n    Column[Column[\"date\"] = 1] = \"date\";\n    Column[Column[\"decimal\"] = 2] = \"decimal\";\n    Column[Column[\"integer\"] = 3] = \"integer\";\n    Column[Column[\"varchar\"] = 4] = \"varchar\";\n    Column[Column[\"datetime\"] = 5] = \"datetime\";\n})(Column$1 || (Column$1 = {}));\n\nvar FieldType;\n(function (FieldType) {\n    FieldType[FieldType[\"date\"] = 0] = \"date\";\n    FieldType[FieldType[\"text\"] = 1] = \"text\";\n    FieldType[FieldType[\"radio\"] = 2] = \"radio\";\n    FieldType[FieldType[\"integer\"] = 3] = \"integer\";\n    FieldType[FieldType[\"decimal\"] = 4] = \"decimal\";\n    FieldType[FieldType[\"checkbox\"] = 5] = \"checkbox\";\n    FieldType[FieldType[\"datetime\"] = 6] = \"datetime\";\n    FieldType[FieldType[\"password\"] = 7] = \"password\";\n    FieldType[FieldType[\"dropdown\"] = 8] = \"dropdown\";\n})(FieldType || (FieldType = {}));\nclass FieldImplementation {\n    static init() {\n        if (FieldImplementation.impl != null)\n            return;\n        FieldImplementation.impl = new Map();\n        Object.keys(FieldType).forEach((type) => {\n            if (isNaN(Number(type)))\n                FieldImplementation.impl.set(type, TextField);\n        });\n        FieldImplementation.impl.set(FieldType[FieldType.date], DateField);\n        FieldImplementation.impl.set(FieldType[FieldType.radio], RadioButton);\n        FieldImplementation.impl.set(FieldType[FieldType.checkbox], CheckBox);\n        FieldImplementation.impl.set(FieldType[FieldType.password], Password);\n        FieldImplementation.impl.set(FieldType[FieldType.dropdown], DropDown);\n        FieldImplementation.impl.set(FieldType[FieldType.datetime], DateField);\n    }\n    static getClass(type) {\n        FieldImplementation.init();\n        return (FieldImplementation.impl.get(type));\n    }\n    static guess(type) {\n        let ftype = FieldType.text;\n        if (type != null) {\n            ftype = FieldType.text;\n            if (type == Column$1.date)\n                ftype = FieldType.date;\n            if (type == Column$1.integer)\n                ftype = FieldType.integer;\n            if (type == Column$1.decimal)\n                ftype = FieldType.decimal;\n            if (type == Column$1.datetime)\n                ftype = FieldType.datetime;\n        }\n        return (ftype);\n    }\n}\nFieldImplementation.impl = null;\n\nvar FormState;\n(function (FormState) {\n    FormState[FormState[\"normal\"] = 0] = \"normal\";\n    FormState[FormState[\"entqry\"] = 1] = \"entqry\";\n    FormState[FormState[\"exeqry\"] = 2] = \"exeqry\";\n})(FormState || (FormState = {}));\n\nclass KeyCodes {\n}\nKeyCodes.backspace = 8;\nKeyCodes.tab = 9;\nKeyCodes.enter = 13;\nKeyCodes.escape = 27;\nKeyCodes.pageup = 33;\nKeyCodes.pagedown = 34;\nKeyCodes.end = 35;\nKeyCodes.home = 36;\nKeyCodes.up = 38;\nKeyCodes.down = 40;\nKeyCodes.left = 37;\nKeyCodes.right = 39;\nKeyCodes.insert = 45;\nKeyCodes.delete = 46;\nKeyCodes.f1 = 112;\nKeyCodes.f2 = 113;\nKeyCodes.f3 = 114;\nKeyCodes.f4 = 115;\nKeyCodes.f5 = 116;\nKeyCodes.f6 = 117;\nKeyCodes.f7 = 118;\nKeyCodes.f8 = 119;\nKeyCodes.f9 = 120;\nKeyCodes.f10 = 121;\nKeyCodes.f11 = 122;\nKeyCodes.f12 = 123;\n\nclass WindowListener {\n    constructor() { }\n    static add(id, clazz, event) {\n        let events = WindowListener.events.get(event);\n        if (events == null) {\n            events = new Map();\n            WindowListener.events.set(event, events);\n            let listener = new WindowListener();\n            listener.start(event);\n        }\n        events.set(id, clazz);\n    }\n    static remove(id, event) {\n        let events = WindowListener.events.get(event);\n        events.delete(id);\n    }\n    start(eventtype) {\n        window.addEventListener(eventtype, (event) => { this.onEvent(event); });\n    }\n    onEvent(event) {\n        let events = WindowListener.events.get(event.type);\n        events.forEach((clazz) => { clazz.onEvent(event); });\n    }\n}\nWindowListener.events = new Map();\n\nconst _c0$a = [\"title\"];\nconst _c1$4 = [\"window\"];\nconst _c2$1 = [\"topbar\"];\nconst _c3$1 = [\"content\"];\nclass PopupWindow {\n    constructor(ctx, change) {\n        this.change = change;\n        this.top = null;\n        this.left = null;\n        this.width = \"300px\";\n        this.height = \"200px\";\n        this.tmargin = \"8px\";\n        this.minw = 0;\n        this.minh = 0;\n        this.offx = 0;\n        this.offy = 0;\n        this.move = false;\n        this.resz = false;\n        this.resizex = false;\n        this.resizey = false;\n        this.app = ctx.app[\"_impl_\"];\n    }\n    get tcolor() {\n        return (this.app.config.colors.title);\n    }\n    get bcolor() {\n        return (this.app.config.colors.topbar);\n    }\n    get btncolor() {\n        return (this.app.config.colors.buttontext);\n    }\n    set title(title) {\n        this.title$ = title;\n    }\n    setPopup(pinst) {\n        this.pinst = pinst;\n        this.popup = pinst.popupref.instance;\n        this.popup.setWin(this);\n        this.title$ = this.popup.title;\n        if (this.popup.hasOwnProperty(\"top\"))\n            this.top = this.popup.top;\n        if (this.popup.hasOwnProperty(\"left\"))\n            this.left = this.popup.left;\n        if (this.popup.hasOwnProperty(\"width\"))\n            this.width = this.popup.width;\n        if (this.popup.hasOwnProperty(\"height\"))\n            this.height = this.popup.height;\n    }\n    resize(width, height) {\n        this.width = width;\n        this.height = height;\n        this.change.detectChanges();\n    }\n    setWinRef(winref) {\n        this.winref = winref;\n    }\n    close(cancel) {\n        this.closeWindow();\n        this.popup.close(cancel);\n    }\n    closeWindow() {\n        if (this.winref == null)\n            return;\n        WindowListener.remove(\"modal\", \"mouseup\");\n        WindowListener.remove(\"modal\", \"mousemove\");\n        WindowListener.remove(\"modal\", \"mousedown\");\n        let formelem = this.content.firstElementChild;\n        if (formelem != null)\n            this.content.removeChild(formelem);\n        this.app.builder.getAppRef().detachView(this.pinst.popupref.hostView);\n        let element = this.winref.hostView.rootNodes[0];\n        document.body.removeChild(element);\n        this.app.builder.getAppRef().detachView(this.winref.hostView);\n        this.winref.destroy();\n        this.winref = null;\n    }\n    display() {\n        if (this.pinst == null) {\n            setTimeout(() => { this.display(); }, 10);\n            return;\n        }\n        this.element = this.pinst.popupref.hostView.rootNodes[0];\n        this.app.builder.getAppRef().attachView(this.pinst.popupref.hostView);\n        this.content.appendChild(this.element);\n        this.minh = 150;\n        this.minw = 250;\n        this.titlebar.innerHTML = this.title$;\n        this.change.detectChanges();\n        this.posy = this.window.offsetTop;\n        this.posx = this.window.offsetLeft;\n        this.sizex = this.window.offsetWidth;\n        this.sizey = this.window.offsetHeight;\n        let resize = false;\n        if (this.sizex < this.minw) {\n            resize = true;\n            this.sizex = this.minw;\n            this.width = this.sizex + \"px\";\n        }\n        if (this.sizey < this.minh) {\n            resize = true;\n            this.sizey = this.minh;\n            this.height = this.sizey + \"px\";\n        }\n        if (this.top == null || this.top.trim.length == 0) {\n            resize = true;\n            this.top = ((+window.innerHeight - this.sizey) / 3) + \"px\";\n        }\n        if (this.left == null || this.left.trim.length == 0) {\n            resize = true;\n            this.left = ((+window.innerWidth - this.sizex) / 1.5) + \"px\";\n        }\n        if (resize) {\n            this.change.detectChanges();\n            this.posy = this.window.offsetTop;\n            this.posx = this.window.offsetLeft;\n            this.sizex = this.window.offsetWidth;\n            this.sizey = this.window.offsetHeight;\n        }\n    }\n    ngAfterViewInit() {\n        var _a, _b, _c, _d;\n        this.window = (_a = this.windowElement) === null || _a === void 0 ? void 0 : _a.nativeElement;\n        this.topbar = (_b = this.topbarElement) === null || _b === void 0 ? void 0 : _b.nativeElement;\n        this.content = (_c = this.contentElement) === null || _c === void 0 ? void 0 : _c.nativeElement;\n        this.titlebar = (_d = this.titlebarElement) === null || _d === void 0 ? void 0 : _d.nativeElement;\n        this.display();\n        WindowListener.add(\"modal\", this, \"mouseup\");\n        WindowListener.add(\"modal\", this, \"mousemove\");\n        WindowListener.add(\"modal\", this, \"mousedown\");\n        this.topbar.addEventListener(\"mousedown\", (event) => { this.startmove(event); });\n    }\n    onEvent(event) {\n        switch (event.type) {\n            case \"mouseup\":\n                this.mouseup();\n                break;\n            case \"mousemove\":\n                this.movePopup(event);\n                this.resizePopup(event);\n                this.resizemousemove(event);\n                break;\n            case \"mousedown\":\n                this.startresize(event);\n                break;\n        }\n    }\n    startmove(event) {\n        if (this.resizexy)\n            return;\n        this.move = true;\n        event = event || window.event;\n        event.preventDefault();\n        this.offy = +event.clientY - this.posy;\n        this.offx = +event.clientX - this.posx;\n    }\n    mouseup() {\n        if (!this.move && !this.resz)\n            return;\n        this.move = false;\n        this.resz = false;\n        this.resizexy = false;\n        this.window.style.cursor = \"default\";\n        document.body.style.cursor = \"default\";\n    }\n    movePopup(event) {\n        if (!this.move)\n            return;\n        event = event || window.event;\n        let deltay = +event.clientY - this.posy;\n        let deltax = +event.clientX - this.posx;\n        this.posy += (deltay - this.offy);\n        this.posx += (deltax - this.offx);\n        if (this.posy > 0)\n            this.top = this.posy + \"px\";\n        if (this.posx > 0)\n            this.left = this.posx + \"px\";\n        this.change.detectChanges();\n    }\n    resizemousemove(event) {\n        if (this.resz)\n            return;\n        event = event || window.event;\n        let posx = +event.clientX;\n        let posy = +event.clientY;\n        let offx = this.posx + this.sizex - posx;\n        let offy = this.posy + this.sizey - posy;\n        let before = false;\n        if (this.resizex || this.resizey)\n            before = true;\n        this.resizex = false;\n        this.resizey = false;\n        if (offx > -7 && offx < 10 && posy > this.posy - 7 && posy < this.posy + this.sizey + 7)\n            this.resizex = true;\n        if (offy > -7 && offy < 10 && posx > this.posx - 7 && posx < this.posx + this.sizex + 7)\n            this.resizey = true;\n        if (this.resizex && this.resizey) {\n            this.resizex = true;\n            this.resizey = true;\n        }\n        if (this.resizex && !this.resizey) {\n            this.window.style.cursor = \"e-resize\";\n            document.body.style.cursor = \"e-resize\";\n        }\n        if (this.resizey && !this.resizex) {\n            this.window.style.cursor = \"s-resize\";\n            document.body.style.cursor = \"s-resize\";\n        }\n        if (this.resizex && this.resizey) {\n            this.window.style.cursor = \"se-resize\";\n            document.body.style.cursor = \"se-resize\";\n        }\n        if (before && !this.resizexy) {\n            this.window.style.cursor = \"default\";\n            document.body.style.cursor = \"default\";\n        }\n    }\n    startresize(event) {\n        if (!this.resizexy)\n            return;\n        this.resz = true;\n        event = event || window.event;\n        event.preventDefault();\n        this.offy = +event.clientY;\n        this.offx = +event.clientX;\n    }\n    resizePopup(event) {\n        if (!this.resz)\n            return;\n        event = event || window.event;\n        let deltay = +event.clientY - this.offy;\n        let deltax = +event.clientX - this.offx;\n        if (this.resizex && (this.sizex > this.minw || deltax > 0)) {\n            this.sizex += deltax;\n            this.width = this.sizex + \"px\";\n        }\n        if (this.resizey && (this.sizey > this.minh || deltay > 0)) {\n            this.sizey += deltay;\n            this.height = this.sizey + \"px\";\n        }\n        this.offy = +event.clientY;\n        this.offx = +event.clientX;\n        this.change.detectChanges();\n    }\n    get resizexy() {\n        if (this.resizex || this.resizey)\n            return (true);\n        return (false);\n    }\n    set resizexy(on) {\n        this.resizex = on;\n        this.resizey = on;\n    }\n}\nPopupWindow.ɵfac = function PopupWindow_Factory(t) { return new (t || PopupWindow)(i0.ɵɵdirectiveInject(Context), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };\nPopupWindow.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PopupWindow, selectors: [[\"popupwindow\"]], viewQuery: function PopupWindow_Query(rf, ctx) {\n        if (rf & 1) {\n            i0.ɵɵviewQuery(_c0$a, 5, ElementRef);\n            i0.ɵɵviewQuery(_c1$4, 5, ElementRef);\n            i0.ɵɵviewQuery(_c2$1, 5, ElementRef);\n            i0.ɵɵviewQuery(_c3$1, 5, ElementRef);\n        }\n        if (rf & 2) {\n            let _t;\n            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.titlebarElement = _t.first);\n            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.windowElement = _t.first);\n            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.topbarElement = _t.first);\n            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.contentElement = _t.first);\n        }\n    }, decls: 16, vars: 21, consts: [[1, \"popupwindow\"], [1, \"popupwindow-modal-block\"], [\"window\", \"\"], [1, \"popupwindow-container\"], [1, \"popupwindow-topbar\"], [\"topbar\", \"\"], [1, \"popupwindow-center\"], [1, \"popupwindow-corner\"], [\"title\", \"\"], [1, \"popupwindow-close\"], [1, \"popupwindow-button\", 3, \"click\"], [1, \"popupwindow-block\"], [\"content\", \"\"]], template: function PopupWindow_Template(rf, ctx) {\n        if (rf & 1) {\n            i0.ɵɵelementStart(0, \"div\", 0);\n            i0.ɵɵelementStart(1, \"div\", 1, 2);\n            i0.ɵɵelementStart(3, \"div\", 3);\n            i0.ɵɵelementStart(4, \"div\", 4, 5);\n            i0.ɵɵelementStart(6, \"span\", 6);\n            i0.ɵɵelement(7, \"span\", 7);\n            i0.ɵɵelement(8, \"div\", null, 8);\n            i0.ɵɵelementStart(10, \"span\", 9);\n            i0.ɵɵelementStart(11, \"button\", 10);\n            i0.ɵɵlistener(\"click\", function PopupWindow_Template_button_click_11_listener() { return ctx.close(true); });\n            i0.ɵɵtext(12, \"X\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(13, \"div\", 11);\n            i0.ɵɵelement(14, \"div\", null, 12);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n            i0.ɵɵadvance(1);\n            i0.ɵɵstyleMapInterpolate2(\"top: \", ctx.top, \"; left: \", ctx.left, \"\");\n            i0.ɵɵadvance(2);\n            i0.ɵɵstyleMapInterpolate2(\"width: \", ctx.width, \"; height: \", ctx.height, \";\");\n            i0.ɵɵadvance(1);\n            i0.ɵɵstyleMapInterpolate2(\"color: \", ctx.tcolor, \"; background-color: \", ctx.bcolor, \"\");\n            i0.ɵɵadvance(2);\n            i0.ɵɵstyleMapInterpolate1(\"color: \", ctx.tcolor, \";\");\n            i0.ɵɵadvance(5);\n            i0.ɵɵstyleMapInterpolate1(\"color: \", ctx.btncolor, \";\");\n            i0.ɵɵadvance(2);\n            i0.ɵɵstyleMapInterpolate1(\"margin-top: \", ctx.tmargin, \";\");\n        }\n    }, styles: [\".popupwindow[_ngcontent-%COMP%]{top:0;left:0;z-index:1;width:100%;height:100%;display:block;overflow:auto;position:fixed}.popupwindow-modal-block[_ngcontent-%COMP%]{position:absolute;background-color:#fefefe}.popupwindow-container[_ngcontent-%COMP%]{position:relative;border:2px solid black}.popupwindow-topbar[_ngcontent-%COMP%]{height:1.7em;margin-left:0;margin-right:0;cursor:default;justify-content:center;border-bottom:2px solid black}.popupwindow-corner[_ngcontent-%COMP%]{width:1.5em;display:block;position:relative}.popupwindow-close[_ngcontent-%COMP%]{top:0;right:0;width:1.75em;height:1.7em;position:absolute;border-left:1px solid black}.popupwindow-button[_ngcontent-%COMP%]{top:50%;width:100%;height:100%;outline:none;font-size:.75em;font-weight:bold;position:relative;background:transparent;transform:translateY(-50%);border:0px solid transparent;box-shadow:0 0 0 transparent;text-shadow:0px 0px 0px transparent}.popupwindow-center[_ngcontent-%COMP%]{top:0;bottom:0;width:93%;height:100%;display:flex;align-items:center;justify-content:center}.popupwindow-block[_ngcontent-%COMP%]{left:0;top:3vh;right:0;bottom:0;display:flex;overflow:auto;position:absolute;justify-content:center}\"], changeDetection: 0 });\n(function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PopupWindow, [{\n            type: Component,\n            args: [{\n                    selector: 'popupwindow',\n                    template: `\n    <div class=\"popupwindow\">\n      <div #window class=\"popupwindow-modal-block\" style=\"top: {{top}}; left: {{left}}\">\n        <div class=\"popupwindow-container\" style=\"width: {{width}}; height: {{height}};\">\n\t\t  <div #topbar class=\"popupwindow-topbar\" style=\"color: {{tcolor}}; background-color: {{bcolor}}\">\n\t\t    <span class=\"popupwindow-center\" style=\"color: {{tcolor}};\">\n\t\t\t\t<span class=\"popupwindow-corner\"></span>\n\t\t\t\t<div #title></div>\n                <span class=\"popupwindow-close\">\n                    <button class=\"popupwindow-button\" style=\"color: {{btncolor}};\" (click)=\"close(true)\">X</button>\n                </span>\n\t\t\t</span>\n\t\t   </div>\n          <div class=\"popupwindow-block\" style=\"margin-top: {{tmargin}};\"><div #content></div></div>\n        </div>\n      </div>\n    </div>\n  `,\n                    styles: [`\n    .popupwindow\n    {\n        top: 0;\n        left: 0;\n        z-index: 1;\n        width: 100%;\n        height: 100%;\n        display: block;\n        overflow: auto;\n        position: fixed;\n    }\n\n    .popupwindow-modal-block\n    {\n      position: absolute;\n      background-color: #fefefe;\n    }\n\n    .popupwindow-container\n    {\n        position: relative;\n        border: 2px solid black;\n    }\n\n    .popupwindow-topbar\n    {\n        height: 1.70em;\n        margin-left: 0;\n        margin-right: 0;\n        cursor:default;\n\t\tjustify-content: center;\n        border-bottom: 2px solid black;\n    }\n\n\t.popupwindow-corner\n\t{\n\t\twidth: 1.5em;\n\t\tdisplay: block;\n\t\tposition: relative;\n\t}\n\n\t.popupwindow-close\n\t{\n\t\ttop: 0;\n\t\tright: 0;\n\t\twidth: 1.75em;\n\t\theight: 1.70em;\n\t\tposition: absolute;\n\t\tborder-left: 1px solid black;\n\t}\n\n\t.popupwindow-button\n\t{\n\t\ttop: 50%;\n\t\twidth: 100%;\n\t\theight: 100%;\n\t\toutline:none;\n\t\tfont-size: 0.75em;\n\t\tfont-weight: bold;\n\t\tposition: relative;\n\t\tbackground: transparent;\n\t\ttransform: translateY(-50%);\n\t\tborder: 0px solid transparent;\n\t\tbox-shadow: 0px 0px 0px transparent;\n\t\ttext-shadow: 0px 0px 0px transparent;\n\t}\n\n\t.popupwindow-center\n\t{\n\t\ttop: 0;\n\t\tbottom: 0;\n\t\twidth: 93%;\n\t\theight: 100%;\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tjustify-content: center;\n\t}\n\n    .popupwindow-block\n    {\n        left: 0;\n        top: 3vh;\n        right: 0;\n        bottom: 0;\n\t\tdisplay: flex;\n        overflow: auto;\n        position: absolute;\n\t\tjustify-content: center;\n    }\n`],\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], function () { return [{ type: Context }, { type: i0.ChangeDetectorRef }]; }, { titlebarElement: [{\n                type: ViewChild,\n                args: [\"title\", { read: ElementRef }]\n            }], windowElement: [{\n                type: ViewChild,\n                args: [\"window\", { read: ElementRef }]\n            }], topbarElement: [{\n                type: ViewChild,\n                args: [\"topbar\", { read: ElementRef }]\n            }], contentElement: [{\n                type: ViewChild,\n                args: ['content', { read: ElementRef }]\n            }] });\n})();\n\nclass PopupInstance {\n    display(app, popup) {\n        this.popupref = app.builder.createComponent(popup);\n        let winref = app.builder.createComponent(PopupWindow);\n        let win = winref.instance;\n        win.setPopup(this);\n        win.setWinRef(winref);\n        let element = winref.hostView.rootNodes[0];\n        app.builder.getAppRef().attachView(winref.hostView);\n        document.body.appendChild(element);\n    }\n    popup() {\n        return (this.popupref.instance);\n    }\n}\n\nconst _c0$9 = [\"calendar\"];\nclass DatePicker {\n    constructor(ctx) {\n        this.ctx = ctx;\n        this.top = null;\n        this.left = null;\n        this.title = null;\n        this.width = \"256px\";\n        this.height = \"256px\";\n        this.cdate = null;\n        this.win = null;\n        this.cal = null;\n        this.days = null;\n        this.years = null;\n        this.months = null;\n        this.app = ctx.app[\"_impl_\"];\n        this.title = ctx.conf.calendarname;\n    }\n    static show(app, impl, record, field, date) {\n        let pinst = new PopupInstance();\n        pinst.display(app, DatePicker);\n        let datepicker = pinst.popup();\n        datepicker.date = date;\n        datepicker.setDestination(impl, record, field);\n    }\n    close(_cancel) {\n        this.win.closeWindow();\n    }\n    set date(date) {\n        if (date == null)\n            date = new Date();\n        this.cdate = date;\n    }\n    setDestination(impl, record, field) {\n        this.impl = impl;\n        this.field = field;\n        this.record = record;\n    }\n    pick(event) {\n        let year = +this.years.value;\n        let month = +this.months.value;\n        let day = +event.target.innerHTML;\n        let cday = this.cdate.getUTCDate();\n        let cmonth = this.cdate.getUTCMonth();\n        let cyear = this.cdate.getUTCFullYear();\n        if (year != cyear || month != cmonth || day != cday) {\n            this.cdate = new Date(Date.UTC(year, month - 1, day));\n            // Truncate\n            this.cdate = new Date(this.cdate.toDateString());\n            this.impl.setValue(this.record, this.field, this.cdate);\n            this.impl.focus();\n        }\n        this.close(false);\n    }\n    setWin(win) {\n        this.win = win;\n    }\n    ngAfterViewInit() {\n        var _a;\n        this.cal = (_a = this.calelem) === null || _a === void 0 ? void 0 : _a.nativeElement;\n        this.build(this.cdate, 75, 75);\n    }\n    navigate(event) {\n        if (event.keyCode == KeyCodes.tab) {\n            event.preventDefault();\n            if (event.target.name == \"months\")\n                this.years.focus();\n            else\n                this.months.focus();\n            return;\n        }\n        if (event.keyCode == KeyCodes.escape)\n            this.close(true);\n    }\n    weekdays(locale) {\n        let fmt = new Intl.DateTimeFormat(locale, { weekday: \"short\" }).format;\n        let names = [...Array(7).keys()].map((d) => fmt(new Date(Date.UTC(2021, 1, d))));\n        for (let i = 0; i < 7; i++) {\n            if (names[i].endsWith(\".\"))\n                names[i] = names[i].substring(0, names[i].length - 1);\n        }\n        let sun = names[0];\n        names.shift();\n        names.push(sun);\n        return (names);\n    }\n    monthnames(locale) {\n        let fmt = new Intl.DateTimeFormat(locale, { month: \"short\" }).format;\n        let names = [...Array(12).keys()].map((m) => fmt(new Date(Date.UTC(2021, m))));\n        for (let i = 0; i < 12; i++) {\n            if (names[i].endsWith(\".\"))\n                names[i] = names[i].substring(0, names[i].length - 1);\n        }\n        return (names);\n    }\n    build(date, bef, aft) {\n        this.styles();\n        let month = date.getUTCMonth();\n        let year = date.getUTCFullYear();\n        let months = this.monthnames(this.ctx.conf.locale);\n        this.years = document.createElement(\"select\");\n        this.months = document.createElement(\"select\");\n        this.years.name = \"years\";\n        this.months.name = \"months\";\n        this.addFieldTriggers(this.years);\n        this.addFieldTriggers(this.months);\n        this.months.classList.add(\"datepicker-month\");\n        for (let i = 0; i < 12; i++) {\n            let option = document.createElement(\"option\");\n            option.text = months[i];\n            option.value = (i + 1) + \"\";\n            this.months.appendChild(option);\n        }\n        this.months.selectedIndex = month;\n        this.cal.appendChild(this.months);\n        this.years.classList.add(\"datepicker-year\");\n        for (let i = year - bef; i < year + aft; i++) {\n            let option = document.createElement(\"option\");\n            option.text = i + \"\";\n            option.value = i + \"\";\n            this.years.appendChild(option);\n        }\n        this.years.selectedIndex = bef;\n        this.cal.appendChild(this.years);\n        this.days = document.createElement(\"div\");\n        this.days.classList.add(\"datepicker-days\");\n        this.cal.appendChild(this.days);\n        this.draw();\n        let width = (1.25 * this.cal.offsetWidth) + \"px\";\n        let height = (1.10 * this.cal.offsetHeight + 32) + \"px\";\n        this.win.resize(width, height);\n        this.months.focus();\n    }\n    draw() {\n        let cday = this.cdate.getDate();\n        let cmonth = this.cdate.getMonth();\n        let cyear = this.cdate.getFullYear();\n        let year = +this.years.value;\n        let month = +this.months.value;\n        if (year != cyear || month != +cmonth + +1)\n            cday = 0;\n        let days = new Date(Date.UTC(year, month, 0)).getUTCDate();\n        let first = new Date(Date.UTC(year, month - 1, 1)).getUTCDay();\n        let last = new Date(Date.UTC(year, month - 1, days)).getUTCDay();\n        last = last == 0 ? 7 : last;\n        first = first == 0 ? 7 : first;\n        let squares = [];\n        for (let i = 1; i < first; i++)\n            squares.push([false, 0]);\n        for (let i = 0; i < days; i++)\n            squares.push([true, i]);\n        while (squares.length % 7 != 0)\n            squares.push([false, 0]);\n        let names = this.weekdays(this.ctx.conf.locale);\n        let table = document.createElement(\"table\");\n        table.classList.add(\"datepicker-table\");\n        let row = table.insertRow();\n        names.forEach((day) => {\n            let cell = row.insertCell();\n            cell.classList.add(\"datepicker-head\");\n            cell.innerHTML = day;\n        });\n        for (let i = 0; i < squares.length; i++) {\n            if (i % 7 == 0)\n                row = table.insertRow();\n            let cell = row.insertCell();\n            if (squares[i][0]) {\n                let dom = +squares[i][1] + +1;\n                cell.innerHTML = dom + \"\";\n                cell.classList.add(\"datepicker-day\");\n                if (dom == cday)\n                    cell.classList.add(\"datepicker-current\");\n                this.addDayTriggers(cell);\n            }\n            else {\n                cell.classList.add(\"datepicker-blank\");\n            }\n        }\n        this.days.innerHTML = \"\";\n        this.days.appendChild(table);\n        return (table);\n    }\n    addDayTriggers(cell) {\n        cell.addEventListener(\"click\", (event) => { this.pick(event); });\n    }\n    addFieldTriggers(change) {\n        change.addEventListener(\"change\", () => { this.draw(); });\n        change.addEventListener(\"keydown\", (event) => { this.navigate(event); });\n    }\n    styles() {\n        this.cal.innerHTML =\n            `\n        <style>\n            .datepicker-month\n            {\n                font-size: 15px;\n                margin-top: 16px;\n                margin-left: 16px;\n                width: fit-content;\n            }\n\n            .datepicker-year\n            {\n                font-size: 15px;\n                margin-top: 16px;\n                margin-left: 32px;\n                width: fit-content;\n            }\n\n            .datepicker-table\n            {\n                width: 100%;\n                margin-top: 14px;\n                border-collapse: separate;\n            }\n\n            .datepicker-head\n            {\n                font-weight: bold;\n                text-align: center;\n                color: ` + this.app.config.colors.text + `;\n            }\n\n            .datepicker-day\n            {\n                color: ` + this.app.config.colors.buttontext + `;\n                padding: 5px;\n                width: 14.28%;\n                text-align: center;\n                background: ` + this.app.config.colors.topbar + `;\n            }\n\n            .datepicker-blank\n            {\n                background: #ddd;\n            }\n\n            .datepicker-current\n            {\n                font-size: 16px;\n                font-weight: bold;\n            }\n\n            .datepicker-day:hover\n            {\n                cursor: pointer;\n                font-weight: bold;\n                font-style: italic;\n            }\n        </style>\n        `;\n    }\n}\nDatePicker.ɵfac = function DatePicker_Factory(t) { return new (t || DatePicker)(i0.ɵɵdirectiveInject(Context)); };\nDatePicker.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: DatePicker, selectors: [[\"ng-component\"]], viewQuery: function DatePicker_Query(rf, ctx) {\n        if (rf & 1) {\n            i0.ɵɵviewQuery(_c0$9, 5, ElementRef);\n        }\n        if (rf & 2) {\n            let _t;\n            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.calelem = _t.first);\n        }\n    }, decls: 2, vars: 0, consts: [[\"calendar\", \"\"]], template: function DatePicker_Template(rf, ctx) {\n        if (rf & 1) {\n            i0.ɵɵelement(0, \"div\", null, 0);\n        }\n    }, encapsulation: 2 });\n(function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DatePicker, [{\n            type: Component,\n            args: [{\n                    template: `\n        <div #calendar></div>\n    `\n                }]\n        }], function () { return [{ type: Context }]; }, { calelem: [{\n                type: ViewChild,\n                args: [\"calendar\", { read: ElementRef }]\n            }] });\n})();\n\nconst _c0$8 = [\"msg\"];\nconst _c1$3 = [\"accept\"];\nclass MessageBox {\n    constructor(ctx) {\n        this.top = \"20%\";\n        this.left = \"25%\";\n        this.width$ = \"100px\";\n        this.height$ = \"100px\";\n        this.title$ = \"alert\";\n        this.message = \"the message\";\n        this.msg = null;\n        this.btn = null;\n        this.app = ctx.app[\"_impl_\"];\n    }\n    static show(app, message, title, width, height) {\n        let pinst = new PopupInstance();\n        pinst.display(app, MessageBox);\n        let mbox = pinst.popup();\n        mbox.title = title;\n        mbox.message = message;\n        if (width != null)\n            mbox.width = width;\n        if (height != null)\n            mbox.height = height;\n    }\n    get bcolor() {\n        return (this.app.config.colors.topbar);\n    }\n    get tcolor() {\n        return (this.app.config.colors.buttontext);\n    }\n    set width(width) {\n        this.width$ = width;\n    }\n    get width() {\n        return (this.width$);\n    }\n    set height(height) {\n        this.height$ = height;\n    }\n    get height() {\n        return (this.height$);\n    }\n    set title(title) {\n        this.title$ = title;\n        this.win.title = this.title;\n    }\n    get title() {\n        return (this.title$);\n    }\n    setWin(win) {\n        this.win = win;\n    }\n    close(_cancel) {\n        var _a;\n        this.btn.removeEventListener(\"click\", () => { this.close(false); });\n        this.btn.removeEventListener(\"keydown\", () => { this.close(false); });\n        this.win.closeWindow();\n        (_a = this.app.getCurrentForm()) === null || _a === void 0 ? void 0 : _a.focus();\n    }\n    ngAfterViewInit() {\n        var _a, _b;\n        this.msg = (_a = this.msgelem) === null || _a === void 0 ? void 0 : _a.nativeElement;\n        this.btn = (_b = this.acceptelem) === null || _b === void 0 ? void 0 : _b.nativeElement;\n        setTimeout(() => { this.addTriggers(); }, 1);\n        this.msg.innerHTML = this.message;\n        this.keepFocus(0);\n    }\n    addTriggers() {\n        this.btn.addEventListener(\"click\", () => { this.close(false); });\n        this.btn.addEventListener(\"keydown\", () => { this.close(false); });\n    }\n    keepFocus(delay) {\n        this.btn.focus();\n        setTimeout(() => { this.keepFocus(delay + 1); }, delay);\n    }\n}\nMessageBox.ɵfac = function MessageBox_Factory(t) { return new (t || MessageBox)(i0.ɵɵdirectiveInject(Context)); };\nMessageBox.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: MessageBox, selectors: [[\"ng-component\"]], viewQuery: function MessageBox_Query(rf, ctx) {\n        if (rf & 1) {\n            i0.ɵɵviewQuery(_c0$8, 5, ElementRef);\n            i0.ɵɵviewQuery(_c1$3, 5, ElementRef);\n        }\n        if (rf & 2) {\n            let _t;\n            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.msgelem = _t.first);\n            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.acceptelem = _t.first);\n        }\n    }, decls: 7, vars: 4, consts: [[1, \"messagebox\"], [1, \"messagebox-msg\"], [\"msg\", \"\"], [1, \"messagebox-buttom\"], [1, \"messagebox-btn\"], [\"accept\", \"\"]], template: function MessageBox_Template(rf, ctx) {\n        if (rf & 1) {\n            i0.ɵɵelementStart(0, \"div\", 0);\n            i0.ɵɵelement(1, \"div\", 1, 2);\n            i0.ɵɵelementStart(3, \"div\", 3);\n            i0.ɵɵelementStart(4, \"button\", 4, 5);\n            i0.ɵɵtext(6, \"Ok\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n            i0.ɵɵadvance(4);\n            i0.ɵɵstyleMapInterpolate2(\"color: \", ctx.tcolor, \"; background-color: \", ctx.bcolor, \";\");\n        }\n    }, styles: [\".messagebox[_ngcontent-%COMP%]{top:0px;left:1px;right:1px;bottom:0px;display:block;position:absolute}.messagebox-msg[_ngcontent-%COMP%]{height:80px;display:flex;text-align:center;word-wrap:break-all;justify-content:center}.messagebox-buttom[_ngcontent-%COMP%]{right:1px;bottom:4px;witdh:35px;height:35px;display:block;position:absolute}.messagebox-btn[_ngcontent-%COMP%]{border:none;padding:10px;outline:none;font-size:15px;cursor:pointer;text-align:center;border-radius:100%;display:inline-block;text-decoration:none}\"] });\n(function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MessageBox, [{\n            type: Component,\n            args: [{\n                    selector: '',\n                    template: `\n        <div class=\"messagebox\">\n            <div #msg class=\"messagebox-msg\"></div>\n            <div class=\"messagebox-buttom\">\n                <button #accept class=\"messagebox-btn\" style=\"color: {{tcolor}}; background-color: {{bcolor}};\">Ok</button>\n            </div>\n        </div>\n        `,\n                    styles: [`\n        .messagebox\n        {\n            top: 0px;\n            left: 1px;\n            right: 1px;\n            bottom: 0px;\n            display: block;\n            position: absolute;\n        }\n\n        .messagebox-msg\n        {\n            height: 80px;\n            display: flex;\n            text-align: center;\n            word-wrap: break-all;\n            justify-content: center;\n        }\n\n        .messagebox-buttom\n        {\n            right: 1px;\n            bottom: 4px;\n            witdh: 35px;\n            height: 35px;\n            display: block;\n            position: absolute;\n        }\n\n        .messagebox-btn\n        {\n            border: none;\n            padding: 10px;\n            outline: none;\n            font-size: 15px;\n            cursor: pointer;\n            text-align: center;\n            border-radius: 100%;\n            display: inline-block;\n            text-decoration: none;\n        }\n    `]\n                }]\n        }], function () { return [{ type: Context }]; }, { msgelem: [{\n                type: ViewChild,\n                args: [\"msg\", { read: ElementRef }]\n            }], acceptelem: [{\n                type: ViewChild,\n                args: [\"accept\", { read: ElementRef }]\n            }] });\n})();\n\nclass Condition {\n    constructor(column, value, datatype) {\n        this.level$ = 0;\n        this.type$ = \"and\";\n        this.prev$ = null;\n        this.next$ = null;\n        this.bindvalues$ = [];\n        this.error$ = null;\n        this.column$ = column;\n        this.datatype$ = datatype;\n        this.placeholder$ = column + Condition.ubid();\n        if (this.column$ == null) {\n            this.error$ = \"cannot construct condition on unspecified column. Value = \" + value;\n            return;\n        }\n        if (value != null) {\n            let type = value.constructor.name.toLowerCase();\n            if (type == \"date\") {\n                this.datatype$ = Column$1.date;\n                this.value$ = value.getTime();\n                this.datebtwn();\n                this.bindvalues$.push({ name: this.placeholder$[0], value: this.value$[0], type: this.datatype$ });\n                this.bindvalues$.push({ name: this.placeholder$[1], value: this.value$[1], type: this.datatype$ });\n                return;\n            }\n            if (type == \"number\") {\n                this.value$ = value;\n                this.operator$ = \"=\";\n                this.datatype$ = Column$1.decimal;\n                this.bindvalues$.push({ name: this.placeholder$, value: this.value$, type: this.datatype$ });\n                return;\n            }\n        }\n        if (value != null && (value + \"\").trim().length > 0 && this.datatype$ == null) {\n            value = (value + \"\").trim();\n            let numeric = !isNaN(+value);\n            if (numeric)\n                this.datatype$ = Column$1.decimal;\n        }\n        if (value == null) {\n            this.operator$ = \"is null\";\n            return;\n        }\n        if (this.datatype$ == null)\n            this.datatype$ = Column$1.varchar;\n        this.operator$ = \"\";\n        let quoted = false;\n        if (value.startsWith(\"<\"))\n            this.operator$ = \"<\";\n        else if (value.startsWith(\">\"))\n            this.operator$ = \">\";\n        if (this.operator$.length == 1) {\n            value = value.substring(1).trim();\n            if (value.startsWith(\"=\"))\n                this.operator$ += \"=\";\n        }\n        if (this.operator$.length == 2)\n            value = value.substring(1).trim();\n        if (value.startsWith('\"') && value.endsWith('\"')) {\n            quoted = true;\n            value = value.substring(1, value.length - 1);\n        }\n        if (value.startsWith(\"'\") && value.endsWith(\"'\")) {\n            quoted = true;\n            value = value.substring(1, value.length - 1);\n        }\n        if (!quoted) {\n            let like = false;\n            if (value.indexOf(\"%\") >= 0)\n                like = true;\n            if (value.indexOf(\"_\") >= 0)\n                like = true;\n            if (like)\n                this.operator$ = \"like\";\n        }\n        this.value$ = value.trim();\n        if (this.operator$.length == 0)\n            this.operator$ = \"=\";\n        if (this.datatype$ == Column$1.decimal && isNaN(+this.value$)) {\n            this.error$ = \"Unable to parse \" + this.value$ + \" as number\";\n            return;\n        }\n        if (this.datatype$ == Column$1.integer && isNaN(+this.value$)) {\n            this.error$ = \"Unable to parse \" + this.value$ + \" as number\";\n            return;\n        }\n        if (this.datatype$ == Column$1.date) {\n            let date = dates.parse(this.value$);\n            if (date == null) {\n                this.error$ = \"Unable to parse '\" + this.value$ + \"' as date\";\n                return;\n            }\n            this.value$ = date.getTime();\n            if (this.operator$ == \"=\")\n                this.datebtwn();\n        }\n        if (this.operator$ != \"between\") {\n            this.bindvalues$.push({ name: this.placeholder$, value: this.value$, type: this.datatype$ });\n        }\n        else {\n            this.bindvalues$.push({ name: this.placeholder$[0], value: this.value$[0], type: this.datatype$ });\n            this.bindvalues$.push({ name: this.placeholder$[1], value: this.value$[1], type: this.datatype$ });\n        }\n    }\n    static ubid() {\n        if (++Condition.id > 9999)\n            Condition.id = 1;\n        let ubid = \"\" + Condition.id;\n        while (ubid.length < 4)\n            ubid = \"0\" + ubid;\n        return (\"_\" + ubid);\n    }\n    static where(column, value, datatype) {\n        let condition = new Condition(column, value, datatype);\n        condition.type$ = \"where\";\n        return (condition);\n    }\n    datebtwn() {\n        this.operator$ = \"between\";\n        let sdate = this.value$;\n        // add 24 hours - minus 1 sec\n        let edate = sdate + 60 * 60 * 24 * 1000 - 1000;\n        this.value$ = [sdate, edate];\n        this.placeholder$ = [this.placeholder$ + \"_0\", this.placeholder$ + \"_1\"];\n    }\n    get column() {\n        return (this.column$);\n    }\n    get placeholder() {\n        return (this.placeholder$);\n    }\n    getValue() {\n        if (this.bindvalues$.length == 0)\n            return (null);\n        if (this.bindvalues$.length == 1)\n            return (this.bindvalues$[0].value);\n        if (this.bindvalues$.length > 1) {\n            let vals = [];\n            this.bindvalues$.forEach((bv) => { vals.push(bv.value); });\n            return (vals);\n        }\n    }\n    setValue(value) {\n        for (let i = 0; i < this.bindvalues$.length; i++)\n            this.bindvalues$[i].value = value;\n    }\n    setCondition(condition) {\n        this.error$ = null;\n        this.condition$ = condition;\n    }\n    error() {\n        return (this.error$);\n    }\n    or() {\n        this.type$ = \"or\";\n        return (this);\n    }\n    and() {\n        this.type$ = \"and\";\n        return (this);\n    }\n    where() {\n        this.type$ = \"where\";\n        return (this);\n    }\n    next(next) {\n        if (next == null)\n            return (this.next$);\n        if (this.next$ != null)\n            this.next$.prev$ = next;\n        this.next$ = next;\n        next.prev$ = this;\n        return (next);\n    }\n    prev(prev) {\n        if (prev == null)\n            return (this.prev$);\n        if (this.prev$ != null)\n            this.prev$.next$ = prev;\n        this.prev$ = prev;\n        prev.next$ = this;\n        return (prev);\n    }\n    first() {\n        let pc = this;\n        while (pc.prev$ != null)\n            pc = pc.prev$;\n        return (pc);\n    }\n    last() {\n        let nc = this;\n        while (nc.next$ != null)\n            nc = nc.next$;\n        return (nc);\n    }\n    pop() {\n        this.level$ = -1;\n        return (this);\n    }\n    push() {\n        this.level$ = +1;\n        return (this);\n    }\n    errors() {\n        let errors = [];\n        let cd = this.first();\n        while (cd != null) {\n            if (cd.error() != null)\n                errors.push(cd.error());\n            cd = cd.next$;\n        }\n        return (errors);\n    }\n    getAllBindvalues() {\n        let bindvalues = [];\n        let cd = this.first();\n        while (cd != null) {\n            cd.bindvalues$.forEach((bindvalue) => { bindvalues.push(bindvalue); });\n            cd = cd.next$;\n        }\n        return (bindvalues);\n    }\n    split() {\n        let conditions = [];\n        let cd = this.first();\n        while (cd != null) {\n            conditions.push(cd);\n            cd = cd.next$;\n        }\n        return (conditions);\n    }\n    toString() {\n        let nc = this;\n        while (nc.prev$ != null)\n            nc = nc.prev$;\n        if (nc.next$ == null)\n            return (nc.type$ + \" \" + this.clause(nc));\n        let str = (nc.level$ == 0) ? \"where \" : \"where (\";\n        str += this.clause(nc);\n        if (nc.next$ != null)\n            str += \" \" + nc.type$ + \" \";\n        while (nc.next$ != null) {\n            nc = nc.next$;\n            if (+nc.level$ > 0)\n                str += \"(\";\n            str += this.clause(nc);\n            if (+nc.level$ < 0)\n                str += \")\";\n            if (nc.next$ != null)\n                str += \" \" + nc.type$ + \" \";\n        }\n        return (str);\n    }\n    clause(cond) {\n        if (cond.condition$ != null)\n            return (cond.condition$);\n        if (cond.operator$.startsWith(\"is\"))\n            return (cond.column$ + \" \" + cond.operator$);\n        else if (cond.operator$ == \"between\")\n            return (cond.column$ + \" between :\" + cond.placeholder$[0] + \" and :\" + cond.placeholder$[1]);\n        else\n            return (cond.column$ + \" \" + cond.operator$ + \" :\" + cond.placeholder$);\n    }\n}\nCondition.id = 1;\n\nvar SQLType;\n(function (SQLType) {\n    SQLType[SQLType[\"call\"] = 0] = \"call\";\n    SQLType[SQLType[\"lock\"] = 1] = \"lock\";\n    SQLType[SQLType[\"select\"] = 2] = \"select\";\n    SQLType[SQLType[\"insert\"] = 3] = \"insert\";\n    SQLType[SQLType[\"update\"] = 4] = \"update\";\n    SQLType[SQLType[\"delete\"] = 5] = \"delete\";\n})(SQLType || (SQLType = {}));\nclass Statement {\n    constructor(sql) {\n        this.sql$ = null;\n        this.rows$ = null;\n        this.subquery$ = null;\n        this.table$ = null;\n        this.order$ = null;\n        this.limit$ = null;\n        this.type$ = null;\n        this.cursor$ = null;\n        this.columns$ = [];\n        this.errors = null;\n        this.override = false;\n        this.constraint$ = null;\n        this.updates$ = [];\n        this.condition$ = null;\n        this.bindvalues = [];\n        if (sql != null) {\n            if (sql.constructor.name == \"String\")\n                this.sql$ = \"\" + sql;\n            else\n                this.type$ = sql;\n        }\n        this.findtype();\n    }\n    findtype() {\n        if (this.sql$ != null) {\n            this.type$ = SQLType.call;\n            let test = this.sql$.trim().substring(0, 7).trim().toLowerCase();\n            if (test == \"select\")\n                this.type$ = SQLType.select;\n            if (test == \"insert\")\n                this.type$ = SQLType.insert;\n            if (test == \"update\")\n                this.type$ = SQLType.update;\n            if (test == \"delete\")\n                this.type$ = SQLType.delete;\n        }\n    }\n    set type(type) {\n        this.type$ = type;\n    }\n    get type() {\n        return (this.type$);\n    }\n    get sql() {\n        return (this.build().sql);\n    }\n    set sql(sql) {\n        this.sql$ = sql;\n        this.findtype();\n        this.override = true;\n    }\n    rows(rows) {\n        this.rows$ = rows;\n        return (this);\n    }\n    isFunction() {\n        return (this.type == SQLType.call);\n    }\n    isSelect() {\n        return (this.type == SQLType.select);\n    }\n    isInsert() {\n        return (this.type == SQLType.insert);\n    }\n    isUpdate() {\n        return (this.type == SQLType.update);\n    }\n    isDelete() {\n        return (this.type == SQLType.delete);\n    }\n    set table(table) {\n        this.table$ = table;\n    }\n    set limit(limit) {\n        this.limit$ = limit;\n    }\n    set constraint(where) {\n        this.constraint$ = where;\n    }\n    set order(order) {\n        this.order$ = order;\n    }\n    set cursor(cursor) {\n        this.cursor$ = cursor;\n    }\n    get cursor() {\n        return (this.cursor$);\n    }\n    update(name, value, datatype) {\n        if (value != null && datatype == null) {\n            let type = value.constructor.name.toLowerCase();\n            if (type == \"date\") {\n                datatype = Column$1.date;\n                value = value.getTime();\n            }\n            if (type == \"number\")\n                datatype = Column$1.decimal;\n        }\n        if (value != null && (value + \"\").trim().length > 0 && datatype == null) {\n            value = (value + \"\").trim();\n            let numeric = !isNaN(+value);\n            if (numeric)\n                datatype = Column$1.decimal;\n        }\n        if (datatype == null)\n            datatype = Column$1.varchar;\n        this.updates$.push({ name: name, value: value, type: datatype });\n    }\n    set columns(columns) {\n        this.columns$ = [];\n        if (columns.constructor.name == \"String\") {\n            this.columns$.push(\"\" + columns);\n        }\n        else {\n            columns.forEach((column) => {\n                this.columns$.push(\"\" + column);\n            });\n        }\n    }\n    setCondition(condition) {\n        if (condition.constructor.name == \"Array\") {\n            let arr = condition;\n            this.condition$ = arr[0];\n            for (let i = 1; i < arr.length; i++)\n                this.condition$ = this.condition$.and().next(arr[i]);\n            this.condition$ = this.condition$.first();\n        }\n        else {\n            this.condition$ = condition;\n        }\n    }\n    pop() {\n        if (this.condition$ != null)\n            this.condition$.pop();\n        return (this);\n    }\n    push() {\n        if (this.condition$ != null)\n            this.condition$.push();\n        return (this);\n    }\n    where(column, value, datatype) {\n        if (this.condition$ == null) {\n            this.condition$ = new Condition(column, value, datatype);\n            this.condition$.where();\n        }\n        else {\n            let cd = new Condition(column, value, datatype);\n            this.condition$ = this.condition$.where().next(cd);\n        }\n        return (this);\n    }\n    whand(column, value, datatype) {\n        if (this.condition$ != null)\n            return (this.and(column, value, datatype));\n        else\n            return (this.where(column, value, datatype));\n    }\n    and(column, value, datatype) {\n        if (this.condition$ == null) {\n            this.condition$ = new Condition(column, value, datatype);\n        }\n        else {\n            let cd = new Condition(column, value, datatype);\n            this.condition$ = this.condition$.and().next(cd);\n        }\n        return (this);\n    }\n    or(column, value, datatype) {\n        if (this.condition$ == null) {\n            this.condition$ = new Condition(column, value, datatype);\n        }\n        else {\n            let cd = new Condition(column, value, datatype);\n            this.condition$ = this.condition$.or().next(cd);\n        }\n        return (this);\n    }\n    returnvalue(column, datatype) {\n        this.bindvalues.unshift({ name: column, value: null, type: datatype });\n        return (this);\n    }\n    bind(column, value, datatype) {\n        if (value != null && datatype == null) {\n            let type = value.constructor.name.toLowerCase();\n            if (type == \"date\") {\n                datatype = Column$1.date;\n                value = value.getTime();\n            }\n            if (type == \"number\")\n                datatype = Column$1.decimal;\n        }\n        if (value != null && (value + \"\").trim().length > 0 && datatype == null) {\n            value = (value + \"\").trim();\n            let numeric = !isNaN(+value);\n            if (numeric)\n                datatype = Column$1.decimal;\n        }\n        if (datatype == null)\n            datatype = Column$1.varchar;\n        this.bindvalues.push({ name: column, value: value, type: datatype });\n        return (this);\n    }\n    get subquery() {\n        return (this.subquery$);\n    }\n    set subquery(subquery) {\n        this.subquery$ = subquery;\n    }\n    validate() {\n        if (this.errors != null)\n            return (this.errors);\n        this.errors = [];\n        if (this.condition$ != null)\n            this.errors = this.condition$.errors();\n        return (this.errors);\n    }\n    getCondition() {\n        return (this.condition$);\n    }\n    build() {\n        switch (this.type) {\n            case SQLType.call: return (this.buildcall());\n            case SQLType.lock: return (this.buildselect());\n            case SQLType.select: return (this.buildselect());\n            case SQLType.insert: return (this.buildinsert());\n            case SQLType.update: return (this.buildupdate());\n            case SQLType.delete: return (this.builddelete());\n            default: console.log(\"don't know how to build \" + SQLType[this.type]);\n        }\n    }\n    buildcall() {\n        let bindvals = [];\n        this.bindvalues.forEach((bindv) => {\n            bindvals.push({\n                name: bindv.name,\n                type: Column$1[bindv.type].toLowerCase(),\n                value: bindv.value\n            });\n        });\n        return ({ sql: this.sql$, bindvalues: bindvals });\n    }\n    buildinsert() {\n        let bindvals = [];\n        this.bindvalues.forEach((bindv) => {\n            bindvals.push({\n                name: bindv.name,\n                type: Column$1[bindv.type].toLowerCase(),\n                value: bindv.value\n            });\n        });\n        this.sql$ = \"insert into \" + this.table$ + \" (\";\n        for (let i = 0; i < bindvals.length; i++) {\n            this.sql$ += bindvals[i].name;\n            if (i < bindvals.length - 1)\n                this.sql$ += \",\";\n        }\n        this.sql$ += \") values (\";\n        for (let i = 0; i < bindvals.length; i++) {\n            this.sql$ += \":\" + bindvals[i].name;\n            if (i < bindvals.length - 1)\n                this.sql$ += \",\";\n        }\n        this.sql$ += \")\";\n        return ({ sql: this.sql$, bindvalues: bindvals });\n    }\n    buildupdate() {\n        let updates = [];\n        let bindvals = [];\n        for (let i = 0; i < this.updates$.length; i++) {\n            updates.push({\n                name: this.updates$[i].name,\n                type: Column$1[this.updates$[i].type].toLowerCase(),\n                value: this.updates$[i].value\n            });\n        }\n        // Bindvalues for the update\n        updates.forEach((bindv) => { bindvals.push(bindv); });\n        let bindvalues = this.bindvalues;\n        if (this.condition$ != null)\n            this.condition$.getAllBindvalues().forEach((bind) => { bindvalues.push(bind); });\n        // Bindvalues for the whereclause\n        this.bindvalues.forEach((bindv) => {\n            bindvals.push({\n                name: bindv.name,\n                type: Column$1[bindv.type].toLowerCase(),\n                value: bindv.value\n            });\n        });\n        this.sql$ = \"update \" + this.table$ + \" set \";\n        for (let i = 0; i < updates.length; i++) {\n            this.sql$ += updates[i].name + \" = :\" + updates[i].name;\n            if (i < updates.length - 1)\n                this.sql$ += \", \";\n        }\n        if (this.constraint$ != null)\n            this.sql$ += \" \" + this.constraint$;\n        if (this.condition$ != null)\n            this.sql$ += \" \" + this.condition$.toString();\n        return ({ sql: this.sql$, bindvalues: bindvals });\n    }\n    builddelete() {\n        let sql = this.sql$;\n        if (sql == null)\n            sql = \"delete from \" + this.table$;\n        if (this.constraint$ != null)\n            sql += \" \" + this.constraint$;\n        let bindvalues = this.bindvalues;\n        if (this.condition$ != null) {\n            sql += \" \" + this.condition$.toString();\n            this.condition$.getAllBindvalues().forEach((bind) => { bindvalues.push(bind); });\n        }\n        let bindvals = [];\n        bindvalues.forEach((bindv) => {\n            bindvals.push({\n                name: bindv.name,\n                type: Column$1[bindv.type].toLowerCase(),\n                value: bindv.value\n            });\n        });\n        return ({ sql: sql, bindvalues: bindvals });\n    }\n    buildselect() {\n        let sql = this.sql$;\n        if (sql == null) {\n            sql = \"select \";\n            if (this.columns$ != null) {\n                for (let i = 0; i < this.columns$.length - 1; i++)\n                    sql += this.columns$[i] + \", \";\n                sql += this.columns$[this.columns$.length - 1];\n            }\n            if (this.table$ != null)\n                sql += \" from \" + this.table$;\n        }\n        if (!this.override) {\n            let whand = \" where \";\n            if (this.condition$ != null) {\n                sql += \" \" + this.condition$.toString();\n                whand = \" and \";\n            }\n            if (this.constraint$ != null) {\n                sql += whand + this.constraint$;\n                whand = \" and \";\n            }\n            if (this.subquery$ != null) {\n                sql += whand + this.subquery$.sql;\n                whand = \" and \";\n            }\n            // Don't order by if lock\n            if (this.type$ == SQLType.select && this.order$ != null)\n                sql += \" order by \" + this.order$;\n            if (this.limit$ != null)\n                sql += \" \" + this.limit$;\n        }\n        let bindvalues = this.bindvalues;\n        if (this.condition$ != null)\n            this.condition$.getAllBindvalues().forEach((bind) => { bindvalues.push(bind); });\n        let bindvals = [];\n        bindvalues.forEach((bindv) => {\n            bindvals.push({\n                name: bindv.name,\n                type: Column$1[bindv.type].toLowerCase(),\n                value: bindv.value\n            });\n        });\n        if (this.subquery$ != null) {\n            this.subquery$.bindvalues.forEach((bindv) => { bindvals.push(bindv); });\n        }\n        let sqlstmt = { sql: sql, bindvalues: bindvals };\n        if (this.rows$ != null)\n            sqlstmt[\"rows\"] = this.rows$;\n        return (sqlstmt);\n    }\n}\n\nclass Table {\n    constructor(conn, table, key, columns, fielddef, rows) {\n        this.keys = [];\n        this.dates = [];\n        this.index = new Map();\n        this.key = key;\n        this.conn = conn;\n        this.table = table;\n        this.fetch$ = rows;\n        this.criterias = [];\n        this.columns$ = columns;\n        this.fielddef = fielddef;\n        this.cursor = table.name + Date.now();\n        if (this.key == null) {\n            this.key = new Key(\"primary\");\n            this.columns$.forEach((col) => { this.key.addColumn(col.name); });\n        }\n        if (this.table.where != null) {\n            this.table.where = this.table.where.trim();\n            if (this.table.where.startsWith(\"where \"))\n                this.table.where = this.table.where.substring(6);\n            if (this.table.where.startsWith(\"and \"))\n                this.table.where = this.table.where.substring(4);\n            if (this.table.where.length == 0)\n                this.table.where = null;\n        }\n        this.fetch$ *= 4;\n        if (this.fetch$ < 10)\n            this.fetch$ = 10;\n        this.cnames = [];\n        this.columns$.forEach((column) => {\n            this.cnames.push(column.name);\n            this.index.set(column.name, column);\n            let date = false;\n            if (column.type == Column$1.date)\n                date = true;\n            this.dates.push(date);\n        });\n    }\n    get name() {\n        return (this.table.name);\n    }\n    get tabdef() {\n        return (this.table);\n    }\n    get columns() {\n        return (this.cnames);\n    }\n    mandatory(column) {\n        let def = this.index.get(column);\n        if (def == null || def.mandatory == null)\n            return (false);\n        return (def.mandatory);\n    }\n    databasecolumn(column) {\n        return (this.index.has(column.toLowerCase()));\n    }\n    set fielddata(fielddata) {\n        this.fielddata$ = fielddata;\n    }\n    get fielddata() {\n        return (this.fielddata$);\n    }\n    get searchfilter() {\n        return (this.criterias);\n    }\n    set searchfilter(filter) {\n        this.criterias = filter;\n    }\n    lock(record, data) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let cols = [];\n            for (let i = 0; i < this.columns.length; i++)\n                cols.push({ name: this.columns[i], value: data[i] });\n            let where = true;\n            let stmt = new Statement(SQLType.lock);\n            stmt.columns = this.columns;\n            stmt.table = this.table.name;\n            for (let i = 0; i < this.keys[record].length; i++) {\n                let type = this.index.get(this.columns[i]).type;\n                if (!where)\n                    stmt.and(this.columns[i], this.keys[record][i], type);\n                else\n                    stmt.where(this.columns[i], this.keys[record][i], type);\n                where = false;\n            }\n            let lock = stmt.build();\n            let response = yield this.conn.invoke(\"lock\", lock);\n            if (response[\"status\"] == \"failed\") {\n                console.log(JSON.stringify(response));\n                return ({ status: \"failed\", message: \"Row is locked by another user. Try later\" });\n            }\n            let rows = response[\"rows\"];\n            if (rows.length == 0) {\n                console.log(\"Row[\" + record + \"] has been deleted by another user. Requery to see changes\");\n                return ({ status: \"failed\", message: \"Row[\" + record + \"] has been deleted by another user. Requery to see changes\" });\n            }\n            let row = rows[0];\n            for (let i = 0; i < this.columns.length; i++) {\n                let cval = cols[i].value;\n                if (cval != null && this.dates[i])\n                    cval = cval.getTime();\n                if (row[this.columns[i]] != cval) {\n                    let problem = cols[i].name + \"[\" + record + \"], db: \" + row[this.columns[i]] + \" != \" + cval;\n                    console.log(\"Row has been changed by another user. Requery to see changes\");\n                    return ({ status: \"failed\", message: \"Row has been changed by another user. Requery to see changes\" });\n                }\n            }\n            return ({ status: \"ok\" });\n        });\n    }\n    insert(record, data) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let cols = [];\n            for (let i = 0; i < this.columns.length; i++)\n                cols.push({ name: this.columns[i], value: data[i] });\n            let stmt = new Statement(SQLType.insert);\n            stmt.columns = this.columns;\n            stmt.table = this.table.name;\n            let keyval = [];\n            for (let i = 0; i < this.columns.length; i++) {\n                let cval = cols[i].value;\n                let type = this.index.get(this.columns[i]).type;\n                if (cval != null && this.dates[i])\n                    cval = cval.getTime();\n                if (i < this.key.columns().length)\n                    keyval.push(cval);\n                stmt.bind(cols[i].name, cval, type);\n            }\n            let insert = stmt.build();\n            this.keys.splice(+record, 0, keyval);\n            let response = yield this.conn.invoke(\"insert\", insert);\n            return (response);\n        });\n    }\n    update(record, data) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let keyupd = [];\n            let keyval = this.keys[+record];\n            let stmt = new Statement(SQLType.update);\n            for (let i = 0; i < data.length; i++) {\n                if (i < this.key.columns().length)\n                    keyupd.push(keyval[i]);\n                if (data[i].value.updated) {\n                    let val = data[i].value.newvalue;\n                    let type = this.index.get(data[i].name).type;\n                    if (val != null && this.dates[i])\n                        val = val.getTime();\n                    if (i < this.key.columns().length)\n                        keyupd[i] = val;\n                    stmt.update(data[i].name, val, type);\n                }\n            }\n            let where = true;\n            if (this.table.where != null && this.table.where.trim.length > 0) {\n                where = false;\n                stmt.constraint = this.table.where;\n            }\n            for (let i = 0; i < keyval.length; i++) {\n                let type = this.index.get(this.columns[i]).type;\n                if (!where)\n                    stmt.and(this.columns[i], keyval[i], type);\n                else\n                    stmt.where(this.columns[i], keyval[i], type);\n                where = false;\n            }\n            stmt.table = this.table.name;\n            let update = stmt.build();\n            let response = yield this.conn.invoke(\"update\", update);\n            if (response[\"status\"] != \"failed\")\n                this.keys[+record] = keyupd;\n            return (response);\n        });\n    }\n    delete(record) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let keyval = this.keys[+record];\n            let stmt = new Statement(SQLType.delete);\n            let where = true;\n            if (this.table.where != null && this.table.where.trim.length > 0) {\n                where = false;\n                stmt.constraint = this.table.where;\n            }\n            for (let i = 0; i < keyval.length; i++) {\n                let type = this.index.get(this.columns[i]).type;\n                if (!where)\n                    stmt.and(this.columns[i], keyval[i], type);\n                else\n                    stmt.where(this.columns[i], keyval[i], type);\n                where = false;\n            }\n            stmt.table = this.table.name;\n            let delrow = stmt.build();\n            let response = yield this.conn.invoke(\"delete\", delrow);\n            if (response[\"status\"] == \"failed\")\n                return (response);\n            let keys = this.keys.slice(0, record);\n            keys = keys.concat(this.keys.slice(+record + 1, this.keys.length));\n            this.keys = keys;\n            return (response);\n        });\n    }\n    parseQuery(keys, subquery, fields) {\n        let stmt = new Statement(SQLType.select);\n        stmt.cursor = this.cursor;\n        stmt.columns = this.cnames;\n        stmt.table = this.table.name;\n        stmt.order = this.table.order;\n        let where = true;\n        if (this.table.limit != null)\n            stmt.limit = this.table.limit;\n        if (this.table.where != null) {\n            where = false;\n            stmt.constraint = this.table.where;\n        }\n        if (fields.length > 0) {\n            this.criterias = [];\n            fields.forEach((field) => {\n                if (field.value != null && (\"\" + field.value).trim() != \"\")\n                    this.criterias.push({ name: field.name, value: field.value });\n            });\n        }\n        keys.forEach((key) => {\n            key.values.forEach((part) => {\n                let col = part.name;\n                // Check if key column is mapped to diff. name\n                let def = this.fielddef.get(col);\n                if (def != null)\n                    col = def.column;\n                let type = this.index.get(col).type;\n                if (!where)\n                    stmt.and(col, part.value, type);\n                else\n                    stmt.where(col, part.value, type);\n                where = false;\n            });\n        });\n        this.criterias.forEach((field) => {\n            let def = this.fielddef.get(field.name);\n            if (def.column != null) {\n                let type = this.index.get(def.column).type;\n                if (!where)\n                    stmt.and(def.column, field.value, type);\n                else\n                    stmt.where(def.column, field.value, type);\n                where = false;\n            }\n        });\n        if (subquery != null)\n            stmt.subquery = subquery;\n        return (stmt);\n    }\n    executequery(stmt) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.keys = [];\n            this.eof = false;\n            this.fielddata.clear();\n            this.select = stmt.build();\n            this.select.rows = this.fetch$;\n            this.select.cursor = stmt.cursor;\n            let response = yield this.conn.invoke(\"select\", this.select);\n            if (response[\"status\"] == \"failed\")\n                return (response);\n            this.addRows(response[\"rows\"]);\n            return (response);\n        });\n    }\n    fetch(stmt) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.eof)\n                return ({ status: \"ok\" });\n            let fetch = { cursor: stmt.cursor, rows: this.fetch$ };\n            let response = yield this.conn.invoke(\"fetch\", fetch);\n            if (response[\"status\"] == \"failed\")\n                return (response);\n            this.addRows(response[\"rows\"]);\n            return (response);\n        });\n    }\n    addRows(rows) {\n        let klen = this.key.values.length;\n        if (rows.length < this.fetch$)\n            this.eof = true;\n        rows.forEach((row) => {\n            // Table is not defined\n            if (this.cnames.length == 0) {\n                let keys = Object.keys(row);\n                let flds = this.fielddata.fields;\n                for (let i = 0; i < keys.length; i++)\n                    this.cnames.push(keys[i]);\n                for (let i = 0; i < keys.length - flds.length; i++)\n                    flds.unshift(keys[i]);\n                this.fielddata.fields = flds;\n            }\n            let col = 0;\n            let keyval = [];\n            let drow = this.fielddata.newrow();\n            Object.keys(row).forEach((key) => {\n                let val = row[key];\n                if (this.dates[col] && (\"\" + val).length > 0)\n                    val = new Date(+val);\n                drow.setValue(col++, val);\n                if (keyval.length < klen)\n                    keyval.push(val);\n            });\n            this.keys.push(keyval);\n            this.fielddata.add(drow);\n        });\n    }\n}\n\nclass FieldData {\n    constructor(block, table, fields, fielddef) {\n        this.data = [];\n        this.index = new Map();\n        this.block = block;\n        this.table$ = table;\n        this.fields$ = fields;\n        this.fielddef = fielddef;\n        if (table != null)\n            this.table$.fielddata = this;\n        if (fields != null) {\n            for (let i = 0; i < fields.length; i++)\n                this.index.set(fields[i].toLowerCase(), i);\n        }\n    }\n    get table() {\n        return (this.table$);\n    }\n    get tabdef() {\n        var _a;\n        return ((_a = this.table$) === null || _a === void 0 ? void 0 : _a.tabdef);\n    }\n    get database() {\n        return (this.table != null);\n    }\n    databasecolumn(column) {\n        if (this.table == null)\n            return (false);\n        return (this.table.databasecolumn(column));\n    }\n    get fields() {\n        return (this.fields$);\n    }\n    set fields(fields) {\n        this.index.clear();\n        this.fields$ = fields;\n        for (let i = 0; i < fields.length; i++)\n            this.index.set(fields[i].toLowerCase(), i);\n    }\n    get columns() {\n        if (this.table == null)\n            return (null);\n        else\n            return (this.table.columns);\n    }\n    get fetched() {\n        return (this.data.length);\n    }\n    removeLocks() {\n        this.data.forEach((row) => { row.locked = false; });\n    }\n    lock(record) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (record < 0 || record >= this.data.length)\n                return ({ status: \"failed\", message: \"row \" + record + \" does not exist\" });\n            if (this.data[record].locked)\n                return ({ status: \"failed\", message: \"row \" + record + \" already locked\" });\n            if (this.table == null)\n                return ({ status: \"ok\" });\n            let response = { status: \"ok\" };\n            if (this.table != null) {\n                response = yield this.table.lock(record, this.data[+record].values);\n                if (response[\"status\"] == \"failed\")\n                    return (response);\n            }\n            this.data[record].locked = true;\n            return (response);\n        });\n    }\n    locked(record) {\n        if (record < 0 || record >= this.data.length)\n            return (false);\n        if (this.data[+record].state == RecordState.insert)\n            return (true);\n        return (this.data[+record].locked);\n    }\n    mandatory(column) {\n        var _a;\n        let md = false;\n        if (this.table != null)\n            md = this.table.mandatory(column);\n        if (!md) {\n            md = (_a = this.fielddef.get(column)) === null || _a === void 0 ? void 0 : _a.mandatory;\n            if (md == null)\n                md = false;\n        }\n        return (md);\n    }\n    getNonValidated(record) {\n        if (record < 0 || record >= this.data.length)\n            return ([]);\n        let row = this.data[record];\n        let cols = [];\n        for (let i = 0; i < row.fields.length; i++) {\n            if (this.mandatory(this.fields[i]) && row.fields[i].value$ == null) {\n                cols.push(this.columns[i]);\n            }\n            else if (!row.fields[i].validated) {\n                cols.push(this.columns[i]);\n            }\n        }\n        return (cols);\n    }\n    validated(record, fields) {\n        if (record < 0 || record >= this.data.length)\n            return (true);\n        let row = this.data[record];\n        if (fields) {\n            for (let i = 0; i < row.fields.length; i++) {\n                if (this.mandatory(this.fields[i]) && row.fields[i].value$ == null)\n                    return (false);\n                if (!row.fields[i].validated)\n                    return (false);\n            }\n            return (true);\n        }\n        return (row.validated);\n    }\n    newrow() {\n        let row = new Row(0, this);\n        return (row);\n    }\n    add(row) {\n        this.data.push(row);\n    }\n    column(fname) {\n        return (this.index.get(fname.toLowerCase()));\n    }\n    clear() {\n        this.data = [];\n    }\n    getValue(record, column) {\n        if (+record < 0 || +record >= +this.data.length) {\n            console.log(\"get \" + column + \"[\" + record + \"] record does not exist\");\n            return (null);\n        }\n        let colno = this.index.get(column.toLowerCase());\n        if (colno == null) {\n            console.log(\"get \" + column + \"[\" + record + \"] column does not exist\");\n            return (null);\n        }\n        let rec = this.data[+record];\n        return (rec.fields[+colno].value$);\n    }\n    getValidated(record, column) {\n        if (record < 0 || record >= this.data.length) {\n            console.log(\"set \" + column + \"[\" + record + \"] row does not exist\");\n            return (true);\n        }\n        let rec = this.data[+record];\n        if (column == null)\n            return (rec.validated);\n        let colno = this.index.get(column.toLowerCase());\n        if (colno == null) {\n            console.log(\"set \" + column + \"[\" + record + \"] column does not exist\");\n            return;\n        }\n        return (rec.fields[+colno].validated);\n    }\n    setValidated(record, column) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (record < 0 || record >= this.data.length)\n                return ({ status: \"failed\", message: \"set \" + column + \"[\" + record + \"] validated failed, row does not exist\" });\n            let rec = this.data[+record];\n            if (column == null) {\n                if (rec.validated)\n                    return ({ status: \"failed\", message: \"Record already validated\" });\n                if (rec.state == RecordState.insert) {\n                    if (this.table != null) {\n                        let scn = rec.scn;\n                        let response = yield this.table.insert(record, this.data[+record].values);\n                        if (response[\"status\"] == \"failed\")\n                            return (response);\n                        rec.dbn = scn;\n                    }\n                }\n                else if (this.table != null) {\n                    let scn = rec.scn;\n                    let columns = [];\n                    for (let i = 0; i < this.columns.length; i++) {\n                        let status = { updated: false };\n                        if (+rec.fields[i].scn > +rec.dbn) {\n                            status.updated = true;\n                            status.newvalue = rec.fields[i].value$;\n                        }\n                        columns.push({ name: this.columns[i], value: status });\n                    }\n                    let response = yield this.table.update(record, columns);\n                    if (response[\"status\"] == \"failed\")\n                        return (response);\n                    rec.dbn = scn;\n                }\n                rec.validated = true;\n                if (rec.state == RecordState.insert)\n                    rec.state = RecordState.update;\n                return ({ status: \"ok\" });\n            }\n            let colno = this.index.get(column.toLowerCase());\n            if (colno == null)\n                return ({ status: \"failed\", message: \"set \" + column + \"[\" + record + \"] validated failed, column does not exist\" });\n            if (this.table != null && +colno < this.table.columns.length)\n                rec.fields[+colno].validated = true;\n            return ({ status: \"ok\" });\n        });\n    }\n    setValue(record, column, value) {\n        if (record < 0 || record >= this.data.length) {\n            console.log(\"set \" + column + \"[\" + record + \"] row does not exist\");\n            return (false);\n        }\n        let colno = this.index.get(column.toLowerCase());\n        if (colno == null) {\n            console.log(\"set \" + column + \"[\" + record + \"] column does not exist\");\n            return (false);\n        }\n        let rec = this.data[+record];\n        if (rec.fields[+colno].value$ == value)\n            return (false);\n        let scn = +rec.scn + 1;\n        if (this.table != null && +colno < this.table.columns.length) {\n            rec.validated = false;\n            rec.fields[+colno].validated = false;\n        }\n        rec.scn = scn;\n        rec.fields[+colno].setValue(scn, value);\n        return (true);\n    }\n    state(record, state) {\n        if (record >= this.data.length)\n            return (RecordState.na);\n        if (state != null)\n            this.data[record].state = state;\n        return (this.data[record].state);\n    }\n    get searchfilter() {\n        if (this.table == null)\n            return (null);\n        return (this.table.searchfilter);\n    }\n    set searchfilter(filter) {\n        if (this.table != null)\n            this.table.searchfilter = filter;\n    }\n    parseQuery(keys, subquery, fields) {\n        if (this.table == null)\n            return (null);\n        return (this.table.parseQuery(keys, subquery, fields));\n    }\n    executequery(stmt) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.query = stmt;\n            if (this.table == null)\n                return ({ status: \"ok\" });\n            let response = yield this.table.executequery(stmt);\n            if (response[\"status\"] != \"failed\") {\n                let rows = response[\"rows\"];\n                for (let i = 0; i < rows.length; i++) {\n                    let event = new SQLTriggerEvent(this.block.alias, i, null);\n                    this.block.invokeTriggers(Trigger.PostQuery, event);\n                }\n            }\n            return (response);\n        });\n    }\n    insert(record) {\n        let data = [];\n        if (record > this.data.length)\n            record = this.data.length;\n        data = this.data.slice(0, record);\n        data[+record] = new Row(0, this);\n        data[+record].locked = true;\n        data[+record].state = RecordState.insert;\n        data = data.concat(this.data.slice(record, this.data.length));\n        this.data = data;\n        return (true);\n    }\n    delete(record) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let data = [];\n            let response = { status: \"ok\" };\n            if (record < 0 || record >= this.data.length)\n                return (response);\n            if (this.data[+record].state == RecordState.insert) {\n                data = this.data.slice(0, record);\n                data = data.concat(this.data.slice(+record + 1, this.data.length));\n                this.data = data;\n                return (response);\n            }\n            if (this.table != null) {\n                response = yield this.table.delete(record);\n                if (response[\"status\"] == \"failed\")\n                    return (response);\n            }\n            data = this.data.slice(0, record);\n            data = data.concat(this.data.slice(+record + 1, this.data.length));\n            this.data = data;\n            return (response);\n        });\n    }\n    get rows() {\n        return (this.data.length);\n    }\n    fetch(offset, rows) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.data.length <= +offset + rows && this.query != null) {\n                let response = yield this.table.fetch(this.query);\n                if (response[\"status\"] == \"failed\") {\n                    this.block.alert(JSON.stringify(response), \"Database\");\n                    return (0);\n                }\n                else {\n                    let rows = response[\"rows\"];\n                    if (rows != null) {\n                        for (let i = 1; i <= rows.length; i++) {\n                            let event = new SQLTriggerEvent(this.block.alias, +i + +offset, null);\n                            this.block.invokeTriggers(Trigger.PostQuery, event);\n                        }\n                    }\n                }\n            }\n            let avail = this.data.length - offset - 1;\n            if (avail < 0)\n                avail = 0;\n            return (avail);\n        });\n    }\n    get(start, rows) {\n        let values = [];\n        if (start < 0)\n            start = 0;\n        let end = +start + rows;\n        if (end > this.data.length)\n            end = this.data.length;\n        for (let i = start; i < end; i++)\n            values.push(this.data[i].values);\n        return (values);\n    }\n}\nclass Row {\n    constructor(scn, table, values) {\n        this.scn = 0;\n        this.dbn = 0;\n        this.fields = [];\n        this.locked = false;\n        this.validated = true;\n        this.state = RecordState.na;\n        this.scn = scn;\n        for (let i = 0; i < table.fields.length; i++)\n            this.fields.push(new Column(scn));\n        let i = 0;\n        if (values != null)\n            this.fields.forEach((column) => { column.setValue(scn, values[i++]); });\n    }\n    setValue(col, value) {\n        // Used by table\n        this.fields[col].value$ = value;\n    }\n    get values() {\n        let values = [];\n        this.fields.forEach((col) => {\n            values.push(col.value$);\n        });\n        return (values);\n    }\n    print() {\n        let i = 0;\n        let values = \"\";\n        this.fields.forEach((col) => {\n            let val = col.value$;\n            if (val == null)\n                val = \"\";\n            values += i + \" \" + col.value$ + \", \";\n            i++;\n        });\n        values = values.substring(0, values.length - 2);\n        console.log(values);\n    }\n}\nclass Column {\n    constructor(scn, value) {\n        this.scn = 0;\n        this.validated = true;\n        this.scn = scn;\n        this.value$ = value;\n        if (value == undefined)\n            this.value$ = null;\n    }\n    setValue(scn, value) {\n        this.scn = scn;\n        this.value$ = value;\n        if (value == undefined)\n            this.value$ = null;\n    }\n}\n\nfunction ListOfValuesImpl_tr_6_Template(rf, ctx) {\n    if (rf & 1) {\n        i0.ɵɵelementStart(0, \"tr\");\n        i0.ɵɵelementStart(1, \"td\");\n        i0.ɵɵelement(2, \"field\", 5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n        const row_r2 = ctx.index;\n        const ctx_r0 = i0.ɵɵnextContext();\n        i0.ɵɵadvance(2);\n        i0.ɵɵpropertyInterpolate(\"size\", ctx_r0.size);\n        i0.ɵɵpropertyInterpolate(\"row\", row_r2);\n    }\n}\nconst _c0$7 = function () { return []; };\nclass ListOfValuesImpl {\n    constructor(ctx) {\n        this.last = \"\";\n        this.minlen = 0;\n        this.prefix = \"\";\n        this.postfix = \"\";\n        this.wait = false;\n        this.rows = 10;\n        this.size = 20;\n        this.top = null;\n        this.left = null;\n        this.width = null;\n        this.height = null;\n        this.title = null;\n        this.app = ctx.app[\"_impl_\"];\n    }\n    static show(app, impl, lov) {\n        let pinst = new PopupInstance();\n        pinst.display(app, ListOfValuesImpl);\n        let lovwin = pinst.popup();\n        lovwin.setDefinition(lov);\n        lovwin.setBlockImpl(impl);\n    }\n    setDefinition(lov) {\n        this.lov = lov;\n        this.title = lov.title;\n        this.width = lov.width;\n        this.height = lov.height;\n        this.rows = lov.rows ? lov.rows : 12;\n        this.fetch = lov.rows ? lov.rows : 12;\n        if (this.size == null)\n            this.size = 25;\n        let width = this.size * 12;\n        let height = this.rows * 28 + 16;\n        if (this.width == null)\n            this.width = width + \"px\";\n        if (this.height == null)\n            this.height = height + \"px\";\n        this.win.title = this.title;\n        this.win.width = this.width;\n        this.win.height = this.height;\n        if (this.lov.minlen != null)\n            this.minlen = this.lov.minlen;\n        if (this.lov.prefix != null)\n            this.prefix = this.lov.prefix;\n        if (this.lov.postfix != null)\n            this.postfix = this.lov.postfix;\n    }\n    setBlockImpl(impl) {\n        this.iblock = impl[0];\n        this.sblock = impl[1];\n        this.rblock = impl[2];\n    }\n    close(_cancel) {\n        var _a;\n        this.app.enable();\n        this.win.closeWindow();\n        (_a = this.app.getCurrentForm()) === null || _a === void 0 ? void 0 : _a.focus();\n    }\n    setWin(win) {\n        this.win = win;\n    }\n    ngOnInit() {\n        this.app.disable();\n        this.app.setContainer();\n    }\n    ngAfterViewInit() {\n        let container = this.app.getContainer();\n        container.finish();\n        this.sblock.setFields(container.getBlock(\"search\").fields);\n        this.rblock.setFields(container.getBlock(\"result\").fields);\n        this.rblock.usage = { query: true };\n        container.getBlock(\"search\").records.forEach((rec) => {\n            this.sblock.addRecord(new Record(rec.row, rec.fields, rec.index));\n            this.filter = this.sblock.getField(rec.row, \"filter\");\n            let filtdef = { name: \"filter\", type: FieldType.text };\n            if (this.lov.case != null)\n                filtdef.case = this.lov.case;\n            this.filter.setDefinition(filtdef, true);\n            this.filter.enable(false);\n        });\n        let fielddef = new Map();\n        let descdef = { name: \"description\", type: FieldType.text, fieldoptions: { update: false } };\n        fielddef.set(\"description\", descdef);\n        container.getBlock(\"result\").records.forEach((rec) => {\n            this.rblock.addRecord(new Record(rec.row, rec.fields, rec.index));\n            this.description = this.rblock.getField(rec.row, \"description\");\n            this.description.setDefinition(descdef, true);\n            this.description.enable(true);\n        });\n        let conn = this.app.appstate.connection;\n        let table = new Table(conn, { name: \"none\" }, null, [], null, this.fetch);\n        this.rblock.setApplication(this.app);\n        this.rblock.data = new FieldData(this.rblock, table, [\"description\"], fielddef);\n        this.app.dropContainer();\n        let keys = [\n            keymap.enter,\n            keymap.escape,\n            keymap.nextrecord,\n            keymap.prevrecord,\n            keymap.nextfield,\n            keymap.prevfield\n        ];\n        this.sblock.addKeyTrigger(this, this.onkey, keys);\n        this.rblock.addKeyTrigger(this, this.onkey, keys);\n        this.sblock.addTrigger(this, this.search, Trigger.Typing);\n        this.rblock.addTrigger(this, this.prequery, Trigger.PreQuery);\n        this.rblock.addTrigger(this, this.onMouse, Trigger.MouseDoubleClick);\n        this.rblock.navigable = false;\n        this.filter.focus();\n        this.filter.value = this.lov.value;\n        if (this.lov.autoquery) {\n            this.last = \" \";\n            this.search(this.filter.value);\n        }\n    }\n    search(_event) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.execute();\n            return (true);\n        });\n    }\n    execute() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.wait) {\n                setTimeout(() => { this.execute(); }, 200);\n                return;\n            }\n            if (this.filter.value == this.last)\n                return;\n            this.wait = true;\n            this.last = this.filter.value;\n            if (this.last == null)\n                this.last = \"\";\n            if (this.last.length < this.minlen)\n                this.rblock.clear();\n            else\n                yield this.rblock.keyexeqry();\n            this.wait = false;\n        });\n    }\n    prequery(event) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let stmt = new Statement(this.lov.sql);\n            stmt.cursor = event.stmt.cursor;\n            if (this.lov.bindvalues != null)\n                this.lov.bindvalues.forEach((bv) => { stmt.bind(bv.name, bv.value, bv.type); });\n            let filter = this.filter.value;\n            if (this.lov.modfunc != null)\n                filter = this.lov.modfunc(this.filter.value);\n            if (filter == null)\n                filter = \"\";\n            stmt.bind(\"filter\", this.prefix + filter + this.postfix);\n            event.stmt = stmt;\n            return (true);\n        });\n    }\n    onMouse(event) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.picked(event.record);\n            return (true);\n        });\n    }\n    onkey(event) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (event.type == Trigger.Key && event.field == \"filter\") {\n                if (event.key == keymap.prevfield)\n                    event.event.preventDefault();\n                if (event.key == keymap.nextfield || event.key == keymap.nextrecord) {\n                    this.rblock.navigable = true;\n                    this.rblock.focus(0);\n                }\n            }\n            if (event.type == Trigger.Key && event.field == \"description\") {\n                if (event.key == keymap.nextfield || event.key == keymap.prevfield) {\n                    this.sblock.focus();\n                    event.event.preventDefault();\n                    this.rblock.navigable = false;\n                }\n            }\n            if (event.type == Trigger.Key && event.key == keymap.escape)\n                this.close(false);\n            if (event.type == Trigger.Key && event.key == keymap.enter) {\n                let record = -1;\n                if (event.field == \"filter\" && this.rblock.fetched == 1)\n                    record = 0;\n                if (event.field == \"description\")\n                    record = event.record;\n                if (record >= 0)\n                    this.picked(record);\n            }\n            return (true);\n        });\n    }\n    picked(record) {\n        this.lov.fieldmap.forEach((col, fld) => {\n            let val = this.rblock.getValue(record, fld);\n            this.iblock.setValue(this.iblock.record, col, val);\n        });\n        this.close(false);\n    }\n}\nListOfValuesImpl.ɵfac = function ListOfValuesImpl_Factory(t) { return new (t || ListOfValuesImpl)(i0.ɵɵdirectiveInject(Context)); };\nListOfValuesImpl.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: ListOfValuesImpl, selectors: [[\"ng-component\"]], decls: 8, vars: 2, consts: [[1, \"lov\"], [1, \"lov-center\"], [\"size\", \"15\", \"name\", \"filter\", \"block\", \"search\", 1, \"lov-search\"], [1, \"lov-spacer\"], [4, \"ngFor\", \"ngForOf\"], [\"name\", \"description\", \"block\", \"result\", 1, \"lov-result\", 3, \"size\", \"row\"]], template: function ListOfValuesImpl_Template(rf, ctx) {\n        if (rf & 1) {\n            i0.ɵɵelementStart(0, \"div\", 0);\n            i0.ɵɵelementStart(1, \"table\");\n            i0.ɵɵelementStart(2, \"tr\");\n            i0.ɵɵelementStart(3, \"td\", 1);\n            i0.ɵɵelement(4, \"field\", 2);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementEnd();\n            i0.ɵɵelement(5, \"tr\", 3);\n            i0.ɵɵtemplate(6, ListOfValuesImpl_tr_6_Template, 3, 2, \"tr\", 4);\n            i0.ɵɵelement(7, \"tr\", 3);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n            i0.ɵɵadvance(6);\n            i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpureFunction0(1, _c0$7).constructor(ctx.rows));\n        }\n    }, styles: [\".lov-spacer[_ngcontent-%COMP%]{height:8px}.lov-center[_ngcontent-%COMP%]{border:none;display:flex;justify-content:center}\"] });\n(function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ListOfValuesImpl, [{\n            type: Component,\n            args: [{\n                    template: `\n        <div class=\"lov\">\n        <table>\n            <tr>\n                <td class=\"lov-center\"><field class=\"lov-search\" size=\"15\" name=\"filter\" block=\"search\"></field></td>\n            </tr>\n\n            <tr class=\"lov-spacer\"></tr>\n\n            <tr *ngFor=\"let item of [].constructor(rows); let row = index\">\n                <td><field class=\"lov-result\" size=\"{{size}}\" name=\"description\" row=\"{{row}}\" block=\"result\"></field></td>\n            </tr>\n\n            <tr class=\"lov-spacer\"></tr>\n        </table>\n        </div>\n    `,\n                    styles: [\n                        `\n            .lov-spacer\n            {\n                height: 8px;\n            }\n\n            .lov-center\n            {\n                border: none;\n                display: flex;\n                justify-content: center;\n            }\n        `\n                    ]\n                }]\n        }], function () { return [{ type: Context }]; }, null);\n})();\n\nclass BlockImpl {\n    constructor(block) {\n        this.block = block;\n        this.row$ = 0;\n        this.offset = 0;\n        this.form$ = null;\n        this.ready$ = false;\n        this.records$ = [];\n        this.querying$ = false;\n        this.disabled$ = false;\n        this.navigable$ = true;\n        this.lastqry = [];\n        this.fields$ = [];\n        this.triggers = new Triggers();\n        this.state = FormState.normal;\n        this.fieldidx$ = new Map();\n        this.dbusage$ =\n            {\n                query: false,\n                update: true,\n                insert: false,\n                delete: false\n            };\n        if (block != null) {\n            this.name$ = block.constructor.name;\n            if (this.name$ == \"Block\")\n                this.name$ = \"anonymous\";\n        }\n    }\n    get name() {\n        return (this.name$);\n    }\n    set alias(alias) {\n        this.alias$ = alias;\n    }\n    get alias() {\n        return (this.alias$);\n    }\n    get table() {\n        var _a;\n        return ((_a = this.data) === null || _a === void 0 ? void 0 : _a.tabdef);\n    }\n    set row(row) {\n        this.row$ = row;\n    }\n    get row() {\n        return (this.row$);\n    }\n    exists(record) {\n        if (+record < +this.data.rows)\n            return (true);\n        return (false);\n    }\n    displayed(record) {\n        if (+record < +this.offset)\n            return (false);\n        if (+record > +this.sum(this.offset, this.rows))\n            return (false);\n        let row = +record - +this.offset;\n        let state = this.records[+row].state;\n        if (state == RecordState.na || state == RecordState.qmode)\n            return (false);\n        return (true);\n    }\n    get rows() {\n        return (this.records$.length);\n    }\n    database() {\n        var _a;\n        return ((_a = this.data) === null || _a === void 0 ? void 0 : _a.database);\n    }\n    get datarows() {\n        if (this.data == null)\n            return (0);\n        return (this.data.rows);\n    }\n    get columns() {\n        if (this.data == null)\n            return (null);\n        else\n            return (this.data.columns);\n    }\n    get ready() {\n        return (this.ready$);\n    }\n    set ready(ready) {\n        this.ready$ = ready;\n        let rec = this.getRecord(0);\n        if (rec != null) {\n            rec.enable(true);\n            rec.current = true;\n        }\n    }\n    get navigable() {\n        return (this.navigable$);\n    }\n    set navigable(navigable) {\n        this.navigable$ = navigable;\n    }\n    get record() {\n        return (this.sum(this.row, this.offset));\n    }\n    get fetched() {\n        if (this.data == null)\n            return (0);\n        return (this.data.fetched);\n    }\n    get field() {\n        return (this.field$);\n    }\n    get fields() {\n        if (this.data == null)\n            return (null);\n        else\n            return (this.data.fields);\n    }\n    get clazz() {\n        if (this.block == null)\n            return (null);\n        return (this.block.constructor.name.toLowerCase());\n    }\n    get data() {\n        return (this.data$);\n    }\n    set data(data) {\n        this.data$ = data;\n    }\n    set form(form) {\n        this.form$ = form;\n    }\n    get form() {\n        return (this.form$);\n    }\n    setFieldDefinition(def) {\n        let inst = this.fieldidx$.get(def.name);\n        if (inst != null) {\n            let fields = inst.parent.fields;\n            let cfields = inst.parent.cfields;\n            fields.forEach((fld) => {\n                if (fld.id == inst.id)\n                    fld.definition = def;\n            });\n            cfields.forEach((fld) => {\n                if (fld.id == inst.id)\n                    fld.definition = def;\n            });\n            return (true);\n        }\n        return (false);\n    }\n    setPossibleValues(field, values, enforce) {\n        let inst = this.fieldidx$.get(field);\n        if (inst != null) {\n            let fields = inst.parent.fields;\n            let cfields = inst.parent.cfields;\n            fields.forEach((fld) => {\n                if (fld.id == inst.id)\n                    fld.setPossibleValues(values, enforce);\n            });\n            cfields.forEach((fld) => {\n                if (fld.id == inst.id)\n                    fld.setPossibleValues(values, enforce);\n            });\n            return (true);\n        }\n        return (false);\n    }\n    setFields(fields) {\n        this.fields$ = fields;\n        fields.forEach((inst) => {\n            let name = inst.name;\n            if (inst.id != null && inst.id.length > 0)\n                name += \".\" + inst.id;\n            this.fieldidx$.set(name, inst);\n        });\n    }\n    setMasterDetail(md) {\n        this.masterdetail = md;\n    }\n    setListOfValues(lovs) {\n        this.lovs = lovs;\n    }\n    setIdListOfValues(lovs) {\n        this.idlovs = lovs;\n    }\n    addListOfValues(form, func, field, id) {\n        let utils = new Utils();\n        let lovdef = null;\n        let params = utils.getParams(func);\n        if (!form)\n            lovdef = { inst: this.block, func: func.name, params: params };\n        else\n            lovdef = { inst: this.form.form, func: func.name, params: params };\n        if (id == null)\n            this.lovs.set(field.toLowerCase(), lovdef);\n        else\n            this.idlovs.set(field.toLowerCase(), lovdef);\n    }\n    removeListOfValues(field, id) {\n        if (id == null)\n            this.lovs.delete(field.toLowerCase());\n        else\n            this.idlovs.delete(field.toLowerCase() + \".\" + id.toLowerCase());\n    }\n    get querymode() {\n        return (this.state == FormState.entqry);\n    }\n    focus(row) {\n        var _a;\n        if (!this.navigable)\n            return;\n        if (row != null && row >= 0 && row < this.rows) {\n            if ((_a = this.records[+row]) === null || _a === void 0 ? void 0 : _a.enabled) {\n                this.row = row;\n                this.records[+row].current = true;\n            }\n        }\n        let rec = this.records[+this.row];\n        if (this.field != null) {\n            let field = rec.getField(this.field.name);\n            let inst = rec.getFieldByGuid(this.field.name, this.field.guid);\n            if (inst === null || inst === void 0 ? void 0 : inst.focus())\n                return;\n            if (field === null || field === void 0 ? void 0 : field.focus())\n                return;\n        }\n        for (let i = 0; i < this.fields$.length; i++) {\n            if (this.fields$[i].row == this.row)\n                if (this.fields$[i].focus())\n                    return;\n        }\n        rec === null || rec === void 0 ? void 0 : rec.focus();\n    }\n    getValue(record, column) {\n        if (this.state == FormState.entqry) {\n            let field = this.records[0].getField(column);\n            return (field === null || field === void 0 ? void 0 : field.value);\n        }\n        if (this.data == null)\n            return (null);\n        return (this.data.getValue(+record, column));\n    }\n    setValue(record, column, value) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.data == null)\n                return (false);\n            if (this.state == FormState.entqry) {\n                let field = this.records[0].getField(column);\n                if (field != null)\n                    field.value = value;\n                return (true);\n            }\n            let previous = this.data.getValue(+record, column);\n            if (!(yield this.lockrecord(record, column)))\n                return (false);\n            if (!this.data.setValue(+record, column, value))\n                return (false);\n            this.data.setValidated(record, column);\n            let trgevent = new FieldTriggerEvent(this.alias, column, null, +record, value, previous);\n            this.invokeFieldTriggers(Trigger.PostChange, column, trgevent);\n            if (+record >= +this.offset && +record < this.sum(this.offset, this.rows)) {\n                let field = this.records[record - this.offset].getField(column);\n                if (field != null)\n                    field.value = value;\n            }\n            if (record == this.record && this.masterdetail != null && value != previous)\n                this.masterdetail.sync(this, column);\n        });\n    }\n    get records() {\n        return (this.records$);\n    }\n    getRecord(row) {\n        if (+row < +this.records$.length)\n            return (this.records$[+row]);\n        return (null);\n    }\n    getField(row, name) {\n        var _a;\n        return ((_a = this.records[+row]) === null || _a === void 0 ? void 0 : _a.getField(name));\n    }\n    addRecord(record) {\n        this.records.push(record);\n        record.fields.forEach((inst) => { inst.block = this; });\n        if (this.records.length == 1) {\n            record.current = true;\n            this.field$ = record.fields[0].getFirstInstance();\n        }\n    }\n    set usage(usage) {\n        this.dbusage$ = usage;\n    }\n    get usage() {\n        return (this.dbusage$);\n    }\n    setApplication(app) {\n        this.app = app;\n    }\n    sendkey(event, key) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (event == null)\n                event = new KeyTriggerEvent(Origin.Block, this.alias, null, key, null);\n            return (yield this.onEvent(event, this.field, \"key\", key));\n        });\n    }\n    get searchfilter() {\n        if (this.data == null)\n            return (null);\n        return (this.data.searchfilter);\n    }\n    set searchfilter(filter) {\n        if (this.data != null)\n            this.data.searchfilter = filter;\n    }\n    removeLocks() {\n        if (this.data != null)\n            this.data.removeLocks();\n    }\n    execute(stmt, firstrow, firstcolumn) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (stmt == null)\n                return (null);\n            let errors = stmt.validate();\n            if (errors.length > 0) {\n                let msg = \"<table>\";\n                errors.forEach((err) => { msg += \"<tr><td>\" + err + \"</td></tr>\"; });\n                msg += \"</table>\";\n                this.alert(msg, \"Execute\");\n                return (null);\n            }\n            let response = yield this.app.appstate.connection.invokestmt(stmt);\n            if (response[\"status\"] == \"failed\")\n                this.alert(JSON.stringify(response), \"Execute SQL Failed\");\n            let rows = response[\"rows\"];\n            if (rows == null) {\n                if (firstcolumn)\n                    return (null);\n                return ([]);\n            }\n            if (!firstrow)\n                return (rows);\n            let row = [];\n            if (rows.length > 0)\n                row = rows[0];\n            if (!firstcolumn)\n                return (row);\n            let columns = Object.keys(row);\n            if (columns.length == 0)\n                return (null);\n            return (row[columns[0]]);\n        });\n    }\n    showDatePicker(field, row) {\n        if (row == null || row == -1)\n            row = this.row;\n        let record = this.sum(this.offset, row);\n        if (record >= this.records.length)\n            return;\n        if (this.records[record].state == RecordState.na)\n            return;\n        if (this.records[record].state == RecordState.update && !this.usage.update)\n            return;\n        let fld = this.records[+record].getField(field);\n        let value = new Date();\n        if (fld != null)\n            value = fld.value;\n        DatePicker.show(this.app, this, record, field, value);\n    }\n    showListOfValues(field, id, row) {\n        var _a;\n        if (field == null)\n            return;\n        if (row == null || row == -1)\n            row = this.row;\n        if (!this.app.connected)\n            return;\n        if (!this.records[+row].enabled)\n            return;\n        if (this.records[+row].state == RecordState.na)\n            return;\n        let ldef = null;\n        field = field.trim().toLowerCase();\n        if (this.idlovs != null && id != null && id.trim().length > 0) {\n            id = id.trim().toLowerCase();\n            ldef = this.idlovs.get(field + \".\" + id);\n        }\n        else if (this.lovs != null) {\n            ldef = this.lovs.get(field);\n        }\n        if (ldef != null) {\n            let lov = null;\n            let record = this.sum(row, this.offset);\n            if (ldef.params.length == 0)\n                lov = ldef.inst[ldef.func]();\n            else\n                lov = ldef.inst[ldef.func](record);\n            let blocks = [this, new BlockImpl(), new BlockImpl()];\n            if (!lov.force && ((_a = this.records[+row].getField(field)) === null || _a === void 0 ? void 0 : _a.readonly))\n                return;\n            ListOfValuesImpl.show(this.app, blocks, lov);\n        }\n    }\n    keyinsert(after) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.data == null)\n                return (false);\n            if (!this.usage.insert)\n                return (false);\n            if (this.data.database && !this.app.connected)\n                return (false);\n            return (yield this.insert(after));\n        });\n    }\n    keydelete() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.data == null)\n                return (false);\n            if (this.row >= this.data.rows)\n                return (true);\n            if (this.state == FormState.entqry)\n                return (true);\n            let rec = this.records[+this.row];\n            if (rec.state == RecordState.na)\n                return (true);\n            if (this.data.database && !this.app.connected)\n                return (false);\n            if (!this.usage.delete && rec.state != RecordState.insert)\n                return (false);\n            return (yield this.delete());\n        });\n    }\n    keyentqry(force) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (force == null)\n                force = false;\n            if (!force) {\n                if (this.data == null)\n                    return (false);\n                if (!this.usage.query)\n                    return (false);\n                if (this.data.database && !this.app.connected)\n                    return (false);\n            }\n            let event = new KeyTriggerEvent(Origin.Block, this.alias, null, keymap.enterquery, null);\n            this.invokeTriggers(Trigger.Key, event, keymap.enterquery);\n            if (!(yield this.enterqry()))\n                return (false);\n            if (this.masterdetail != null)\n                this.masterdetail.enterquery(this);\n            this.focus(0);\n            return (true);\n        });\n    }\n    keyexeqry(force) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.masterdetail != null) {\n                if (this.masterdetail.master != null && this.masterdetail.master != this)\n                    return (this.masterdetail.master.keyexeqry(force));\n                if (this.state != FormState.entqry)\n                    this.masterdetail.clearfilters(this);\n            }\n            if (force == null)\n                force = false;\n            if (!force) {\n                if (this.data == null || !this.usage.query) {\n                    if (this.masterdetail != null)\n                        this.masterdetail.master = null;\n                    return (false);\n                }\n                if (this.data.database && !this.app.connected) {\n                    if (this.masterdetail != null)\n                        this.masterdetail.master = null;\n                    return (false);\n                }\n            }\n            let subquery = null;\n            if (this.masterdetail != null) {\n                subquery = yield this.masterdetail.getDetailQuery();\n                this.masterdetail.querydetails(this, true, false);\n            }\n            let status = yield this.executeqry(subquery);\n            this.focus(0);\n            return (status);\n        });\n    }\n    cancelqry() {\n        this.records[0].current = true;\n        this.records[0].clear();\n        this.records[0].disable();\n        this.state = FormState.normal;\n        this.records[0].state = RecordState.na;\n        this.records[0].enable(true);\n    }\n    enterqry() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.data.database && !this.app.connected)\n                return (false);\n            if (!(yield this.validate()))\n                return (false);\n            yield this.clear();\n            this.row = 0;\n            this.searchfilter = [];\n            this.state = FormState.entqry;\n            this.records[0].state = RecordState.qmode;\n            this.records[0].enable(false);\n            return (true);\n        });\n    }\n    get querying() {\n        return (this.querying$);\n    }\n    // Public because of master-detail. Dont call direct\n    executeqry(subquery) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.data.database && !this.app.connected)\n                return (false);\n            if (!(yield this.validate()))\n                return (false);\n            let keys = [];\n            let fields = [];\n            if (this.querying$) {\n                if (this.masterdetail != null)\n                    this.masterdetail.done(this, false);\n                return (false);\n            }\n            this.querying$ = true;\n            if (this.state == FormState.entqry) {\n                fields = this.records[0].fields;\n                this.records[0].disable();\n            }\n            if (this.masterdetail != null)\n                keys = this.masterdetail.getKeys(this);\n            let stmt = this.data.parseQuery(keys, subquery, fields);\n            this.lastqry = this.searchfilter;\n            yield this.clear();\n            let errors = stmt.validate();\n            if (errors.length > 0) {\n                let msg = \"<table>\";\n                errors.forEach((err) => { msg += \"<tr><td>\" + err + \"</td></tr>\"; });\n                msg += \"</table>\";\n                this.alert(msg, \"Query Condition\");\n                this.querying$ = false;\n                if (this.masterdetail != null)\n                    this.masterdetail.done(this, false);\n                return (false);\n            }\n            let event = new SQLTriggerEvent(this.alias, 0, stmt);\n            if (!(yield this.invokeTriggers(Trigger.PreQuery, event))) {\n                this.querying$ = false;\n                if (this.masterdetail != null)\n                    this.masterdetail.done(this, false);\n                return (false);\n            }\n            this.state = FormState.exeqry;\n            stmt = event.stmt; // could be replaced by trigger\n            let response = yield this.data.executequery(stmt);\n            if (response[\"status\"] == \"failed\") {\n                this.alert(JSON.stringify(response), \"Database Query\");\n                this.querying$ = false;\n                if (this.masterdetail != null)\n                    this.masterdetail.done(this, false);\n                this.state = FormState.normal;\n                return (false);\n            }\n            if (this.masterdetail != null)\n                this.masterdetail.querydetails(this, false, true);\n            this.row = 0;\n            yield this.display(0);\n            this.querying$ = false;\n            this.state = FormState.normal;\n            this.records[0].current = true;\n            if (this.masterdetail != null)\n                this.masterdetail.done(this, true);\n            return (true);\n        });\n    }\n    createControlRecord() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.data.database) {\n                if (!this.data.insert(this.sum(this.row, this.offset, 1)))\n                    return (-1);\n                this.records[+this.row].state = RecordState.update;\n                this.records[+this.row].enable(false);\n                return (this.record);\n            }\n            return (-1);\n        });\n    }\n    insert(after) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.data.database && !this.app.connected)\n                return (false);\n            if (!(yield this.validate()))\n                return (false);\n            let off = after ? 1 : 0;\n            if (!this.data.insert(this.sum(this.row, this.offset, off)))\n                return (false);\n            if (this.masterdetail != null)\n                this.masterdetail.cleardetails(this);\n            // Is first row\n            if (this.data.rows == 1) {\n                yield this.display(this.offset);\n                if (this.form == null)\n                    this.disableall();\n                else\n                    this.form.disableall();\n                this.records[0].enable(false);\n                this.focus(0);\n                return (true);\n            }\n            let scroll = 0;\n            let row = this.row;\n            if (after && this.row == this.rows - 1)\n                scroll = 1;\n            if (!after && this.row == 0)\n                scroll = -1;\n            let move = 0;\n            if (scroll == 0)\n                move = after ? 1 : 0;\n            yield this.display(this.sum(this.offset, scroll));\n            row = this.sum(row, move);\n            let rec = this.records[+row];\n            rec.current = true;\n            if (this.form == null)\n                this.disableall();\n            else\n                this.form.disableall();\n            this.records[+row].enable(false);\n            this.focus(row);\n            return (true);\n        });\n    }\n    delete() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.data == null)\n                return (false);\n            if (this.data.database && !this.app.connected)\n                return (false);\n            let record = this.sum(this.row, this.offset);\n            // Lock the record\n            if (!this.data.locked(record)) {\n                let response = yield this.data.lock(record);\n                if (response[\"status\"] == \"failed\") {\n                    this.alert(response[\"message\"], \"Lock Failure\");\n                    return (false);\n                }\n            }\n            let response = yield this.data.delete(this.sum(this.row, this.offset));\n            if (response[\"status\"] == \"failed\") {\n                this.alert(JSON.stringify(response), \"Delete Failed\");\n                return (false);\n            }\n            if (this.masterdetail != null)\n                this.masterdetail.cleardetails(this);\n            // current view is not full\n            if (+this.data.rows - this.offset < this.rows) {\n                this.offset--;\n                if (this.offset < 0)\n                    this.offset = 0;\n            }\n            let row = this.row;\n            yield this.display(this.offset);\n            // no records at current position\n            if (this.sum(row, this.offset) >= this.data.rows)\n                row = this.data.rows - this.offset - 1;\n            if (row < 0)\n                this.row = 0;\n            this.focus(row);\n            if (this.masterdetail != null)\n                this.masterdetail.querydetails(this, true, true);\n        });\n    }\n    lockrecord(record, field) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.data == null)\n                return (true);\n            if (this.state != FormState.normal)\n                return (true);\n            if (!this.data.databasecolumn(field))\n                return (true);\n            if (this.data.locked(record))\n                return (true);\n            let trgevent = new TriggerEvent(this.alias, record, null);\n            if (!(yield this.invokeTriggers(Trigger.Lock, trgevent)))\n                return (false);\n            let response = yield this.data.lock(record);\n            if (response[\"status\"] == \"failed\") {\n                let row = +record - +this.offset;\n                this.alert(response[\"message\"], \"Lock Failure\");\n                let value = this.getValue(record, field);\n                let ffield = this.records[+row].getField(field);\n                if (ffield != null)\n                    ffield.value = value;\n                return (false);\n            }\n            return (true);\n        });\n    }\n    validate() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!(yield this.validatefield(this.field)))\n                return (false);\n            return (yield this.validaterecord());\n        });\n    }\n    validatefield(field) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (field == null)\n                return (true);\n            if (this.data == null)\n                return (true);\n            if (this.row >= this.data.rows)\n                return (true);\n            if (this.state != FormState.normal)\n                return (true);\n            if (this.records[+this.row].state == RecordState.na)\n                return (true);\n            let previous = this.data.getValue(this.sum(field.row, this.offset), field.name);\n            // Nothing has changed\n            if (field.value == previous)\n                return (this.data.getValidated(this.sum(field.row, this.offset), field.name));\n            if (!(yield this.lockrecord(this.sum(field.row, this.offset), field.name)))\n                return (true);\n            if (!field.validate()) {\n                field.valid = false;\n                this.data.setValue(this.sum(field.row, this.offset), field.name, field.value);\n                return (false);\n            }\n            this.data.setValue(+field.row + this.offset, field.name, field.value);\n            let trgevent = new FieldTriggerEvent(this.alias, field.name, field.id, this.sum(field.row, this.offset), field.value, previous, null);\n            if (!(yield this.invokeFieldTriggers(Trigger.WhenValidateField, field.name, trgevent))) {\n                field.valid = false;\n                return (false);\n            }\n            field.parent.valid = true;\n            this.data.setValidated(this.sum(field.row, this.offset), field.name);\n            if (field.value != previous) {\n                if (this.sum(field.row, this.offset) == this.record && this.masterdetail != null)\n                    this.masterdetail.sync(this, field.name);\n                if (!(yield this.invokeFieldTriggers(Trigger.PostChange, field.name, trgevent)))\n                    return (false);\n                if (this.records[+this.row].state == RecordState.insert) {\n                    if (this.data.validated(this.record, true))\n                        this.validaterecord();\n                }\n            }\n            return (true);\n        });\n    }\n    validaterecord() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.data == null)\n                return (true);\n            if (this.row >= this.data.rows)\n                return (true);\n            if (this.state == FormState.entqry)\n                return (true);\n            let rec = this.records[+this.row];\n            if (rec.state == RecordState.na)\n                return (true);\n            // Check fields is validated\n            if (!this.data.validated(this.record, true)) {\n                let cols = this.data.getNonValidated(this.record);\n                this.alert(\"The following columns are not valid:<br><br>\" + cols, \"Validate Record\");\n                cols.forEach((col) => { this.records[+this.record].getField(col).valid = false; });\n                return (false);\n            }\n            // Check record is validated\n            if (this.data.validated(this.record, false))\n                return (true);\n            let trgevent = new TriggerEvent(this.alias, this.record, null);\n            if (!(yield this.invokeTriggers(Trigger.WhenValidateRecord, trgevent)))\n                return (false);\n            let insert = (rec.state == RecordState.insert);\n            let response = yield this.data.setValidated(this.record);\n            if (response[\"status\"] == \"failed\") {\n                let title = insert ? \"Insert\" : \"Update\";\n                this.alert(JSON.stringify(response), title + \" Failed\");\n                return (false);\n            }\n            if (insert) {\n                if (this.form == null)\n                    this.enableall();\n                else\n                    this.form.enableall();\n            }\n            return (true);\n        });\n    }\n    clearblock() {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.clear();\n            this.focus(0);\n            this.searchfilter = [];\n            if (this.data)\n                this.data.clear();\n        });\n    }\n    clear() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.rows == null)\n                return;\n            this.field$ = this.fields$[0];\n            for (let r = 0; r < this.rows; r++) {\n                this.records[+r].clear();\n                this.records[+r].disable();\n                this.records[+r].state = RecordState.na;\n            }\n            this.records[0].current = true;\n            this.records[0].state = RecordState.na;\n            if (!this.disabled$)\n                this.records[0].enable(true);\n        });\n    }\n    disableall() {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.disabled$ = true;\n            for (let r = 0; r < this.rows; r++)\n                this.records[+r].disable();\n        });\n    }\n    enableall() {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.disabled$ = false;\n            for (let r = 0; r < this.rows; r++) {\n                if (this.records[+r].state != RecordState.na)\n                    this.records[+r].enable(false);\n            }\n        });\n    }\n    display(start) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.clear();\n            this.offset = start;\n            if (this.data == null)\n                return;\n            if (this.sum(this.offset, this.rows) > +this.data.rows)\n                this.offset = this.data.rows - this.rows;\n            if (this.offset < 0)\n                this.offset = 0;\n            let columns = this.data.fields;\n            let rows = this.data.get(this.offset, this.rows);\n            for (let r = 0; r < rows.length; r++) {\n                let rec = this.getRecord(r);\n                let state = this.data.state(this.sum(this.offset, r));\n                for (let c = 0; c < rows[r].length; c++) {\n                    let field = rec.getField(columns[c]);\n                    if (field != null)\n                        field.value = rows[r][c];\n                }\n                if (state == RecordState.na) {\n                    let execs = [];\n                    for (let c = 0; c < rows[r].length; c++) {\n                        let field = rec.getField(columns[c]);\n                        let value = rows[r][c];\n                        let fname = columns[c];\n                        if (field != null)\n                            fname = field.name;\n                        let trgevent = new FieldTriggerEvent(this.alias, fname, null, this.sum(r, this.offset), value, value);\n                        execs.push(this.invokeFieldTriggers(Trigger.PostChange, fname, trgevent));\n                    }\n                    execs.push(this.invokeTriggers(Trigger.PostChange, new TriggerEvent(this.alias, this.sum(r, this.offset))));\n                    state = this.data.state(this.sum(this.offset, r), RecordState.update);\n                    for (let i = 0; i < execs.length; i++)\n                        yield execs[i];\n                }\n                rec.state = state;\n                if (!this.disabled$)\n                    rec.enable(false);\n            }\n        });\n    }\n    addTrigger(instance, func, types) {\n        this.triggers.addTrigger(instance, func, types);\n    }\n    addKeyTrigger(instance, func, keys) {\n        this.triggers.addTrigger(instance, func, Trigger.Key, null, keys);\n    }\n    addFieldTrigger(instance, func, types, fields, keys) {\n        this.triggers.addTrigger(instance, func, types, fields, keys);\n    }\n    onEvent(event, field, type, key) {\n        var _a, _b, _c, _d, _e, _f, _g;\n        return __awaiter(this, void 0, void 0, function* () {\n            let trgevent = null;\n            if (event == null)\n                event = { type: type };\n            if (this.records.length == 0)\n                return (true);\n            if (type == \"focus\") {\n                this.field$ = field;\n                if (this.form != null)\n                    this.form.block = this;\n                if (this.state == FormState.entqry)\n                    return (true);\n                if (this.row != field.row) {\n                    if (!(yield this.validate())) {\n                        this.records[+this.row].current = true;\n                        this.field.focus();\n                        return (false);\n                    }\n                    let state = this.records[field.row].state;\n                    if (this.masterdetail != null && state != RecordState.na)\n                        this.masterdetail.querydetails(this, true, true);\n                }\n                this.row = field.row;\n                this.records$[+field.row].current = true;\n                trgevent = new FieldTriggerEvent(this.alias, field.name, field.id, this.sum(field.row, this.offset), field.value, field.value, event);\n                return (yield this.invokeFieldTriggers(Trigger.PreField, field.name, trgevent));\n            }\n            if (type == \"blur\") {\n                if (this.state == FormState.entqry)\n                    return (true);\n                trgevent = new FieldTriggerEvent(this.alias, field.name, field.id, this.sum(field.row, this.offset), field.value, field.value, event);\n                return (yield this.invokeFieldTriggers(Trigger.PostField, field.name, trgevent));\n            }\n            if (type == \"fchange\") {\n                if (this.state == FormState.entqry || this.data == null)\n                    return (true);\n                return (yield this.lockrecord(this.sum(field.row, this.offset), field.name));\n            }\n            if (type == \"cchange\") {\n                if (this.state == FormState.entqry)\n                    return (true);\n                let previous = this.getValue(this.sum(field.row, this.offset), field.name);\n                trgevent = new FieldTriggerEvent(this.alias, field.name, field.id, this.sum(field.row, this.offset), field.value, previous, event);\n                return (this.invokeFieldTriggers(Trigger.Typing, field.name, trgevent));\n            }\n            if (type == \"change\") {\n                // Current row field firing after move\n                if (field.row != this.row)\n                    return (true);\n                // This will fire appropiate triggers\n                if (!(yield this.validatefield(field))) {\n                    this.field.focus();\n                    return (false);\n                }\n                return (true);\n            }\n            // Enter\n            if (type == \"key\" && key == keymap.enter) {\n                if (this.state == FormState.entqry)\n                    key = keymap.executequery;\n                if (((_a = this.records[+this.row]) === null || _a === void 0 ? void 0 : _a.state) == RecordState.insert) {\n                    if (!(yield this.validaterecord()))\n                        return (false);\n                }\n                if (((_b = this.records[+this.row]) === null || _b === void 0 ? void 0 : _b.state) == RecordState.update) {\n                    if (!(yield this.validaterecord()))\n                        return (false);\n                }\n            }\n            // Cancel\n            if (type == \"key\" && key == keymap.escape) {\n                if (this.state == FormState.entqry) {\n                    this.cancelqry();\n                    this.focus();\n                }\n                if (((_c = this.records[+this.row]) === null || _c === void 0 ? void 0 : _c.state) == RecordState.insert) {\n                    this.enableall();\n                    key = keymap.delete;\n                }\n            }\n            // ListOfValues / Datepicker\n            if (type == \"key\" && key == keymap.listval) {\n                if (event != null && event[\"preventDefault\"] != null)\n                    event.preventDefault();\n                let type = field.definition.type;\n                if (type == FieldType.date || type == FieldType.datetime) {\n                    if (!field.readonly)\n                        DatePicker.show(this.app, this, this.record, field.name, field.value);\n                    return (true);\n                }\n                this.showListOfValues(field.name, field.id, this.row);\n                return (true);\n            }\n            // Enter query\n            if (type == \"key\" && key == keymap.enterquery) {\n                if (this.state == FormState.entqry) {\n                    for (let i = 0; i < this.lastqry.length; i++) {\n                        let nvp = this.lastqry[i];\n                        yield this.setValue(0, nvp.name, nvp.value);\n                    }\n                    return (true);\n                }\n                if (!(yield this.validate()))\n                    return (false);\n                if (!(yield this.keyentqry())) {\n                    field.focus();\n                    return (false);\n                }\n                trgevent = new KeyTriggerEvent(Origin.Block, this.alias, field, key, event);\n                return (yield this.invokeTriggers(Trigger.Key, trgevent, key));\n            }\n            // Execute query\n            if (type == \"key\" && key == keymap.executequery) {\n                if (!(yield this.validate()))\n                    return (false);\n                trgevent = new KeyTriggerEvent(Origin.Block, this.alias, field, key, event);\n                if (!(yield this.invokeTriggers(Trigger.Key, trgevent, key)))\n                    return (true);\n                return (yield this.keyexeqry());\n            }\n            // Delete\n            if (type == \"key\" && key == keymap.delete) {\n                if (event != null && event[\"preventDefault\"] != null)\n                    event.preventDefault();\n                trgevent = new KeyTriggerEvent(Origin.Block, this.alias, field, key, event);\n                if (((_d = this.records[+this.row]) === null || _d === void 0 ? void 0 : _d.state) == RecordState.update) {\n                    if (!(yield this.invokeTriggers(Trigger.Key, trgevent, key)))\n                        return (false);\n                }\n                return (yield this.keydelete());\n            }\n            // Insert after\n            if (type == \"key\" && key == keymap.insertafter) {\n                if (!(yield this.validate()))\n                    return (false);\n                trgevent = new KeyTriggerEvent(Origin.Block, this.alias, field, key, event);\n                if (!(yield this.invokeTriggers(Trigger.Key, trgevent, key)))\n                    return (true);\n                if (!(yield this.keyinsert(true))) {\n                    field.focus();\n                    return (false);\n                }\n                return (true);\n            }\n            // Insert before\n            if (type == \"key\" && key == keymap.insertbefore) {\n                if (!(yield this.validate()))\n                    return (false);\n                trgevent = new KeyTriggerEvent(Origin.Block, this.alias, field, key, event);\n                if (!(yield this.invokeTriggers(Trigger.Key, trgevent, key)))\n                    return (true);\n                if (!(yield this.keyinsert(false))) {\n                    field.focus();\n                    return (false);\n                }\n                return (true);\n            }\n            // Next/Previous field\n            if (type == \"key\" && (key == keymap.nextfield || key == keymap.prevfield)) {\n                if (this.state != FormState.entqry && ((_e = this.records[+this.row]) === null || _e === void 0 ? void 0 : _e.state) != RecordState.na) {\n                    let previous = this.data.getValue(this.sum(field.row, this.offset), field.name);\n                    if (field.dirty) {\n                        // ctrl-z doesn't refresh\n                        if (field.value == previous)\n                            field.parent.copy(field);\n                    }\n                    trgevent = new FieldTriggerEvent(this.alias, field.name, field.id, this.sum(field.row, this.offset), field.value, previous, event);\n                    if (key == keymap.prevfield) {\n                        if (!(yield this.invokeFieldTriggers(Trigger.KeyPrevField, field.name, trgevent, key)))\n                            return (false);\n                    }\n                    if (key == keymap.nextfield) {\n                        if (!(yield this.invokeFieldTriggers(Trigger.KeyNextField, field.name, trgevent, key)))\n                            return (false);\n                    }\n                }\n            }\n            // Next record\n            if (type == \"key\" && key == keymap.nextrecord) {\n                if (!(yield this.validate()))\n                    return (false);\n                trgevent = new KeyTriggerEvent(Origin.Block, this.alias, field, key, event);\n                if (!(yield this.invokeTriggers(Trigger.Key, trgevent, key)))\n                    return (true);\n                let row = this.sum(field.row, 1);\n                if (this.data == null)\n                    return (false);\n                if (+row >= +this.rows) {\n                    row = +this.rows - 1;\n                    if (this.data == null)\n                        return (false);\n                    let offset = this.sum(field.row, this.offset);\n                    let fetched = yield this.data.fetch(offset, 1);\n                    if (fetched == 0)\n                        return (false);\n                    yield this.display(this.sum(this.offset, 1));\n                }\n                if ((_f = this.records[+row]) === null || _f === void 0 ? void 0 : _f.enabled) {\n                    this.focus(row);\n                    if (this.masterdetail != null)\n                        this.masterdetail.querydetails(this, true, true);\n                }\n                return (true);\n            }\n            // Previous record\n            if (type == \"key\" && key == keymap.prevrecord) {\n                if (this.record == 0)\n                    return (true);\n                if (!(yield this.validate()))\n                    return (false);\n                trgevent = new KeyTriggerEvent(Origin.Block, this.alias, field, key, event);\n                if (!(yield this.invokeTriggers(Trigger.Key, trgevent, key)))\n                    return (true);\n                let row = +field.row - 1;\n                if (this.data == null)\n                    return (false);\n                if (+row < 0) {\n                    row = 0;\n                    yield this.display(this.offset - 1);\n                }\n                this.focus(row);\n                if (this.masterdetail != null)\n                    this.masterdetail.querydetails(this, true, true);\n                return (true);\n            }\n            // Page down\n            if (type == \"key\" && key == keymap.pagedown) {\n                if (!(yield this.validate()))\n                    return (false);\n                trgevent = new KeyTriggerEvent(Origin.Block, this.alias, field, key, event);\n                if (!(yield this.invokeTriggers(Trigger.Key, trgevent, key)))\n                    return (true);\n                let offset = this.sum(this.offset, field.row);\n                let fetched = yield this.data.fetch(offset, this.rows);\n                if (fetched == 0)\n                    return (false);\n                yield this.display(this.sum(this.offset, this.rows));\n                this.focus();\n                if (this.masterdetail != null)\n                    this.masterdetail.querydetails(this, true, true);\n                return (true);\n            }\n            // Page up\n            if (type == \"key\" && key == keymap.pageup) {\n                if (this.record == 0)\n                    return (true);\n                if (!(yield this.validate()))\n                    return (false);\n                trgevent = new KeyTriggerEvent(Origin.Block, this.alias, field, key, event);\n                if (!(yield this.invokeTriggers(Trigger.Key, trgevent, key)))\n                    return (true);\n                yield this.display(+this.offset - this.rows);\n                this.focus();\n                if (this.masterdetail != null)\n                    this.masterdetail.querydetails(this, true, true);\n                return (true);\n            }\n            // Next/Prev block\n            if (type == \"key\" && (key == keymap.prevblock || key == keymap.nextblock)) {\n                if (this.state != FormState.entqry && ((_g = this.records[+this.row]) === null || _g === void 0 ? void 0 : _g.state) != RecordState.na) {\n                    if (!(yield this.validate()))\n                        return (false);\n                    trgevent = new FieldTriggerEvent(this.alias, field.name, field.id, this.sum(field.row, this.offset), field.value, null, event);\n                    if (key == keymap.prevblock) {\n                        if (!(yield this.invokeFieldTriggers(Trigger.KeyPrevBlock, field.name, trgevent, key)))\n                            return (false);\n                    }\n                    if (key == keymap.nextblock) {\n                        if (!(yield this.invokeFieldTriggers(Trigger.KeyNextBlock, field.name, trgevent, key)))\n                            return (false);\n                    }\n                }\n            }\n            if (type == \"key\" && key == keymap.clearblock) {\n                trgevent = new KeyTriggerEvent(Origin.Block, this.alias, null, keymap.clearblock, null);\n                if (!(yield this.invokeTriggers(Trigger.Key, event, keymap.clearblock)))\n                    return (false);\n                this.clearblock();\n            }\n            if (type == \"key\" && key == keymap.clearform && this.form != null)\n                yield this.form.onEvent(event, field, type, key);\n            if (type == \"key\" && key == keymap.prevfield && this.form != null)\n                yield this.form.onEvent(event, field, type, key);\n            if (type == \"key\" && key == keymap.nextfield && this.form != null)\n                yield this.form.onEvent(event, field, type, key);\n            if (type == \"key\" && key == keymap.prevblock && this.form != null)\n                yield this.form.onEvent(event, field, type, key);\n            if (type == \"key\" && key == keymap.nextblock && this.form != null)\n                yield this.form.onEvent(event, field, type, key);\n            if (type == \"key\") {\n                if (event != null && event[\"preventDefault\"] != null)\n                    event.preventDefault();\n                trgevent = new KeyTriggerEvent(Origin.Block, this.alias, field, key, event);\n                return (yield this.invokeTriggers(Trigger.Key, trgevent, key));\n            }\n            if (type == \"click\") {\n                trgevent = new FieldTriggerEvent(this.alias, field.name, field.id, this.sum(field.row, this.offset), field.value, field.value, event);\n                return (yield this.invokeFieldTriggers(Trigger.MouseClick, field.name, trgevent, key));\n            }\n            if (type == \"dblclick\") {\n                trgevent = new FieldTriggerEvent(this.alias, field.name, field.id, this.sum(field.row, this.offset), field.value, field.value, event);\n                return (yield this.invokeFieldTriggers(Trigger.MouseDoubleClick, field.name, trgevent, key));\n            }\n            return (true);\n        });\n    }\n    invokeTriggers(type, event, key) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.form != null)\n                if (!(yield this.form.invokeTriggers(type, event, key)))\n                    return (false);\n            return (yield this.triggers.invokeTriggers(type, event, key));\n        });\n    }\n    invokeFieldTriggers(type, field, event, key) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.form != null)\n                if (!(yield this.form.invokeFieldTriggers(type, field, event, key)))\n                    return (false);\n            return (yield this.triggers.invokeFieldTriggers(type, field, event, key));\n        });\n    }\n    sleep(ms) {\n        return (new Promise(resolve => setTimeout(resolve, ms)));\n    }\n    alert(msg, title, width, height) {\n        if (title == null)\n            title = this.alias;\n        MessageBox.show(this.app, msg, title, width, height);\n    }\n    sum(n1, n2, n3) {\n        let s = +n1 + +n2;\n        if (n3 != null)\n            s = +s + +n3;\n        return (s);\n    }\n}\n\nclass Block {\n    // dont rename impl as it is read behind the scenes\n    constructor() {\n        this._impl_ = new BlockImpl(this);\n    }\n    get form() {\n        return (this._impl_.form.form);\n    }\n    get table() {\n        return (this._impl_.table);\n    }\n    get connected() {\n        return (this.form.connected);\n    }\n    getValue(record, field) {\n        return (this._impl_.getValue(record, field));\n    }\n    setValue(record, field, value) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return (yield this._impl_.setValue(record, field, value));\n        });\n    }\n    get querymode() {\n        return (this._impl_.querymode);\n    }\n    empty() {\n        return (this._impl_.getRecord(0).state == RecordState.na);\n    }\n    cancel() {\n        this._impl_.sendkey(null, keymap.escape);\n    }\n    goField(field, row) {\n        if (row == null)\n            row = this._impl_.row;\n        this._impl_.getField(row, field).focus();\n    }\n    get ready() {\n        return (this._impl_.ready);\n    }\n    get searchfilter() {\n        return (this._impl_.searchfilter);\n    }\n    set searchfilter(filter) {\n        this._impl_.searchfilter = filter;\n    }\n    sendKey(key) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return (yield this._impl_.sendkey(null, key));\n        });\n    }\n    enterquery(override) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return (this._impl_.keyentqry(override));\n        });\n    }\n    executequery(override) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return (this._impl_.keyexeqry(override));\n        });\n    }\n    nextrecord() {\n        this._impl_.sendkey(null, keymap.nextrecord);\n    }\n    prevrecord() {\n        this._impl_.sendkey(null, keymap.prevrecord);\n    }\n    nextblock() {\n        this._impl_.sendkey(null, keymap.nextblock);\n    }\n    prevblock() {\n        this._impl_.sendkey(null, keymap.prevblock);\n    }\n    pageup() {\n        this._impl_.sendkey(null, keymap.pageup);\n    }\n    pagedown() {\n        this._impl_.sendkey(null, keymap.pagedown);\n    }\n    get row() {\n        return (this._impl_.row);\n    }\n    get record() {\n        return (this._impl_.record);\n    }\n    createControlRecord() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return (this._impl_.createControlRecord());\n        });\n    }\n    delete(override) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (override)\n                return (this._impl_.delete());\n            else\n                return (this._impl_.sendkey(null, keymap.delete));\n        });\n    }\n    setFieldDefinition(def) {\n        return (this._impl_.setFieldDefinition(def));\n    }\n    setPossibleValues(field, values, enforce) {\n        return (this._impl_.setPossibleValues(field, values, enforce));\n    }\n    showDatePicker(field, row) {\n        this._impl_.showDatePicker(field, row);\n    }\n    showListOfValues(field, id, row) {\n        this._impl_.showListOfValues(field, id, row);\n    }\n    insert(above, override) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (above == null)\n                above = false;\n            if (override)\n                return (this._impl_.insert(!above));\n            else {\n                if (!above)\n                    return (this._impl_.sendkey(null, keymap.insertafter));\n                else\n                    return (this._impl_.sendkey(null, keymap.insertbefore));\n            }\n        });\n    }\n    execute(stmt, firstrow, firstcolumn) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return (this._impl_.execute(stmt, firstrow, firstcolumn));\n        });\n    }\n    addListOfValues(func, field, id) {\n        this._impl_.addListOfValues(false, func, field, id);\n    }\n    addTrigger(listener, types) {\n        this._impl_.addTrigger(this, listener, types);\n    }\n    addKeyTrigger(listener, keys) {\n        this._impl_.addKeyTrigger(this, listener, keys);\n    }\n    addFieldTrigger(listener, types, fields) {\n        this._impl_.addFieldTrigger(this, listener, types, fields);\n    }\n    alert(message, title, width, height) {\n        this._impl_.alert(message, title, width, height);\n    }\n}\n\nclass MasterDetailQuery {\n    constructor(md, links, block, col) {\n        this.md = md;\n        this.links = links;\n        this.finished = 0;\n        this.detailblks = new Map();\n        this.masterblks = new Map();\n        this.root$ = block;\n        this.findblocks(block.alias, col);\n    }\n    get root() {\n        return (this.root$);\n    }\n    findblocks(block, col) {\n        let dep = this.links.get(block);\n        if (this.details(dep)) {\n            this.masterblks.set(block, false);\n            dep.details.forEach((det) => {\n                if (col == null || det.mkey.partof(col)) {\n                    this.findblocks(det.block.alias, null);\n                    this.detailblks.set(det.block.alias, 0);\n                }\n            });\n        }\n    }\n    waitfor(block) {\n        this.detailblks.set(block.alias, 1);\n    }\n    ready(block) {\n        this.masterblks.set(block.alias, true);\n        let dep = this.links.get(block.alias);\n        if (this.detailblks.size == 0) {\n            this.md.finished();\n            return;\n        }\n        if (this.details(dep))\n            this.execute(dep);\n        else\n            this.state(block, 2);\n    }\n    done(block) {\n        this.finished++;\n        this.state(block, 3);\n        if (this.finished == this.detailblks.size)\n            this.md.finished();\n    }\n    failed(block) {\n        this.remove(block);\n        if (this.finished == this.detailblks.size)\n            this.md.finished();\n    }\n    remove(block) {\n        if (this.detailblks.get(block.alias) < 2) {\n            this.detailblks.delete(block.alias);\n            let dep = this.links.get(block.alias);\n            if (dep != null && dep.details != null) {\n                dep.details.forEach((det) => { this.remove(det.block); });\n            }\n        }\n        else {\n            this.finished++;\n            this.state(block, 3);\n        }\n    }\n    status(state) {\n        console.log(state + \" finished: \" + this.finished + \" \" + this.detailblks.size);\n        this.detailblks.forEach((state, blk) => { console.log(blk + \" \" + state); });\n    }\n    execute(dep) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (dep.details != null) {\n                for (let i = 0; i < dep.details.length; i++) {\n                    if (this.isready(dep.details[i].block)) {\n                        dep.details[i].block.executeqry();\n                        this.state(dep.details[i].block, 1);\n                    }\n                }\n            }\n        });\n    }\n    isready(block) {\n        let ready = true;\n        let dep = this.links.get(block.alias);\n        if (dep.masters != null) {\n            dep.masters.forEach((master) => {\n                let alias = master.block.alias;\n                let ok = this.masterblks.get(alias);\n                if (ok == null || !ok)\n                    ready = false;\n            });\n        }\n        return (ready);\n    }\n    state(block, state) {\n        this.detailblks.set(block.alias, state);\n    }\n    details(dep) {\n        return (dep != null && dep.details != null);\n    }\n}\n\nclass MasterDetail {\n    constructor(form) {\n        this.form = null;\n        this.master$ = null;\n        this.waiting = null;\n        this.query = null;\n        this.blocks = new Map();\n        this.links = new Map();\n        this.defined = new Map();\n        this.form = form;\n    }\n    get master() {\n        return (this.master$);\n    }\n    set master(block) {\n        this.master$ = block;\n    }\n    getRoot(block) {\n        if (block == null)\n            block = Array.from(this.blocks)[0][\"1\"];\n        let dep = this.links.get(block.alias);\n        while (dep != null && dep.masters != null && dep.masters.length > 0) {\n            block = dep.masters[0].block;\n            dep = this.links.get(block.alias);\n        }\n        return (block);\n    }\n    cleardetails(block) {\n        let dep = this.links.get(block.alias);\n        if (dep != null && dep.details != null)\n            dep.details.forEach((det) => this.clear(det.block));\n    }\n    clear(block) {\n        block.clear();\n        let dep = this.links.get(block.alias);\n        if (dep != null && dep.details != null)\n            dep.details.forEach((det) => this.clear(det.block));\n    }\n    sync(block, col) {\n        let dep = this.links.get(block.alias);\n        if (dep != null) {\n            if (!dep.keycols.has(col))\n                return;\n            this.master = block;\n            this.query = new MasterDetailQuery(this, this.links, block, col);\n            this.query.ready(block);\n        }\n    }\n    enterquery(block) {\n        this.master$ = block;\n        this.enterdetailquery(block);\n    }\n    enterdetailquery(block) {\n        let dep = this.links.get(block.alias);\n        if (dep != null && dep.details != null) {\n            dep.details.forEach((det) => {\n                if (det.block.usage.query)\n                    det.block.enterqry();\n                this.enterdetailquery(det.block);\n            });\n        }\n    }\n    clearfilters(block) {\n        block.searchfilter = [];\n        let dep = this.links.get(block.alias);\n        if (dep != null && dep.details != null) {\n            dep.details.forEach((det) => {\n                det.block.searchfilter = [];\n                this.clearfilters(det.block);\n            });\n        }\n    }\n    // Build subquery from details\n    getDetailQuery() {\n        return __awaiter(this, void 0, void 0, function* () {\n            let block = this.master$;\n            this.master$ = null;\n            if (block == null)\n                return (null);\n            let dep = this.links.get(block.alias);\n            let sub = {\n                lev: 0,\n                sql: null,\n                subs: [],\n                mcols: [],\n                dcols: [],\n                bindvalues: [],\n                mtab: null\n            };\n            if (dep != null && dep.details != null) {\n                for (let i = 0; i < dep.details.length; i++)\n                    yield this.subquery(sub, dep.details[i]);\n            }\n            let subq = null;\n            this.buildsubquery(sub);\n            if (sub.sql.length > 0) {\n                let bindvals = [];\n                sub.bindvalues.forEach((bindv) => {\n                    bindvals.push({\n                        name: bindv.name,\n                        type: Column$1[bindv.type].toLowerCase(),\n                        value: bindv.value\n                    });\n                });\n                subq = { sql: sub.sql, bindvalues: bindvals };\n            }\n            return (subq);\n        });\n    }\n    subquery(parent, detail) {\n        var _a, _b;\n        return __awaiter(this, void 0, void 0, function* () {\n            let mkey = detail.mkey;\n            let dkey = detail.dkey;\n            let block = detail.block;\n            if (block.querymode) {\n                let sub = {\n                    sql: null,\n                    subs: [],\n                    bindvalues: [],\n                    lev: +parent.lev + 1,\n                    mcols: mkey.columns(),\n                    dcols: dkey.columns(),\n                    mtab: (_b = (_a = block.data) === null || _a === void 0 ? void 0 : _a.table) === null || _b === void 0 ? void 0 : _b.name\n                };\n                parent.subs.push(sub);\n                let fields = block.records[0].fields;\n                let stmt = block.data.parseQuery([], null, fields);\n                let event = new SQLTriggerEvent(block.alias, 0, stmt);\n                if (!(yield block.invokeTriggers(Trigger.PreQuery, event)))\n                    return;\n                block.cancelqry();\n                if (block.searchfilter.length > 0) {\n                    stmt.order = null;\n                    stmt.columns = dkey.columns();\n                    sub.sql = stmt.build().sql;\n                    sub.bindvalues = stmt.getCondition().getAllBindvalues();\n                }\n                let dep = this.links.get(block.alias);\n                if (dep != null && dep.details != null) {\n                    for (let i = 0; i < dep.details.length; i++)\n                        yield this.subquery(sub, dep.details[i]);\n                }\n            }\n        });\n    }\n    buildsubquery(sub) {\n        let children = false;\n        for (let i = 0; i < sub.subs.length; i++) {\n            this.buildsubquery(sub.subs[i]);\n            if (sub.subs[i].sql != null && sub.subs[i].sql.length > 0)\n                children = true;\n        }\n        let sql = \"\";\n        let and = false;\n        let where = false;\n        if (sub.sql != null) {\n            and = true;\n        }\n        else if (children && sub.mtab != null) {\n            where = true;\n            sub.sql = \"select \" + sub.dcols + \" from \" + sub.mtab;\n        }\n        if (children) {\n            for (let i = 0; i < sub.subs.length; i++) {\n                if (sub.subs[i].sql != null && sub.subs[i].sql.length > 0) {\n                    if (and)\n                        sql += \" and \";\n                    if (where)\n                        sql += \" where \";\n                    sql += \"(\" + sub.subs[i].mcols + \") in (\";\n                    sql += sub.subs[i].sql;\n                    sql += \")\";\n                    sub.subs[i].bindvalues.forEach((bind) => { sub.bindvalues.push(bind); });\n                    and = true;\n                    where = false;\n                }\n            }\n        }\n        if (sub.sql == null)\n            sub.sql = sql;\n        else\n            sub.sql += sql;\n    }\n    querydetails(block, init, ready) {\n        if (init == null)\n            init = false;\n        if (init) {\n            if (this.query != null) {\n                this.waiting = block;\n                return;\n            }\n            this.master = block;\n            this.query = new MasterDetailQuery(this, this.links, block);\n        }\n        if (ready)\n            this.query.ready(block);\n        else\n            this.query.waitfor(block);\n    }\n    done(block, success) {\n        if (success)\n            this.query.done(block);\n        else\n            this.query.failed(block);\n    }\n    finished() {\n        let block = null;\n        if (this.waiting != null) {\n            block = this.waiting;\n            this.waiting = null;\n            this.query = new MasterDetailQuery(this, this.links, block);\n            this.query.ready(block);\n        }\n        else {\n            this.query = null;\n            this.master = null;\n        }\n    }\n    getKeys(block) {\n        let keys = [];\n        let dep = this.links.get(block.alias);\n        if (dep != null && dep.masters != null) {\n            dep.masters.forEach((master) => {\n                let c = 0;\n                let record = master.block.record;\n                master.mkey.columns().forEach((col) => {\n                    let val = null;\n                    if (record < master.block.datarows)\n                        val = master.block.getValue(record, col);\n                    master.dkey.set(c++, val);\n                });\n                keys.push(master.dkey);\n            });\n        }\n        return (keys);\n    }\n    addBlock(block) {\n        this.blocks.set(block.alias, block);\n    }\n    addKeys(block, keys) {\n        this.defined.set(block.alias, keys);\n    }\n    addJoins(joins) {\n        if (joins == null)\n            return;\n        joins.forEach((join) => {\n            let skip = false;\n            let master = this.blocks.get(join.master.alias);\n            let detail = this.blocks.get(join.detail.alias);\n            if (master == null) {\n                skip = true;\n                console.log(\"Master block \" + join.master.alias + \" in join on form \" + this.form.name + \" does not exist\");\n            }\n            if (detail == null) {\n                skip = true;\n                console.log(\"Detail block \" + join.detail.alias + \" in join on form \" + this.form.name + \" does not exist\");\n            }\n            if (!skip) {\n                let keys = null;\n                keys = this.defined.get(join.master.alias);\n                let mkey = keys === null || keys === void 0 ? void 0 : keys.get(join.master.key);\n                keys = this.defined.get(join.detail.alias);\n                let dkey = keys === null || keys === void 0 ? void 0 : keys.get(join.detail.key);\n                if (mkey == null) {\n                    skip = true;\n                    console.log(\"Join on form \" + this.form.name + \". Cannot find key \" + join.master.key + \" on block \" + join.master.alias);\n                }\n                if (dkey == null) {\n                    skip = true;\n                    console.log(\"Join on form \" + this.form.name + \". Cannot find key \" + join.detail.key + \" on block \" + join.detail.alias);\n                }\n                if (!skip) {\n                    let mdep = this.links.get(master.alias);\n                    if (mdep == null) {\n                        mdep = { keycols: new Set() };\n                        this.links.set(master.alias, mdep);\n                    }\n                    if (mdep.details == null)\n                        mdep.details = [];\n                    dkey.columns().forEach((col) => { mdep.keycols.add(col); });\n                    mdep.details.push({ block: detail, mkey: mkey, dkey: dkey });\n                    let ddep = this.links.get(detail.alias);\n                    if (ddep == null) {\n                        ddep = { keycols: new Set() };\n                        this.links.set(detail.alias, ddep);\n                    }\n                    if (ddep.masters == null)\n                        ddep.masters = [];\n                    ddep.masters.push({ block: master, mkey: mkey, dkey: dkey });\n                }\n            }\n        });\n    }\n}\n\nclass FormImpl {\n    constructor(form$) {\n        this.form$ = form$;\n        this.blocks = [];\n        this.cancelled = false;\n        this.initiated$ = false;\n        this.fields$ = [];\n        this.triggers = new Triggers();\n        this.parameters = new Map();\n        this.stack = new Map();\n        this.blkindex = new Map();\n        this.creationerror = false;\n        this.guid$ = FormImpl.id++;\n        let utils = new Utils();\n        this.name$ = utils.getName(form$);\n    }\n    get guid() {\n        return (this.guid$);\n    }\n    get form() {\n        return (this.form$);\n    }\n    get name() {\n        return (this.name$);\n    }\n    set path(path) {\n        this.path$ = path;\n    }\n    get path() {\n        return (this.path$);\n    }\n    set title(title) {\n        this.title$ = title;\n    }\n    get title() {\n        return (this.title$);\n    }\n    get block() {\n        return (this.block$);\n    }\n    enterquery(force) {\n        var _a;\n        (_a = this.depencies.getRoot()) === null || _a === void 0 ? void 0 : _a.keyentqry(force);\n    }\n    executequery(force) {\n        var _a;\n        (_a = this.depencies.getRoot()) === null || _a === void 0 ? void 0 : _a.keyexeqry(force);\n    }\n    get popup() {\n        return (this.win != null);\n    }\n    getCurrentRow(block) {\n        let blk = this.getBlock(block);\n        if (blk == null)\n            return (0);\n        return (blk.row);\n    }\n    getCurrentRecord(block) {\n        let blk = this.getBlock(block);\n        if (blk == null)\n            return (0);\n        return (blk.record);\n    }\n    getBlock(bname) {\n        return (this.blkindex.get(bname.toLowerCase()));\n    }\n    clear() {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            for (let i = 0; i < this.blocks.length; i++) {\n                let event = new KeyTriggerEvent(Origin.Form, this.blocks[i].alias, null, keymap.clearblock, null);\n                yield this.blocks[i].sendkey(event, keymap.clearblock);\n            }\n            if (this.blocks.length > 0)\n                this.block = this.blocks[0];\n            (_a = this.block) === null || _a === void 0 ? void 0 : _a.focus();\n            return (true);\n        });\n    }\n    enableall() {\n        this.blocks.forEach((block) => { block.enableall(); });\n    }\n    disableall() {\n        this.blocks.forEach((block) => { block.disableall(); });\n    }\n    focus() {\n        var _a;\n        (_a = this.block) === null || _a === void 0 ? void 0 : _a.focus();\n    }\n    set block(block) {\n        var _a;\n        if (this.block != null && this.block != block)\n            if (!((_a = this.block) === null || _a === void 0 ? void 0 : _a.validate()))\n                return;\n        this.block$ = block;\n    }\n    getChain() {\n        if (this.next == null)\n            return (this);\n        return (this.next.getChain());\n    }\n    initiated() {\n        return (this.initiated$);\n    }\n    setMenu(menu) {\n        if (this.app == null) {\n            this.menu$ = menu;\n            return;\n        }\n        this.app.deletemenu(this.menu$);\n        this.ddmenu = this.app.createmenu(menu);\n        this.app.showMenu(this.ddmenu);\n        this.menu$ = menu;\n    }\n    getMenu() {\n        return (this.menu$);\n    }\n    getApplication() {\n        return (this.app);\n    }\n    setRoot(root) {\n        this.root = root;\n    }\n    setParent(parent) {\n        this.parent = parent;\n    }\n    setApplication(app) {\n        this.app = app;\n        if (this.menu$ == null)\n            this.menu$ = new DefaultMenu();\n        this.conn = app.appstate.connection;\n        this.ddmenu = app.createmenu(this.menu$);\n    }\n    getInstanceID() {\n        return (this.inst);\n    }\n    setInstanceID(inst) {\n        this.inst = inst;\n    }\n    setModalWindow(win) {\n        this.win = win;\n    }\n    getModalWindow() {\n        return (this.win);\n    }\n    setCallback(func) {\n        this.callbackfunc = func;\n    }\n    setParameters(params) {\n        if (params != null)\n            this.parameters = params;\n        else\n            this.parameters = new Map();\n    }\n    getParameters() {\n        return (this.parameters);\n    }\n    getDropDownMenu() {\n        return (this.ddmenu);\n    }\n    onCommit() {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.blocks.forEach((blk) => { blk.removeLocks(); });\n        });\n    }\n    execute(stmt, firstrow, firstcolumn) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let response = yield this.app.appstate.connection.invokestmt(stmt);\n            if (response[\"status\"] == \"failed\")\n                this.alert(JSON.stringify(response), \"Execute SQL Failed\");\n            let rows = response[\"rows\"];\n            if (rows == null) {\n                if (firstcolumn)\n                    return (null);\n                return ([]);\n            }\n            if (!firstrow)\n                return (rows);\n            let row = [];\n            if (rows.length > 0)\n                row = rows[0];\n            if (!firstcolumn)\n                return (row);\n            let columns = Object.keys(row);\n            if (columns.length == 0)\n                return (null);\n            return (row[columns[0]]);\n        });\n    }\n    newForm(container) {\n        let utils = new Utils();\n        this.depencies = new MasterDetail(this);\n        // Add all form key triggers\n        let fktriggers = TriggerDefinitions.getFormKeyTriggers(this.name);\n        fktriggers.forEach((def) => { this.triggers.addTrigger(this.form, def.func, def.trigger, def.field, def.key); });\n        // Create blocks\n        let blockdef = BlockDefinitions.getBlocks(this.name);\n        blockdef.forEach((bdef) => { this.createBlock(bdef); });\n        if (this.creationerror)\n            return;\n        // DatabaseUsage for this form\n        let fusage = DatabaseDefinitions.getFormUsage(this.name);\n        // Merge form, block and block usage. Form usage overides\n        blockdef.forEach((bdef) => { this.setBlockUsage(fusage, bdef); });\n        container.finish();\n        // Get all fields per block\n        let bfields = new Map();\n        container.getBlocks().forEach((cb) => {\n            let block = this.blkindex.get(cb.name);\n            if (block == null) {\n                let dblk = new Block();\n                block = dblk[\"_impl_\"];\n                this.blocks.push(block);\n                this.blkindex.set(cb.name, block);\n                block.form = this;\n                block.alias = cb.name;\n                block.setApplication(this.app);\n                console.log(\"Block \" + cb.name + \" auto-created\");\n            }\n            bfields.set(block.alias, cb.fields);\n            cb.records.forEach((rec) => { block.addRecord(new Record(rec.row, rec.fields, rec.index)); });\n        });\n        this.blkindex.forEach((block) => {\n            this.depencies.addBlock(block);\n            block.setMasterDetail(this.depencies);\n            // Finish setup for each block\n            let keydefs = BlockDefinitions.getKeys(block.clazz);\n            let tabdef = utils.clone(TableDefinitions.get(block.clazz));\n            // Column definitions\n            let colindex = ColumnDefinitions.getIndex(block.clazz);\n            // Columns mapped to fields. Form definitions overrides\n            let colfields = FieldDefinitions.getColumnIndex(block.clazz);\n            let colffields = FieldDefinitions.getFormColumnIndex(this.name, block.alias);\n            colffields.forEach((def, fld) => { colfields.set(fld, def); });\n            // Create keys and decide on primary\n            let pkey = null;\n            let keys = new Map();\n            keydefs.forEach((kdef) => {\n                let key = keys.get(kdef.name);\n                if (key == null) {\n                    key = new Key(kdef.name);\n                    keys.set(kdef.name, key);\n                    kdef.columns.forEach((col) => {\n                        let fdef = colfields.get(col);\n                        if (fdef != null)\n                            col = fdef.name;\n                        key.addColumn(col);\n                    });\n                    if (kdef.unique && pkey == null)\n                        pkey = key;\n                    if (kdef.name.startsWith(\"primary\"))\n                        pkey = key;\n                }\n                else {\n                    console.log(\"key \" + kdef.name + \" is defined twice\");\n                }\n            });\n            this.depencies.addKeys(block, keys);\n            let fields = [];\n            let sorted = [];\n            // List of data-fields. First pkey\n            if (pkey != null) {\n                pkey.columns().forEach((part) => {\n                    let fname = part;\n                    let fdef = colfields.get(part);\n                    if (fdef != null)\n                        fname = fdef.name;\n                    sorted.push(colindex.get(part));\n                    fields.push(fname);\n                });\n            }\n            // Then other columns. First gather all definitions\n            let columns = ColumnDefinitions.get(block.clazz);\n            let fieldidx = FieldDefinitions.getFieldIndex(block.clazz);\n            let ffieldidx = FieldDefinitions.getFormFieldIndex(this.name, block.alias);\n            // Override by form\n            ffieldidx.forEach((def, fld) => { fieldidx.set(fld, def); });\n            columns.forEach((column) => {\n                let nonkey = true;\n                if (pkey != null && pkey.partof(column.name))\n                    nonkey = false;\n                if (nonkey) {\n                    sorted.push(column);\n                    let fname = null;\n                    let field = colfields.get(column.name);\n                    if (field != null)\n                        fname = field.name;\n                    else {\n                        field = fieldidx.get(column.name);\n                        if (field == null)\n                            fname = column.name;\n                        else {\n                            fname = field.name;\n                            field.column = column.name;\n                        }\n                    }\n                    fields.push(fname);\n                }\n            });\n            columns = sorted;\n            // Then other defined fields (block or form)\n            fieldidx.forEach((field) => {\n                if (!fields.includes(field.name, 0))\n                    fields.push(field.name);\n            });\n            // Field overrides.\n            let overideidx = FieldDefinitions.getFieldIndex(block.clazz);\n            // Set field properties and add undefined fields\n            let bfieldlist = bfields.get(block.alias);\n            if (bfieldlist != null)\n                bfieldlist.forEach((inst) => {\n                    let fdef = utils.clone(fieldidx.get(inst.name));\n                    if (fdef == null) {\n                        // Auto create field definition\n                        fdef = { name: inst.name };\n                        fieldidx.set(inst.name, fdef);\n                        if (!fields.includes(inst.name, 0))\n                            fields.push(inst.name);\n                    }\n                    if (fdef.column == null) {\n                        // Map to column, unless column is mapped otherwise\n                        let cdef = colindex.get(fdef.name);\n                        if (cdef != null && colfields.get(fdef.name) == null)\n                            fdef.column = fdef.name;\n                    }\n                    // Save default definition\n                    fieldidx.set(inst.name, fdef);\n                    // Override def\n                    if (inst.id.length > 0) {\n                        let id = inst.name + \".\" + inst.id;\n                        let iddef = utils.clone(FieldDefinitions.getFormFieldOverride(this.name, block.alias, id));\n                        if (iddef == null)\n                            iddef = utils.clone(FieldDefinitions.getFieldOverride(block.clazz, id));\n                        if (iddef != null) {\n                            overideidx.set(id, iddef);\n                            iddef.column = fdef.column;\n                            fdef = iddef;\n                        }\n                    }\n                    let cdef = colindex.get(fdef.column);\n                    if (fdef.column != null && !fdef.hasOwnProperty(\"case\"))\n                        fdef.case = cdef.case;\n                    if (fdef.column != null && !fdef.hasOwnProperty(\"default\"))\n                        fdef.default = cdef.default;\n                    if (fdef.column != null && !fdef.hasOwnProperty(\"mandatory\"))\n                        fdef.mandatory = cdef.mandatory;\n                    if (fdef.type == null)\n                        fdef.type = FieldImplementation.guess(cdef === null || cdef === void 0 ? void 0 : cdef.type);\n                    if (fdef.fieldoptions == null)\n                        fdef.fieldoptions = {};\n                    if (!block.usage.update)\n                        fdef.fieldoptions.update = false;\n                    inst.definition = fdef;\n                    if (inst.parent.definition == null)\n                        inst.parent.setDefinition(fdef, false);\n                });\n            let def = new Map();\n            let ovf = new Map();\n            let lovs = new Map();\n            let idlovs = new Map();\n            def = LOVDefinitions.getblock(block.name);\n            def.forEach((lov, fld) => {\n                lov.inst = block;\n                lovs.set(fld, lov);\n            });\n            def = LOVDefinitions.getblockid(block.name);\n            def.forEach((lov, fld) => {\n                lov.inst = block;\n                lovs.set(fld, lov);\n            });\n            ovf = LOVDefinitions.getform(this.name, block.alias);\n            ovf.forEach((lov, fld) => {\n                lov.inst = this.form;\n                lovs.set(fld, lov);\n            });\n            ovf = LOVDefinitions.getidform(this.name, block.alias);\n            ovf.forEach((lov, fld) => {\n                lov.inst = this.form;\n                idlovs.set(fld, lov);\n            });\n            block.setListOfValues(lovs);\n            block.setIdListOfValues(idlovs);\n            // Form triggers\n            let ftriggers = TriggerDefinitions.getFormFieldTriggers(this.name, null);\n            // Field triggers for block\n            let bftriggers = TriggerDefinitions.getFieldTriggers(block.name);\n            let fftriggers = TriggerDefinitions.getFormFieldTriggers(this.name, block.alias);\n            // Form overrides\n            ftriggers.forEach((def, trg) => { bftriggers.set(trg, def); });\n            fftriggers.forEach((def, trg) => { bftriggers.set(trg, def); });\n            bftriggers.forEach((def) => {\n                if (!def.blktrg && def.block == block.alias) {\n                    // Blocktrigger defined on form\n                    block[\"triggers\"].addTrigger(this.form, def.func, def.trigger, def.field);\n                }\n                else {\n                    if (!def.blktrg)\n                        this.triggers.addTrigger(this.form, def.func, def.trigger, def.field);\n                    else\n                        block[\"triggers\"].addTrigger(block.block, def.func, def.trigger, def.field);\n                }\n            });\n            // Key triggers for block\n            let bktriggers = TriggerDefinitions.getKeyTriggers(block.name);\n            // delete block-triggers if defined on form\n            fktriggers.forEach((_def, trg) => { bktriggers.delete(trg); });\n            bktriggers.forEach((def) => { block[\"triggers\"].addTrigger(block.block, def.func, def.trigger, def.field, def.key); });\n            // Create data-backing table\n            let table = null;\n            let rows = block.records.length;\n            if (tabdef != null)\n                table = new Table(this.conn, tabdef, pkey, columns, fieldidx, rows);\n            block.data = new FieldData(block, table, fields, fieldidx);\n            // Start form\n            block.ready = true;\n        });\n        // Get all fields on form\n        this.fields$ = container.fields;\n        if (this.blocks.length > 0)\n            this.block$ = this.blocks[0];\n        this.groupfields();\n        this.blocks.forEach((block) => {\n            if (block.records.length > 0)\n                block.records[0].enable(true);\n        });\n        this.depencies.addJoins(JOINDefinitions.get(this.name));\n        this.app.newForm(this);\n        this.initiated$ = true;\n        if (this.fields$.length > 0)\n            this.fields$[0].focus();\n    }\n    showform(form, destroy, parameters) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.validate())\n                return;\n            if (this.win == null) {\n                yield this.app.showform(form, destroy, parameters);\n            }\n            else {\n                yield this.replaceform(form, destroy, parameters);\n            }\n        });\n    }\n    replaceform(form, destroy, parameters) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let utils = new Utils();\n            let name = utils.getName(form);\n            let id = this.parent.stack.get(name);\n            this.onHide();\n            // newform\n            if (destroy)\n                this.app.closeform(this, destroy);\n            // create\n            if (id == null) {\n                id = this.app.getNewInstance(form);\n                this.parent.stack.set(id.name, id);\n            }\n            this.parent.next = id.impl;\n            id.impl.setParent(this.parent);\n            let inst = this.app.getInstance(id);\n            yield this.app.preform(id.impl, parameters, inst, false);\n            if (this.win != null) {\n                this.win.newForm(inst);\n                id.impl.setRoot(this.root);\n            }\n            else {\n                id.impl.setRoot(this);\n                this.app.showinstance(inst);\n            }\n        });\n    }\n    callform(form, destroy, parameters) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let utils = new Utils();\n            let name = utils.getName(form);\n            let id = this.stack.get(name);\n            this.onHide();\n            // newform\n            if (id != null && destroy) {\n                this.app.closeform(id.impl, destroy);\n                id = null;\n            }\n            // create\n            if (id == null) {\n                id = this.app.getNewInstance(form);\n                if (id == null)\n                    return (null);\n                this.stack.set(name, id);\n            }\n            this.next = id.impl;\n            id.impl.setParent(this);\n            let inst = this.app.getInstance(id);\n            yield this.app.preform(id.impl, parameters, inst, false);\n            if (this.win != null) {\n                this.win.newForm(inst);\n                id.impl.setRoot(this.root);\n            }\n            else {\n                id.impl.setRoot(this);\n                this.app.showinstance(inst);\n            }\n            return (id.impl);\n        });\n    }\n    wasCancelled() {\n        return (this.cancelled);\n    }\n    cancel() {\n        this.cancelled = true;\n        this.close(true);\n    }\n    onClose(impl, cancelled) {\n        this.next = null;\n        try {\n            if (this.callbackfunc != null)\n                this.form[this.callbackfunc.name](impl.form, cancelled);\n        }\n        catch (error) {\n            console.log(error);\n        }\n        if (cancelled && this.parent != null)\n            this.parent.onClose(this, cancelled);\n    }\n    close(destroy) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let win = (this.win != null);\n            let menu = (this.root == null);\n            let root = (this.parent == null);\n            if (!this.cancelled && !destroy && !(yield this.validate()))\n                return;\n            this.next = null;\n            if (this.parent != null)\n                this.parent.onClose(this, this.cancelled);\n            if (this.cancelled) {\n                this.cancelled = false;\n                if (menu) {\n                    //chain, started from \"menu\", was cancelled\n                    this.app.closeform(this, true);\n                }\n                else {\n                    //chain, started from form, was cancelled\n                    this.parent.stack.delete(this.name);\n                    this.app.closeInstance(this.inst, true);\n                    this.app.showTitle(this.root.title);\n                }\n                if (!menu)\n                    this.root.onShow();\n                return;\n            }\n            if (!win) {\n                //Normal behaivior\n                this.app.closeform(this, destroy);\n                if (!root)\n                    this.parent.onShow();\n                return;\n            }\n            if (win && root) {\n                //Root window\n                this.app.closeform(this, destroy);\n                if (!root)\n                    this.parent.onShow();\n                this.win.closeWindow();\n                return;\n            }\n            //child closed\n            this.app.closeInstance(this.inst, destroy);\n            if (destroy)\n                this.parent.stack.delete(this.name);\n            let pinst = this.parent.getInstanceID();\n            this.app.showTitle(this.parent.title);\n            if (pinst != null) {\n                //Parent is modal\n                let inst = this.app.getInstance(pinst);\n                this.win.newForm(inst);\n            }\n            else\n                this.win.closeWindow();\n            this.parent.onShow();\n        });\n    }\n    getCallStack() {\n        let stack = [];\n        this.stack.forEach((id) => {\n            stack.push(id.impl.form);\n        });\n        return (stack);\n    }\n    clearStack() {\n        this.stack.forEach((id) => {\n            id.impl.clearStack();\n            if (id.ref != null)\n                this.app.closeInstance(id, true);\n        });\n        this.stack.clear();\n    }\n    createBlock(blockdef) {\n        let impl = this.blkindex.get(blockdef.alias);\n        if (impl != null) {\n            console.log(\"Block alias \" + blockdef.alias + \" defined twice\");\n            return;\n        }\n        let block = null;\n        if (blockdef.prop != null) {\n            block = this.form[blockdef.prop];\n            if (block == null && blockdef.component != null) {\n                block = new blockdef.component();\n                this.form[blockdef.prop] = block;\n            }\n        }\n        else {\n            if (blockdef.component != null)\n                block = new blockdef.component();\n        }\n        if (block != null)\n            impl = block[\"_impl_\"];\n        if (impl == null) {\n            this.creationerror = true;\n            console.log(this.name + \" cannot create instance of \" + blockdef.alias + \" bailing out\");\n            return;\n        }\n        let cname = block.constructor.name;\n        if (!(impl instanceof BlockImpl)) {\n            this.creationerror = true;\n            console.log(\"component: \" + cname + \" is not an instance of block bailing out\");\n            return;\n        }\n        let alias = blockdef.alias;\n        if (alias == null) {\n            alias = block.constructor.name;\n            alias = BlockDefinitions.getDefaultAlias(alias);\n        }\n        alias = alias.toLowerCase();\n        impl.alias = alias;\n        blockdef.alias = alias;\n        this.blocks.push(impl);\n        this.blkindex.set(alias, impl);\n        impl.form = this;\n        impl.setApplication(this.app);\n    }\n    setBlockUsage(fusage, blockdef) {\n        let block = this.blkindex.get(blockdef.alias);\n        let usage = {};\n        let pusage = blockdef.databaseopts;\n        let dusage = DatabaseDefinitions.getBlockDefault(block.clazz);\n        if (dusage == null)\n            dusage = {};\n        if (pusage == null)\n            pusage = {};\n        if (fusage == null)\n            fusage = {};\n        usage = DBUsage.merge(pusage, dusage);\n        usage = DBUsage.override(fusage, usage);\n        usage = DBUsage.complete(usage);\n        block.usage = usage;\n    }\n    // Sort fields by group and set tabindex\n    groupfields(groups) {\n        let seq = 1;\n        if (groups == null)\n            groups = [];\n        let index = new Map();\n        this.fields$.forEach((field) => {\n            let group = index.get(field.group);\n            if (group == null) {\n                group = [];\n                index.set(field.group, group);\n                let exists = false;\n                for (let i = 0; i < groups.length; i++) {\n                    if (groups[i] == field.group) {\n                        exists = true;\n                        break;\n                    }\n                }\n                if (!exists)\n                    groups.push(field.group);\n            }\n            group.push(field);\n        });\n        groups.forEach((name) => {\n            let group = index.get(name);\n            if (group != null) {\n                group.forEach((field) => { field.seq = seq++; });\n            }\n        });\n        this.fields$ = this.fields$.sort((a, b) => { return (a.seq - b.seq); });\n        let blocks = new Map();\n        this.fields$.forEach((field) => {\n            let fields = blocks.get(field.block);\n            if (fields == null) {\n                fields = [];\n                blocks.set(field.block, fields);\n            }\n            fields.push(field);\n        });\n        blocks.forEach((fields, bname) => { this.blkindex.get(bname).setFields(fields); });\n    }\n    validate() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.block == null)\n                return (true);\n            else\n                return (yield this.block.validate());\n        });\n    }\n    onShow() {\n    }\n    onHide() {\n    }\n    sendkey(event, key) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            if (key == keymap.close) {\n                yield this.close(false);\n                return (true);\n            }\n            if (event == null)\n                event = new KeyTriggerEvent(Origin.Form, null, null, keymap.clearblock, null);\n            return (yield ((_a = this.block) === null || _a === void 0 ? void 0 : _a.sendkey(event, key)));\n        });\n    }\n    addTrigger(instance, func, types) {\n        this.triggers.addTrigger(instance, func, types);\n    }\n    addKeyTrigger(instance, func, keys) {\n        this.triggers.addTrigger(instance, func, Trigger.Key, null, keys);\n    }\n    addFieldTrigger(instance, func, types, fields, keys) {\n        this.triggers.addTrigger(instance, func, types, fields, keys);\n    }\n    onEvent(event, field, type, key) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.app == null)\n                return;\n            if (type == \"focus\")\n                this.block = this.blkindex.get(field.block);\n            if (type == \"key\" && key == keymap.prevfield) {\n                if (event[\"preventDefault\"] != null)\n                    event.preventDefault();\n                let row = field.row;\n                let seq = field.seq - 1;\n                let block = field.block;\n                for (let i = 0; i < this.fields$.length; i++) {\n                    if (--seq < 0)\n                        seq = this.fields$.length - 1;\n                    if (this.fields$[seq].row == row && this.fields$[seq].block == block) {\n                        if (this.fields$[seq].enabled) {\n                            this.fields$[seq].focus();\n                            break;\n                        }\n                    }\n                }\n            }\n            if (type == \"key\" && key == keymap.nextfield) {\n                if (event[\"preventDefault\"] != null)\n                    event.preventDefault();\n                let row = field.row;\n                let seq = field.seq - 1;\n                let block = field.block;\n                for (let i = 0; i < this.fields$.length; i++) {\n                    if (++seq >= this.fields$.length)\n                        seq = 0;\n                    if (this.fields$[seq].row == row && this.fields$[seq].block == block) {\n                        if (this.fields$[seq].enabled) {\n                            this.fields$[seq].focus();\n                            break;\n                        }\n                    }\n                }\n            }\n            if (type == \"key\" && key == keymap.prevblock) {\n                if (event[\"preventDefault\"] != null)\n                    event.preventDefault();\n                let seq = field.seq - 1;\n                let block = field.block;\n                let row = 0;\n                let next = \"\";\n                for (let i = 0; i < this.fields$.length; i++) {\n                    if (--seq < 0)\n                        seq = this.fields$.length - 1;\n                    if (this.fields$[seq].block != block) {\n                        let blk = this.fields$[seq].block;\n                        if (blk != next) {\n                            let nb = this.blkindex.get(blk);\n                            let nf = nb.field;\n                            if (nf.enabled) {\n                                nf.focus();\n                                break;\n                            }\n                            next = blk;\n                            row = nb.row;\n                        }\n                        if (this.fields$[seq].row == row && this.fields$[seq].enabled) {\n                            this.fields$[seq].focus();\n                            break;\n                        }\n                    }\n                }\n            }\n            if (type == \"key\" && key == keymap.nextblock) {\n                if (event[\"preventDefault\"] != null)\n                    event.preventDefault();\n                let seq = field.seq - 1;\n                let block = field.block;\n                let row = 0;\n                let next = \"\";\n                for (let i = 0; i < this.fields$.length; i++) {\n                    if (++seq >= this.fields$.length)\n                        seq = 0;\n                    if (this.fields$[seq].block != block) {\n                        let blk = this.fields$[seq].block;\n                        if (blk != next) {\n                            let nb = this.blkindex.get(blk);\n                            let nf = nb.field;\n                            if (nf.enabled) {\n                                nf.focus();\n                                break;\n                            }\n                            next = blk;\n                            row = nb.row;\n                        }\n                        if (this.fields$[seq].row == row && this.fields$[seq].enabled) {\n                            this.fields$[seq].focus();\n                            break;\n                        }\n                    }\n                }\n            }\n            if (type == \"key\" && key == keymap.clearform) {\n                let event = new KeyTriggerEvent(Origin.Form, null, null, keymap.clearform, null);\n                if (!(yield this.invokeTriggers(Trigger.Key, event, keymap.clearform)))\n                    return (false);\n                this.clear();\n            }\n        });\n    }\n    invokeTriggers(type, event, key) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return (yield this.triggers.invokeTriggers(type, event, key));\n        });\n    }\n    invokeFieldTriggers(type, field, event, key) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return (yield this.triggers.invokeFieldTriggers(type, field, event, key));\n        });\n    }\n    alert(msg, title, width, height) {\n        MessageBox.show(this.app, msg, title, width, height);\n    }\n}\nFormImpl.id = 0;\n\nclass Form {\n    // dont rename impl as it is read behind the scenes\n    constructor() {\n        this._impl_ = new FormImpl(this);\n    }\n    get name() {\n        return (this.constructor.name);\n    }\n    set title(title) {\n        this._impl_.title = title;\n    }\n    get title() {\n        return (this._impl_.title);\n    }\n    set menu(menu) {\n        this._impl_.setMenu(menu);\n    }\n    get menu() {\n        return (this._impl_.getMenu());\n    }\n    focus() {\n        this._impl_.focus();\n    }\n    get block() {\n        var _a;\n        return ((_a = this._impl_.block) === null || _a === void 0 ? void 0 : _a.block);\n    }\n    get connected() {\n        return (this._impl_.getApplication().connected);\n    }\n    groupfields(groups) {\n        this._impl_.groupfields(groups);\n    }\n    get popup() {\n        return (this._impl_.popup);\n    }\n    get colors() {\n        return (this._impl_.getApplication().config.colors);\n    }\n    getBlockFilter(block) {\n        let blk = this.getBlock(block);\n        if (blk != null && blk.searchfilter.length > 0)\n            return (this.colors.rowindicator);\n        return (\"\");\n    }\n    showRowIndicator(block, row) {\n        if (row == this.getCurrentRow(block))\n            return (true);\n        return (false);\n    }\n    getRowIndicator(block, row) {\n        if (row == this.getCurrentRow(block))\n            return (this.colors.rowindicator);\n        return (\"\");\n    }\n    getCurrentRow(block) {\n        return (this._impl_.getCurrentRow(block));\n    }\n    getCurrentRecord(block) {\n        return (this._impl_.getCurrentRecord(block));\n    }\n    getBlock(block) {\n        let impl = this._impl_.getBlock(block);\n        if (impl != null)\n            return (impl.block);\n        return (null);\n    }\n    addListOfValues(block, func, field, id) {\n        let impl = this._impl_.getBlock(block);\n        if (impl != null)\n            impl.addListOfValues(true, func, field, id);\n    }\n    newform(form, parameters) {\n        this._impl_.showform(form, true, parameters);\n    }\n    showform(form, parameters) {\n        this._impl_.showform(form, false, parameters);\n    }\n    callform(form, parameters) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let impl = yield this._impl_.callform(form, false, parameters);\n            if (impl != null)\n                return (impl.form);\n            return (null);\n        });\n    }\n    getCallStack() {\n        return (this._impl_.getCallStack());\n    }\n    clearCallStack() {\n        this._impl_.clearStack();\n    }\n    getTable(block) {\n        var _a;\n        return ((_a = this.getBlock(block)) === null || _a === void 0 ? void 0 : _a.table);\n    }\n    get parameters() {\n        return (this._impl_.getParameters());\n    }\n    getValue(block, record, field) {\n        let blk = this.getBlock(block);\n        if (blk != null)\n            return (blk.getValue(record, field));\n        return (null);\n    }\n    setValue(block, record, field, value) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let blk = this.getBlock(block);\n            if (blk != null)\n                return (yield blk.setValue(record, field, value));\n            return (false);\n        });\n    }\n    cancelled() {\n        return (this._impl_.wasCancelled());\n    }\n    clear() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return (yield this._impl_.clear());\n        });\n    }\n    cancel() {\n        this._impl_.cancel();\n    }\n    close(dismiss) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this._impl_.close(dismiss);\n        });\n    }\n    sendKey(key) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return (yield this._impl_.sendkey(null, key));\n        });\n    }\n    setCallback(func) {\n        this._impl_.setCallback(func);\n    }\n    addTrigger(func, types) {\n        this._impl_.addTrigger(this, func, types);\n    }\n    addKeyTrigger(func, keys) {\n        this._impl_.addKeyTrigger(this, func, keys);\n    }\n    enterquery(force) {\n        this._impl_.enterquery(force);\n    }\n    executequery(force) {\n        this._impl_.executequery(force);\n    }\n    prevBlock() {\n        this._impl_.block.sendkey(null, keymap.prevblock);\n    }\n    nextBlock() {\n        this._impl_.block.sendkey(null, keymap.nextblock);\n    }\n    execute(stmt, firstrow, firstcolumn) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return (this._impl_.execute(stmt, firstrow, firstcolumn));\n        });\n    }\n    addFieldTrigger(listener, types, fields) {\n        this._impl_.addFieldTrigger(this, listener, types, fields);\n    }\n    ngOnInit() {\n        this._impl_.getApplication().setContainer();\n    }\n    ngAfterViewInit() {\n        let container = this._impl_.getApplication().getContainer();\n        this._impl_.getApplication().dropContainer();\n        this._impl_.newForm(container);\n    }\n    alert(message, title, width, height) {\n        if (title == null)\n            title = this.name;\n        this._impl_.alert(message, title, width, height);\n    }\n}\nForm.ɵfac = function Form_Factory(t) { return new (t || Form)(); };\nForm.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: Form, selectors: [[\"ng-component\"]], decls: 0, vars: 0, template: function Form_Template(rf, ctx) { }, encapsulation: 2 });\n(function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(Form, [{\n            type: Component,\n            args: [{ template: '' }]\n        }], function () { return []; }, null);\n})();\n\nvar Case;\n(function (Case) {\n    Case[Case[\"upper\"] = 0] = \"upper\";\n    Case[Case[\"lower\"] = 1] = \"lower\";\n    Case[Case[\"mixed\"] = 2] = \"mixed\";\n})(Case || (Case = {}));\n\nconst _c0$6 = [\"container\"];\nclass FieldInstance {\n    constructor(ctx) {\n        this.fgroup$ = null;\n        this.valid$ = true;\n        this.lvalid = true;\n        this.enforce = false;\n        this.enabled$ = false;\n        this.readonly$ = false;\n        this.mandatory$ = false;\n        this.firstchange = true;\n        this.values = null;\n        this.container = null;\n        this.state$ = RecordState.na;\n        this.options$ = { query: true, insert: true, update: true, navigable: true };\n        this.id$ = \"\";\n        this.row$ = -1;\n        this.name$ = \"\";\n        this.block$ = \"\";\n        this.group$ = \"\";\n        this.class$ = \"\";\n        this.style$ = \"\";\n        this.size$ = null;\n        this.value$ = null;\n        this.app = ctx.app[\"_impl_\"];\n    }\n    get id() {\n        return (this.id$);\n    }\n    get row() {\n        return (this.row$);\n    }\n    set row(row) {\n        this.row$ = row;\n    }\n    set seq(seq) {\n        if (this.clazz != null)\n            this.clazz.tabindex = seq;\n    }\n    get seq() {\n        if (this.clazz == null)\n            return (0);\n        else\n            return (this.clazz.tabindex);\n    }\n    get name() {\n        return (this.name$);\n    }\n    get fname() {\n        let name = this.block$ + \".\" + this.name;\n        if (this.id.length > 0)\n            name += \".\" + this.id;\n        name += \"[\" + this.row + \"](\" + this.guid + \")\";\n        return (name);\n    }\n    set guid(guid) {\n        this.guid$ = guid;\n    }\n    get guid() {\n        return (this.guid$);\n    }\n    get block() {\n        return (this.block$);\n    }\n    get group() {\n        return (this.group$);\n    }\n    get value() {\n        if (this.clazz == null)\n            return (null);\n        let value = this.clazz.value;\n        if ((\"\" + value).trim().length == 0)\n            value = null;\n        return (value);\n    }\n    get parent() {\n        return (this.fgroup$);\n    }\n    set parent(field) {\n        this.fgroup$ = field;\n    }\n    get fieldoptions() {\n        return (this.options$);\n    }\n    get enabled() {\n        return (this.enabled$);\n    }\n    get state() {\n        return (this.state$);\n    }\n    set state(state) {\n        this.state$ = state;\n    }\n    set readonly(flag) {\n        this.readonly$ = flag;\n    }\n    get readonly() {\n        return (this.readonly$);\n    }\n    get mandatory() {\n        return (this.mandatory$);\n    }\n    setPossibleValues(values, enforce) {\n        this.enforce = enforce;\n        let type = this.clazz.constructor.name;\n        if (type == \"DropDown\")\n            this.setDropDownValues(values);\n        if (type == \"TextField\")\n            this.setTextFieldValues(values);\n    }\n    setTextFieldValues(values) {\n        let name = this.block + \".\" + this.name;\n        if (this.id.length > 0)\n            name += \".\" + this.id;\n        let list = document.getElementById(name);\n        if (list == null) {\n            let kvpair = true;\n            if (values instanceof Map)\n                this.values = new Map(values);\n            else {\n                kvpair = false;\n                this.values = new Map();\n                values.forEach((val) => this.values.set(val, val));\n            }\n            list = document.createElement(\"datalist\");\n            list.setAttribute(\"id\", name);\n            this.values.forEach((val, key) => {\n                let option = document.createElement(\"option\");\n                option.text = val;\n                if (kvpair)\n                    option.value = key;\n                list.append(option);\n            });\n            this.clazz.element.appendChild(list);\n        }\n        this.clazz.element.setAttribute(\"list\", name);\n    }\n    setDropDownValues(xvalues) {\n        if (xvalues instanceof Map)\n            this.values = new Map(xvalues);\n        else {\n            this.values = new Map();\n            xvalues.forEach((val) => this.values.set(val, val));\n        }\n        this.values.forEach((val, key) => {\n            let option = document.createElement(\"option\");\n            option.text = val;\n            option.value = key;\n            this.clazz.element.appendChild(option);\n        });\n    }\n    set mandatory(flag) {\n        this.mandatory$ = flag;\n        if (flag)\n            this.addClass(\"mandatory\");\n        else\n            this.removeClass(\"mandatory\");\n    }\n    focus() {\n        if (!this.enabled)\n            return (false);\n        setTimeout(() => { this.clazz.focus(); }, 0);\n        return (true);\n    }\n    blur() {\n        setTimeout(() => { this.clazz.element.blur(); }, 0);\n    }\n    addClass(clazz) {\n        if (this.clazz != null)\n            this.clazz.element.classList.add(clazz);\n    }\n    removeClass(clazz) {\n        if (this.clazz != null)\n            this.clazz.element.classList.remove(clazz);\n    }\n    get current() {\n        return (this.guid.startsWith(\"c\"));\n    }\n    set value(value) {\n        if (value == null)\n            value = \"\";\n        if (this.clazz != null)\n            this.clazz.value = value;\n    }\n    get valid() {\n        return (this.valid$);\n    }\n    get dirty() {\n        return (!this.firstchange);\n    }\n    validate() {\n        if (this.state == RecordState.qmode || this.state == RecordState.na)\n            return (true);\n        if (!this.clazz.validate())\n            return (false);\n        if (this.mandatory && (this.value == null || (\"\" + this.value).length == 0))\n            return (false);\n        if (this.enforce && this.values != null && this.value != null)\n            if (!this.values.has(this.value))\n                return (false);\n        return (true);\n    }\n    set valid(flag) {\n        if (flag == this.valid$)\n            return;\n        if (flag) {\n            this.valid$ = flag;\n            this.removeClass(\"invalid\");\n        }\n        else {\n            if (this.enabled && !this.readonly) {\n                this.valid$ = flag;\n                this.addClass(\"invalid\");\n            }\n        }\n    }\n    enable() {\n        this.setInputState();\n    }\n    disable() {\n        this.valid = true;\n        this.enabled$ = false;\n        this.readonly$ = true;\n        this.state = RecordState.na;\n        if (this.clazz != null) {\n            this.clazz.enable = false;\n            this.clazz.readonly = true;\n        }\n    }\n    setInputState() {\n        this.enabled$ = false;\n        if (!this.options$.navigable) {\n            if (this.clazz != null)\n                this.clazz.enable = false;\n            return;\n        }\n        if (this.state$ == RecordState.na)\n            this.enabled$ = true;\n        else if (this.state$ == RecordState.insert && this.options$.insert)\n            this.enabled$ = true;\n        else if (this.state$ == RecordState.update && this.options$.update)\n            this.enabled$ = true;\n        else if (this.state$ == RecordState.qmode && this.options$.query)\n            this.enabled$ = true;\n        if (this.clazz != null) {\n            if (!this.enabled$ && this.state$ == RecordState.update) {\n                this.enabled$ = true;\n                this.readonly$ = true;\n            }\n            this.clazz.enable = this.enabled$;\n            this.clazz.readonly = this.readonly$;\n        }\n    }\n    get definition() {\n        return (this.def);\n    }\n    set definition(def) {\n        let override = false;\n        if (this.def != null) {\n            override = true;\n            if (def.hasOwnProperty(\"case\"))\n                this.def.case = def.case;\n            if (def.hasOwnProperty(\"mandatory\"))\n                this.def.mandatory = def.mandatory;\n            if (def.hasOwnProperty(\"type\"))\n                this.def.type = def.type;\n            if (def.hasOwnProperty(\"fieldoptions\")) {\n                if (def.hasOwnProperty(\"query\"))\n                    this.def.fieldoptions.query = def.fieldoptions.query;\n                if (def.hasOwnProperty(\"insert\"))\n                    this.def.fieldoptions.insert = def.fieldoptions.insert;\n                if (def.hasOwnProperty(\"update\"))\n                    this.def.fieldoptions.update = def.fieldoptions.update;\n                if (def.hasOwnProperty(\"navigable\"))\n                    this.def.fieldoptions.navigable = def.fieldoptions.navigable;\n            }\n        }\n        this.def = def;\n        this.setType(def.type);\n        if (!this.def.hasOwnProperty(\"case\"))\n            this.def.case = Case.mixed;\n        if (this.def.hasOwnProperty(\"mandatory\"))\n            this.mandatory = this.def.mandatory;\n        if (this.def.fieldoptions != null) {\n            this.options$ = this.def.fieldoptions;\n            if (!this.options$.hasOwnProperty(\"query\"))\n                this.options$.query = true;\n            if (!this.options$.hasOwnProperty(\"insert\"))\n                this.options$.insert = true;\n            if (!this.options$.hasOwnProperty(\"update\"))\n                this.options$.update = true;\n            if (!this.options$.hasOwnProperty(\"navigable\"))\n                this.options$.navigable = true;\n        }\n        if (override)\n            this.setInputState();\n    }\n    setType(type) {\n        let seq = this.seq;\n        this.container.innerHTML = null;\n        let cname = FieldImplementation.getClass(FieldType[type]);\n        if (cname != null) {\n            this.clazz = new cname();\n            this.container.innerHTML = this.clazz.html;\n            this.clazz.element = this.container.children[0];\n            if (this.size$ != null)\n                this.clazz.size = +this.size$;\n            if (this.value$ != null)\n                this.clazz.value = this.value$;\n            if (this.class$ != \"\")\n                this.clazz.element.classList.add(this.class$);\n            if (this.style$ != \"\")\n                this.clazz.element.style.cssText = this.style$;\n            this.seq = seq;\n            this.disable();\n            this.addTriggers();\n            // Ugly, but need to set name\n            this.clazz.element.name = this.name;\n        }\n    }\n    onEvent(event) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let keypress = false;\n            if (this.fgroup$ == null)\n                return;\n            if (event.type == \"focus\") {\n                this.firstchange = true;\n                this.lvalue = this.value;\n                this.lvalid = this.valid$;\n                this.fgroup$[\"onEvent\"](event, this, \"focus\");\n            }\n            if (event.type == \"blur\") {\n                if (this.dirty && this.value == this.lvalue && !this.lvalid)\n                    this.valid = false;\n                this.fgroup$[\"onEvent\"](event, this, \"blur\");\n            }\n            if (event.type == \"click\" || event.type == \"dblclick\")\n                this.fgroup$[\"onEvent\"](event, this, event.type);\n            if (event.type == \"change\") {\n                if (this.enabled && !this.readonly)\n                    if (!this.valid)\n                        this.fgroup$.valid = false;\n                this.valid = this.validate();\n                if (this.clazz instanceof CheckBox)\n                    this.value = this.value$;\n                if (this.clazz instanceof RadioButton)\n                    this.value = this.value$;\n                this.fgroup$[\"onEvent\"](event, this, \"change\");\n            }\n            if (event.type == \"keydown\" && event.keyCode == 8)\n                keypress = true;\n            if (event.type == \"keydown\" && !keypress) {\n                if (+event.keyCode >= 16 && +event.keyCode <= 20)\n                    return;\n                let keydef = {\n                    code: event.keyCode,\n                    alt: event.altKey,\n                    ctrl: event.ctrlKey,\n                    meta: event.metaKey,\n                    shift: event.shiftKey\n                };\n                let map = KeyMapper.map(keydef);\n                let key = KeyMapper.keymap(map);\n                if (key == keymap.paste)\n                    console.log(\"paste\");\n                if (key == keymap.undo || key == keymap.paste) {\n                    setTimeout(() => { this.blur(); }, 1);\n                    setTimeout(() => { this.focus(); }, 1);\n                    return;\n                }\n                if (key != null) {\n                    // handled by application\n                    if (key == keymap.close ||\n                        key == keymap.listval ||\n                        key == keymap.connect ||\n                        key == keymap.disconnect ||\n                        key == keymap.commit ||\n                        key == keymap.rollback ||\n                        key == keymap.delete ||\n                        key == keymap.clearform ||\n                        key == keymap.insertafter ||\n                        key == keymap.insertbefore ||\n                        key == keymap.enterquery ||\n                        key == keymap.executequery) {\n                        this.fgroup$.copy(this);\n                        return;\n                    }\n                    this.fgroup$[\"onEvent\"](event, this, \"key\", key);\n                }\n            }\n            if (event.type == \"keypress\" || keypress) {\n                if (this.readonly)\n                    return;\n                if (this.firstchange && (event.key.length == 1 || event.keyCode == KeyCodes.backspace)) {\n                    this.firstchange = false;\n                    if (!this.valid)\n                        this.fgroup$.valid = true;\n                    this.fgroup$[\"onEvent\"](event, this, \"fchange\");\n                }\n                let value = this.value;\n                setTimeout(() => { this.continious(event, value); }, 0);\n            }\n        });\n    }\n    continious(event, value) {\n        if (this.value == value)\n            return;\n        if (this.def.type == FieldType.integer) {\n            if (!this.valnumber(value))\n                return;\n        }\n        if (this.def.type == FieldType.decimal) {\n            if (!this.valdecimal(value))\n                return;\n        }\n        if (this.value != null && this.def.case == Case.lower)\n            this.value = (\"\" + this.value).toLowerCase();\n        if (this.value != null && this.def.case == Case.upper)\n            this.value = (\"\" + this.value).toUpperCase();\n        this.fgroup$.onEvent(event, this, \"cchange\");\n    }\n    valnumber(value) {\n        if (this.state == RecordState.qmode)\n            return (true);\n        let nvalue = this.value;\n        if (nvalue == null || nvalue.trim().length == 0)\n            return (true);\n        let numeric = !isNaN(+nvalue);\n        if (!numeric || nvalue.indexOf(\".\") >= 0) {\n            this.value = value;\n            return (false);\n        }\n        return (true);\n    }\n    valdecimal(value) {\n        if (this.state == RecordState.qmode)\n            return (true);\n        let nvalue = this.value;\n        if (nvalue == null || nvalue.trim().length == 0)\n            return (true);\n        let numeric = !isNaN(+nvalue);\n        if (!numeric) {\n            this.value = value;\n            return (false);\n        }\n        return (true);\n    }\n    ngAfterViewInit() {\n        var _a;\n        this.container = (_a = this.containerelem) === null || _a === void 0 ? void 0 : _a.nativeElement;\n        this.id$ = this.id$.toLowerCase();\n        this.name$ = this.name$.toLowerCase();\n        this.block$ = this.block$.toLowerCase();\n        this.app.getContainer().register(this);\n    }\n    addTriggers() {\n        let impl = this.container.firstChild;\n        if (impl == null)\n            return;\n        impl.addEventListener(\"blur\", (event) => { this.onEvent(event); });\n        impl.addEventListener(\"focus\", (event) => { this.onEvent(event); });\n        impl.addEventListener(\"change\", (event) => { this.onEvent(event); });\n        impl.addEventListener(\"click\", (event) => { this.onEvent(event); });\n        impl.addEventListener(\"keydown\", (event) => { this.onEvent(event); });\n        impl.addEventListener(\"keypress\", (event) => { this.onEvent(event); });\n        impl.addEventListener(\"dblclick\", (event) => { this.onEvent(event); });\n    }\n}\nFieldInstance.ɵfac = function FieldInstance_Factory(t) { return new (t || FieldInstance)(i0.ɵɵdirectiveInject(Context)); };\nFieldInstance.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: FieldInstance, selectors: [[\"field\"]], viewQuery: function FieldInstance_Query(rf, ctx) {\n        if (rf & 1) {\n            i0.ɵɵviewQuery(_c0$6, 5, ElementRef);\n        }\n        if (rf & 2) {\n            let _t;\n            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.containerelem = _t.first);\n        }\n    }, inputs: { id$: [\"id\", \"id$\"], row$: [\"row\", \"row$\"], name$: [\"name\", \"name$\"], block$: [\"block\", \"block$\"], group$: [\"group\", \"group$\"], class$: [\"class\", \"class$\"], style$: [\"style\", \"style$\"], size$: [\"size\", \"size$\"], value$: [\"value\", \"value$\"] }, decls: 2, vars: 0, consts: [[\"container\", \"\"]], template: function FieldInstance_Template(rf, ctx) {\n        if (rf & 1) {\n            i0.ɵɵelement(0, \"span\", null, 0);\n        }\n    }, encapsulation: 2 });\n(function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FieldInstance, [{\n            type: Component,\n            args: [{\n                    selector: 'field',\n                    template: '<span #container></span>'\n                }]\n        }], function () { return [{ type: Context }]; }, { id$: [{\n                type: Input,\n                args: [\"id\"]\n            }], row$: [{\n                type: Input,\n                args: [\"row\"]\n            }], name$: [{\n                type: Input,\n                args: [\"name\"]\n            }], block$: [{\n                type: Input,\n                args: [\"block\"]\n            }], group$: [{\n                type: Input,\n                args: [\"group\"]\n            }], class$: [{\n                type: Input,\n                args: [\"class\"]\n            }], style$: [{\n                type: Input,\n                args: [\"style\"]\n            }], size$: [{\n                type: Input,\n                args: [\"size\"]\n            }], value$: [{\n                type: Input,\n                args: [\"value\"]\n            }], containerelem: [{\n                type: ViewChild,\n                args: [\"container\", { read: ElementRef }]\n            }] });\n})();\n\nclass DateUtils {\n    parse(datestr, format) {\n        return (dates.parse(datestr, format));\n    }\n    format(date, format) {\n        return (dates.format(date, format));\n    }\n}\n\nconst _c0$5 = [\"html\"];\nclass FormList {\n    constructor(ctx) {\n        this.page = \"\";\n        this.ready = false;\n        this.name = \"/\";\n        this.conf = ctx.conf;\n        this.app = ctx.app[\"_impl_\"];\n        this.root = new Folder(this.name);\n        this.conf.notify(this, \"setColors\");\n        this.app.setFormList(this);\n        this.formsdef = this.app.getFormsList();\n        this.parse();\n        this.page += \"<style>\\n\";\n        this.page += this.styles() + \"\\n\";\n        this.page += \"</style>\\n\";\n        this.page += \"<div class='formlist'>\\n\";\n        this.page += this.print(\"/\", this.root, 0, [true]);\n        this.page += \"</div>\\n\";\n    }\n    open(folder) {\n        if (!this.ready) {\n            setTimeout(() => { this.open(folder); }, 10);\n            return;\n        }\n        folder = folder.trim();\n        let parts = folder.split(\"/\");\n        let current = this.root;\n        for (let i = 0; i < parts.length; i++) {\n            current = current.findFolder([parts[i]]);\n            if (current == null)\n                return;\n            if (!current.content.classList.contains(\"formlist-active\")) {\n                current.img.src = \"/assets/images/open.jpg\";\n                current.content.classList.toggle(\"formlist-active\");\n            }\n        }\n    }\n    print(path, root, level, last) {\n        let html = \"\";\n        html += this.folder(path, root, level, last);\n        html += \"<div class='formlist-folder-content' id='\" + path + \"-content'>\";\n        level++;\n        last.push(false);\n        if (path == \"/\")\n            path = \"\";\n        let subs = root.folders.length;\n        let forms = root.forms.length;\n        for (let i = 0; i < subs; i++) {\n            let folder = root.folders[i];\n            if (i == subs - 1 && forms == 0)\n                last[level] = true;\n            html += this.print(path + \"/\" + folder.name, folder, level, last);\n        }\n        last[level] = false;\n        html += this.forms(root, level, last);\n        last.pop();\n        html += \"</div>\";\n        return (html);\n    }\n    parse() {\n        for (let i = 0; i < this.formsdef.length; i++) {\n            let path = this.formsdef[i].path;\n            if (!this.formsdef[i].navigable)\n                continue;\n            let form = path;\n            let folder = \"/\";\n            let pos = path.lastIndexOf(\"/\");\n            if (pos >= 0) {\n                form = path.substring(pos + 1);\n                folder = path.substring(0, pos);\n            }\n            let current = this.root;\n            let parts = folder.split(\"/\");\n            for (let p = 1; p < parts.length; p++) {\n                if (parts[p] == \"\")\n                    parts[p] = \"/\";\n                current = current.getFolder(parts[p].trim());\n            }\n            current.addForm(form, this.formsdef[i]);\n        }\n    }\n    ngAfterViewInit() {\n        var _a;\n        this.html = (_a = this.elem) === null || _a === void 0 ? void 0 : _a.nativeElement;\n        this.html.innerHTML = this.page;\n        let folders = this.html.getElementsByClassName(\"formlist-folder\");\n        for (let i = 0; i < folders.length; i++) {\n            let container = folders.item(i);\n            let content = document.getElementById(container.id + \"-content\");\n            let lnk = container.querySelector(\"[id='\" + container.id + \"-lnk']\");\n            let img = container.querySelector(\"[id='\" + container.id + \"-img']\");\n            let folder = this.root.findFolder(container.id.split(\"/\"));\n            folder.img = img;\n            folder.lnk = lnk;\n            folder.content = content;\n            folder.img.addEventListener(\"click\", (event) => this.toggle(event));\n            folder.lnk.addEventListener(\"click\", (event) => this.toggle(event));\n        }\n        let forms = this.html.getElementsByClassName(\"formlist-form\");\n        for (let i = 0; i < forms.length; i++) {\n            let form = forms.item(i);\n            let lnk = form.querySelector(\"[id='\" + form.id + \"-lnk']\");\n            lnk.addEventListener(\"click\", (event) => this.show(event));\n        }\n        this.setColors();\n        this.open(\"/\");\n        this.root.lnk.innerHTML = this.name;\n        this.ready = true;\n    }\n    setColors() {\n        let link = this.conf.colors.link;\n        let tree = this.conf.colors.foldertree;\n        let list = null;\n        list = this.html.getElementsByClassName(\"formlist-txt\");\n        for (let i = 0; i < list.length; i++)\n            list[i].style.color = tree;\n        list = this.html.getElementsByClassName(\"formlist-link\");\n        for (let i = 0; i < list.length; i++)\n            list[i].style.color = link;\n        list = this.html.getElementsByClassName(\"formlist-off\");\n        for (let i = 0; i < list.length; i++)\n            list[i].style.borderLeft = \"1px solid \" + tree;\n        list = this.html.getElementsByClassName(\"formlist-vln\");\n        for (let i = 0; i < list.length; i++)\n            list[i].style.borderLeft = \"1px solid \" + tree;\n        list = this.html.getElementsByClassName(\"formlist-cnr\");\n        for (let i = 0; i < list.length; i++) {\n            list[i].style.borderLeft = \"1px solid \" + tree;\n            list[i].style.borderBottom = \"1px solid \" + tree;\n        }\n    }\n    toggle(event) {\n        let fname = event.target.id;\n        fname = fname.substring(0, fname.length - 4);\n        let folder = this.root.findFolder(fname.split(\"/\"));\n        folder.content.classList.toggle(\"formlist-active\");\n        if (folder.content.classList.contains(\"formlist-active\")) {\n            folder.img.src = \"/assets/images/open.jpg\";\n        }\n        else {\n            folder.img.src = \"/assets/images/closed.jpg\";\n        }\n    }\n    show(event) {\n        let fname = event.target.id;\n        fname = fname.substring(0, fname.length - 4);\n        this.app.showform(fname, false);\n    }\n    folder(path, root, level, last) {\n        let html = \"\";\n        html += \"<div id='\" + path + \"' class='formlist-folder'>\\n\";\n        if (level > 0) {\n            html += this.half();\n            for (let i = 1; i < level; i++)\n                html += this.indent(last[i]);\n        }\n        if (level > 0)\n            html += this.pre(last[level]);\n        html += \"<img class='formlist-img' id='\" + path + \"-img' src='/assets/images/closed.jpg'>\\n\";\n        html += \"<span class='formlist-txt' id='\" + path + \"-lnk'>\" + root.name + \"</span>\\n\";\n        html += \"</div>\\n\";\n        return (html);\n    }\n    forms(root, level, last) {\n        let html = \"\";\n        for (let i = 0; i < root.forms.length; i++) {\n            if (i == root.forms.length - 1)\n                last[level] = true;\n            html += this.form(root.forms[i], level, last);\n        }\n        return (html);\n    }\n    form(form, level, last) {\n        let html = \"\";\n        html += \"<div id='\" + form.def.name + \"' class='formlist-form'>\\n\";\n        html += this.half();\n        for (let i = 1; i < level; i++)\n            html += this.indent(last[i]);\n        if (level > 0)\n            html += this.pre(last[last.length - 1]);\n        html += \"<span class='formlist-link' id='\" + form.def.name + \"-lnk'> \" + form.name + \"</span>\\n\";\n        html += \"</div>\\n\";\n        return (html);\n    }\n    pre(last) {\n        let html = \"\";\n        html += \"<span class='formlist-lct'>\\n\";\n        html += \" <span class='formlist-off'></span>\\n\";\n        html += \" <span class='formlist-cnr'></span>\\n\";\n        if (last)\n            html += \"<span class='formlist-end'></span>\\n\";\n        else\n            html += \"<span class='formlist-vln'></span>\\n\";\n        html += \"</span>\\n\";\n        return (html);\n    }\n    indent(skip) {\n        let html = \"\";\n        if (skip) {\n            html += \"<span class='formlist-lct'>\\n\";\n            html += \"</span>\\n\";\n            html += \" <span class='formlist-ind'></span>\\n\";\n        }\n        else {\n            html += \"<span class='formlist-lct'>\\n\";\n            html += \" <span class='formlist-vln'></span>\\n\";\n            html += \" <span class='formlist-vln'></span>\\n\";\n            html += \" <span class='formlist-vln'></span>\\n\";\n            html += \"</span>\\n\";\n            html += \" <span class='formlist-ind'></span>\\n\";\n        }\n        return (html);\n    }\n    half() {\n        let html = \"\";\n        html += \" <span class='formlist-ind'></span>\\n\";\n        return (html);\n    }\n    styles() {\n        let styles = `\n\t\t.formlist\n\t\t{\n\t\t\twidth: 1px;\n\t\t\tposition: relative;\n\t\t}\n\n    \t.formlist-folder\n    \t{\n\t\t\tmargin: 0;\n\t\t\tpadding: 0;\n\t\t\twidth: 100%;\n\t\t\theight: 100%;\n\t\t\tfont-size: 0;\n\t\t\tposition: relative;\n\t\t\tborder-collapse: collapse;\n    \t}\n\n\t\t.formlist-folder-content\n\t\t{\n\t\t\tdisplay: none;\n\t\t}\n\n\t\t.formlist-lct\n\t\t{\n\t\t\twidth: 16px;\n\t\t\theight: 24px;\n\t\t\tpointer-events:none;\n\t\t\twhite-space: nowrap;\n\t\t\tdisplay: inline-block;\n\t\t\tvertical-align: middle;\n\t\t}\n\n\t\t.formlist-txt\n\t\t{\n\t\t\twidth: 16px;\n\t\t\theight: 21px;\n\t\t\tfont-size: 15px;\n\t\t\tcursor: pointer;\n\t\t\twhite-space: nowrap;\n\t\t\tdisplay: inline-block;\n\t\t\tvertical-align: bottom;\n\t\t}\n\n\t\t.formlist-off\n\t\t{\n\t\t\twidth: 16px;\n\t\t\theight: 4px;\n\t\t\tdisplay: block;\n\t\t\tpointer-events:none;\n\t\t}\n\n\t\t.formlist-vln\n\t\t{\n\t\t\twidth: 16px;\n\t\t\theight: 12px;\n\t\t\tdisplay: block;\n\t\t\tpointer-events:none;\n\t\t}\n\n\t\t.formlist-cnr\n\t\t{\n\t\t\twidth: 16px;\n\t\t\theight: 8px;\n\t\t\tdisplay: block;\n\t\t\tpointer-events:none;\n\t\t}\n\n\t\t.formlist-end\n\t\t{\n\t\t\twidth: 16px;\n\t\t\theight: 12px;\n\t\t\tdisplay: block;\n\t\t\tpointer-events:none;\n\t\t}\n\n\t\t.formlist-ind\n\t\t{\n\t\t\twidth: 12px;\n\t\t\theight: 24px;\n\t\t\twhite-space: nowrap;\n\t\t\tpointer-events:none;\n\t\t\tdisplay: inline-block;\n\t\t\tvertical-align: middle;\n\t\t}\n\n\t\t.formlist-img\n\t\t{\n\t\t\twidth: 24px;\n\t\t\theight: 24px;\n\t\t\tcursor: pointer;\n\t\t\tvertical-align: middle;\n\t\t}\n\n\t\t.formlist-link\n\t\t{\n\t\t\twidth: 16px;\n\t\t\theight: 22px;\n\t\t\tcursor: pointer;\n\t\t\tfont-size: 15px;\n\t\t\tmargin-left: 8px;\n\t\t\tfont-style: italic;\n\t\t\twhite-space: nowrap;\n\t\t\tdisplay: inline-block;\n\t\t\tvertical-align: bottom;\n\t\t}\n\n\t\t.formlist-form\n\t\t{\n\t\t\tmargin: 0;\n\t\t\tpadding: 0;\n\t\t\tfont-size: 0;\n\t\t\tdisplay: block;\n\t\t\tborder-collapse: collapse;\n\t\t}\n\n\t\t.formlist-active\n\t\t{\n\t\t\tdisplay: block;\n\t\t}\n\t\t`;\n        return (styles);\n    }\n}\nFormList.ɵfac = function FormList_Factory(t) { return new (t || FormList)(i0.ɵɵdirectiveInject(Context)); };\nFormList.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: FormList, selectors: [[\"formlist\"]], viewQuery: function FormList_Query(rf, ctx) {\n        if (rf & 1) {\n            i0.ɵɵviewQuery(_c0$5, 5, ElementRef);\n        }\n        if (rf & 2) {\n            let _t;\n            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.elem = _t.first);\n        }\n    }, inputs: { name: [\"root\", \"name\"] }, decls: 2, vars: 0, consts: [[2, \"display\", \"inline-block\", \"white-space\", \"nowrap\"], [\"html\", \"\"]], template: function FormList_Template(rf, ctx) {\n        if (rf & 1) {\n            i0.ɵɵelement(0, \"div\", 0, 1);\n        }\n    }, encapsulation: 2 });\n(function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FormList, [{\n            type: Component,\n            args: [{\n                    selector: 'formlist',\n                    template: `\n\t\t<div #html style=\"display: inline-block; white-space: nowrap;\"></div>\n\t`,\n                    styles: []\n                }]\n        }], function () { return [{ type: Context }]; }, { name: [{\n                type: Input,\n                args: ['root']\n            }], elem: [{\n                type: ViewChild,\n                args: [\"html\", { read: ElementRef }]\n            }] });\n})();\nclass Folder {\n    constructor(name) {\n        this.forms = [];\n        this.folders = [];\n        this.name = name;\n    }\n    getFolder(next) {\n        if (next == this.name)\n            return (this);\n        for (let i = 0; i < this.folders.length; i++)\n            if (this.folders[i].name == next)\n                return (this.folders[i]);\n        let folder = new Folder(next);\n        this.folders.push(folder);\n        return (folder);\n    }\n    findFolder(path) {\n        while (path[0] == \"\")\n            path.shift();\n        if (path.length == 0)\n            return (this);\n        let next = null;\n        for (let i = 0; i < this.folders.length; i++) {\n            if (this.folders[i].name == path[0]) {\n                next = this.folders[i];\n                break;\n            }\n        }\n        if (next == null)\n            return (null);\n        path.shift();\n        return (next.findFolder(path));\n    }\n    addForm(name, form) {\n        this.forms.push({ name: name, def: form });\n    }\n    print() {\n        console.log(\"\");\n        console.log(\"Folder: \" + this.name);\n        for (let i = 0; i < this.forms.length; i++)\n            console.log(\"Form: \" + this.forms[i].name);\n        for (let i = 0; i < this.folders.length; i++)\n            this.folders[i].print();\n    }\n}\n\nconst _c0$4 = [\"formarea\"];\nclass FormArea {\n    constructor(ctx) {\n        this.app = null;\n        this.app = ctx.app;\n    }\n    getFormsArea() {\n        return (this.formarea.nativeElement);\n    }\n    ngAfterViewInit() {\n        let impl = this.app[\"_impl_\"];\n        impl.setFormArea(this);\n    }\n}\nFormArea.ɵfac = function FormArea_Factory(t) { return new (t || FormArea)(i0.ɵɵdirectiveInject(Context)); };\nFormArea.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: FormArea, selectors: [[\"formarea\"]], viewQuery: function FormArea_Query(rf, ctx) {\n        if (rf & 1) {\n            i0.ɵɵviewQuery(_c0$4, 5, ElementRef);\n        }\n        if (rf & 2) {\n            let _t;\n            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.formarea = _t.first);\n        }\n    }, decls: 2, vars: 0, consts: [[\"formarea\", \"\"]], template: function FormArea_Template(rf, ctx) {\n        if (rf & 1) {\n            i0.ɵɵelement(0, \"div\", null, 0);\n        }\n    }, encapsulation: 2 });\n(function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FormArea, [{\n            type: Component,\n            args: [{ selector: 'formarea', template: '<div #formarea></div>', styles: [] }]\n        }], function () { return [{ type: Context }]; }, { formarea: [{\n                type: ViewChild,\n                args: [\"formarea\", { read: ElementRef }]\n            }] });\n})();\n\nconst _c0$3 = [\"ok\"];\nconst _c1$2 = [\"keymap\"];\nclass KeyMapHelp {\n    constructor(ctx) {\n        this.width = \"300px\";\n        this.height = \"475px\";\n        this.title = \"ShortKeys\";\n        this.html = null;\n        this.win = null;\n        this.map = null;\n        this.okbtn = null;\n        this.title = ctx.conf.keymaptitle;\n        this.html = ctx.conf.keymapping.map;\n    }\n    static show(app) {\n        let pinst = new PopupInstance();\n        pinst.display(app, KeyMapHelp);\n    }\n    close(_cancel) {\n        this.win.closeWindow();\n    }\n    setWin(win) {\n        this.win = win;\n    }\n    ngAfterViewInit() {\n        var _a, _b;\n        this.map = (_a = this.mapelem) === null || _a === void 0 ? void 0 : _a.nativeElement;\n        this.okbtn = (_b = this.okelem) === null || _b === void 0 ? void 0 : _b.nativeElement;\n        this.okbtn.addEventListener(\"keydown\", () => this.close(true));\n        this.okbtn.addEventListener(\"keypress\", () => this.close(true));\n        this.map.innerHTML = this.html;\n        this.okbtn.focus();\n    }\n}\nKeyMapHelp.ɵfac = function KeyMapHelp_Factory(t) { return new (t || KeyMapHelp)(i0.ɵɵdirectiveInject(Context)); };\nKeyMapHelp.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: KeyMapHelp, selectors: [[\"ng-component\"]], viewQuery: function KeyMapHelp_Query(rf, ctx) {\n        if (rf & 1) {\n            i0.ɵɵviewQuery(_c0$3, 5, ElementRef);\n            i0.ɵɵviewQuery(_c1$2, 5, ElementRef);\n        }\n        if (rf & 2) {\n            let _t;\n            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.okelem = _t.first);\n            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.mapelem = _t.first);\n        }\n    }, decls: 4, vars: 0, consts: [[\"keymap\", \"\"], [2, \"width\", \"100%\", \"height\", \"1px\"], [\"ok\", \"\"]], template: function KeyMapHelp_Template(rf, ctx) {\n        if (rf & 1) {\n            i0.ɵɵelement(0, \"div\", null, 0);\n            i0.ɵɵelement(2, \"button\", 1, 2);\n        }\n    }, encapsulation: 2 });\n(function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(KeyMapHelp, [{\n            type: Component,\n            args: [{\n                    template: `\n        <div #keymap></div>\n        <button style=\"width: 100%; height: 1px\" #ok></button>\n    `\n                }]\n        }], function () { return [{ type: Context }]; }, { okelem: [{\n                type: ViewChild,\n                args: [\"ok\", { read: ElementRef }]\n            }], mapelem: [{\n                type: ViewChild,\n                args: [\"keymap\", { read: ElementRef }]\n            }] });\n})();\n\nclass LoginForm extends Block {\n    constructor(ctx) {\n        super();\n        this.top = \"20%\";\n        this.left = \"25%\";\n        this.width = \"300px\";\n        this.height = \"150px\";\n        this.tmargin = \"20px\";\n        this.title = \"Login\";\n        this.app = ctx.app[\"_impl_\"];\n        this.addKeyTrigger(this.onEvent, [\n            keymap.enter,\n            keymap.escape,\n            keymap.nextfield,\n            keymap.prevfield\n        ]);\n    }\n    setWin(win) {\n        this.win = win;\n    }\n    close(cancel) {\n        var _a;\n        this.app.enable();\n        this.win.closeWindow();\n        if (!cancel)\n            this.app.appstate.connection.connect(this.usr.value, this.pwd.value);\n        (_a = this.app.getCurrentForm()) === null || _a === void 0 ? void 0 : _a.focus();\n    }\n    onEvent(kevent) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (kevent.key == keymap.enter)\n                this.close(false);\n            if (kevent.key == keymap.escape)\n                this.close(true);\n            if (kevent.key == keymap.nextfield && kevent.field == \"usr\") {\n                kevent.event.preventDefault();\n                this.pwd.focus();\n            }\n            if (kevent.key == keymap.nextfield && kevent.field == \"pwd\") {\n                kevent.event.preventDefault();\n                this.usr.focus();\n            }\n            if (kevent.key == keymap.prevfield && kevent.field == \"usr\") {\n                kevent.event.preventDefault();\n                this.pwd.focus();\n            }\n            if (kevent.key == keymap.prevfield && kevent.field == \"pwd\") {\n                kevent.event.preventDefault();\n                this.usr.focus();\n            }\n            return (true);\n        });\n    }\n    ngOnInit() {\n        this.app.disable();\n        this.app.setContainer();\n    }\n    ngAfterViewInit() {\n        let container = this.app.getContainer();\n        container.finish();\n        container.getBlock(\"\").records.forEach((rec) => { this[\"_impl_\"].addRecord(new Record(0, rec.fields, rec.index)); });\n        this.usr = this[\"_impl_\"].getField(0, \"usr\");\n        this.pwd = this[\"_impl_\"].getField(0, \"pwd\");\n        let usr = { name: \"usr\", mandatory: true, type: FieldType.text };\n        let pwd = { name: \"pwd\", mandatory: true, type: FieldType.password };\n        this.usr.setDefinition(usr, true);\n        this.pwd.setDefinition(pwd, true);\n        this.usr.enable(false);\n        this.pwd.enable(false);\n        let field = document.getElementsByName(\"usr\")[1];\n        let width = (1.75 * field.offsetWidth + 10) + \"px\";\n        let height = (6 * field.offsetHeight + 20) + \"px\";\n        this.win.resize(width, height);\n        this.usr.focus();\n        this.app.dropContainer();\n    }\n}\nLoginForm.ɵfac = function LoginForm_Factory(t) { return new (t || LoginForm)(i0.ɵɵdirectiveInject(Context)); };\nLoginForm.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: LoginForm, selectors: [[\"ng-component\"]], features: [i0.ɵɵInheritDefinitionFeature], decls: 13, vars: 0, consts: [[2, \"margin-top\", \"20px\", \"margin-right\", \"10px\"], [\"name\", \"usr\"], [\"name\", \"pwd\"]], template: function LoginForm_Template(rf, ctx) {\n        if (rf & 1) {\n            i0.ɵɵelementStart(0, \"table\", 0);\n            i0.ɵɵelementStart(1, \"tr\");\n            i0.ɵɵelementStart(2, \"td\");\n            i0.ɵɵtext(3, \"Username\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(4, \"td\");\n            i0.ɵɵtext(5, \": \");\n            i0.ɵɵelement(6, \"field\", 1);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(7, \"tr\");\n            i0.ɵɵelementStart(8, \"td\");\n            i0.ɵɵtext(9, \"Password\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(10, \"td\");\n            i0.ɵɵtext(11, \": \");\n            i0.ɵɵelement(12, \"field\", 2);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementEnd();\n        }\n    }, encapsulation: 2 });\n(function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(LoginForm, [{\n            type: Component,\n            args: [{\n                    selector: '',\n                    template: `\n        <table style='margin-top: \"20px\"; margin-right: \"10px\"'>\n          <tr>\n            <td>Username</td><td>: <field name='usr'></field> </td>\n          </tr>\n          <tr>\n            <td>Password</td><td>: <field name='pwd'></field> </td>\n          </tr>\n        </table>\n    `\n                }]\n        }], function () { return [{ type: Context }]; }, null);\n})();\n\nconst _c0$2 = [\"input\"];\nconst _c1$1 = [\"canvas\"];\nclass Wait {\n    constructor() {\n        this.input = null;\n        this.canvas = null;\n    }\n    static show(app) {\n        if (Wait.displayed)\n            return;\n        Wait.ready = false;\n        Wait.displayed = true;\n        Wait.win = app.builder.createComponent(Wait);\n        let element = Wait.win.hostView.rootNodes[0];\n        app.builder.getAppRef().attachView(Wait.win.hostView);\n        document.body.appendChild(element);\n        Wait.ready = true;\n    }\n    static waiting() {\n        return (Wait.displayed);\n    }\n    static close(app) {\n        if (!Wait.displayed)\n            return;\n        if (!Wait.ready) {\n            setTimeout(() => { Wait.close(app); }, 1);\n            return;\n        }\n        Wait.displayed = false;\n        let element = Wait.win.hostView.rootNodes[0];\n        document.body.removeChild(element);\n        app.builder.getAppRef().detachView(Wait.win.hostView);\n        Wait.win.destroy();\n        app.getCurrentForm().focus();\n    }\n    ngAfterViewInit() {\n        var _a, _b;\n        this.input = (_a = this.inputElement) === null || _a === void 0 ? void 0 : _a.nativeElement;\n        this.canvas = (_b = this.canvasElement) === null || _b === void 0 ? void 0 : _b.nativeElement;\n        let ctx = this.canvas.getContext(\"2d\");\n        setTimeout(() => { this.focus(); }, 10);\n        setTimeout(() => { this.showrunning(ctx, 0); }, 250);\n    }\n    focus() {\n        if (!Wait.displayed)\n            return;\n        this.input.focus();\n        setTimeout(() => { this.focus(); }, 100);\n    }\n    showrunning(ctx, pick) {\n        if (!Wait.displayed)\n            return;\n        ctx.lineWidth = 5;\n        let pcolor = \"black\";\n        let bcolor = \"#DCDCDC\";\n        pick = pick % 3;\n        let rad = 6;\n        let off = 64;\n        ctx.beginPath();\n        ctx.strokeStyle = bcolor;\n        if (pick == 0)\n            ctx.strokeStyle = pcolor;\n        ctx.arc(rad + off, 2 * rad, rad, 0, 2 * Math.PI);\n        ctx.stroke();\n        ctx.closePath();\n        ctx.beginPath();\n        ctx.strokeStyle = bcolor;\n        if (pick == 1)\n            ctx.strokeStyle = pcolor;\n        ctx.arc(6 * rad + off, 2 * rad, rad, 0, 2 * Math.PI);\n        ctx.stroke();\n        ctx.closePath();\n        ctx.beginPath();\n        ctx.strokeStyle = bcolor;\n        if (pick == 2)\n            ctx.strokeStyle = pcolor;\n        ctx.arc(11 * rad + off, 2 * rad, rad, 0, 2 * Math.PI);\n        ctx.stroke();\n        ctx.closePath();\n        setTimeout(() => { this.showrunning(ctx, pick + 1); }, 250);\n    }\n}\nWait.ready = false;\nWait.displayed = false;\nWait.win = null;\nWait.ɵfac = function Wait_Factory(t) { return new (t || Wait)(); };\nWait.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: Wait, selectors: [[\"ng-component\"]], viewQuery: function Wait_Query(rf, ctx) {\n        if (rf & 1) {\n            i0.ɵɵviewQuery(_c0$2, 5, ElementRef);\n            i0.ɵɵviewQuery(_c1$1, 5, ElementRef);\n        }\n        if (rf & 2) {\n            let _t;\n            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.inputElement = _t.first);\n            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.canvasElement = _t.first);\n        }\n    }, decls: 5, vars: 0, consts: [[1, \"wait-modal\"], [\"id\", \"canvas\", 1, \"wait-canvas\"], [\"canvas\", \"\"], [1, \"wait-input\"], [\"input\", \"\"]], template: function Wait_Template(rf, ctx) {\n        if (rf & 1) {\n            i0.ɵɵelementStart(0, \"div\", 0);\n            i0.ɵɵelement(1, \"canvas\", 1, 2);\n            i0.ɵɵelement(3, \"input\", 3, 4);\n            i0.ɵɵelementEnd();\n        }\n    }, styles: [\".wait-input[_ngcontent-%COMP%]{width:0;height:0;opacity:0;filter:alpha(opacity=0)}.wait-canvas[_ngcontent-%COMP%]{top:25%;left:40%;width:320px;height:160px;position:fixed}.wait-modal[_ngcontent-%COMP%]{top:0;left:0;z-index:1;opacity:1;width:100%;height:100%;display:block;overflow:auto;position:fixed;box-shadow:inset 0 0 400px 110px #0003}\"] });\n(function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(Wait, [{\n            type: Component,\n            args: [{\n                    selector: '',\n                    template: `\n                <div class=\"wait-modal\">\n                    <canvas #canvas class=\"wait-canvas\" id=\"canvas\"></canvas>\n                    <input #input class=\"wait-input\">\n                </div>\n              `,\n                    styles: [\n                        `\n        .wait-input\n        {\n            width: 0;\n            height: 0;\n            opacity: 0;\n            filter:alpha(opacity=0);\n        }\n\n        .wait-canvas\n        {\n            top: 25%;\n            left: 40%;\n            width: 320px;\n            height: 160px;\n            position: fixed;\n        }\n\n        .wait-modal\n        {\n            top: 0;\n            left: 0;\n            z-index: 1;\n            opacity: 1;\n            width: 100%;\n            height: 100%;\n            display: block;\n            overflow: auto;\n            position: fixed;\n            box-shadow: inset 0px 0px 400px 110px rgba(0, 0, 0, .2);\n        }\n        `\n                    ]\n                }]\n        }], null, { inputElement: [{\n                type: ViewChild,\n                args: [\"input\", { read: ElementRef }]\n            }], canvasElement: [{\n                type: ViewChild,\n                args: [\"canvas\", { read: ElementRef }]\n            }] });\n})();\n\nclass MenuInterface {\n    constructor(menu) {\n        this.menu$ = menu;\n        this.app$ = this.menu$.getApplication()[\"_impl_\"];\n    }\n    get app() {\n        return (this.app$.getApplication());\n    }\n    isConnected() {\n        return (this.app$.connected);\n    }\n    enable(menu) {\n        this.menu$.enable(menu);\n    }\n    disable(menu) {\n        this.menu$.disable(menu);\n    }\n}\n\nconst _c0$1 = [\"html\"];\nclass DropDownMenu {\n    constructor(ctx) {\n        this.ctx = ctx;\n        this.options = new Map();\n        this.menus = new Map();\n        this.conf = ctx.conf;\n        this.app$ = ctx.app[\"_impl_\"]; // might not be initialized\n        this.instance = \"DropDownMenu-\" + (DropDownMenu.instances++);\n    }\n    static setForm(inst, form) {\n        if (inst.instance.getMenu() == null) {\n            if (DropDownMenu.calls++ > 10)\n                return;\n            setTimeout(() => { DropDownMenu.setForm(inst, form); }, 10);\n            return;\n        }\n        inst.instance.getMenu().getHandler().onFormChange(form);\n    }\n    getMenu() {\n        return (this.menu);\n    }\n    getApplication() {\n        return (this.app$.getApplication());\n    }\n    enable(menu) {\n        if (menu == null) {\n            this.menus.forEach((mopt) => {\n                mopt.elem.classList.remove(\"ddmenu-disabled\");\n                mopt.options.forEach((opt) => { opt.elem.children[0].classList.remove(\"ddmenu-disabled\"); });\n            });\n            return;\n        }\n        menu = menu.toLowerCase();\n        let mopt = this.menus.get(menu);\n        if (mopt != null) {\n            mopt.elem.classList.remove(\"ddmenu-disabled\");\n            mopt.options.forEach((opt) => { opt.elem.children[0].classList.remove(\"ddmenu-disabled\"); });\n            return;\n        }\n        let option = menu;\n        mopt = this.menus.get(menu.substring(0, menu.lastIndexOf(\"/\")));\n        if (mopt == null)\n            return;\n        let enabled = 0;\n        mopt.options.forEach((opt) => {\n            if (opt.elem.id == option)\n                opt.elem.children[0].classList.remove(\"ddmenu-disabled\");\n            if (!opt.elem.children[0].classList.contains(\"ddmenu-disabled\"))\n                enabled++;\n        });\n        if (enabled > 0)\n            mopt.elem.classList.remove(\"ddmenu-disabled\");\n    }\n    disable(menu) {\n        if (menu == null) {\n            this.menus.forEach((mopt) => {\n                mopt.elem.classList.add(\"ddmenu-disabled\");\n                mopt.options.forEach((opt) => { opt.elem.children[0].classList.add(\"ddmenu-disabled\"); });\n            });\n            return;\n        }\n        menu = menu.toLowerCase();\n        let mopt = this.menus.get(menu);\n        if (mopt != null) {\n            mopt.elem.classList.add(\"ddmenu-disabled\");\n            mopt.options.forEach((opt) => { opt.elem.children[0].classList.add(\"ddmenu-disabled\"); });\n            return;\n        }\n        let option = menu;\n        mopt = this.menus.get(menu.substring(0, menu.lastIndexOf(\"/\")));\n        if (mopt == null)\n            return;\n        let enabled = 0;\n        mopt.options.forEach((opt) => {\n            if (opt.elem.id == option)\n                opt.elem.children[0].classList.add(\"ddmenu-disabled\");\n            if (!opt.elem.children[0].classList.contains(\"ddmenu-disabled\"))\n                enabled++;\n        });\n        if (enabled == 0)\n            mopt.elem.classList.add(\"ddmenu-disabled\");\n    }\n    display(menu) {\n        if (menu == null)\n            return;\n        if (this.html == null) {\n            setTimeout(() => { this.display(menu); }, 10);\n            return;\n        }\n        this.app$ = this.ctx.app[\"_impl_\"];\n        this.menu = menu;\n        let intf = new MenuInterface(this);\n        menu.getHandler()[\"__menu__\"] = intf;\n        this.menu = menu;\n        this.html.innerHTML = this.menuhtml();\n        let menus = this.html.getElementsByClassName(\"ddmenu-menu\");\n        let options = this.html.getElementsByClassName(\"ddmenu-option\");\n        for (let i = 0; i < menus.length; i++) {\n            let mopt = new MenuOption(menus[i].children[0]);\n            this.menus.set(mopt.elem.id, mopt);\n            mopt.elem.classList.add(\"ddmenu-default\");\n            mopt.elem.classList.add(\"ddmenu-disabled\");\n            mopt.elem.addEventListener(\"click\", (event) => { this.toggle(event); });\n        }\n        for (let i = 0; i < options.length; i++) {\n            let id = options[i].id;\n            let menu = id.substring(0, id.lastIndexOf(\"/\"));\n            let opt = this.options.get(id);\n            options[i].children[0].classList.add(\"ddmenu-disabled\");\n            options[i].addEventListener(\"click\", (event) => { this.action(event); });\n            opt.elem = options[i];\n            let mopt = this.menus.get(menu);\n            mopt.options.push(opt);\n        }\n        menu.getHandler().onInit();\n    }\n    onEvent(event) {\n        if (!event.target.matches('.ddmenu-entry')) {\n            this.closeall();\n            WindowListener.remove(this.instance, \"click\");\n        }\n    }\n    action(event) {\n        let handler = this.menu.getHandler();\n        let link = null;\n        let text = event.target;\n        if (text.classList.contains(\"ddmenu-linktext\")) {\n            link = text.parentElement;\n        }\n        else {\n            link = text;\n            text = text.children[0];\n        }\n        if (text.classList.contains(\"ddmenu-disabled\"))\n            return;\n        let opt = this.options.get(link.id);\n        if (opt.option.action != null)\n            handler[opt.option.action]();\n    }\n    toggle(event) {\n        let menu = event.target;\n        let container = menu.parentNode.children[1];\n        if (menu.classList.contains(\"ddmenu-disabled\"))\n            return;\n        container.classList.toggle(\"ddmenu-show\");\n        if (container.classList.contains(\"ddmenu-show\")) {\n            this.closeall(container);\n            WindowListener.add(this.instance, this, \"click\");\n        }\n        else {\n            container.classList.remove(\"ddmenu-show\");\n        }\n    }\n    closeall(except) {\n        let open = this.html.getElementsByClassName(\"ddmenu-show\");\n        for (let i = 0; i < open.length; i++) {\n            if (except == null || open[i].id != except.id)\n                open[i].classList.remove(\"ddmenu-show\");\n        }\n    }\n    menuhtml() {\n        let html = \"\";\n        html += \"<style>\\n\";\n        html += this.styles() + \"\\n\";\n        html += \"</style>\\n\";\n        html += \"<span class='ddmenu-bar'>\\n\";\n        html += this.entries(\"\", \"\", this.menu.getEntries());\n        html += \"</span>\\n\";\n        return (html);\n    }\n    entries(indent, path, entries) {\n        let html = \"\";\n        for (let i = 0; i < entries.length; i++) {\n            let id = path + \"/\" + entries[i].name.toLowerCase();\n            html += indent + \"<div class='ddmenu-menu'>\\n\";\n            html += indent + \"  <button class='ddmenu-entry' id='\" + id + \"'>\\n\";\n            html += indent + entries[i].name;\n            html += indent + \"  </button>\\n\";\n            html += indent + \"  <div class='ddmenu-content' id='\" + id + \"-content'>\\n\";\n            if (entries[i].options != null) {\n                for (let f = 0; f < entries[i].options.length; f++) {\n                    let entry = entries[i].options[f];\n                    let oid = id + \"/\" + entry.name.toLowerCase();\n                    this.options.set(oid, new Option(entries[i].options[f]));\n                    html += indent + \"    <a class='ddmenu-option' id='\" + oid + \"'>\\n\";\n                    html += indent + \"      <span class='ddmenu-linktext'>\" + entry.name + \"</span>\\n\";\n                    html += indent + \"    </a>\\n\";\n                }\n            }\n            html += indent + \"  </div>\\n\";\n            html += indent + \"</div>\\n\";\n        }\n        return (html);\n    }\n    styles() {\n        let style = `\n            .ddmenu-bar\n            {\n                width: 100%;\n                height: 100%;\n                display: flex;\n                position: relative;\n                white-space: nowrap;\n                background: transparent;\n            }\n\n            .ddmenu-entry\n            {\n                padding: 0;\n                border: none;\n                color: ` + this.conf.colors.menuoption + `;\n                outline:none;\n                cursor: pointer;\n                font-size: 15px;\n                margin-top: 1px;\n                margin-left: 4px;\n                margin-right: 4px;\n                margin-bottom: 1px;\n                background: transparent;\n            }\n\n            .ddmenu-default\n            {\n                color: ` + this.conf.colors.enabled + `;\n            }\n\n            .ddmenu-disabled\n            {\n                color: ` + this.conf.colors.disabled + `;\n            }\n\n            .ddmenu-menu\n            {\n                position: relative;\n                display: inline-block;\n            }\n\n            .ddmenu-content\n            {\n                z-index: 1;\n                display: none;\n                overflow: none;\n                min-width: 80px;\n                position: absolute;\n                background-color: #f1f1f1;\n                color: ` + this.conf.colors.menuoption + `;\n                box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);\n            }\n\n            .ddmenu-option\n            {\n                border: none;\n                color: black;\n                outline:none;\n                cursor: pointer;\n                font-size: 15px;\n                background: transparent;\n            }\n\n            .ddmenu-content .ddmenu-option\n            {\n                color: black;\n                display: block;\n                padding: 12px 16px;\n                text-decoration: none;\n            }\n\n            .ddmenu-content .ddmenu-option:hover\n            {\n                background-color: #ddd;\n            }\n\n            .ddmenu-show\n            {\n                display: block;\n            }\n        `;\n        return (style);\n    }\n    ngAfterViewInit() {\n        var _a;\n        this.html = (_a = this.elem) === null || _a === void 0 ? void 0 : _a.nativeElement;\n    }\n}\nDropDownMenu.instances = 0;\nDropDownMenu.calls = 0;\nDropDownMenu.ɵfac = function DropDownMenu_Factory(t) { return new (t || DropDownMenu)(i0.ɵɵdirectiveInject(Context)); };\nDropDownMenu.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: DropDownMenu, selectors: [[\"ng-component\"]], viewQuery: function DropDownMenu_Query(rf, ctx) {\n        if (rf & 1) {\n            i0.ɵɵviewQuery(_c0$1, 5, ElementRef);\n        }\n        if (rf & 2) {\n            let _t;\n            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.elem = _t.first);\n        }\n    }, decls: 2, vars: 0, consts: [[\"html\", \"\"]], template: function DropDownMenu_Template(rf, ctx) {\n        if (rf & 1) {\n            i0.ɵɵelement(0, \"div\", null, 0);\n        }\n    }, encapsulation: 2 });\n(function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DropDownMenu, [{\n            type: Component,\n            args: [{\n                    selector: '',\n                    template: '<div #html></div>'\n                }]\n        }], function () { return [{ type: Context }]; }, { elem: [{\n                type: ViewChild,\n                args: [\"html\", { read: ElementRef }]\n            }] });\n})();\nclass MenuOption {\n    constructor(elem) {\n        this.options = [];\n        this.elem = elem;\n    }\n}\nclass Option {\n    constructor(option) {\n        this.option = option;\n    }\n}\n\nclass MenuFactory {\n    constructor(builder) {\n        this.builder = builder;\n    }\n    create(menu) {\n        let ref = this.builder.createComponent(DropDownMenu);\n        ref.instance.display(menu);\n        return (ref);\n    }\n}\n\nclass FormUtil {\n    constructor() {\n        this.utils = new Utils();\n    }\n    complete(options, create) {\n        if (options == null) {\n            if (create)\n                options = {};\n            else\n                return (null);\n        }\n        if (!options.hasOwnProperty(\"wizard\"))\n            options.wizard = false;\n        if (!options.hasOwnProperty(\"inherit\"))\n            options.inherit = true;\n        if (!options.hasOwnProperty(\"width\"))\n            options.width = \"99.65vw\";\n        if (!options.hasOwnProperty(\"height\"))\n            options.height = \"99.5vh\";\n        if (!options.hasOwnProperty(\"offsetTop\"))\n            options.offsetTop = \"0\";\n        if (!options.hasOwnProperty(\"offsetLeft\"))\n            options.offsetLeft = \"0\";\n        return (options);\n    }\n    convert(form) {\n        let fname = this.utils.getName(form.component);\n        let navigable = true;\n        form.windowopts = this.complete(form.windowopts);\n        if (form.hasOwnProperty(\"navigable\"))\n            navigable = form.navigable;\n        let path = \"/\" + fname;\n        if (form.hasOwnProperty(\"path\"))\n            path = form.path;\n        path = path.trim();\n        if (!path.startsWith(\"/\"))\n            path = \"/\" + path;\n        let def = {\n            name: fname,\n            path: form.path,\n            title: form.title,\n            navigable: navigable,\n            component: form.component,\n            windowdef: form.windowopts\n        };\n        return (def);\n    }\n    clone(base) {\n        let clone = {\n            name: base.name,\n            path: base.path,\n            title: base.title,\n            windowdef: base.windowdef,\n            windowopts: base.windowdef,\n            component: base.component,\n            navigable: base.navigable\n        };\n        return (clone);\n    }\n}\n\nconst _c0 = [\"menu\"];\nconst _c1 = [\"window\"];\nconst _c2 = [\"topbar\"];\nconst _c3 = [\"content\"];\nclass ModalWindow {\n    constructor(ctx, change) {\n        this.change = change;\n        this.top = null;\n        this.left = null;\n        this.width = \"99vw\";\n        this.height = \"98vh\";\n        this.tmargin = \"1vh\";\n        this.minw = 0;\n        this.minh = 0;\n        this.offx = 0;\n        this.offy = 0;\n        this.move = false;\n        this.resz = false;\n        this.resizex = false;\n        this.resizey = false;\n        this.conf = ctx.conf;\n    }\n    get tcolor() {\n        return (this.conf.colors.title);\n    }\n    get bcolor() {\n        return (this.conf.colors.topbar);\n    }\n    get btncolor() {\n        return (this.conf.colors.menuoption);\n    }\n    setForm(form) {\n        this.resize(form, true);\n        let impl = form.formref.instance[\"_impl_\"];\n        impl.setModalWindow(this);\n        this.form = form;\n    }\n    getForm() {\n        return (this.form.formref.instance);\n    }\n    newForm(form) {\n        var _a;\n        if (!((_a = form.windowopts) === null || _a === void 0 ? void 0 : _a.inherit))\n            this.resize(form, false);\n        let formelem = this.content.firstElementChild;\n        if (formelem != null)\n            this.content.removeChild(formelem);\n        this.app.builder.getAppRef().detachView(this.form.formref.hostView);\n        if (this.menuelem != null) {\n            let menuelem = this.menu.firstElementChild;\n            if (menuelem != null)\n                this.menu.removeChild(this.menuelem);\n            this.app.builder.getAppRef().detachView(this.menuref.hostView);\n        }\n        let impl = form.formref.instance[\"_impl_\"];\n        impl.setModalWindow(this);\n        this.form = form;\n        this.display();\n    }\n    setWinRef(winref) {\n        this.winref = winref;\n    }\n    setApplication(app) {\n        this.app = app;\n    }\n    close() {\n        let impl = this.form.formref.instance[\"_impl_\"];\n        this.closeWindow();\n        impl.cancel();\n    }\n    closeWindow() {\n        WindowListener.remove(\"modal\", \"mouseup\");\n        WindowListener.remove(\"modal\", \"mousemove\");\n        WindowListener.remove(\"modal\", \"mousedown\");\n        let formelem = this.content.firstElementChild;\n        if (formelem != null)\n            this.content.removeChild(formelem);\n        this.app.builder.getAppRef().detachView(this.form.formref.hostView);\n        let element = this.winref.hostView.rootNodes[0];\n        document.body.removeChild(element);\n        this.app.builder.getAppRef().detachView(this.winref.hostView);\n        this.winref.destroy();\n        this.winref = null;\n    }\n    resize(form, pos) {\n        if (form.windowopts.offsetLeft != null && form.windowopts.offsetLeft.trim().endsWith(\"%\")) {\n            let s = form.windowopts.offsetLeft.trim();\n            let n = +s.substring(0, s.length - 1);\n            form.windowopts.offsetLeft = (window.innerWidth * n / 100) + \"px\";\n        }\n        if (form.windowopts.width != null && form.windowopts.width.trim().endsWith(\"%\")) {\n            let s = form.windowopts.width.trim();\n            let n = +s.substring(0, s.length - 1);\n            form.windowopts.width = (window.innerWidth * n / 100) + \"px\";\n        }\n        if (form.windowopts.offsetTop != null && form.windowopts.offsetTop.trim().endsWith(\"%\")) {\n            let s = form.windowopts.offsetTop.trim();\n            let n = +s.substring(0, s.length - 1);\n            form.windowopts.offsetTop = (window.innerHeight * n / 100) + \"px\";\n        }\n        if (form.windowopts.height != null && form.windowopts.height.trim().endsWith(\"%\")) {\n            let s = form.windowopts.height.trim();\n            let n = +s.substring(0, s.length - 1);\n            form.windowopts.height = (window.innerHeight * n / 100) + \"px\";\n        }\n        if (pos) {\n            this.top = form.windowopts.offsetTop;\n            this.left = form.windowopts.offsetLeft;\n            if (this.top == \"undefined\")\n                this.top = null;\n            if (this.left == \"undefined\")\n                this.left = null;\n        }\n        this.width = form.windowopts.width;\n        this.height = form.windowopts.height;\n        if (form.windowopts.width == \"\") {\n            this.left = \"0\";\n            this.width = \"100%\";\n        }\n        if (form.windowopts.height == \"\") {\n            this.top = \"0\";\n            this.height = \"100%\";\n        }\n        this.change.detectChanges();\n    }\n    display() {\n        if (this.form == null) {\n            setTimeout(() => { this.display(); }, 10);\n            return;\n        }\n        this.element = this.form.formref.hostView.rootNodes[0];\n        this.app.builder.getAppRef().attachView(this.form.formref.hostView);\n        this.content.appendChild(this.element);\n        this.minh = 100;\n        this.minw = 450;\n        this.showmenu();\n        this.change.detectChanges();\n        this.posy = this.window.offsetTop;\n        this.posx = this.window.offsetLeft;\n        this.sizex = this.window.offsetWidth;\n        this.sizey = this.window.offsetHeight;\n        let resize = false;\n        if (this.sizex < this.minw) {\n            resize = true;\n            this.sizex = this.minw;\n            this.width = this.sizex + \"px\";\n        }\n        if (this.sizey < this.minh) {\n            resize = true;\n            this.sizey = this.minh;\n            this.height = this.sizey + \"px\";\n        }\n        if (this.top == null || this.top.trim().length == 0) {\n            resize = true;\n            this.top = ((+window.innerHeight - this.sizey) / 3) + \"px\";\n        }\n        if (this.left == null || this.left.trim().length == 0) {\n            resize = true;\n            this.left = ((+window.innerWidth - this.sizex) / 3) + \"px\";\n        }\n        if (resize) {\n            this.change.detectChanges();\n            this.posy = this.window.offsetTop;\n            this.posx = this.window.offsetLeft;\n            this.sizex = this.window.offsetWidth;\n            this.sizey = this.window.offsetHeight;\n        }\n    }\n    showmenu() {\n        let impl = this.form.formref.instance[\"_impl_\"];\n        this.menuelem = null;\n        this.menuref = impl.getDropDownMenu();\n        if (this.menuref == null)\n            return;\n        this.menuelem = this.menuref.hostView.rootNodes[0];\n        this.app.builder.getAppRef().attachView(this.menuref.hostView);\n        this.menu.appendChild(this.menuelem);\n        let ddmenu = this.menuref.instance;\n        this.initmenu(ddmenu);\n    }\n    initmenu(ddmenu) {\n        if (ddmenu.getMenu() == null) {\n            setTimeout(() => { this.initmenu(ddmenu); }, 10);\n            return;\n        }\n        let impl = this.form.formref.instance[\"_impl_\"];\n        ddmenu.getMenu().getHandler().onFormChange(impl.form);\n        this.minw = this.menu.clientWidth + 50;\n        if (this.sizex < this.minw) {\n            this.sizex = this.minw;\n            this.width = this.sizex + \"px\";\n            this.change.detectChanges();\n        }\n    }\n    ngAfterViewInit() {\n        var _a, _b, _c, _d;\n        this.menu = (_a = this.menuElement) === null || _a === void 0 ? void 0 : _a.nativeElement;\n        this.window = (_b = this.windowElement) === null || _b === void 0 ? void 0 : _b.nativeElement;\n        this.topbar = (_c = this.topbarElement) === null || _c === void 0 ? void 0 : _c.nativeElement;\n        this.content = (_d = this.contentElement) === null || _d === void 0 ? void 0 : _d.nativeElement;\n        this.display();\n        WindowListener.add(\"modal\", this, \"mouseup\");\n        WindowListener.add(\"modal\", this, \"mousemove\");\n        WindowListener.add(\"modal\", this, \"mousedown\");\n        this.topbar.addEventListener(\"mousedown\", (event) => { this.startmove(event); });\n    }\n    onEvent(event) {\n        switch (event.type) {\n            case \"mouseup\":\n                this.mouseup();\n                break;\n            case \"mousemove\":\n                this.movePopup(event);\n                this.resizePopup(event);\n                this.resizemousemove(event);\n                break;\n            case \"mousedown\":\n                this.startresize(event);\n                break;\n        }\n    }\n    startmove(event) {\n        if (this.resizexy)\n            return;\n        this.move = true;\n        event = event || window.event;\n        event.preventDefault();\n        this.offy = +event.clientY - this.posy;\n        this.offx = +event.clientX - this.posx;\n    }\n    mouseup() {\n        if (!this.move && !this.resz)\n            return;\n        this.move = false;\n        this.resz = false;\n        this.resizexy = false;\n        this.window.style.cursor = \"default\";\n        document.body.style.cursor = \"default\";\n    }\n    movePopup(event) {\n        if (!this.move)\n            return;\n        event = event || window.event;\n        let deltay = +event.clientY - this.posy;\n        let deltax = +event.clientX - this.posx;\n        this.posy += (deltay - this.offy);\n        this.posx += (deltax - this.offx);\n        if (this.posy > 0)\n            this.top = this.posy + \"px\";\n        if (this.posx > 0)\n            this.left = this.posx + \"px\";\n        this.change.detectChanges();\n    }\n    resizemousemove(event) {\n        if (this.resz)\n            return;\n        event = event || window.event;\n        let posx = +event.clientX;\n        let posy = +event.clientY;\n        let offx = this.posx + this.sizex - posx;\n        let offy = this.posy + this.sizey - posy;\n        let before = false;\n        if (this.resizex || this.resizey)\n            before = true;\n        this.resizex = false;\n        this.resizey = false;\n        if (offx > -7 && offx < 10 && posy > this.posy - 7 && posy < this.posy + this.sizey + 7)\n            this.resizex = true;\n        if (offy > -7 && offy < 10 && posx > this.posx - 7 && posx < this.posx + this.sizex + 7)\n            this.resizey = true;\n        if (this.resizex && this.resizey) {\n            this.resizex = true;\n            this.resizey = true;\n        }\n        if (this.resizex && !this.resizey) {\n            this.window.style.cursor = \"e-resize\";\n            document.body.style.cursor = \"e-resize\";\n        }\n        if (this.resizey && !this.resizex) {\n            this.window.style.cursor = \"s-resize\";\n            document.body.style.cursor = \"s-resize\";\n        }\n        if (this.resizex && this.resizey) {\n            this.window.style.cursor = \"se-resize\";\n            document.body.style.cursor = \"se-resize\";\n        }\n        if (before && !this.resizexy) {\n            this.window.style.cursor = \"default\";\n            document.body.style.cursor = \"default\";\n        }\n    }\n    startresize(event) {\n        if (!this.resizexy)\n            return;\n        this.resz = true;\n        event = event || window.event;\n        event.preventDefault();\n        this.offy = +event.clientY;\n        this.offx = +event.clientX;\n    }\n    resizePopup(event) {\n        if (!this.resz)\n            return;\n        event = event || window.event;\n        let deltay = +event.clientY - this.offy;\n        let deltax = +event.clientX - this.offx;\n        if (this.resizex && (this.sizex > this.minw || deltax > 0)) {\n            this.sizex += deltax;\n            this.width = this.sizex + \"px\";\n        }\n        if (this.resizey && (this.sizey > this.minh || deltay > 0)) {\n            this.sizey += deltay;\n            this.height = this.sizey + \"px\";\n        }\n        this.offy = +event.clientY;\n        this.offx = +event.clientX;\n        this.change.detectChanges();\n    }\n    get resizexy() {\n        if (this.resizex || this.resizey)\n            return (true);\n        return (false);\n    }\n    set resizexy(on) {\n        this.resizex = on;\n        this.resizey = on;\n    }\n}\nModalWindow.ɵfac = function ModalWindow_Factory(t) { return new (t || ModalWindow)(i0.ɵɵdirectiveInject(Context), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };\nModalWindow.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: ModalWindow, selectors: [[\"modalwindow\"]], viewQuery: function ModalWindow_Query(rf, ctx) {\n        if (rf & 1) {\n            i0.ɵɵviewQuery(_c0, 5, ElementRef);\n            i0.ɵɵviewQuery(_c1, 5, ElementRef);\n            i0.ɵɵviewQuery(_c2, 5, ElementRef);\n            i0.ɵɵviewQuery(_c3, 5, ElementRef);\n        }\n        if (rf & 2) {\n            let _t;\n            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.menuElement = _t.first);\n            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.windowElement = _t.first);\n            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.topbarElement = _t.first);\n            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.contentElement = _t.first);\n        }\n    }, decls: 16, vars: 21, consts: [[1, \"modalwindow\"], [1, \"modalwindow-modal-block\"], [\"window\", \"\"], [1, \"modalwindow-container\"], [1, \"modalwindow-topbar\"], [\"topbar\", \"\"], [1, \"modalwindow-center\"], [1, \"modalwindow-corner\"], [\"menu\", \"\"], [1, \"modalwindow-close\"], [1, \"modalwindow-button\", 3, \"click\"], [1, \"modalwindow-block\"], [\"content\", \"\"]], template: function ModalWindow_Template(rf, ctx) {\n        if (rf & 1) {\n            i0.ɵɵelementStart(0, \"div\", 0);\n            i0.ɵɵelementStart(1, \"div\", 1, 2);\n            i0.ɵɵelementStart(3, \"div\", 3);\n            i0.ɵɵelementStart(4, \"div\", 4, 5);\n            i0.ɵɵelementStart(6, \"span\", 6);\n            i0.ɵɵelement(7, \"span\", 7);\n            i0.ɵɵelement(8, \"div\", null, 8);\n            i0.ɵɵelementStart(10, \"span\", 9);\n            i0.ɵɵelementStart(11, \"button\", 10);\n            i0.ɵɵlistener(\"click\", function ModalWindow_Template_button_click_11_listener() { return ctx.close(); });\n            i0.ɵɵtext(12, \"X\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(13, \"div\", 11);\n            i0.ɵɵelement(14, \"div\", null, 12);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n            i0.ɵɵadvance(1);\n            i0.ɵɵstyleMapInterpolate2(\"top: \", ctx.top, \"; left: \", ctx.left, \"\");\n            i0.ɵɵadvance(2);\n            i0.ɵɵstyleMapInterpolate2(\"width: \", ctx.width, \"; height: \", ctx.height, \";\");\n            i0.ɵɵadvance(1);\n            i0.ɵɵstyleMapInterpolate2(\"color: \", ctx.tcolor, \"; background-color: \", ctx.bcolor, \"\");\n            i0.ɵɵadvance(2);\n            i0.ɵɵstyleMapInterpolate1(\"color: \", ctx.tcolor, \";\");\n            i0.ɵɵadvance(5);\n            i0.ɵɵstyleMapInterpolate1(\"color: \", ctx.btncolor, \";\");\n            i0.ɵɵadvance(2);\n            i0.ɵɵstyleMapInterpolate1(\"margin-top: \", ctx.tmargin, \";\");\n        }\n    }, styles: [\".modalwindow[_ngcontent-%COMP%]{top:0;left:0;z-index:1;width:100%;height:100%;display:block;overflow:auto;position:fixed}.modalwindow-modal-block[_ngcontent-%COMP%]{position:absolute;background-color:#fefefe}.modalwindow-container[_ngcontent-%COMP%]{position:relative;border:2px solid black}.modalwindow-topbar[_ngcontent-%COMP%]{height:1.7em;margin-left:0;margin-right:0;cursor:default;justify-content:center;border-bottom:2px solid black}.modalwindow-corner[_ngcontent-%COMP%]{width:2.5em;display:block;position:relative}.modalwindow-close[_ngcontent-%COMP%]{top:0;right:0;width:1.75em;height:1.7em;position:absolute;border-left:1px solid black}.modalwindow-button[_ngcontent-%COMP%]{top:50%;width:100%;height:100%;outline:none;font-size:.75em;font-weight:bold;position:relative;background:transparent;transform:translateY(-50%);border:0px solid transparent;box-shadow:0 0 0 transparent;text-shadow:0px 0px 0px transparent}.modalwindow-center[_ngcontent-%COMP%]{top:0;bottom:0;width:93%;height:100%;display:flex;align-items:center;justify-content:center}.modalwindow-block[_ngcontent-%COMP%]{left:0;top:3vh;right:0;bottom:0;display:flex;overflow:auto;position:absolute;justify-content:center}\"], changeDetection: 0 });\n(function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ModalWindow, [{\n            type: Component,\n            args: [{\n                    selector: 'modalwindow',\n                    template: `\n    <div class=\"modalwindow\">\n      <div #window class=\"modalwindow-modal-block\" style=\"top: {{top}}; left: {{left}}\">\n        <div class=\"modalwindow-container\" style=\"width: {{width}}; height: {{height}};\">\n\t\t  <div #topbar class=\"modalwindow-topbar\" style=\"color: {{tcolor}}; background-color: {{bcolor}}\">\n\t\t    <span class=\"modalwindow-center\" style=\"color: {{tcolor}};\">\n\t\t\t\t<span class=\"modalwindow-corner\"></span>\n\t\t\t\t<div #menu></div>\n\t\t\t\t<span class=\"modalwindow-close\">\n\t\t\t\t\t<button class=\"modalwindow-button\" style=\"color: {{btncolor}};\" (click)=\"close()\">X</button>\n\t\t\t\t</span>\n\t\t\t</span>\n\t\t  </div>\n          <div class=\"modalwindow-block\" style=\"margin-top: {{tmargin}};\"><div #content></div></div>\n        </div>\n      </div>\n    </div>\n  `,\n                    styles: [`\n    .modalwindow\n    {\n        top: 0;\n        left: 0;\n        z-index: 1;\n        width: 100%;\n        height: 100%;\n        display: block;\n        overflow: auto;\n        position: fixed;\n    }\n\n    .modalwindow-modal-block\n    {\n      position: absolute;\n      background-color: #fefefe;\n    }\n\n    .modalwindow-container\n    {\n        position: relative;\n        border: 2px solid black;\n    }\n\n    .modalwindow-topbar\n    {\n        height: 1.70em;\n        margin-left: 0;\n        margin-right: 0;\n        cursor:default;\n\t\tjustify-content: center;\n        border-bottom: 2px solid black;\n    }\n\n\t.modalwindow-corner\n\t{\n\t\twidth: 2.5em;\n\t\tdisplay: block;\n\t\tposition: relative;\n\t}\n\n\t.modalwindow-close\n\t{\n\t\ttop: 0;\n\t\tright: 0;\n\t\twidth: 1.75em;\n\t\theight: 1.70em;\n\t\tposition: absolute;\n\t\tborder-left: 1px solid black;\n\t}\n\n\t.modalwindow-button\n\t{\n\t\ttop: 50%;\n\t\twidth: 100%;\n\t\theight: 100%;\n\t\toutline:none;\n\t\tfont-size: 0.75em;\n\t\tfont-weight: bold;\n\t\tposition: relative;\n\t\tbackground: transparent;\n\t\ttransform: translateY(-50%);\n\t\tborder: 0px solid transparent;\n\t\tbox-shadow: 0px 0px 0px transparent;\n\t\ttext-shadow: 0px 0px 0px transparent;\n\t}\n\n\t.modalwindow-center\n\t{\n\t\ttop: 0;\n\t\tbottom: 0;\n\t\twidth: 93%;\n\t\theight: 100%;\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tjustify-content: center;\n\t}\n\n    .modalwindow-block\n    {\n        left: 0;\n        top: 3vh;\n        right: 0;\n        bottom: 0;\n\t\tdisplay: flex;\n        overflow: auto;\n        position: absolute;\n\t\tjustify-content: center;\n    }\n`],\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], function () { return [{ type: Context }, { type: i0.ChangeDetectorRef }]; }, { menuElement: [{\n                type: ViewChild,\n                args: [\"menu\", { read: ElementRef }]\n            }], windowElement: [{\n                type: ViewChild,\n                args: [\"window\", { read: ElementRef }]\n            }], topbarElement: [{\n                type: ViewChild,\n                args: [\"topbar\", { read: ElementRef }]\n            }], contentElement: [{\n                type: ViewChild,\n                args: ['content', { read: ElementRef }]\n            }] });\n})();\n\nclass FormsControl {\n    constructor(app, builder) {\n        this.app = app;\n        this.builder = builder;\n        this.utils = new Utils();\n        this.formlist = [];\n        this.forms = new Map();\n    }\n    setFormArea(formarea) {\n        this.formarea = formarea;\n    }\n    setFormsDefinitions(forms) {\n        let futil = new FormUtil();\n        for (let i = 0; i < forms.length; i++) {\n            let form = forms[i];\n            let def = futil.convert(form);\n            this.formlist.push(def);\n            this.forms.set(def.name, def);\n        }\n        return (this.forms);\n    }\n    findFormByPath(path) {\n        for (let i = 0; i < this.formlist.length; i++) {\n            if (this.formlist[i].path == path)\n                return (this.formlist[i].name);\n        }\n        return (null);\n    }\n    getFormsList() {\n        return (this.formlist);\n    }\n    getFormsDefinitions() {\n        return (this.forms);\n    }\n    closeform(form, destroy) {\n        let name = this.utils.getName(form);\n        let formdef = this.forms.get(name);\n        if (formdef == null || formdef.formref == null)\n            return;\n        this.close(formdef, destroy);\n    }\n    close(formdef, destroy) {\n        if (formdef.formref == null)\n            return;\n        let formsarea = this.formarea.getFormsArea();\n        let element = formdef.formref.hostView.rootNodes[0];\n        if (this.current != null && this.current.element == element) {\n            this.current = null;\n            formsarea.removeChild(element);\n            this.builder.getAppRef().detachView(formdef.formref.hostView);\n        }\n        if (destroy) {\n            formdef.formref.destroy();\n            formdef.windowopts = null;\n            formdef.formref = null;\n        }\n    }\n    display(formdef) {\n        if (formdef == null || formdef.formref == null)\n            return;\n        let formsarea = this.formarea.getFormsArea();\n        let element = formdef.formref.hostView.rootNodes[0];\n        let impl = formdef.formref.instance[\"_impl_\"];\n        if (formdef.windowopts == null) {\n            this.current = { formdef: formdef, element: element };\n            this.builder.getAppRef().attachView(formdef.formref.hostView);\n            formsarea.appendChild(element);\n        }\n        else {\n            let id = {\n                impl: impl,\n                ref: formdef.formref,\n                name: formdef.name,\n                modalopts: formdef.windowopts\n            };\n            impl.setInstanceID(id);\n            let win = this.createWindow();\n            win.setForm(formdef);\n            win.setApplication(this.app);\n        }\n    }\n    createWindow() {\n        let winref = this.app.builder.createComponent(ModalWindow);\n        let win = winref.instance;\n        win.setWinRef(winref);\n        let element = winref.hostView.rootNodes[0];\n        this.builder.getAppRef().attachView(winref.hostView);\n        document.body.appendChild(element);\n        return (win);\n    }\n    getFormInstance(form) {\n        let name = this.utils.getName(form);\n        let formdef = this.forms.get(name);\n        if (formdef == null)\n            return (null);\n        if (formdef.formref == null) {\n            formdef.formref = this.createForm(formdef.component);\n            if (formdef.windowdef != null && formdef.windowdef.wizard)\n                formdef.windowopts = formdef.windowdef;\n        }\n        return (formdef);\n    }\n    createForm(component) {\n        let ref = this.builder.createComponent(component);\n        if (!(ref.instance instanceof Form)) {\n            let name = ref.instance.constructor.name;\n            console.log(\"Component \" + name + \" is not an instance of Form\");\n            return;\n        }\n        let impl = ref.instance[\"_impl_\"];\n        impl.setApplication(this.app);\n        return (ref);\n    }\n}\n\nclass Connection {\n    constructor(app) {\n        this.app = app;\n        this.url = null;\n        this.conn = null;\n        this.keepalive = 0;\n        this.client = null;\n        this.stmtid = 0;\n        this.waitlim = 250;\n        this.running = new Map();\n        this.client = app.client;\n    }\n    connect(usr, pwd) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.url == null) {\n                yield this.app.config.ready();\n                let conf = yield this.app.config.others;\n                this.url = conf[\"database.js\"];\n                if (this.url == null || this.url.length == 0)\n                    this.url = window.location.origin;\n            }\n            if (this.conn != null) {\n                this.alert(\"Already logged on\");\n                return;\n            }\n            if (usr == null || pwd == null) {\n                this.alert(\"Username and password must be specified to logon\");\n                return;\n            }\n            let credentials = { usr: usr, pwd: pwd };\n            let response = yield this.invoke(\"connect\", credentials);\n            if (response[\"status\"] == \"failed\") {\n                this.alert(response[\"message\"]);\n                return;\n            }\n            this.conn = response[\"id\"];\n            ;\n            this.keepalive = response[\"keep-alive\"];\n            this.app.appstate.onConnect();\n            this.keepAlive();\n            return (response);\n        });\n    }\n    commit() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.conn != null) {\n                let response = yield this.invoke(\"commit\", {});\n                if (response[\"status\"] != \"ok\")\n                    this.alert(JSON.stringify(response));\n                this.app.appstate.transactionChange(false);\n                return (false);\n            }\n            return (true);\n        });\n    }\n    rollback() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.conn != null) {\n                let response = yield this.invoke(\"rollback\", {});\n                if (response[\"status\"] != \"ok\") {\n                    this.alert(JSON.stringify(response));\n                    return (false);\n                }\n                this.app.appstate.transactionChange(false);\n                return (false);\n            }\n            return (true);\n        });\n    }\n    get connected() {\n        return (this.conn != null);\n    }\n    disconnect() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.conn == null) {\n                this.alert(\"not logged on\");\n                return;\n            }\n            let response = yield this.invoke(\"disconnect\", {});\n            if (response[\"status\"] != \"ok\")\n                this.alert(JSON.stringify(response));\n            this.conn = null;\n            this.keepalive = 0;\n            this.app.appstate.transactionChange(false);\n            this.app.appstate.onDisconnect();\n        });\n    }\n    keepAlive() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.conn != null && +this.keepalive > 0) {\n                let response = null;\n                let body = { \"keep-alive\": true };\n                yield this.client.post(this.url + \"/\" + this.conn + \"/ping\", body).toPromise().then(data => { response = data; }, error => { response = error; });\n                if (response[\"status\"] != \"ok\") {\n                    this.keepalive = 0;\n                    this.alert(JSON.stringify(response), \"KeepAlive stopped\");\n                }\n                setTimeout(() => { this.keepAlive(); }, this.keepalive * 1000);\n            }\n        });\n    }\n    invokestmt(stmt) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return (this.invoke(SQLType[stmt.type], stmt.build()));\n        });\n    }\n    invoke(cmd, body) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let url = this.url + \"/\";\n            if (this.conn != null)\n                url = url + this.conn + \"/\";\n            if (this.conn == null && cmd != \"connect\")\n                return ({ status: \"failed\", message: \"Not logged on\" });\n            if (cmd == \"lock\" || cmd == \"insert\" || cmd == \"update\" || cmd == \"delete\")\n                this.app.appstate.transactionChange(true);\n            let stid = this.stmtid++;\n            let start = new Date().getTime();\n            this.running.set(stid, start);\n            setTimeout(() => { this.showwait(); }, +this.waitlim + +10);\n            return (this.client.post(url + cmd, body).toPromise().then(data => { return (this.onReply(stid, data)); }, error => { return (this.onReply(stid, error)); }));\n        });\n    }\n    onReply(stid, data) {\n        let response = null;\n        this.running.delete(stid);\n        this.showwait();\n        if (!(data instanceof HttpErrorResponse))\n            response = data;\n        else\n            response = { status: \"failed\", error: \"500\", message: JSON.stringify(data.message) };\n        return (response);\n    }\n    alert(msg, title) {\n        if (title == null)\n            title = \"Database Call Failed\";\n        MessageBox.show(this.app, msg, title);\n    }\n    showwait() {\n        let now = new Date().getTime();\n        let min = now;\n        this.running.forEach((start) => {\n            if (+start < +min)\n                min = start;\n        });\n        let show = false;\n        if (now - min > +this.waitlim)\n            show = true;\n        if (show)\n            Wait.show(this.app);\n        else\n            Wait.close(this.app);\n    }\n}\n\nclass ApplicationState {\n    constructor(app) {\n        this.app = app;\n        this.menu = null;\n        this.form = null;\n        this.transaction = false;\n        this.appmenu = null;\n        this.forms = new Map();\n        this.menus = new Map();\n        this.menu = new DefaultMenu();\n        this.connection = new Connection(app);\n    }\n    addForm(form) {\n        this.forms.set(form.guid, form);\n    }\n    dropForm(form) {\n        this.forms.delete(form.guid);\n    }\n    addMenu(menu) {\n        let mhdl = menu.getHandler();\n        this.menus.set(mhdl.guid, mhdl);\n    }\n    dropMenu(menu) {\n        if (menu != null) {\n            let mhdl = menu.getHandler();\n            this.menus.delete(mhdl.guid);\n        }\n    }\n    clearAllForms() {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.forms.forEach((form) => { form.clear(); });\n        });\n    }\n    onConnect() {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.menus.forEach((mhdl) => { mhdl.onConnect(); });\n            let forms = [];\n            this.forms.forEach((form) => __awaiter(this, void 0, void 0, function* () { forms.push(form); }));\n            for (let f = 0; f < forms.length; f++) {\n                let funcs = FormDefinitions.getOnConnect(forms[f].name);\n                for (let i = 0; i < funcs.length; i++)\n                    yield this.app.execfunc(forms[f], funcs[i]);\n            }\n            return (true);\n        });\n    }\n    transactionChange(trans) {\n        if (!trans)\n            this.forms.forEach((form) => { form.onCommit(); });\n        if (trans + \"\" != this.transaction + \"\") {\n            this.transaction = trans;\n            this.menus.forEach((mhdl) => { mhdl.onTransactionChange(); });\n        }\n    }\n    onDisconnect() {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.menus.forEach((mhdl) => { mhdl.onDisconnect(); });\n            let forms = [];\n            this.forms.forEach((form) => __awaiter(this, void 0, void 0, function* () { forms.push(form); }));\n            for (let f = 0; f < forms.length; f++) {\n                let funcs = FormDefinitions.getOnDisconnect(forms[f].name);\n                for (let i = 0; i < funcs.length; i++)\n                    yield this.app.execfunc(forms[f], funcs[i]);\n            }\n            return (true);\n        });\n    }\n    get connected() {\n        return (this.connection.connected);\n    }\n    alert(message, title, width, height) {\n        MessageBox.show(this.app, message, title, width, height);\n    }\n}\n\nclass InstanceControl {\n    constructor(ctrl) {\n        this.ctrl = ctrl;\n        this.utils = new Utils();\n        this.futil = new FormUtil();\n    }\n    setFormsDefinitions(forms) {\n        this.forms = forms;\n    }\n    getNewInstance(form, modal) {\n        let name = this.utils.getName(form);\n        if (name == null)\n            return (null);\n        let def = this.forms.get(name);\n        if (def == null)\n            return (null);\n        let ref = this.ctrl.createForm(def.component);\n        if (ref == null)\n            return (null);\n        let impl = ref.instance[\"_impl_\"];\n        if (modal == null)\n            modal = def.windowdef;\n        modal = this.futil.complete(modal, true);\n        let id = {\n            ref: ref,\n            impl: impl,\n            name: def.name,\n            modalopts: modal\n        };\n        impl.setInstanceID(id);\n        return (id);\n    }\n    getInstance(id) {\n        let def = this.forms.get(id.name);\n        let instance = this.futil.clone(def);\n        if (id.ref == null)\n            id.ref = this.ctrl.createForm(def.component);\n        instance.formref = id.ref;\n        instance.windowopts = id.modalopts;\n        return (instance);\n    }\n    closeInstance(id, destroy) {\n        let inst = this.getInstance(id);\n        if (destroy) {\n            inst.formref.destroy();\n            inst.windowopts = null;\n            inst.formref = null;\n        }\n    }\n}\n\nclass Field {\n    constructor(name, row) {\n        this.seq = 0;\n        this.value$ = \"\";\n        this.current$ = false;\n        this.enabled$ = false;\n        this.field = null;\n        this.fields$ = [];\n        this.cfields$ = [];\n        this.state$ = RecordState.na;\n        this.ids = new Map();\n        this.index = new Map();\n        this.row$ = row;\n        this.name$ = name;\n    }\n    ;\n    get name() {\n        return (this.name$);\n    }\n    get row() {\n        return (this.row$);\n    }\n    set block(block) {\n        this.block$ = block;\n    }\n    get block() {\n        return (this.block$);\n    }\n    get fields() {\n        return (this.fields$);\n    }\n    get cfields() {\n        return (this.cfields$);\n    }\n    set valid(valid) {\n        this.fields.forEach((inst) => { inst.valid = valid; });\n        if (this.current)\n            this.cfields.forEach((inst) => { inst.valid = valid; });\n    }\n    getInstance(guid) {\n        return (this.index.get(guid));\n    }\n    getFirstInstance() {\n        if (this.fields.length > 0)\n            return (this.fields[0]);\n        if (this.current && this.cfields.length > 0) {\n            let inst = this.cfields[0];\n            inst.row = this.row;\n            return (inst);\n        }\n        return (null);\n    }\n    get state() {\n        return (this.state$);\n    }\n    get readonly() {\n        for (let i = 0; i < this.fields.length; i++) {\n            if (this.fields[i].enabled) {\n                if (!this.fields[i].readonly)\n                    return (false);\n            }\n        }\n        if (this.current$) {\n            for (let i = 0; i < this.cfields.length; i++) {\n                if (this.cfields[i].enabled) {\n                    if (!this.cfields[i].readonly)\n                        return (false);\n                }\n            }\n        }\n        return (true);\n    }\n    get current() {\n        return (this.current$);\n    }\n    set current(flag) {\n        this.current$ = flag;\n        if (!flag)\n            this.cfields.forEach((inst) => {\n                inst.value = null;\n                inst.disable();\n            });\n        else\n            this.cfields.forEach((inst) => {\n                inst.parent = this;\n                inst.row = this.row;\n                inst.value = this.value$;\n                inst.state = this.state;\n                inst.readonly = this.readonly;\n                inst.enable();\n            });\n    }\n    get value() {\n        return (this.value$);\n    }\n    set value(value) {\n        this.value$ = value;\n        this.fields.forEach((inst) => { inst.value = value; });\n        if (this.current)\n            this.cfields.forEach((inst) => { inst.value = value; });\n    }\n    get enabled() {\n        return (this.enabled$);\n    }\n    focus() {\n        if (this.field != null && this.field.enabled) {\n            if (this.field.focus())\n                return (true);\n        }\n        for (let i = 0; i < this.fields.length; i++) {\n            if (this.fields[i].enabled) {\n                if (this.fields[i].focus())\n                    return (true);\n            }\n        }\n        if (this.current$) {\n            for (let i = 0; i < this.cfields.length; i++) {\n                if (this.cfields[i].enabled) {\n                    if (this.cfields[i].focus())\n                        return (true);\n                }\n            }\n        }\n        return (false);\n    }\n    add(field) {\n        field.parent = this;\n        if (field.row == -1) {\n            this.cfields.push(field);\n            if (field.guid == null)\n                field.guid = \"c:\" + (this.seq++);\n        }\n        else {\n            this.fields.push(field);\n            field.guid = \"f:\" + (this.seq++);\n        }\n        this.index.set(field.guid, field);\n        if (field.id.length > 0)\n            this.ids.set(field.id, field);\n    }\n    get definition() {\n        return (this.def);\n    }\n    setDefinition(def, cascade) {\n        this.def = def;\n        if (cascade) {\n            for (let i = 0; i < this.fields.length; i++)\n                this.fields[i].definition = def;\n            for (let i = 0; i < this.cfields.length; i++)\n                this.cfields[i].definition = def;\n        }\n    }\n    set state(state) {\n        this.state$ = state;\n        this.fields.forEach((field) => { field.state = state; });\n        if (this.current)\n            this.cfields.forEach((field) => { field.state = state; });\n    }\n    enable(readonly) {\n        this.enabled$ = true;\n        this.fields.forEach((field) => { field.readonly = readonly; field.enable(); });\n        if (this.current)\n            this.cfields.forEach((field) => { field.readonly = readonly; field.enable(); });\n    }\n    disable() {\n        this.enabled$ = false;\n        this.fields.forEach((field) => { field.disable(); });\n        if (this.current)\n            this.cfields.forEach((field) => { field.disable(); });\n    }\n    validate() {\n        let valid = true;\n        let inst = null;\n        for (let i = 0; i < this.fields.length; i++) {\n            inst = this.fields[i];\n            if (!this.fields[i].validate()) {\n                valid = false;\n                break;\n            }\n        }\n        if (valid && this.current) {\n            for (let i = 0; i < this.cfields.length; i++) {\n                inst = this.cfields[i];\n                if (!this.cfields[i].validate()) {\n                    valid = false;\n                    break;\n                }\n            }\n        }\n        this.valid = valid;\n        if (inst != null)\n            this.copy(inst);\n        return (valid);\n    }\n    onEvent(event, field, type, key) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (type == \"blur\")\n                this.field = null;\n            if (type == \"focus\")\n                this.field = field;\n            if (type == \"cchange\" || type == \"change\")\n                this.copy(field);\n            if (this.block$ != null)\n                this.block$.onEvent(event, field, type, key);\n        });\n    }\n    copy(field) {\n        this.value$ = field.value;\n        this.fields.forEach((inst) => {\n            if (inst != field)\n                inst.value = this.value$;\n        });\n        this.cfields.forEach((inst) => {\n            if (inst != field)\n                inst.value = this.value$;\n        });\n    }\n}\n\nclass Container {\n    constructor() {\n        this.fields$ = [];\n        this.blocks = new Map();\n    }\n    register(field) {\n        let bname = field.block;\n        let block = this.blocks.get(bname);\n        if (block == null) {\n            block = new ContainerBlock(bname);\n            this.blocks.set(bname, block);\n        }\n        block.add(field);\n        block.fields.push(field);\n        this.fields$.push(field);\n    }\n    get fields() {\n        return (this.fields$);\n    }\n    getBlock(block) {\n        return (this.blocks.get(block.toLowerCase()));\n    }\n    getBlocks() {\n        let blocks = [];\n        this.blocks.forEach((blk) => { blocks.push(blk); });\n        return (blocks);\n    }\n    finish() {\n        this.blocks.forEach((block) => { block[\"finish\"](); });\n    }\n}\nclass ContainerBlock {\n    constructor(name) {\n        this.rows$ = 0;\n        this.fields$ = [];\n        this.current$ = [];\n        this.records$ = new Map();\n        this.name$ = name;\n    }\n    get name() {\n        return (this.name$);\n    }\n    get rows() {\n        return (this.rows$);\n    }\n    add(field) {\n        let row = field.row;\n        if (field.row == -1) {\n            this.current$.push(field);\n            return;\n        }\n        let rec = this.records$.get(+row);\n        if (rec == null) {\n            rec = new ContainerRecord(row);\n            this.records$.set(+row, rec);\n            if (field.row > this.rows$)\n                this.rows$ = field.row;\n        }\n        rec.add(field);\n    }\n    get fields() {\n        return (this.fields$);\n    }\n    get records() {\n        let recs = [];\n        this.records$.forEach((rec) => { recs.push(rec); });\n        let sorted = recs.sort((a, b) => { return (a.row - b.row); });\n        return (sorted);\n    }\n    getRecord(row) {\n        return (this.records$.get(+row));\n    }\n    finish() {\n        if (this.rows$ == 0) {\n            let rec = new ContainerRecord(0);\n            this.records$.set(0, rec);\n            this.current$.forEach((field) => {\n                field.row = 0;\n                rec.add(field);\n            });\n            this.current$ = [];\n        }\n        else {\n            this.records$.forEach((rec) => {\n                this.current$.forEach((inst) => {\n                    let group = rec.index.get(inst.name);\n                    if (group != null)\n                        group.add(inst);\n                    else\n                        rec.add(inst);\n                });\n            });\n        }\n    }\n}\nclass ContainerRecord {\n    constructor(row) {\n        this.fields = [];\n        this.index = new Map();\n        this.row = row;\n    }\n    add(field) {\n        let group = this.index.get(field.name);\n        if (group == null) {\n            group = new Field(field.name, this.row);\n            this.index.set(field.name, group);\n            this.fields.push(group);\n        }\n        group.add(field);\n    }\n}\n\nclass ContainerControl {\n    constructor(builder) {\n        this.builder = builder;\n    }\n    setContainer(container) {\n        if (container == null)\n            container = new Container();\n        this.container = container;\n    }\n    getContainer() {\n        let cont = this.container;\n        return (cont);\n    }\n    dropContainer() {\n        this.container = null;\n    }\n}\n\nclass ApplicationImpl {\n    constructor(ctx, client, builder) {\n        this.client = client;\n        this.builder = builder;\n        this.ready = 2;\n        this.config$ = null;\n        this.marea = null;\n        this.apptitle = null;\n        this.formlist = null;\n        this.mfactory = null;\n        this.formsctl = null;\n        this.state = null;\n        this.contctl = null;\n        this.instances = null;\n        this.app = ctx.app;\n        this.config$ = ctx.conf;\n        this.enable();\n        this.loadConfig();\n        this.state = new ApplicationState(this);\n        this.contctl = new ContainerControl(builder);\n        this.mfactory = new MenuFactory(this.builder);\n        this.formsctl = new FormsControl(this, builder);\n        this.instances = new InstanceControl(this.formsctl);\n        this.setFormsDefinitions(FormDefinitions.getForms());\n        this.state.appmenu = this.createmenu(this.state.menu);\n    }\n    loadConfig() {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.config$.ready();\n            if (this.config$.others.hasOwnProperty(\"title\"))\n                this.setTitle(this.config$.others[\"title\"]);\n            if (this.config$.others.hasOwnProperty(\"theme\"))\n                this.config$.setTheme(this.config$.others[\"theme\"]);\n            this.ready--;\n            this.showLinkedForm();\n        });\n    }\n    get config() {\n        return (this.config$);\n    }\n    enable() {\n        WindowListener.add(\"app\", this, \"keydown\");\n    }\n    disable() {\n        WindowListener.remove(\"app\", \"keydown\");\n    }\n    get appstate() {\n        return (this.state);\n    }\n    getApplication() {\n        return (this.app);\n    }\n    setTitle(title) {\n        this.apptitle = title;\n        this.showTitle(title);\n    }\n    close() {\n        this.closeform(this.state.form, true);\n    }\n    setMenu(menu) {\n        this.deletemenu(this.state.menu);\n        this.state.menu = menu;\n        this.state.appmenu = this.createmenu(menu);\n        this.showMenu(this.state.appmenu);\n    }\n    getMenu() {\n        return (this.state.menu);\n    }\n    showTitle(title) {\n        if (title == null)\n            title = this.apptitle;\n        document.title = title;\n    }\n    showPath(name, path) {\n        let state = { additionalInformation: 'None' };\n        let url = window.location.protocol + '//' + window.location.host;\n        window.history.replaceState(state, name, url + path);\n    }\n    getFormsList() {\n        return (this.formsctl.getFormsList());\n    }\n    getFormsDefinitions() {\n        return (this.formsctl.getFormsDefinitions());\n    }\n    setFormList(formlist) {\n        this.formlist = formlist;\n    }\n    setMenuArea(area) {\n        this.marea = area;\n        this.showMenu(this.state.appmenu);\n    }\n    setFormArea(area) {\n        this.formsctl.setFormArea(area);\n        this.ready--;\n    }\n    setContainer(container) {\n        this.contctl.setContainer(container);\n    }\n    getContainer() {\n        return (this.contctl.getContainer());\n    }\n    dropContainer() {\n        this.contctl.dropContainer();\n    }\n    get connection() {\n        return (this.appstate.connection);\n    }\n    get connected() {\n        return (this.appstate.connected);\n    }\n    disconnect() {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.appstate.connection.disconnect();\n            (_a = this.getCurrentForm()) === null || _a === void 0 ? void 0 : _a.focus();\n        });\n    }\n    newForm(impl) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let funcs = FormDefinitions.getOnInit(impl.name);\n            for (let i = 0; i < funcs.length; i++)\n                yield this.execfunc(impl, funcs[i]);\n            funcs = FormDefinitions.getOnShow(impl.name);\n            for (let i = 0; i < funcs.length; i++)\n                yield this.execfunc(impl, funcs[i]);\n            impl.onShow();\n        });\n    }\n    preform(impl, parameters, formdef, path) {\n        return __awaiter(this, void 0, void 0, function* () {\n            impl.setParameters(parameters);\n            if (!impl.initiated()) {\n                impl.path = formdef.path;\n                impl.title = formdef.title;\n                this.state.addForm(impl);\n                this.showTitle(formdef.title);\n                if (path)\n                    this.showPath(impl.name, formdef.path);\n                return;\n            }\n            this.showTitle(impl.title);\n            if (path)\n                this.showPath(impl.name, impl.path);\n            let funcs = FormDefinitions.getOnShow(impl.name);\n            for (let i = 0; i < funcs.length; i++)\n                yield this.execfunc(impl, funcs[i]);\n            impl.onShow();\n        });\n    }\n    postform(impl, destroy) {\n        return __awaiter(this, void 0, void 0, function* () {\n            impl.onHide();\n            let funcs = FormDefinitions.getOnHide(impl.name);\n            for (let i = 0; i < funcs.length; i++)\n                yield this.execfunc(impl, funcs[i]);\n            if (destroy) {\n                this.state.dropForm(impl);\n                let funcs = FormDefinitions.getOnDestroy(impl.name);\n                for (let i = 0; i < funcs.length; i++)\n                    yield this.execfunc(impl, funcs[i]);\n            }\n        });\n    }\n    execfunc(impl, func) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                yield impl.form[func]();\n            }\n            catch (error) {\n                console.log(error);\n            }\n        });\n    }\n    callform(form, destroy, parameters) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.ready != 0) {\n                setTimeout(() => { this.callform(form, destroy, parameters); }, 10);\n                return;\n            }\n            if (this.state.form != null) {\n                // Make sure changes has been validated\n                if (!(yield this.state.form.validate()))\n                    return;\n                // get current form in chain\n                let curr = this.state.form.getChain();\n                // let form handle the showform\n                yield curr.callform(form, destroy, parameters);\n            }\n        });\n    }\n    getCurrentForm() {\n        if (this.ready != 0)\n            return (null);\n        if (this.state.form == null)\n            return (null);\n        return (this.state.form.getChain());\n    }\n    showform(form, destroy, parameters) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.ready != 0) {\n                setTimeout(() => { this.showform(form, destroy, parameters); }, 10);\n                return;\n            }\n            if (this.state.form != null) {\n                // Make sure changes has been validated\n                if (!(yield this.state.form.validate()))\n                    return;\n                // if form has called anoother form\n                let curr = this.state.form.getChain();\n                if (curr != this.state.form) {\n                    // let form handle the showform\n                    curr.showform(form, destroy, parameters);\n                    return;\n                }\n                if (this.state.form.getModalWindow() != null)\n                    return;\n                this.closeform(this.state.form, false);\n            }\n            if (destroy)\n                this.formsctl.closeform(form, destroy);\n            let formdef = this.getFormInstance(form);\n            if (formdef == null)\n                return;\n            let impl = formdef.formref.instance[\"_impl_\"];\n            yield this.preform(impl, parameters, formdef, true);\n            this.state.form = impl;\n            let fmenu = impl.getDropDownMenu();\n            if (!((_a = formdef.windowopts) === null || _a === void 0 ? void 0 : _a.wizard))\n                this.showMenu(fmenu);\n            DropDownMenu.setForm(fmenu, formdef.formref.instance);\n            this.formsctl.display(formdef);\n        });\n    }\n    showinstance(inst) {\n        if (this.ready == 0)\n            this.formsctl.display(inst);\n        else\n            setTimeout(() => { this.showinstance(inst); }, 10);\n    }\n    closeform(impl, destroy) {\n        if (impl == null)\n            return;\n        this.postform(impl, destroy);\n        this.formsctl.closeform(impl.name, destroy);\n        if (this.state.appmenu != null)\n            DropDownMenu.setForm(this.state.appmenu, null);\n        this.showPath(\"\", \"\");\n        this.showTitle(null);\n        this.state.form = null;\n        this.showMenu(this.state.appmenu);\n    }\n    getFormInstance(form) {\n        return (this.formsctl.getFormInstance(form));\n    }\n    getNewInstance(form, modal) {\n        return (this.instances.getNewInstance(form, modal));\n    }\n    getInstance(id) {\n        return (this.instances.getInstance(id));\n    }\n    closeInstance(id, destroy) {\n        this.postform(id.impl, destroy);\n        this.instances.closeInstance(id, destroy);\n    }\n    showMenu(menu) {\n        if (this.marea != null)\n            this.marea.display(menu);\n    }\n    deletemenu(menu) {\n        this.state.dropMenu(menu);\n    }\n    createmenu(menu) {\n        if (menu == null)\n            return (null);\n        this.state.addMenu(menu);\n        let ddmenu = this.mfactory.create(menu);\n        return (ddmenu);\n    }\n    setFormsDefinitions(forms) {\n        for (let i = 0; i < forms.length; i++) {\n            let fname = forms[i].component.name.toLowerCase();\n            forms[i].windowopts = FormDefinitions.getWindowOpts(fname);\n            forms[i].databaseusage = DatabaseDefinitions.getFormUsage(fname);\n        }\n        let formsmap = this.formsctl.setFormsDefinitions(forms);\n        this.instances.setFormsDefinitions(formsmap);\n    }\n    showLinkedForm() {\n        if (this.ready != 0) {\n            // Make time for application setup\n            setTimeout(() => { this.showLinkedForm(); }, 500);\n            return;\n        }\n        let form = decodeURI(window.location.pathname);\n        if (form.length > 0)\n            form = this.formsctl.findFormByPath(form);\n        if (form != null) {\n            let inst = this.formsctl.getFormsDefinitions().get(form);\n            if (inst == null || !inst.navigable) {\n                this.showPath(\"\", \"\");\n                return;\n            }\n            let params = new Map();\n            let urlparams = new URLSearchParams(window.location.search);\n            urlparams.forEach((value, key) => { params.set(key, value); });\n            this.showform(form, false, params);\n        }\n    }\n    onEvent(event) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (Wait.waiting())\n                return;\n            let keydef = {\n                code: event.keyCode,\n                alt: event.altKey,\n                ctrl: event.ctrlKey,\n                meta: event.metaKey,\n                shift: event.shiftKey\n            };\n            let map = KeyMapper.map(keydef);\n            let key = KeyMapper.keymap(map);\n            if (key == keymap.connect) {\n                this.app.connect();\n                return;\n            }\n            if (key == keymap.disconnect) {\n                this.app.disconnect();\n                return;\n            }\n            if (key == keymap.close ||\n                key == keymap.delete ||\n                key == keymap.listval ||\n                key == keymap.commit ||\n                key == keymap.rollback ||\n                key == keymap.clearform ||\n                key == keymap.insertafter ||\n                key == keymap.insertbefore ||\n                key == keymap.enterquery ||\n                key == keymap.executequery) {\n                event.preventDefault();\n                let form = this.getCurrentForm();\n                if (form != null)\n                    form.sendkey(event, key);\n            }\n        });\n    }\n}\n\nclass MacKeyMap {\n    constructor() {\n        this.zoom = KeyMapper.map({ code: 90, ctrl: true });\n        this.close = KeyMapper.map({ code: 87, ctrl: true });\n        this.undo = KeyMapper.map({ code: 90, meta: true });\n        this.paste = KeyMapper.map({ code: 86, meta: true });\n        this.enter = KeyMapper.map({ code: KeyCodes.enter });\n        this.escape = KeyMapper.map({ code: KeyCodes.escape });\n        this.listval = KeyMapper.map({ code: 76, shift: true, ctrl: true });\n        this.clearblock = KeyMapper.map({ code: KeyCodes.escape, ctrl: true });\n        this.clearform = KeyMapper.map({ code: KeyCodes.escape, shift: true, ctrl: true });\n        this.insertafter = KeyMapper.map({ code: 73, ctrl: true });\n        this.insertbefore = KeyMapper.map({ code: 73, shift: true, ctrl: true });\n        this.delete = KeyMapper.map({ code: 68, ctrl: true });\n        this.dublicate = KeyMapper.map({ code: 86, ctrl: true });\n        this.commit = KeyMapper.map({ code: KeyCodes.enter, ctrl: true });\n        this.rollback = KeyMapper.map({ code: KeyCodes.f1, ctrl: true, shift: true });\n        this.connect = KeyMapper.map({ code: 67, ctrl: true });\n        this.disconnect = KeyMapper.map({ code: 67, shift: true, ctrl: true });\n        this.nextfield = KeyMapper.map({ code: KeyCodes.tab });\n        this.prevfield = KeyMapper.map({ code: KeyCodes.tab, shift: true });\n        this.nextrecord = KeyMapper.map({ code: KeyCodes.down, shift: false });\n        this.prevrecord = KeyMapper.map({ code: KeyCodes.up, shift: false });\n        this.nextblock = KeyMapper.map({ code: KeyCodes.down, shift: true });\n        this.prevblock = KeyMapper.map({ code: KeyCodes.up, shift: true });\n        this.pageup = KeyMapper.map({ code: 80, ctrl: true, shift: true });\n        this.pagedown = KeyMapper.map({ code: 80, ctrl: true, shift: false });\n        this.enterquery = KeyMapper.map({ code: 81, ctrl: true });\n        this.executequery = KeyMapper.map({ code: 81, shift: true, ctrl: true });\n        this.map =\n            `\n            <table>\n                <tr><td class=\"kmtd\">   connect            </td><td>   ctrl-c             </td></tr>\n                <tr><td class=\"kmtd\">   disconnect         </td><td>   ctrl-shift-c       </td></tr>\n                <tr><td class=\"kmtd\">   close              </td><td>   ctrl-w             </td></tr>\n                <tr><td class=\"kmtd\">   zoom               </td><td>   ctrl-z             </td></tr>\n                <tr><td class=\"kmtd\">   datepicker         </td><td>   ctrl-shift-l       </td></tr>\n                <tr><td class=\"kmtd\">   list of values     </td><td>   ctrl-shift-l       </td></tr>\n                <tr><td class=\"kmtd\">   clear block        </td><td>   ctrl-escape        </td></tr>\n                <tr><td class=\"kmtd\">   clear form         </td><td>   ctrl-shift-escape  </td></tr>\n                <tr><td class=\"kmtd\">   insert after       </td><td>   ctrl-i             </td></tr>\n                <tr><td class=\"kmtd\">   insert before      </td><td>   ctrl-shift-i       </td></tr>\n                <tr><td class=\"kmtd\">   delete             </td><td>   ctrl-d             </td></tr>\n                <tr><td class=\"kmtd\">   commit             </td><td>   ctrl-enter         </td></tr>\n                <tr><td class=\"kmtd\">   rollback           </td><td>   ctrl-shift-escape  </td></tr>\n                <tr><td class=\"kmtd\">   next record        </td><td>   key-down           </td></tr>\n                <tr><td class=\"kmtd\">   previous record    </td><td>   key-up             </td></tr>\n                <tr><td class=\"kmtd\">   page down          </td><td>   ctrl-p             </td></tr>\n                <tr><td class=\"kmtd\">   page up            </td><td>   ctrl-shift-p       </td></tr>\n                <tr><td class=\"kmtd\">   next block         </td><td>   shift-key-down     </td></tr>\n                <tr><td class=\"kmtd\">   previous block     </td><td>   shift-key-up       </td></tr>\n                <tr><td class=\"kmtd\">   enter query        </td><td>   ctrl-q             </td></tr>\n                <tr><td class=\"kmtd\">   execute query      </td><td>   ctrl-shift-q       </td ></tr>\n            </table>\n\n            <style>\n              .kmtd\n              {\n                  width: 150px;\n                  display: block;\n              }\n            </style>\n        `;\n    }\n    ;\n}\n\nclass WinKeyMap {\n    constructor() {\n        this.zoom = KeyMapper.map({ code: 90, ctrl: true });\n        this.close = KeyMapper.map({ code: 87, ctrl: true });\n        this.undo = KeyMapper.map({ code: 90, meta: true });\n        this.paste = KeyMapper.map({ code: 86, ctrl: true });\n        this.enter = KeyMapper.map({ code: KeyCodes.enter });\n        this.escape = KeyMapper.map({ code: KeyCodes.escape });\n        this.listval = KeyMapper.map({ code: KeyCodes.f9 });\n        this.clearblock = KeyMapper.map({ code: KeyCodes.f5, shift: true });\n        this.clearform = KeyMapper.map({ code: KeyCodes.f7, shift: true });\n        this.insertafter = KeyMapper.map({ code: KeyCodes.insert });\n        this.insertbefore = KeyMapper.map({ code: KeyCodes.insert, shift: true });\n        this.dublicate = KeyMapper.map({ code: 86, ctrl: true });\n        this.delete = KeyMapper.map({ code: KeyCodes.delete, ctrl: true });\n        this.commit = KeyMapper.map({ code: KeyCodes.f10, ctrl: false, shift: false });\n        this.rollback = KeyMapper.map({ code: KeyCodes.f10, ctrl: false, shift: true });\n        this.connect = KeyMapper.map({ code: 67, ctrl: true });\n        this.disconnect = KeyMapper.map({ code: 67, shift: true, ctrl: true });\n        this.nextfield = KeyMapper.map({ code: KeyCodes.tab });\n        this.prevfield = KeyMapper.map({ code: KeyCodes.tab, shift: true });\n        this.nextrecord = KeyMapper.map({ code: KeyCodes.down, shift: false });\n        this.prevrecord = KeyMapper.map({ code: KeyCodes.up, shift: false });\n        this.prevblock = KeyMapper.map({ code: KeyCodes.pageup, shift: true });\n        this.nextblock = KeyMapper.map({ code: KeyCodes.pagedown, shift: true });\n        this.pageup = KeyMapper.map({ code: KeyCodes.pageup });\n        this.pagedown = KeyMapper.map({ code: KeyCodes.pagedown });\n        this.enterquery = KeyMapper.map({ code: KeyCodes.f7 });\n        this.executequery = KeyMapper.map({ code: KeyCodes.f8 });\n        this.map =\n            `\n            <table>\n                <tr><td class=\"kmtd\">   connect            </td><td>   ctrl-c             </td></tr>\n                <tr><td class=\"kmtd\">   disconnect         </td><td>   ctrl-shift-c       </td></tr>\n                <tr><td class=\"kmtd\">   close              </td><td>   ctrl-w             </td></tr>\n                <tr><td class=\"kmtd\">   zoom               </td><td>   ctrl-z             </td></tr>\n                <tr><td class=\"kmtd\">   datepicker         </td><td>   F9                 </td></tr>\n                <tr><td class=\"kmtd\">   list of values     </td><td>   F9                 </td></tr>\n                <tr><td class=\"kmtd\">   clear block        </td><td>   shift-F5           </td></tr>\n                <tr><td class=\"kmtd\">   clear form         </td><td>   shift-F7           </td></tr>\n                <tr><td class=\"kmtd\">   insert after       </td><td>   insert             </td></tr>\n                <tr><td class=\"kmtd\">   insert before      </td><td>   shift-insert       </td></tr>\n                <tr><td class=\"kmtd\">   delete             </td><td>   delete             </td></tr>\n                <tr><td class=\"kmtd\">   commit             </td><td>   F10                </td></tr>\n                <tr><td class=\"kmtd\">   rollback           </td><td>   shift-F10          </td></tr>\n                <tr><td class=\"kmtd\">   next record        </td><td>   key-down           </td></tr>\n                <tr><td class=\"kmtd\">   previous record    </td><td>   key-up             </td></tr>\n                <tr><td class=\"kmtd\">   page down          </td><td>   pagedown           </td></tr>\n                <tr><td class=\"kmtd\">   page up            </td><td>   pageup             </td></tr>\n                <tr><td class=\"kmtd\">   next block         </td><td>   shift-pagedown     </td></tr>\n                <tr><td class=\"kmtd\">   previous block     </td><td>   shift-pageup       </td></tr>\n                <tr><td class=\"kmtd\">   enter query        </td><td>   F7                 </td></tr>\n                <tr><td class=\"kmtd\">   execute query      </td><td>   F8                 </td ></tr>\n            </table>\n\n            <style>\n              .kmtd\n              {\n                  width: 150px;\n                  display: block;\n              }\n            </style>\n        `;\n    }\n    ;\n}\n\nclass defaultTheme {\n    constructor() {\n        this.name = \"default\";\n        this.link = \"blue\";\n        this.text = \"black\";\n        this.title = \"white\";\n        this.topbar = \"#303f9f\";\n        this.enabled = \"white\";\n        this.disabled = \"silver\";\n        this.menuoption = \"white\";\n        this.buttontext = \"white\";\n        this.foldertree = \"#303f9f\";\n        this.rowindicator = \"#303f9f\";\n    }\n}\nclass Indigo extends defaultTheme {\n    constructor() {\n        super(...arguments);\n        this.name = \"indigo\";\n    }\n}\nclass Grey extends defaultTheme {\n    constructor() {\n        super(...arguments);\n        this.name = \"grey\";\n        this.link = \"grey\";\n        this.topbar = \"grey\";\n        this.foldertree = \"grey\";\n        this.rowindicator = \"grey\";\n    }\n}\nclass Pink extends defaultTheme {\n    constructor() {\n        super(...arguments);\n        this.name = \"pink\";\n        this.link = \"#ff4081\";\n        this.topbar = \"#ff4081\";\n        this.foldertree = \"#ff4081\";\n        this.rowindicator = \"#ff4081\";\n    }\n}\nclass Yellow {\n    constructor() {\n        this.name = \"yellow\";\n        this.link = \"grey\";\n        this.text = \"black\";\n        this.title = \"black\";\n        this.topbar = \"yellow\";\n        this.foldertree = \"grey\";\n        this.enabled = \"black\";\n        this.disabled = \"silver\";\n        this.menuoption = \"black\";\n        this.buttontext = \"black\";\n        this.rowindicator = \"yellow\";\n    }\n}\n\nclass Config {\n    constructor(client) {\n        this.client = client;\n        this.config = null;\n        this.notifications = [];\n        this.invoker = null;\n        this.caltitle = \"Calendar\";\n        this.keymaphelp = \"Shortkeys\";\n        this.themes = new Map();\n        this.lang = Intl.DateTimeFormat().resolvedOptions().locale;\n        this.load();\n        this.themes.set(\"pink\", new Pink());\n        this.themes.set(\"grey\", new Grey());\n        this.themes.set(\"indigo\", new Indigo());\n        this.themes.set(\"yellow\", new Yellow());\n        this.themes.set(\"default\", new defaultTheme());\n        let os = this.os();\n        if (os == \"Windows\")\n            this.keymap = new WinKeyMap();\n        else\n            this.keymap = new MacKeyMap();\n        KeyMapper.index(this.keymap);\n        this.colors = this.themes.get(\"default\");\n    }\n    os() {\n        let os = \"unknown\";\n        if (navigator.appVersion.indexOf(\"Mac\") != -1)\n            os = \"MacOS\";\n        if (navigator.appVersion.indexOf(\"X11\") != -1)\n            os = \"UNIX\";\n        if (navigator.appVersion.indexOf(\"Linux\") != -1)\n            os = \"Linux\";\n        if (navigator.appVersion.indexOf(\"Win\") != -1)\n            os = \"Windows\";\n        return (os);\n    }\n    load() {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.invoker = this.client.get(\"/assets/config/config.json\").toPromise();\n            this.invoker.then(data => { this.loaded(data); }, error => { this.config = {}; console.log(\"Loading config failed: \" + error); });\n        });\n    }\n    loaded(config) {\n        this.config = config;\n        this.datefmt$ = this.config[\"datefmt\"];\n        dates.setFormat(this.datefmt$);\n        if (this.config[\"locale\"] != null)\n            this.lang = this.config[\"locale\"];\n        if (this.config[\"calendar\"] != null)\n            this.caltitle = this.config[\"calendar\"];\n        if (this.config[\"keymap\"] != null)\n            this.keymaphelp = this.config[\"keymap\"];\n    }\n    ready() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.invoker != null) {\n                yield this.invoker;\n                this.invoker = null;\n            }\n            return (true);\n        });\n    }\n    get locale() {\n        return (this.lang);\n    }\n    get datefmt() {\n        return (this.datefmt$);\n    }\n    set colors(theme) {\n        this.colors$ = theme;\n    }\n    get colors() {\n        return (this.colors$);\n    }\n    get others() {\n        return (this.config);\n    }\n    notify(instance, func) {\n        this.notifications.push({ instance: instance, func: func });\n    }\n    setTheme(theme) {\n        let ttheme = null;\n        if (typeof theme == 'object')\n            ttheme = theme;\n        else\n            ttheme = this.themes.get(theme);\n        if (ttheme != null) {\n            this.colors = ttheme;\n            this.notifications.forEach((notify) => { notify.instance[notify.func](); });\n        }\n    }\n    get keymapping() {\n        return (this.keymap);\n    }\n    get keymaptitle() {\n        return (this.keymaphelp);\n    }\n    get calendarname() {\n        return (this.caltitle);\n    }\n}\nConfig.ɵfac = function Config_Factory(t) { return new (t || Config)(i0.ɵɵinject(i1.HttpClient)); };\nConfig.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: Config, factory: Config.ɵfac, providedIn: 'root' });\n(function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(Config, [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root',\n                }]\n        }], function () { return [{ type: i1.HttpClient }]; }, null);\n})();\n\nclass Builder {\n    constructor(resolver, injector, app) {\n        this.resolver = resolver;\n        this.injector = injector;\n        this.app = app;\n    }\n    createComponent(component) {\n        let cref = this.resolver.resolveComponentFactory(component).create(this.injector);\n        return (cref);\n    }\n    getAppRef() {\n        return (this.app);\n    }\n}\nBuilder.ɵfac = function Builder_Factory(t) { return new (t || Builder)(i0.ɵɵinject(i0.ComponentFactoryResolver), i0.ɵɵinject(i0.Injector), i0.ɵɵinject(i0.ApplicationRef)); };\nBuilder.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: Builder, factory: Builder.ɵfac, providedIn: 'root' });\n(function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(Builder, [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root',\n                }]\n        }], function () { return [{ type: i0.ComponentFactoryResolver }, { type: i0.Injector }, { type: i0.ApplicationRef }]; }, null);\n})();\n\nclass Application {\n    // dont rename impl as it is read behind the scenes\n    constructor(ctx, conf, client, builder) {\n        this.conf = conf;\n        ctx.app = this;\n        ctx.conf = conf;\n        this._impl_ = new ApplicationImpl(ctx, client, builder);\n    }\n    get title() {\n        return (this.title$);\n    }\n    set title(title) {\n        this.title$ = title;\n        this._impl_.setTitle(title);\n    }\n    get form() {\n        var _a;\n        return ((_a = this._impl_.getCurrentForm()) === null || _a === void 0 ? void 0 : _a.form);\n    }\n    set menu(menu) {\n        this._impl_.setMenu(menu);\n    }\n    get menu() {\n        return (this._impl_.getMenu());\n    }\n    get transaction() {\n        return (this._impl_.appstate.transaction);\n    }\n    newform(form, parameters) {\n        this._impl_.showform(form, true, parameters);\n    }\n    showform(form, parameters) {\n        this._impl_.showform(form, false, parameters);\n    }\n    callform(form, parameters) {\n        this._impl_.callform(form, false, parameters);\n    }\n    get colors() {\n        return (this.conf.colors);\n    }\n    set theme(theme) {\n        setTimeout(() => { this.conf.setTheme(theme); }, 50);\n    }\n    closeform(destroy) {\n        if (destroy == undefined)\n            destroy = false;\n        let form = this._impl_.getCurrentForm();\n        if (form != null)\n            form.close(destroy);\n    }\n    connect() {\n        if (!this._impl_.connected) {\n            let pinst = new PopupInstance();\n            pinst.display(this._impl_, LoginForm);\n        }\n    }\n    disconnect() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this._impl_.connected) {\n                yield this._impl_.appstate.clearAllForms();\n                yield this._impl_.connection.rollback();\n                yield this._impl_.disconnect();\n            }\n        });\n    }\n    commit() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this._impl_.connected)\n                return;\n            let form = this._impl_.getCurrentForm();\n            if (form != null) {\n                if (!(yield form.validate()))\n                    return;\n            }\n            this._impl_.connection.commit();\n        });\n    }\n    rollback() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this._impl_.connected) {\n                yield this._impl_.appstate.clearAllForms();\n                yield this._impl_.connection.rollback();\n            }\n        });\n    }\n    showKeyMap() {\n        KeyMapHelp.show(this._impl_);\n    }\n    alert(message, title, width, height) {\n        MessageBox.show(this._impl_, message, title, width, height);\n    }\n}\nApplication.ɵfac = function Application_Factory(t) { return new (t || Application)(i0.ɵɵinject(Context), i0.ɵɵinject(Config), i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(Builder)); };\nApplication.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: Application, factory: Application.ɵfac, providedIn: 'root' });\n(function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(Application, [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root',\n                }]\n        }], function () { return [{ type: Context }, { type: Config }, { type: i1.HttpClient }, { type: Builder }]; }, null);\n})();\n\nclass FormsLibrary {\n}\nFormsLibrary.ɵfac = function FormsLibrary_Factory(t) { return new (t || FormsLibrary)(); };\nFormsLibrary.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: FormsLibrary });\nFormsLibrary.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [[CommonModule, HttpClientModule]] });\n(function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FormsLibrary, [{\n            type: NgModule,\n            args: [{\n                    declarations: [FormList, FormArea, ModalWindow, MenuArea, LoginForm, FieldInstance, ListOfValuesImpl, Wait],\n                    exports: [FormList, FormArea, MenuArea, FieldInstance],\n                    imports: [CommonModule, HttpClientModule]\n                }]\n        }], null, null);\n})();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(FormsLibrary, { declarations: [FormList, FormArea, ModalWindow, MenuArea, LoginForm, FieldInstance, ListOfValuesImpl, Wait], imports: [CommonModule, HttpClientModule], exports: [FormList, FormArea, MenuArea, FieldInstance] }); })();\ni0.ɵɵsetComponentScope(LoginForm, [FieldInstance], []);\ni0.ɵɵsetComponentScope(ListOfValuesImpl, [FieldInstance, i1$1.NgForOf], []);\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Application, Block, Case, Column$1 as Column, Condition, DateUtils, DefaultMenu, DefaultMenuHandler, FieldInstance, FieldTrigger, FieldTriggerEvent, FieldType, Form, FormArea, FormList, FormsLibrary, KeyTriggerEvent, MenuArea, MenuHandler, SQLTriggerEvent, Statement, Trigger, TriggerEvent, alias, block, column, connect, database, defaultTheme, destroy, disconnect, field, form, hide, init, join, key, keymap, keytrigger, listofvalues, show, table, trigger, window$1 as window, wizard };\n","map":{"version":3,"file":"forms.mjs","sources":["../../../projects/forms/src/lib/utils/Utils.ts","../../../projects/forms/src/lib/annotations/BlockDefinitions.ts","../../../projects/forms/src/lib/annotations/key.ts","../../../projects/forms/src/lib/annotations/FormDefinitions.ts","../../../projects/forms/src/lib/annotations/form.ts","../../../projects/forms/src/lib/annotations/init.ts","../../../projects/forms/src/lib/annotations/show.ts","../../../projects/forms/src/lib/annotations/hide.ts","../../../projects/forms/src/lib/annotations/JOINDefinitions.ts","../../../projects/forms/src/lib/annotations/join.ts","../../../projects/forms/src/lib/annotations/block.ts","../../../projects/forms/src/lib/annotations/alias.ts","../../../projects/forms/src/lib/annotations/TableDefinitions.ts","../../../projects/forms/src/lib/annotations/table.ts","../../../projects/forms/src/lib/annotations/FieldDefinitions.ts","../../../projects/forms/src/lib/annotations/field.ts","../../../projects/forms/src/lib/annotations/ColumnDefinitions.ts","../../../projects/forms/src/lib/annotations/column.ts","../../../projects/forms/src/lib/annotations/wizard.ts","../../../projects/forms/src/lib/annotations/window.ts","../../../projects/forms/src/lib/annotations/connect.ts","../../../projects/forms/src/lib/annotations/destroy.ts","../../../projects/forms/src/lib/keymap/KeyMap.ts","../../../projects/forms/src/lib/events/TriggerEvents.ts","../../../projects/forms/src/lib/events/Triggers.ts","../../../projects/forms/src/lib/annotations/TriggerDefinitions.ts","../../../projects/forms/src/lib/annotations/trigger.ts","../../../projects/forms/src/lib/database/DatabaseUsage.ts","../../../projects/forms/src/lib/annotations/DatabaseDefinitions.ts","../../../projects/forms/src/lib/annotations/database.ts","../../../projects/forms/src/lib/annotations/keytrigger.ts","../../../projects/forms/src/lib/annotations/disconnect.ts","../../../projects/forms/src/lib/annotations/LOVDefinitions.ts","../../../projects/forms/src/lib/annotations/listofvalues.ts","../../../projects/forms/src/lib/events/TriggerEvent.ts","../../../projects/forms/src/lib/application/Context.ts","../../../projects/forms/src/lib/menu/MenuArea.ts","../../../projects/forms/src/lib/menu/MenuHandler.ts","../../../projects/forms/src/lib/menu/DefaultMenuHandler.ts","../../../projects/forms/src/lib/menu/DefaultMenu.ts","../../../projects/forms/src/lib/blocks/Key.ts","../../../projects/forms/src/lib/blocks/Record.ts","../../../projects/forms/src/lib/input/TextField.ts","../../../projects/forms/src/lib/input/DropDown.ts","../../../projects/forms/src/lib/input/Password.ts","../../../projects/forms/src/lib/input/CheckBox.ts","../../../projects/forms/src/lib/dates/fecha.ts","../../../projects/forms/src/lib/dates/dates.ts","../../../projects/forms/src/lib/input/DateField.ts","../../../projects/forms/src/lib/input/RadioButton.ts","../../../projects/forms/src/lib/database/Column.ts","../../../projects/forms/src/lib/input/FieldType.ts","../../../projects/forms/src/lib/forms/FormState.ts","../../../projects/forms/src/lib/keymap/KeyCodes.ts","../../../projects/forms/src/lib/events/WindowListener.ts","../../../projects/forms/src/lib/popup/PopupWindow.ts","../../../projects/forms/src/lib/popup/PopupInstance.ts","../../../projects/forms/src/lib/dates/DatePicker.ts","../../../projects/forms/src/lib/popup/MessageBox.ts","../../../projects/forms/src/lib/database/Condition.ts","../../../projects/forms/src/lib/database/Statement.ts","../../../projects/forms/src/lib/database/Table.ts","../../../projects/forms/src/lib/blocks/FieldData.ts","../../../projects/forms/src/lib/listval/ListOfValuesImpl.ts","../../../projects/forms/src/lib/blocks/BlockImpl.ts","../../../projects/forms/src/lib/blocks/Block.ts","../../../projects/forms/src/lib/forms/MasterDetailQuery.ts","../../../projects/forms/src/lib/forms/MasterDetail.ts","../../../projects/forms/src/lib/forms/FormImpl.ts","../../../projects/forms/src/lib/forms/Form.ts","../../../projects/forms/src/lib/database/Case.ts","../../../projects/forms/src/lib/input/FieldInstance.ts","../../../projects/forms/src/lib/dates/DateUtils.ts","../../../projects/forms/src/lib/menu/FormList.ts","../../../projects/forms/src/lib/forms/FormArea.ts","../../../projects/forms/src/lib/application/KeyMapHelp.ts","../../../projects/forms/src/lib/database/LoginForm.ts","../../../projects/forms/src/lib/utils/Wait.ts","../../../projects/forms/src/lib/menu/MenuInterface.ts","../../../projects/forms/src/lib/menu/DropDownMenu.ts","../../../projects/forms/src/lib/menu/MenuFactory.ts","../../../projects/forms/src/lib/forms/FormUtil.ts","../../../projects/forms/src/lib/forms/ModalWindow.ts","../../../projects/forms/src/lib/forms/FormsControl.ts","../../../projects/forms/src/lib/database/Connection.ts","../../../projects/forms/src/lib/application/ApplicationState.ts","../../../projects/forms/src/lib/forms/InstanceControl.ts","../../../projects/forms/src/lib/input/Field.ts","../../../projects/forms/src/lib/container/Container.ts","../../../projects/forms/src/lib/container/ContainerControl.ts","../../../projects/forms/src/lib/application/ApplicationImpl.ts","../../../projects/forms/src/lib/keymap/MacKeyMap.ts","../../../projects/forms/src/lib/keymap/WinKeyMap.ts","../../../projects/forms/src/lib/application/Themes.ts","../../../projects/forms/src/lib/application/Config.ts","../../../projects/forms/src/lib/utils/Builder.ts","../../../projects/forms/src/lib/application/Application.ts","../../../projects/forms/src/lib/FormsLibrary.ts","../../../projects/forms/src/forms.ts"],"sourcesContent":["import { stringify } from \"@angular/compiler/src/util\";\n\nexport class Utils\n{\n    public getName(component:any)\n    {\n        if (component == null) return(null);\n        let name:string = component.constructor.name;\n\n        if (name == \"String\") name = component;\n        if (name == \"Function\") name = component.name;\n\n        return(name.toLowerCase());\n    }\n\n\n    public clone(obj:any) : any\n    {\n        let clone:any = {};\n        if (obj == null) return(null);\n        Object.keys(obj).forEach((key) => {clone[key] = obj[key];});\n        return(clone);\n    }\n\n\n    public getType(component:any) : string\n    {\n        let type:string = null;\n        let code:string = component.toString();\n\n        if (code == \"[object Object]\")\n            code = component.constructor.toString();\n\n        if (code.startsWith(\"class\"))\n        {\n            code = code.substring(0,code.indexOf(\"{\"));\n            let pos:number = code.indexOf(\"extends\");\n\n            if (pos > 0)\n            {\n                let pos1:number = code.indexOf(\"[\",pos);\n                let pos2:number = code.indexOf(\"]\",pos1);\n                type = code.substring(pos1+2,pos2-1);\n            }\n        }\n\n        return(type);\n    }\n\n\n    public getParams(func:any) : string[]\n    {\n        let code:string = func.toString();\n\n        code = code.replace(/\\/\\*[\\s\\S]*?\\*\\//g, '')\n        .replace(/\\/\\/(.)*/g, '')\n        .replace(/{[\\s\\S]*}/, '')\n        .replace(/=>/g, '')\n        .trim();\n\n        let end:number = code.length - 1;\n        let start:number = code.indexOf(\"(\") + 1;\n\n        let params:string[] = [];\n        let tokens:string[] = code.substring(start, end).split(\", \");\n\n        tokens.forEach((element) =>\n        {\n            // Removing any default value\n            element = element.replace(/=[\\s\\S]*/g, '').trim();\n            if(element.length > 0) params.push(element);\n        });\n\n        return(params);\n    }\n}","import { KeyDefinition } from './KeyDefinition';\nimport { BlockDefinition } from '../blocks/BlockDefinition';\nimport { BlockImpl } from '../blocks/BlockImpl';\n\n\nexport class BlockDefinitions\n{\n    private static alias:Map<string,string> = new Map<string,string>();\n    private static blocks:Map<string,any[]> = new Map<string,BlockDefinition[]>();\n    private static keys:Map<string,KeyDefinition[]> = new Map<string,KeyDefinition[]>();\n\n\n    public static setDefaultAlias(block:string, alias:string) : void\n    {\n        if (alias == null) alias = block;\n        BlockDefinitions.alias.set(block,alias);\n    }\n\n\n    public static getDefaultAlias(alias:string) : string\n    {\n        alias = alias.toLowerCase();\n        let bname:string = BlockDefinitions.alias.get(alias);\n        if (bname == null) bname = alias;\n        return(bname);\n    }\n\n\n    public static setBlock(form:string, def:BlockDefinition) : void\n    {\n        let blocks:BlockDefinition[] = BlockDefinitions.blocks.get(form.toLowerCase());\n\n        if  (blocks == null)\n        {\n            blocks = [];\n            BlockDefinitions.blocks.set(form.toLowerCase(),blocks);\n        }\n\n        if (def.prop != null) blocks.push(def);\n        else                  blocks.unshift(def);\n    }\n\n\n    public static getBlocks(form:string) : BlockDefinition[]\n    {\n        let blocks:BlockDefinition[] = BlockDefinitions.blocks.get(form.toLowerCase());\n        if (blocks == null) blocks = [];\n        return(blocks);\n    }\n\n\n    public static setKey(block:string, def:KeyDefinition) : void\n    {\n        let keys:KeyDefinition[] = BlockDefinitions.keys.get(block.toLowerCase());\n\n        if  (keys == null)\n        {\n            keys = [];\n            BlockDefinitions.keys.set(block.toLowerCase(),keys);\n        }\n\n        keys.unshift(def);\n    }\n\n\n    public static getKeys(block:string) : KeyDefinition[]\n    {\n        let keys:KeyDefinition[] = BlockDefinitions.keys.get(block.toLowerCase());\n        if (keys == null) keys = [];\n        return(keys);\n    }\n}","import { Utils } from '../utils/Utils';\nimport { KeyDefinition } from './KeyDefinition';\nimport { BlockDefinitions } from './BlockDefinitions';\n\n\nexport const key = (name:string, unique:boolean, columns:string|string[]) =>\n{\n    function define(comp:any)\n    {\n        let utils:Utils = new Utils();\n        let cname:string = utils.getName(comp);\n        let ctype:string = utils.getType(comp);\n\n        if (ctype != \"Block\")\n        {\n            console.log(\"@key(\"+name+\") can only be used on blocks\");\n            return;\n        }\n\n        let arr:boolean = true;\n        let cols:string[] = [];\n\n        if (columns.constructor.name == \"String\")\n            arr = false;\n\n        if (arr) cols = columns as string[];\n        else     cols.push(columns as string);\n\n        let lccols:string[] = [];\n        cols.forEach((col) => {lccols.push(col.toLowerCase())});\n\n        let def:KeyDefinition = {name: name.toLowerCase(), unique: unique, columns: lccols}\n        BlockDefinitions.setKey(cname,def);\n    }\n    return(define);\n}","import { WindowOptions } from '../forms/WindowOptions';\nimport { FormDefinition } from '../forms/FormsDefinition';\n\n\nexport class FormDefinitions\n{\n    private static forms:FormDefinition[] = [];\n    private static oninit:Map<string,string[]> = new Map<string,string[]>();\n    private static onshow:Map<string,string[]> = new Map<string,string[]>();\n    private static onhide:Map<string,string[]> = new Map<string,string[]>();\n    private static onconn:Map<string,string[]> = new Map<string,string[]>();\n    private static ondisc:Map<string,string[]> = new Map<string,string[]>();\n    private static ondest:Map<string,string[]> = new Map<string,string[]>();\n    private static windowopts:Map<string,WindowOptions> = new Map<string,WindowOptions>();\n\n\n    public static setForm(def:FormDefinition) : void\n    {\n        FormDefinitions.forms.unshift(def);\n    }\n\n\n    public static getForms() : FormDefinition[]\n    {\n        return(FormDefinitions.forms);\n    }\n\n\n    public static getWindowOpts(form:string) : WindowOptions\n    {\n        let wopts:WindowOptions = FormDefinitions.windowopts.get(form);\n\n        if (wopts == null)\n        {\n            wopts = {};\n            FormDefinitions.windowopts.set(form,wopts);\n        }\n\n        return(wopts);\n    }\n\n\n    public static setOnInit(form:string,func:string) : void\n    {\n        let funcs:string[] = FormDefinitions.oninit.get(form);\n        if (funcs == null) funcs = [];\n        funcs.push(func);\n        FormDefinitions.oninit.set(form,funcs);\n    }\n\n\n    public static setOnShow(form:string,func:string) : void\n    {\n        let funcs:string[] = FormDefinitions.onshow.get(form);\n        if (funcs == null) funcs = [];\n        funcs.push(func);\n        FormDefinitions.onshow.set(form,funcs);\n    }\n\n\n    public static setOnHide(form:string,func:string) : void\n    {\n        let funcs:string[] = FormDefinitions.onhide.get(form);\n        if (funcs == null) funcs = [];\n        funcs.push(func);\n        FormDefinitions.onhide.set(form,funcs);\n    }\n\n\n    public static setOnConnect(form:string,func:string) : void\n    {\n        let funcs:string[] = FormDefinitions.onconn.get(form);\n        if (funcs == null) funcs = [];\n        funcs.push(func);\n        FormDefinitions.onconn.set(form,funcs);\n    }\n\n\n    public static setOnDisconnect(form:string,func:string) : void\n    {\n        let funcs:string[] = FormDefinitions.ondisc.get(form);\n        if (funcs == null) funcs = [];\n        funcs.push(func);\n        FormDefinitions.ondisc.set(form,funcs);\n    }\n\n\n    public static setOnDestroy(form:string,func:string) : void\n    {\n        let funcs:string[] = FormDefinitions.ondest.get(form);\n        if (funcs == null) funcs = [];\n        funcs.push(func);\n        FormDefinitions.ondest.set(form,funcs);\n    }\n\n\n    public static getOnInit(form:string) : string[]\n    {\n        let funcs:string[] = FormDefinitions.oninit.get(form);\n        if (funcs == null) funcs = [];\n        return(funcs);\n    }\n\n\n    public static getOnShow(form:string) : string[]\n    {\n        let funcs:string[] = FormDefinitions.onshow.get(form);\n        if (funcs == null) funcs = [];\n        return(funcs);\n    }\n\n\n    public static getOnHide(form:string) : string[]\n    {\n        let funcs:string[] = FormDefinitions.onhide.get(form);\n        if (funcs == null) funcs = [];\n        return(funcs);\n    }\n\n\n    public static getOnConnect(form:string) : string[]\n    {\n        let funcs:string[] = FormDefinitions.onconn.get(form);\n        if (funcs == null) funcs = [];\n        return(funcs);\n    }\n\n\n    public static getOnDisconnect(form:string) : string[]\n    {\n        let funcs:string[] = FormDefinitions.ondisc.get(form);\n        if (funcs == null) funcs = [];\n        return(funcs);\n    }\n\n\n    public static getOnDestroy(form:string) : string[]\n    {\n        let funcs:string[] = FormDefinitions.ondest.get(form);\n        if (funcs == null) funcs = [];\n        return(funcs);\n    }\n}","import { FormDefinitions } from \"./FormDefinitions\";\nimport { FormDefinition } from \"../forms/FormsDefinition\";\n\n\nexport const form = (component:any, title:string, path:string, navigable?:boolean) =>\n{\n    function define(_comp:any)\n    {\n        let def:FormDefinition =\n        {\n            path: path,\n            title: title,\n            component: component,\n        };\n\n        if (navigable != undefined) def[\"navigable\"] = navigable;\n\n        FormDefinitions.setForm(def);\n    }\n    return(define);\n}","import { Form } from \"../forms/Form\";\nimport { Utils } from \"../utils/Utils\";\nimport { FormDefinitions } from \"./FormDefinitions\";\n\n\nexport const init = (form:Form, func?:string) =>\n{\n    let utils:Utils = new Utils();\n    let fname:string = utils.getName(form);\n    let ctype:string = utils.getType(form);\n\n    if (ctype != \"Form\")\n    {\n        console.log(\"@init can only be used on forms, found on '\"+fname+\"'\");\n        return;\n    }\n\n    FormDefinitions.setOnInit(fname,func);\n}","import { Form } from \"../forms/Form\";\nimport { Utils } from \"../utils/Utils\";\nimport { FormDefinitions } from \"./FormDefinitions\";\n\n\nexport const show = (form:Form, func?:string) =>\n{\n    let utils:Utils = new Utils();\n    let fname:string = utils.getName(form);\n    let ctype:string = utils.getType(form);\n\n    if (ctype != \"Form\")\n    {\n        console.log(\"@show can only be used on forms, found on '\"+fname+\"'\");\n        return;\n    }\n\n    FormDefinitions.setOnShow(fname,func);\n}","import { Form } from \"../forms/Form\";\nimport { Utils } from \"../utils/Utils\";\nimport { FormDefinitions } from \"./FormDefinitions\";\n\n\nexport const hide = (form:Form, func?:string) =>\n{\n    let utils:Utils = new Utils();\n    let fname:string = utils.getName(form);\n    let ctype:string = utils.getType(form);\n\n    if (ctype != \"Form\")\n    {\n        console.log(\"@hide can only be used on forms, found on '\"+fname+\"'\");\n        return;\n    }\n\n    FormDefinitions.setOnHide(fname,func);\n}","export interface JOINDefinition\n{\n    master: {alias:string, key:string},\n    detail: {alias:string, key:string},\n}\n\n\nexport class JOINDefinitions\n{\n    private static defs:Map<string,JOINDefinition[]> = new Map<string,JOINDefinition[]>();\n\n    public static add(form:string, def:JOINDefinition) : void\n    {\n        let joins:JOINDefinition[] = JOINDefinitions.defs.get(form);\n\n        if (joins == null)\n        {\n            joins = [];\n            JOINDefinitions.defs.set(form,joins);\n        }\n\n        joins.unshift(def);\n    }\n\n\n    public static get(form:string) : JOINDefinition[]\n    {\n        return(JOINDefinitions.defs.get(form.toLowerCase()));\n    }\n}","import { Utils } from '../utils/Utils';\nimport { JOINDefinition, JOINDefinitions } from './JOINDefinitions';\n\n\nexport const join = (definition:JOINDefinition) =>\n{\n    function define(comp:any)\n    {\n        let utils:Utils = new Utils();\n        let form:string = utils.getName(comp);\n        let ctype:string = utils.getType(comp);\n\n        if (ctype != \"Form\")\n        {\n            console.log(\"@join(\"+JSON.stringify(definition)+\") can only be used on forms\");\n            return;\n        }\n\n        definition.master.key = definition.master.key.toLowerCase();\n        definition.master.alias = definition.master.alias.toLowerCase();\n\n        definition.detail.key = definition.detail.key.toLowerCase();\n        definition.detail.alias = definition.detail.alias.toLowerCase();\n\n        JOINDefinitions.add(form.toLowerCase(),definition);\n    }\n\n    return(define);\n}","import { Utils } from '../utils/Utils';\nimport { BlockDefinition } from './BlockDefinition';\nimport { BlockDefinitions } from './BlockDefinitions';\nimport { BlockDefinition as BlockDef } from '../blocks/BlockDefinition';\n\n\nexport const block = (definition:BlockDefinition) =>\n{\n    function define(comp:any, prop?:string)\n    {\n        let utils:Utils = new Utils();\n        let name:string = utils.getName(comp);\n        let type:string = utils.getType(comp);\n\n        if (type != \"Form\" && prop == null)\n        {\n            console.log(\"@block can only be used with forms\");\n            return;\n        }\n\n        if (definition.alias != null)\n            definition.alias = definition.alias.toLowerCase();\n\n        let def:BlockDef =\n        {\n            prop: prop,\n            alias: definition.alias,\n            component: definition.component,\n            databaseopts: definition.databaseopts\n        }\n\n        BlockDefinitions.setBlock(name,def);\n    }\n    return(define);\n}","import { Utils } from '../utils/Utils';\nimport { BlockDefinitions } from './BlockDefinitions';\n\n\nexport const alias = (alias:string) =>\n{\n    function define(comp:any)\n    {\n        let utils:Utils = new Utils();\n        let cname:string = utils.getName(comp);\n        let ctype:string = utils.getType(comp);\n\n        if (ctype != \"Block\")\n        {\n            console.log(\"@alias(\"+alias+\") can only be used on blocks\");\n            return;\n        }\n\n        if (alias == null)\n        {\n            console.log(\"@alias(\"+alias+\") cannot be null\");\n            return;\n        }\n\n        BlockDefinitions.setDefaultAlias(cname,alias.toLowerCase());\n    }\n    return(define);\n}","import { TableDefinition } from \"../database/TableDefinition\";\n\nexport class TableDefinitions\n{\n    private static index:Map<string,TableDefinition> = new Map<string,TableDefinition>();\n\n    public static set(block:string, table:TableDefinition) : void\n    {\n        let def:TableDefinition = TableDefinitions.index.get(block.toLowerCase());\n\n        if (def != null)\n        {\n            if (table.hasOwnProperty(\"name\")) def.name = table.name;\n            if (table.hasOwnProperty(\"order\")) def.order = table.order;\n        }\n        else\n        {\n            TableDefinitions.index.set(block.toLowerCase(),table);\n        }\n    }\n\n    public static get(block:string) : TableDefinition\n    {\n        return(TableDefinitions.index.get(block.toLowerCase()));\n    }\n}","import { Utils } from '../utils/Utils';\nimport { TableDefinitions } from './TableDefinitions';\nimport { TableDefinition } from '../database/TableDefinition';\n\nexport const table = (definition:TableDefinition) =>\n{\n    function define(comp:any)\n    {\n        let utils:Utils = new Utils();\n        let cname:string = utils.getName(comp);\n        let ctype:string = utils.getType(comp);\n\n        if (ctype != \"Block\")\n        {\n            console.log(\"@table(\"+definition.name+\") can only be used on blocks\");\n            return;\n        }\n\n        TableDefinitions.set(cname,definition);\n    }\n    return(define);\n}","import { FieldDefinition } from \"../input/FieldDefinition\";\n\n\nexport class FieldDefinitions\n{\n    // List and indexes for fields, columns and fields with id, respectively for form\n    private static bfd:Map<string,FieldDefinition[]> = new Map<string,FieldDefinition[]>();\n    private static bfx:Map<string,Map<string,FieldDefinition>> = new Map<string,Map<string,FieldDefinition>>();\n    private static bcx:Map<string,Map<string,FieldDefinition>> = new Map<string,Map<string,FieldDefinition>>();\n    private static bidx:Map<string,Map<string,FieldDefinition>> = new Map<string,Map<string,FieldDefinition>>();\n\n    private static ffd:Map<string,Map<string,FieldDefinition[]>> = new Map<string,Map<string,FieldDefinition[]>>();\n    private static ffx:Map<string,Map<string,Map<string,FieldDefinition>>> = new Map<string,Map<string,Map<string,FieldDefinition>>>();\n    private static fcx:Map<string,Map<string,Map<string,FieldDefinition>>> = new Map<string,Map<string,Map<string,FieldDefinition>>>();\n    private static fidx:Map<string,Map<string,Map<string,FieldDefinition>>> = new Map<string,Map<string,Map<string,FieldDefinition>>>();\n\n\n    public static add(form:boolean, comp:string, def:FieldDefinition) : void\n    {\n        let parts:string[] = FieldDefinitions.split(def.name);\n\n        if (form)\n        {\n            if (parts.length < 2 || parts.length > 3)\n            {\n                console.log(\"Form field \"+def.name+\" must be on the form block.field[.id], field definition ignored\");\n                return;\n            }\n\n            def.name = parts[1];\n            let id:string = null;\n            let block:string = parts[0];\n            if (parts.length > 2) id = parts[2];\n\n            if (id != null) FieldDefinitions.addformid(comp,block,id,def);\n            else            FieldDefinitions.addformfield(comp,block,def);\n        }\n        else\n        {\n            if (parts.length > 2)\n            {\n                console.log(\"Block field \"+def.name+\" must be on the form field[.id], field definition ignored\");\n                return;\n            }\n\n            let id:string = null;\n\n            if (parts.length > 1)\n            {\n                id = parts[1];\n                def.name = parts[0];\n            }\n\n            if (id != null) FieldDefinitions.addblockid(comp,id,def);\n            else            FieldDefinitions.addblockfield(comp,def);\n        }\n    }\n\n\n    private static addformfield(form:string, block:string, def:FieldDefinition) : void\n    {\n        let formbfd:Map<string,FieldDefinition[]> = FieldDefinitions.ffd.get(form);\n        let formbfx:Map<string,Map<string,FieldDefinition>> = FieldDefinitions.ffx.get(form);\n        let formbcx:Map<string,Map<string,FieldDefinition>> = FieldDefinitions.fcx.get(form);\n\n        if (formbfd == null)\n        {\n            formbfd = new Map<string,FieldDefinition[]>();\n            FieldDefinitions.ffd.set(form,formbfd);\n\n            formbfx = new Map<string,Map<string,FieldDefinition>>();\n            FieldDefinitions.ffx.set(form,formbfx);\n\n            formbcx = new Map<string,Map<string,FieldDefinition>>();\n            FieldDefinitions.fcx.set(form,formbcx);\n        }\n\n        let fields:FieldDefinition[] = formbfd.get(block);\n        let index:Map<string,FieldDefinition> = formbfx.get(block);\n        let columns:Map<string,FieldDefinition> = formbcx.get(block);\n\n        if (fields == null)\n        {\n            fields = [];\n            formbfd.set(block,fields);\n\n            index = new Map<string,FieldDefinition>();\n            formbfx.set(block,index);\n\n            columns = new Map<string,FieldDefinition>();\n            formbcx.set(block,columns);\n        }\n\n        if (index.get(def.name) != null)\n        {\n            console.log(\"Field \"+def.name+\" defined twice on block '\"+form+\".\"+block+\"', ignored\");\n            return;\n        }\n\n        if (columns.get(def.name) != null)\n        {\n            console.log(\"Column \"+def.column+\" bound to more than 1 field on block '\"+form+\".\"+block+\"', ignored\");\n            def.column = null;\n        }\n\n        fields.unshift(def);\n        index.set(def.name,def);\n        if (def.column != null) columns.set(def.column,def);\n    }\n\n\n    private static addblockfield(block:string, def:FieldDefinition) : void\n    {\n        let fields:FieldDefinition[] = FieldDefinitions.bfd.get(block);\n        let index:Map<string,FieldDefinition> = FieldDefinitions.bfx.get(block);\n        let columns:Map<string,FieldDefinition> = FieldDefinitions.bcx.get(block);\n\n        if (fields == null)\n        {\n            fields = [];\n            FieldDefinitions.bfd.set(block,fields);\n\n            index = new Map<string,FieldDefinition>();\n            FieldDefinitions.bfx.set(block,index);\n\n            columns = new Map<string,FieldDefinition>();\n            FieldDefinitions.bcx.set(block,columns);\n        }\n\n        if (def.hasOwnProperty(\"column\"))\n        {\n            if (def.column != null)\n                def.column = def.column.toLowerCase();\n        }\n\n        if (index.get(def.name) != null)\n        {\n            console.log(\"Field \"+def.name+\" defined twice on block '\"+block+\"', ignored\");\n            return;\n        }\n\n        if (columns.get(def.name) != null)\n        {\n            console.log(\"Column \"+def.column+\" bound to more than 1 field on block '\"+block+\"', ignored\");\n            def.column = null;\n        }\n\n        fields.unshift(def);\n        index.set(def.name,def);\n        if (def.column != null) columns.set(def.column,def);\n    }\n\n\n    private static addformid(form:string, block:string, id:string, def:FieldDefinition) : void\n    {\n        let formids:Map<string,Map<string,FieldDefinition>> = FieldDefinitions.fidx.get(form);\n\n        if (formids == null)\n        {\n            formids = new Map<string,Map<string,FieldDefinition>>();\n            FieldDefinitions.fidx.set(form,formids);\n        }\n\n        let blockids:Map<string,FieldDefinition> = formids.get(block);\n\n        if (blockids == null)\n        {\n            blockids = new Map<string,FieldDefinition>();\n            formids.set(block,blockids);\n        }\n\n        if (blockids.get(def.name+\".\"+id) != null)\n        {\n            console.log(\"Field \"+form+\".\"+def.name+\".\"+id+\" defined twice, ignored\");\n            return;\n        }\n\n        if (def.column != null)\n        {\n            console.log(\"Field \"+form+\".\"+def.name+\".\"+id+\" cannot override column definition, ignored\");\n            def.column = null;\n        }\n\n        blockids.set(def.name+\".\"+id,def);\n    }\n\n\n    private static addblockid(block:string, id:string, def:FieldDefinition) : void\n    {\n        let blockids:Map<string,FieldDefinition> = FieldDefinitions.bidx.get(block);\n\n        if (blockids == null)\n        {\n            blockids = new Map<string,FieldDefinition>();\n            FieldDefinitions.bidx.set(block,blockids);\n        }\n\n        if (blockids.get(def.name+\".\"+id) != null)\n        {\n            console.log(\"Field \"+def.name+\".\"+id+\" defined twice, ignored\");\n            return;\n        }\n\n        if (def.column != null)\n        {\n            console.log(\"Field \"+def.name+\".\"+id+\" cannot override column definition, ignored\");\n            def.column = null;\n        }\n\n        blockids.set(def.name+\".\"+id,def);\n    }\n\n\n    public static getFormFieldOverride(form:string, block:string, fldid:string) : FieldDefinition\n    {\n        let formids:Map<string,Map<string,FieldDefinition>> = FieldDefinitions.fidx.get(form);\n        if (formids == null) return(null);\n\n        let blockids:Map<string,FieldDefinition> = formids.get(block.toLowerCase());\n        if (blockids != null) return(blockids.get(fldid.toLowerCase()));\n\n        return(null);\n    }\n\n\n    public static getFieldOverride(block:string, fldid:string) : FieldDefinition\n    {\n        let blockids:Map<string,FieldDefinition> = FieldDefinitions.bidx.get(block.toLowerCase());\n        if (blockids != null) return(blockids.get(fldid.toLowerCase()));\n        return(null);\n    }\n\n\n    public static getFormFields(form:string, block:string) : FieldDefinition[]\n    {\n        let formbfd:Map<string,FieldDefinition[]> = FieldDefinitions.ffd.get(form.toLowerCase());\n        if (formbfd == null) return([]);\n\n        let fields:FieldDefinition[] = formbfd.get(block.toLowerCase());\n        if (fields == null) return([]);\n\n        return(fields);\n    }\n\n\n    public static getFields(block:string) : FieldDefinition[]\n    {\n        let fields:FieldDefinition[] = FieldDefinitions.bfd.get(block.toLowerCase());\n        if (fields == null) return([]);\n        return(fields);\n    }\n\n\n    public static getFormFieldIndex(form:string, block:string) : Map<string,FieldDefinition>\n    {\n        let formbfx:Map<string,Map<string,FieldDefinition>> = FieldDefinitions.ffx.get(form.toLowerCase());\n        if (formbfx == null) return(new Map<string,FieldDefinition>());\n\n        let index:Map<string,FieldDefinition> = formbfx.get(block.toLowerCase());\n        if (index == null) return(new Map<string,FieldDefinition>());\n\n        return(new Map(index));\n    }\n\n\n    public static getFieldIndex(block:string) : Map<string,FieldDefinition>\n    {\n        let index:Map<string,FieldDefinition> = FieldDefinitions.bfx.get(block.toLowerCase());\n        if (index == null) return(new Map<string,FieldDefinition>());\n        return(new Map(index));\n    }\n\n\n    public static getFormColumnIndex(form:string, block:string) : Map<string,FieldDefinition>\n    {\n        let formbcx:Map<string,Map<string,FieldDefinition>> = FieldDefinitions.fcx.get(form.toLowerCase());\n        if (formbcx == null) return(new Map<string,FieldDefinition>());\n\n        let index:Map<string,FieldDefinition> = formbcx.get(block.toLowerCase());\n        if (index == null) return(new Map<string,FieldDefinition>());\n\n        return(new Map(index));\n    }\n\n\n    public static getColumnIndex(block:string) : Map<string,FieldDefinition>\n    {\n        let index:Map<string,FieldDefinition> = FieldDefinitions.bcx.get(block.toLowerCase());\n        if (index == null) index = new Map<string,FieldDefinition>();\n        return(new Map(index));\n    }\n\n\n    private static split(name:string) : string[]\n    {\n        let tokens:string[] = name.split(\".\");\n\n        for(let i = 0; i < tokens.length; i++)\n            tokens[i] = tokens[i].trim().toLowerCase();\n\n        return(tokens);\n    }\n}","import { Utils } from '../utils/Utils';\nimport { FieldDefinitions } from './FieldDefinitions';\nimport { FieldDefinition } from '../input/FieldDefinition';\n\n\nexport const field = (definition:FieldDefinition) =>\n{\n    function define(comp:any)\n    {\n        let form:boolean = false;\n        let utils:Utils = new Utils();\n        let cname:string = utils.getName(comp);\n        let ctype:string = utils.getType(comp);\n\n        if (ctype != \"Block\" && ctype != \"Form\")\n        {\n            console.log(\"@field(\"+JSON.stringify(definition)+\") can only be used on blocks and forms\");\n            return;\n        }\n\n        if (ctype == \"Form\") form = true;\n        FieldDefinitions.add(form,cname,definition);\n    }\n\n    return(define);\n}","import { ColumnDefinition } from \"../database/ColumnDefinition\";\n\nexport class ColumnDefinitions\n{\n    private static bcols:Map<string,ColumnDefinition[]> = new Map<string,ColumnDefinition[]>();\n    private static bcidx:Map<string,Map<string,ColumnDefinition>> = new Map<string,Map<string,ColumnDefinition>>();\n\n    public static add(block:string, def:ColumnDefinition) : void\n    {\n        let columns:ColumnDefinition[] = ColumnDefinitions.bcols.get(block);\n        let index:Map<string,ColumnDefinition> = ColumnDefinitions.bcidx.get(block);\n\n        if (columns == null)\n        {\n            columns = [];\n            ColumnDefinitions.bcols.set(block,columns);\n\n            index = new Map<string,ColumnDefinition>();\n            ColumnDefinitions.bcidx.set(block,index);\n        }\n\n        if (index.get(def.name) != null)\n        {\n            console.log(\"Block \"+block+\" column \"+def.name+\" defined twice, ignored\");\n            return;\n        }\n\n        columns.unshift(def);\n        index.set(def.name,def);\n    }\n\n\n    public static get(block:string) : ColumnDefinition[]\n    {\n        let columns:ColumnDefinition[] = ColumnDefinitions.bcols.get(block.toLowerCase());\n        if (columns == null) columns = [];\n        return(columns);\n    }\n\n\n    public static getIndex(block:string) : Map<string,ColumnDefinition>\n    {\n        let index:Map<string,ColumnDefinition> = ColumnDefinitions.bcidx.get(block.toLowerCase());\n        if (index == null) index = new Map<string,ColumnDefinition>();\n        return(index);\n    }\n}","import { Utils } from '../utils/Utils';\nimport { ColumnDefinitions } from './ColumnDefinitions';\nimport { ColumnDefinition } from '../database/ColumnDefinition';\n\n\nexport const column = (definition:ColumnDefinition) =>\n{\n    function define(comp:any)\n    {\n        let utils:Utils = new Utils();\n        let cname:string = utils.getName(comp);\n        let ctype:string = utils.getType(comp);\n\n        if (ctype != \"Block\")\n        {\n            console.log(\"@column(\"+definition.name+\",\"+definition.type+\") can only be used on blocks\");\n            return;\n        }\n\n        ColumnDefinitions.add(cname,definition);\n        definition.name = definition.name.toLowerCase();\n    }\n    return(define);\n}","import { Utils } from \"../utils/Utils\";\nimport { FormDefinitions } from \"./FormDefinitions\";\nimport { WindowOptions } from \"../forms/WindowOptions\";\n\n\nexport const wizard = () =>\n{\n    function define(form:any)\n    {\n        let utils:Utils = new Utils();\n        let fname:string = utils.getName(form);\n        let ctype:string = utils.getType(form);\n\n\n        if (ctype != \"Form\")\n        {\n            console.log(\"@wizard can only be used on forms\");\n            return;\n        }\n\n        let wopt:WindowOptions = FormDefinitions.getWindowOpts(fname);\n        wopt.wizard = true;\n    }\n\n    return(define);\n}\n","import { Utils } from \"../utils/Utils\";\nimport { FormDefinitions } from \"./FormDefinitions\";\nimport { WindowOptions } from \"../forms/WindowOptions\";\n\n\nexport const window = (inherit:boolean, width?:number|string, height?:number|string, top?:number|string, left?:number|string) =>\n{\n    function define(form:any)\n    {\n        let utils:Utils = new Utils();\n        let fname:string = utils.getName(form);\n        let ctype:string = utils.getType(form);\n\n\n        if (ctype != \"Form\")\n        {\n            console.log(\"@window can only be used on forms\");\n            return;\n        }\n\n\n        if (top != null && top.constructor.name == \"Number\") top += \"px\";\n        if (left != null && left.constructor.name == \"Number\") left += \"px\";\n        if (width != null && width.constructor.name == \"Number\") width += \"px\";\n        if (height != null && height.constructor.name == \"Number\") height += \"px\";\n\n        let wopt:WindowOptions = FormDefinitions.getWindowOpts(fname);\n\n        wopt.inherit = inherit;\n        wopt.offsetTop = \"\"+top;\n        wopt.width = \"\"+width;\n        wopt.height = \"\"+height;\n        wopt.offsetLeft = \"\"+left;\n    }\n\n    return(define);\n}\n","import { Form } from \"../forms/Form\";\nimport { Utils } from \"../utils/Utils\";\nimport { FormDefinitions } from \"./FormDefinitions\";\n\n\nexport const connect = (form:Form, func?:string) =>\n{\n    let utils:Utils = new Utils();\n    let fname:string = utils.getName(form);\n    let ctype:string = utils.getType(form);\n\n    if (ctype != \"Form\")\n    {\n        console.log(\"@connect can only be used on forms, found on '\"+fname+\"'\");\n        return;\n    }\n\n    FormDefinitions.setOnConnect(fname,func);\n}","import { Form } from \"../forms/Form\";\nimport { Utils } from \"../utils/Utils\";\nimport { FormDefinitions } from \"./FormDefinitions\";\n\n\nexport const destroy = (form:Form, func?:string) =>\n{\n    let utils:Utils = new Utils();\n    let fname:string = utils.getName(form);\n    let ctype:string = utils.getType(form);\n\n    if (ctype != \"Form\")\n    {\n        console.log(\"@destroy can only be used on forms, found on '\"+fname+\"'\");\n        return;\n    }\n\n    FormDefinitions.setOnDestroy(fname,func);\n}","export interface Key\n{\n    code:number;\n    name?:string;\n    alt?:boolean;\n    ctrl?:boolean;\n    meta?:boolean;\n    shift?:boolean;\n}\n\nexport interface KeyMap\n{\n    enter:string;\n    escape:string;\n\n    undo:string;\n    paste:string;\n\n    zoom:string;\n    close:string;\n    listval:string;\n\n    delete:string;\n    dublicate:string;\n    insertafter:string;\n    insertbefore:string;\n\n    commit:string;\n    rollback:string;\n\n    connect:string;\n    disconnect:string;\n\n    nextfield:string;\n    prevfield:string;\n\n    nextblock:string;\n    prevblock:string;\n\n    nextrecord:string;\n    prevrecord:string;\n\n    pageup:string;\n    pagedown:string;\n\n    clearform:string;\n    clearblock:string;\n\n    enterquery:string;\n    executequery:string;\n\n    map:string;\n}\n\nexport enum keymap\n{\n    enter,\n    escape,\n\n    undo,\n    paste,\n\n    close,\n\n    listval,\n\n    delete,\n    dublicate,\n    insertafter,\n    insertbefore,\n\n    commit,\n    rollback,\n\n    connect,\n    disconnect,\n\n    nextfield,\n    prevfield,\n\n    nextblock,\n    prevblock,\n\n    nextrecord,\n    prevrecord,\n\n    pageup,\n    pagedown,\n\n    clearform,\n    clearblock,\n\n    enterquery,\n    executequery,\n\n    zoom\n}\n\n\nexport class KeyMapper\n{\n    private static keys:Map<string,keymap> = new Map<string,keymap>();\n\n\n    public static index(map:KeyMap) : void\n    {\n        Object.keys(map).forEach((key) =>\n        {\n            let val:string = map[key];\n            let km:keymap = keymap[key];\n            KeyMapper.keys.set(val,km);\n        });\n    }\n\n\n    public static keymap(key:string) : keymap\n    {\n        return(KeyMapper.keys.get(key));\n    }\n\n\n    public static map(key:Key) : string\n    {\n        let sig:string = key.code+\":\";\n\n        sig += key.shift ? \"t\" : \"f\";\n        sig += key.ctrl  ? \"t\" : \"f\";\n        sig += key.alt   ? \"t\" : \"f\";\n        sig += key.meta  ? \"t\" : \"f\";\n\n        return(sig);\n    }\n\n\n    public static parse(key:string) : Key\n    {\n        let pos:number = key.indexOf(\":\");\n        let shf:boolean = key[pos+1] == 't';\n        let ctl:boolean = key[pos+2] == 't';\n        let alt:boolean = key[pos+3] == 't';\n        let mta:boolean = key[pos+4] == 't';\n        let code:number = +key.substring(0,pos);\n        return({code: code, shift: shf, ctrl: ctl, alt: alt, meta: mta});\n    }\n}","import { Listener } from \"./Listener\";\n\nexport class TriggerEvents\n{\n    types:Map<string,Listener[]> = new Map<string,Listener[]>();\n    fields:Map<string,Map<string,Listener[]>> = new Map<string,Map<string,Listener[]>>();\n}\n","import { Listener } from \"./Listener\";\nimport { keymap } from \"../keymap/KeyMap\";\nimport { TriggerEvent } from \"./TriggerEvent\";\nimport { TriggerEvents } from \"./TriggerEvents\";\nimport { TriggerFunction } from \"./TriggerFunction\";\n\n\nexport enum Trigger\n{\n    Key,\n    Lock,\n    Typing,\n    MouseClick,\n    MouseDoubleClick,\n    PreField,\n    PostField,\n    PostChange,\n    KeyPrevField,\n    KeyNextField,\n    KeyPrevBlock,\n    KeyNextBlock,\n    KeyEnterQuery,\n    KeyExecuteQuery,\n    WhenValidateField,\n    WhenValidateRecord,\n    PreQuery,\n    PostQuery,\n    PreInsert,\n    PreUpdate,\n    PreDelete\n}\n\nexport enum FieldTrigger\n{\n    Key,\n    Typing,\n    MouseClick,\n    MouseDoubleClick,\n    PreField,\n    PostField,\n    PostChange,\n    WhenValidateField,\n    WhenValidateRecord\n}\n\n\nexport class Triggers\n{\n    private triggers:TriggerEvents = new TriggerEvents();\n    private static fieldtriggers:Set<string> = null;\n\n    private static init() : void\n    {\n        if (Triggers.fieldtriggers == null)\n        {\n            Triggers.fieldtriggers = new Set<string>();\n\n            Object.keys(FieldTrigger).forEach((type) =>\n            {\n                if (isNaN(Number(type)))\n                    Triggers.fieldtriggers.add(type);\n            });\n        }\n    }\n\n    public addTrigger(instance:any, func:TriggerFunction, ttypes:Trigger|Trigger[], tfields?:string|string[], tkeys?:keymap|keymap[]) : void\n    {\n        let keys:keymap[] = [];\n        let fields:string[] = [];\n        let types:Trigger[] = [];\n\n        let tasa:boolean = false;\n        if (ttypes.constructor.name == \"Array\") tasa = true;\n\n        if (tasa) types = ttypes as Trigger[];\n        else      types.push(ttypes as Trigger);\n\n        if (tfields != null)\n        {\n            let fasa:boolean = false;\n            if (tfields.constructor.name == \"Array\") fasa = true;\n\n            if (fasa) fields = tfields as string[];\n            else      fields.push(tfields as string);\n        }\n\n        if (tkeys != null)\n        {\n            let kasa:boolean = false;\n            if (tkeys.constructor.name == \"Array\") kasa = true;\n\n            if (kasa) keys = tkeys as keymap[];\n            else      keys.push(tkeys as keymap);\n        }\n\n        if (fields.length > 0)\n        {\n            fields.forEach((field) =>\n            {\n                field = field.toLowerCase();\n                let triggers:Map<string,Listener[]> = this.triggers.fields.get(field);\n\n                if (triggers == null)\n                {\n                    triggers = new Map<string,Listener[]>();\n                    this.triggers.fields.set(field,triggers);\n                }\n\n                types.forEach((type) =>\n                {\n                    if (type == Trigger.Key)\n                    {\n                        keys.forEach((key) =>\n                        {\n                            let code:string = this.keycode(key);\n                            let lsnrs:Listener[] = triggers.get(code);\n\n                            if (lsnrs == null)\n                            {\n                                lsnrs = [];\n                                triggers.set(code,lsnrs);\n                            }\n\n                            lsnrs.push({inst: instance, func: func});\n                        });\n                    }\n                    else if (this.isFieldTrigger(type))\n                    {\n                        let name:string = this.trgname(type);\n                        let lsnrs:Listener[] = triggers.get(name);\n\n                        if (lsnrs == null)\n                        {\n                            lsnrs = [];\n                            triggers.set(name,lsnrs);\n                        }\n\n                        lsnrs.push({inst: instance, func: func});\n                    }\n                });\n            });\n        }\n        else\n        {\n            types.forEach((type) =>\n            {\n                if (type == Trigger.Key)\n                {\n                    keys.forEach((key) =>\n                    {\n                        let code:string = this.keycode(key);\n                        let lsnrs:Listener[] = this.triggers.types.get(code);\n\n                        if (lsnrs == null)\n                        {\n                            lsnrs = [];\n                            this.triggers.types.set(code,lsnrs);\n                        }\n\n                        lsnrs.push({inst: instance, func: func});\n                    });\n                }\n                else\n                {\n                    let name:string = this.trgname(type);\n                    let lsnrs:Listener[] = this.triggers.types.get(name);\n\n                    if (lsnrs == null)\n                    {\n                        lsnrs = [];\n                        this.triggers.types.set(name,lsnrs);\n                    }\n\n                    lsnrs.push({inst: instance, func: func});\n                }\n            });\n        }\n    }\n\n\n    public async invokeTriggers(type:Trigger, event:TriggerEvent, key?:keymap) : Promise<boolean>\n    {\n        event[\"type$\"] = type;\n\n        if (type == Trigger.Key && key != null)\n        {\n            let code:string = this.keycode(key);\n            let lsnrs:Listener[] = this.triggers.types.get(code);\n\n            if (lsnrs != null)\n            {\n                for(let i = 0; i < lsnrs.length; i++)\n                    if (!await this.execfunc(lsnrs[i],event)) return(false);\n            }\n        }\n        else\n        {\n            let name:string = this.trgname(type);\n            let lsnrs:Listener[] = this.triggers.types.get(name);\n\n            if (lsnrs != null)\n            {\n                for(let i = 0; i < lsnrs.length; i++)\n                    if (!await this.execfunc(lsnrs[i],event)) return(false);\n            }\n        }\n\n        return(true);\n    }\n\n\n    public async invokeFieldTriggers(type:Trigger, field:string, event:TriggerEvent, key?:keymap) : Promise<boolean>\n    {\n        let triggers:Map<string,Listener[]> = this.triggers.fields.get(field);\n\n        if (triggers == null)\n            return(this.invokeTriggers(type,event,key));\n\n        event[\"type$\"] = type;\n\n        if (type == Trigger.Key && key != null)\n        {\n            let code:string = this.keycode(key);\n            let lsnrs:Listener[] = triggers.get(code);\n\n            if (lsnrs != null)\n            {\n                for(let i = 0; i < lsnrs.length; i++)\n                    if (!await this.execfunc(lsnrs[i],event)) return(false);\n            }\n        }\n        else\n        {\n            let name:string = this.trgname(type);\n            let lsnrs:Listener[] = triggers.get(name);\n\n            if (lsnrs != null)\n            {\n                for(let i = 0; i < lsnrs.length; i++)\n                    if (!await this.execfunc(lsnrs[i],event)) return(false);\n            }\n        }\n\n        return(this.invokeTriggers(type,event,key));\n    }\n\n\n    private async execfunc(lsnr:Listener, event:TriggerEvent) : Promise<boolean>\n    {\n        try\n        {\n            return(await lsnr.inst[lsnr.func.name](event));\n        }\n        catch (error)\n        {\n            console.log(error);\n            return(false);\n        }\n    }\n\n\n    private isFieldTrigger(trigger:Trigger)\n    {\n        Triggers.init();\n        return(Triggers.fieldtriggers.has(Trigger[trigger]));\n    }\n\n\n    private trgname(trigger:Trigger) : string\n    {\n        return(Trigger[trigger].toLowerCase());\n    }\n\n\n    private keycode(key:keymap) : string\n    {\n        return(keymap[key].toLowerCase());\n    }\n}","import { keymap } from \"../keymap/KeyMap\";\nimport { Trigger } from \"../events/Triggers\";\nimport { TriggerFunction } from \"../events/TriggerFunction\";\n\n\nexport interface TriggerDefinition\n{\n    key?:keymap,\n    field?:string;\n    block:string;\n    blktrg:boolean;\n    trigger:Trigger;\n    params:string[];\n    func:TriggerFunction;\n}\n\n\nexport class TriggerDefinitions\n{\n    private static bftriggers:Map<string,Map<string,TriggerDefinition>> = new Map<string,Map<string,TriggerDefinition>>();\n    private static bktriggers:Map<string,Map<string,TriggerDefinition>> = new Map<string,Map<string,TriggerDefinition>>();\n    private static fktriggers:Map<string,Map<string,TriggerDefinition>> = new Map<string,Map<string,TriggerDefinition>>();\n    private static fftriggers:Map<string,Map<string,Map<string,TriggerDefinition>>> = new Map<string,Map<string,Map<string,TriggerDefinition>>>();\n\n\n    public static add(isblock:boolean, cname:string, def:TriggerDefinition) : void\n    {\n        if (def.key == null) this.addft(isblock,cname,def);\n        else                 this.addkt(isblock,cname,def);\n    }\n\n\n    private static addkt(isblock:boolean, cname:string, def:TriggerDefinition) : void\n    {\n        if (isblock) TriggerDefinitions.addKeyTrigger(cname,def);\n        else         TriggerDefinitions.addFormKeyTrigger(cname,def);\n    }\n\n\n    private static addft(isblock:boolean, cname:string, def:TriggerDefinition) : void\n    {\n        let parts:string[] = TriggerDefinitions.split(def.field);\n\n        if (isblock && parts.length > 1)\n        {\n            console.log(\"trigger must specify field without '.' or ' '\");\n            return;\n        }\n\n        if (!isblock && parts.length > 2)\n        {\n            console.log(\"trigger must specify blockalias.field without ' '\");\n            return;\n        }\n\n        let form:string = null;\n        let block:string = null;\n        let field:string = null;\n\n        if (isblock)\n        {\n            block = cname;\n            if (parts.length > 0) field = parts.shift();\n        }\n        else\n        {\n            form = cname;\n            block = parts.shift();\n            def.block = block;\n            if (parts.length > 0) field = parts.shift();\n        }\n\n        def.field = field;\n\n        if (isblock) TriggerDefinitions.addFieldTrigger(block,field,def);\n        else         TriggerDefinitions.addFormFieldTrigger(form,block,field,def);\n    }\n\n\n    private static addFieldTrigger(block:string,field:string,def:TriggerDefinition)\n    {\n        let triggers:Map<string,TriggerDefinition> = TriggerDefinitions.bftriggers.get(block);\n\n        if (triggers == null)\n        {\n            triggers = new Map<string,TriggerDefinition>();\n            TriggerDefinitions.bftriggers.set(block,triggers);\n        }\n\n        triggers.set(field+\"[\"+Trigger[def.trigger]+\"]\",def);\n    }\n\n\n    private static addKeyTrigger(block:string,def:TriggerDefinition)\n    {\n        let triggers:Map<string,TriggerDefinition> = TriggerDefinitions.bktriggers.get(block);\n\n        if (triggers == null)\n        {\n            triggers = new Map<string,TriggerDefinition>();\n            TriggerDefinitions.bktriggers.set(block,triggers);\n        }\n\n        triggers.set(keymap[def.key]+\"[\"+Trigger[def.trigger]+\"]\",def);\n    }\n\n\n    private static addFormFieldTrigger(form:string,block:string,field:string,def:TriggerDefinition)\n    {\n        if (block == null) block = \"\";\n        let ftriggers:Map<string,Map<string,TriggerDefinition>> = TriggerDefinitions.fftriggers.get(form);\n\n        if (ftriggers == null)\n        {\n            ftriggers = new Map<string,Map<string,TriggerDefinition>>();\n            TriggerDefinitions.fftriggers.set(form,ftriggers);\n        }\n\n        let triggers:Map<string,TriggerDefinition> = ftriggers.get(block);\n\n        if (triggers == null)\n        {\n            triggers = new Map<string,TriggerDefinition>();\n            ftriggers.set(block,triggers);\n        }\n\n        triggers.set(field+\"[\"+Trigger[def.trigger]+\"]\",def);\n    }\n\n\n    private static addFormKeyTrigger(form:string,def:TriggerDefinition)\n    {\n        let triggers:Map<string,TriggerDefinition> = TriggerDefinitions.fktriggers.get(form);\n\n        if (triggers == null)\n        {\n            triggers = new Map<string,TriggerDefinition>();\n            TriggerDefinitions.fktriggers.set(form,triggers);\n        }\n\n        triggers.set(keymap[def.key]+\"[\"+Trigger[def.trigger]+\"]\",def);\n    }\n\n\n    public static getFieldTriggers(block:string) : Map<string,TriggerDefinition>\n    {\n        return(new Map(TriggerDefinitions.bftriggers.get(block.toLowerCase())));\n    }\n\n\n    public static getKeyTriggers(block:string) : Map<string,TriggerDefinition>\n    {\n        return(new Map(TriggerDefinitions.bktriggers.get(block.toLowerCase())));\n    }\n\n\n    public static getFormFieldTriggers(form:string,block:string) : Map<string,TriggerDefinition>\n    {\n        if (block == null) block = \"\";\n        let triggers:Map<string,Map<string,TriggerDefinition>> = TriggerDefinitions.fftriggers.get(form.toLowerCase());\n        if (triggers != null) return(new Map(triggers.get(block.toLowerCase())));\n        return(new Map());\n    }\n\n\n    public static getFormKeyTriggers(form:string) : Map<string,TriggerDefinition>\n    {\n        return(new Map(TriggerDefinitions.fktriggers.get(form.toLowerCase())));\n    }\n\n\n    private static split(name:string) : string[]\n    {\n        if (name == null) return([]);\n        let tokens:string[] = name.trim().split(\".\");\n\n        for(let i = 0; i < tokens.length; i++)\n            tokens[i] = tokens[i].trim().toLowerCase();\n\n        return(tokens);\n    }\n}\n","import { Utils } from \"../utils/Utils\";\nimport { Trigger } from \"../events/Triggers\";\nimport { TriggerDefinition, TriggerDefinitions } from \"./TriggerDefinitions\";\n\nexport const trigger = (trigger:Trigger,field?:string|string[]) =>\n{\n    function define(comp:any, func?:string)\n    {\n        let utils:Utils = new Utils();\n        let cname:string = utils.getName(comp);\n        let ctype:string = utils.getType(comp);\n        let params:string[] = utils.getParams(comp[func]);\n\n        if (params.length != 1)\n        {\n            console.log(\"function \"+func+\" must take 1 TriggerEvent argument\");\n            return;\n        }\n\n        if (ctype != \"Block\" && ctype != \"Form\")\n        {\n            console.log(\"@trigger can only be applied on Block or Form\");\n            return;\n        }\n\n        let blktrg:boolean = false;\n        if (ctype == \"Block\") blktrg = true;\n\n        let fields:string[] = [];\n        if (field == null) field = [null];\n\n        if (field.constructor.name == \"Array\") fields = field as string[];\n        else                                   fields.push(field as string);\n\n        fields.forEach((fld) =>\n        {\n            let trg:TriggerDefinition =\n            {\n                field: fld,\n                block: null,\n                blktrg: blktrg,\n                params: params,\n                func: comp[func],\n                trigger: trigger\n            }\n\n            TriggerDefinitions.add(blktrg,cname,trg);\n        });\n    }\n\n    return(define);\n}\n","import { Utils } from \"../utils/Utils\";\n\nexport class DBUsage\n{\n    public static merge(changes:DatabaseUsage, base:DatabaseUsage) : DatabaseUsage\n    {\n        let utils:Utils = new Utils();\n        if (changes == null) return(base);\n        let merged:DatabaseUsage = utils.clone(base);\n        if (changes.hasOwnProperty(\"query\"))  merged.query  = changes.query;\n        if (changes.hasOwnProperty(\"insert\")) merged.insert = changes.insert;\n        if (changes.hasOwnProperty(\"update\")) merged.update = changes.update;\n        if (changes.hasOwnProperty(\"delete\")) merged.delete = changes.delete;\n        return(merged);\n    }\n\n    public static override(overide:DatabaseUsage, base:DatabaseUsage) : DatabaseUsage\n    {\n        let utils:Utils = new Utils();\n        if (overide == null) return(base);\n        let merged:DatabaseUsage = utils.clone(base);\n\n        if (overide.hasOwnProperty(\"query\")  && !overide.query)  merged.query = false;\n        if (overide.hasOwnProperty(\"insert\") && !overide.insert) merged.insert = false;\n        if (overide.hasOwnProperty(\"update\") && !overide.update) merged.update = false;\n        if (overide.hasOwnProperty(\"delete\") && !overide.delete) merged.delete = false;\n\n        return(merged);\n    }\n\n    public static complete(base:DatabaseUsage) : DatabaseUsage\n    {\n        let utils:Utils = new Utils();\n        \n        if (base == null) base = {};\n        else base = utils.clone(base);\n\n        if (!base.hasOwnProperty(\"query\"))  base.query  = true;\n        if (!base.hasOwnProperty(\"insert\")) base.insert = true;\n        if (!base.hasOwnProperty(\"update\")) base.update = true;\n        if (!base.hasOwnProperty(\"delete\")) base.delete = true;\n        return(base);\n    }\n}\n\n\nexport interface DatabaseUsage\n{\n    query?:boolean;\n    insert?:boolean;\n    update?:boolean;\n    delete?:boolean;\n}","import { DatabaseUsage, DBUsage } from \"../database/DatabaseUsage\";\n\nexport interface PropUsage\n{\n    prop?:string;\n    usage?:DatabaseUsage;\n}\n\n\nexport class DatabaseDefinitions\n{\n    private static bdefault:Map<string,DatabaseUsage> = new Map<string,DatabaseUsage>();\n    private static fdefault:Map<string,DatabaseUsage> = new Map<string,DatabaseUsage>();\n\n    public static setFormUsage(form:string, usage:DatabaseUsage) : void\n    {\n        DatabaseDefinitions.fdefault.set(form,usage);\n    }\n\n    public static getFormUsage(form:string) : DatabaseUsage\n    {\n        let usage:DatabaseUsage = DatabaseDefinitions.fdefault.get(form.toLowerCase());\n        return(usage);\n    }\n\n    public static setBlockDefault(block:string, usage:DatabaseUsage) : void\n    {\n        DatabaseDefinitions.bdefault.set(block,usage);\n    }\n\n    public static getBlockDefault(block:string) : DatabaseUsage\n    {\n        let usage:DatabaseUsage = null;\n\n        let base:DatabaseUsage =\n        {\n            query:  true,\n            insert: true,\n            update: true,\n            delete: true\n        };\n\n        if (block != null) usage = DatabaseDefinitions.bdefault.get(block.toLowerCase());\n        return(DBUsage.merge(usage,base));\n    }\n}","import { Utils } from \"../utils/Utils\";\nimport { DatabaseUsage } from \"../database/DatabaseUsage\";\nimport { DatabaseDefinitions } from \"./DatabaseDefinitions\";\n\nexport const database = (usage:DatabaseUsage) =>\n{\n    function define(component:any)\n    {\n        let utils:Utils = new Utils();\n        let comp:string = utils.getName(component);\n        let type:string = utils.getType(component);\n\n        if (type == \"Form\")\n        {\n            DatabaseDefinitions.setFormUsage(comp,usage);\n            return;\n        }\n\n        if (type == \"Block\")\n        {\n            DatabaseDefinitions.setBlockDefault(comp,usage);\n            return;\n        }\n\n        console.log(\"@database can only be used in conjunction with Form or Block\");\n    }\n    return(define);\n}","import { Utils } from \"../utils/Utils\";\nimport { keymap } from \"../keymap/KeyMap\";\nimport { Trigger } from \"../events/Triggers\";\nimport { TriggerDefinition, TriggerDefinitions } from \"./TriggerDefinitions\";\n\n\nexport const keytrigger = (key:keymap|keymap[]) =>\n{\n    function define(comp:any, func?:string)\n    {\n        let utils:Utils = new Utils();\n        let cname:string = utils.getName(comp);\n        let ctype:string = utils.getType(comp);\n        let params:string[] = utils.getParams(comp[func]);\n\n        if (params.length != 1)\n        {\n            console.log(\"function \"+func+\" must take 1 TriggerEvent argument\");\n            return;\n        }\n\n        if (ctype != \"Block\" && ctype != \"Form\")\n        {\n            console.log(\"@keytrigger can only be applied on Block or Form\");\n            return;\n        }\n\n        let block:boolean = false;\n        if (ctype == \"Block\") block = true;\n\n        let keys:keymap[] = [];\n\n        if (key.constructor.name == \"Array\") keys = key as keymap[];\n        else                                 keys.push(key as keymap);\n\n        keys.forEach((key) =>\n        {\n            let trg:TriggerDefinition =\n            {\n                key: key,\n                block: null,\n                blktrg: block,\n                params: params,\n                func: comp[func],\n                trigger: Trigger.Key\n            }\n\n            TriggerDefinitions.add(block,cname,trg);\n        });\n    }\n\n    return(define);\n}\n","import { Form } from \"../forms/Form\";\nimport { Utils } from \"../utils/Utils\";\nimport { FormDefinitions } from \"./FormDefinitions\";\n\n\nexport const disconnect = (form:Form, func?:string) =>\n{\n    let utils:Utils = new Utils();\n    let fname:string = utils.getName(form);\n    let ctype:string = utils.getType(form);\n\n    if (ctype != \"Form\")\n    {\n        console.log(\"@disconnect can only be used on forms, found on '\"+fname+\"'\");\n        return;\n    }\n\n    FormDefinitions.setOnDisconnect(fname,func);\n}","export interface LOVDefinition\n{\n    inst:any;\n    func:string;\n    params:string[];\n}\n\nexport class LOVDefinitions\n{\n    private static bdefs:Map<string,Map<string,LOVDefinition>> = new Map<string,Map<string,LOVDefinition>>();\n    private static biddefs:Map<string,Map<string,LOVDefinition>> = new Map<string,Map<string,LOVDefinition>>();\n    private static fdefs:Map<string,Map<string,Map<string,LOVDefinition>>> = new Map<string,Map<string,Map<string,LOVDefinition>>>();\n    private static fiddefs:Map<string,Map<string,Map<string,LOVDefinition>>> = new Map<string,Map<string,Map<string,LOVDefinition>>>();\n\n    public static add(isblock:boolean, cname:string, fieldspec:string, inst:any, func:string, params:string[])\n    {\n        let form:string = null;\n        let block:string = null;\n        let field:string = null;\n\n        let id:boolean = false;\n        let parts:string[] = LOVDefinitions.split(fieldspec);\n\n        if (isblock)\n        {\n            block = cname;\n        }\n        else\n        {\n            form = cname;\n            block = parts.shift();\n        }\n\n        if (parts.length == 0 || parts.length > 2)\n        {\n            console.log(\"@listofvalues must specify [alias.]field[.id], not '\"+fieldspec+\"'\");\n            return;\n        }\n\n        field = parts.shift();\n\n        if (parts.length > 0)\n        {\n            id = true;\n            field += \".\"+parts.shift();\n        }\n\n        let def:LOVDefinition =\n        {\n            inst: inst,\n            func: func,\n            params: params\n        }\n\n        if (form != null)\n        {\n            if (!id) LOVDefinitions.addFormLov(form,block,field,def);\n            else     LOVDefinitions.addFormIdLov(form,block,field,def);\n        }\n        else\n        {\n            if (!id) LOVDefinitions.addBlockLov(block,field,def);\n            else     LOVDefinitions.addBlockIdLov(block,field,def);\n        }\n    }\n\n\n    private static addFormLov(form:string, block:string, field:string, def:LOVDefinition)\n    {\n        let fdefs:Map<string,Map<string,LOVDefinition>> = LOVDefinitions.fdefs.get(form);\n\n        if (fdefs == null)\n        {\n            fdefs = new Map<string,Map<string,LOVDefinition>>();\n            LOVDefinitions.fdefs.set(form,fdefs);\n        }\n\n        let bdefs:Map<string,LOVDefinition> = fdefs.get(block);\n\n        if (bdefs == null)\n        {\n            bdefs = new Map<string,LOVDefinition>();\n            fdefs.set(block,bdefs);\n        }\n\n        bdefs.set(field,def);\n    }\n\n\n    private static addFormIdLov(form:string, block:string, field:string, def:LOVDefinition)\n    {\n        let fdefs:Map<string,Map<string,LOVDefinition>> = LOVDefinitions.fiddefs.get(form);\n\n        if (fdefs == null)\n        {\n            fdefs = new Map<string,Map<string,LOVDefinition>>();\n            LOVDefinitions.fiddefs.set(form,fdefs);\n        }\n\n        let bdefs:Map<string,LOVDefinition> = fdefs.get(block);\n\n        if (bdefs == null)\n        {\n            bdefs = new Map<string,LOVDefinition>();\n            fdefs.set(block,bdefs);\n        }\n\n        bdefs.set(field,def);\n    }\n\n\n    private static addBlockLov(block:string, field:string, def:LOVDefinition)\n    {\n        let bdefs:Map<string,LOVDefinition> = LOVDefinitions.bdefs.get(block);\n\n        if (bdefs == null)\n        {\n            bdefs = new Map<string,LOVDefinition>();\n            LOVDefinitions.bdefs.set(block,bdefs);\n        }\n\n        bdefs.set(field,def);\n    }\n\n\n    private static addBlockIdLov(block:string, field:string, def:LOVDefinition)\n    {\n        let bdefs:Map<string,LOVDefinition> = LOVDefinitions.biddefs.get(block);\n\n        if (bdefs == null)\n        {\n            bdefs = new Map<string,LOVDefinition>();\n            LOVDefinitions.biddefs.set(block,bdefs);\n        }\n\n        bdefs.set(field,def);\n    }\n\n\n    public static getblock(block:string) : Map<string,LOVDefinition>\n    {\n        return(new Map(LOVDefinitions.bdefs.get(block.toLowerCase())));\n    }\n\n\n    public static getblockid(block:string) : Map<string,LOVDefinition>\n    {\n        return(new Map(LOVDefinitions.biddefs.get(block.toLowerCase())));\n    }\n\n\n\n    public static getform(form:string, block:string) : Map<string,LOVDefinition>\n    {\n        let fdefs:Map<string,Map<string,LOVDefinition>> = LOVDefinitions.fdefs.get(form.toLowerCase());\n        if (fdefs != null) return(new Map(fdefs.get(block.toLowerCase())));\n        return(new Map());\n    }\n\n\n    public static getidform(form:string, block:string) : Map<string,LOVDefinition>\n    {\n        let fdefs:Map<string,Map<string,LOVDefinition>> = LOVDefinitions.fiddefs.get(form.toLowerCase());\n        if (fdefs != null) return(new Map(fdefs.get(block.toLowerCase())));\n        return(new Map());\n    }\n\n\n    private static split(name:string) : string[]\n    {\n        let tokens:string[] = name.trim().split(\".\");\n\n        for(let i = 0; i < tokens.length; i++)\n            tokens[i] = tokens[i].trim().toLowerCase();\n\n        return(tokens);\n    }\n}","import { Utils } from \"../utils/Utils\";\nimport { LOVDefinitions } from \"./LOVDefinitions\";\n\nexport const listofvalues = (field:string|string[]) =>\n{\n    function define(comp:any, func?:string)\n    {\n        let utils:Utils = new Utils();\n        let cname:string = utils.getName(comp);\n        let ctype:string = utils.getType(comp);\n        let params:string[] = utils.getParams(comp[func]);\n\n        if (ctype != \"Block\" && ctype != \"Form\")\n        {\n            console.log(\"@listofvalues can only be applied on Block or Form\");\n            return;\n        }\n\n        let block:boolean = false;\n        if (ctype == \"Block\") block = true;\n\n        let fields:string[] = [];\n        if (field.constructor.name == \"Array\") fields = field as string[];\n        else                                   fields.push(field as string);\n\n        fields.forEach((fld) => {LOVDefinitions.add(block,cname,fld,comp,func,params)});\n    }\n\n    return(define);\n}\n","import { Trigger } from \"./Triggers\";\nimport { keymap } from \"../keymap/KeyMap\";\nimport { Statement } from \"../database/Statement\";\nimport { FieldInstance } from \"../input/FieldInstance\";\n\nexport enum Origin\n{\n    Form,\n    Block,\n    Field\n}\n\n\nexport class TriggerEvent\n{\n    private event$:any;\n    private type$:Trigger;\n    private block$:string;\n    private record$:number;\n\n    constructor(block:string, record:number, jsevent?:any)\n    {\n        this.block$ = block;\n        this.record$ = record;\n        this.event$ = jsevent;\n    }\n\n    public get block() : string\n    {\n        return(this.block$);\n    }\n\n    public get type() : Trigger\n    {\n        return(this.type$);\n    }\n\n    public get event() : any\n    {\n        return(this.event$);\n    }\n\n    public get record() : number\n    {\n        return(this.record$);\n    }\n}\n\n\nexport class KeyTriggerEvent extends TriggerEvent\n{\n    private key$:keymap;\n    private field$:string;\n    private origin$:number;\n\n    constructor(origin:Origin, block:string, field:FieldInstance, key:keymap, jsevent:any)\n    {\n        super(block,0,jsevent);\n\n        this.key$ = key;\n        this.origin$ = origin;\n\n        if (field != null)\n        {\n            this.field$ = field.name;\n            this[\"record$\"] = field.row;\n        }\n    }\n\n    public get key() : keymap\n    {\n        return(this.key$);\n    }\n\n    public get field() : string\n    {\n        return(this.field$);\n    }\n\n    public get origin() : number\n    {\n        return(this.origin$);\n    }\n}\n\n\nexport class FieldTriggerEvent extends TriggerEvent\n{\n    private value$:any;\n    private id$:string;\n    private field$:string;\n    private previous$:any;\n\n    constructor(block:string, field:string, id:string, row:number, value:any, previous:any, jsevent?:any)\n    {\n        super(block,row,jsevent);\n\n        this.id$ = id;\n        this.field$ = field;\n        this.value$ = value;\n        this.previous$ = previous;\n    }\n\n    public get value() : any\n    {\n        return(this.value$);\n    }\n\n    public get field() : string\n    {\n        return(this.field$);\n    }\n\n    public get id() : string\n    {\n        return(this.id$);\n    }\n\n    public get previous() : any\n    {\n        return(this.previous$);\n    }\n}\n\n\nexport class SQLTriggerEvent extends TriggerEvent\n{\n    private stmt$:Statement;\n\n    constructor(block:string, row:number, stmt:Statement)\n    {\n        super(block,row,null);\n        this.stmt$ = stmt;\n    }\n\n    public get stmt() : Statement\n    {\n        return(this.stmt$);\n    }\n\n    public set stmt(stmt:Statement)\n    {\n        this.stmt$ = stmt;\n    }\n}\n","import { Config } from \"./Config\";\nimport { Injectable } from \"@angular/core\";\nimport { Application } from \"./Application\";\n\n\n@Injectable({\n    providedIn: 'root',\n})\n\n\nexport class Context\n{\n    public conf:Config;\n    public app:Application;\n}","import { DropDownMenu } from './DropDownMenu';\nimport { Context } from '../application/Context';\nimport { ApplicationImpl } from '../application/ApplicationImpl';\nimport { Component, ViewChild, ElementRef, AfterViewInit, ComponentRef, EmbeddedViewRef, ChangeDetectorRef, ChangeDetectionStrategy } from '@angular/core';\n\n\n@Component({\n    selector: 'menuarea',\n    template:\n\t`\n\t\t<div #menu></div>\n\t`\n    , changeDetection: ChangeDetectionStrategy.OnPush\n})\n\n\nexport class MenuArea implements AfterViewInit\n{\n    private app:ApplicationImpl;\n    private menu:HTMLDivElement;\n    private element:HTMLElement;\n    private menuref:ComponentRef<any>;\n    @ViewChild(\"menu\", {read: ElementRef}) private elem: ElementRef;\n\n\n    constructor(ctx:Context, private change:ChangeDetectorRef)\n    {\n        this.app = ctx.app[\"_impl_\"];\n    }\n\n\n    public remove() : void\n    {\n        if (this.element != null)\n        {\n            let menuelem:Element = this.menu.firstElementChild;\n            if (menuelem != null) this.menu.removeChild(menuelem);\n            this.app.builder.getAppRef().detachView(this.menuref.hostView);\n        }\n\n        this.change.detectChanges();\n    }\n\n\n    public display(menu:ComponentRef<DropDownMenu>) : void\n    {\n        if (menu == null)\n        {\n            this.remove();\n            return;\n        }\n\n\t\tif (this.menu == null)\n\t\t{\n\t\t\tsetTimeout(() => {this.display(menu);},10);\n\t\t\treturn;\n\t\t}\n\n        if (this.element != null)\n        {\n            let menuelem:Element = this.menu.firstElementChild;\n            if (menuelem != null) this.menu.removeChild(menuelem);\n            this.app.builder.getAppRef().detachView(this.menuref.hostView);\n        }\n\n        this.menuref = menu;\n\n        this.element = (menu.hostView as EmbeddedViewRef<any>).rootNodes[0] as HTMLElement;\n\t\tthis.app.builder.getAppRef().attachView(this.menuref.hostView);\n\t\tthis.menu.appendChild(this.element);\n\t\tthis.change.detectChanges();\n    }\n\n\n    public ngAfterViewInit(): void\n    {\n        this.menu = this.elem?.nativeElement as HTMLDivElement;\n\t\tthis.app.setMenuArea(this);\n    }\n}","import { Form } from '../forms/Form';\nimport { MenuInterface } from \"./MenuInterface\";\nimport { Application } from \"../application/Application\";\n\n\nexport abstract class MenuHandler\n{\n    private static _id:number = 0;\n\n    private guid$:number;\n    private __menu__:MenuInterface = null;\n    // dont rename __menu__ as it is set behind the scenes\n\n    constructor()\n    {\n        this.guid$ = MenuHandler._id++;\n    }\n\n    public get guid() : number\n    {\n        return(this.guid$);\n    }\n\n    public get ready() : boolean\n    {\n        return(this.__menu__ != null);\n    }\n\n    public get app() : Application\n    {\n        return(this.__menu__.app);\n    }\n\n\n    public enable(menu?:string) : void\n    {\n        this.__menu__.enable(menu);\n    }\n\n\n    public disable(menu?:string) : void\n    {\n        this.__menu__.disable(menu);\n    }\n\n    public get connected() : boolean\n    {\n        return(this.__menu__.isConnected());\n    }\n\n    public get transaction() : boolean\n    {\n        return(this.app.transaction);\n    }\n\n    // For overwrite by application menus\n    public onFormChange(form:Form) : void\n    {\n    }\n\n\n    abstract onInit() : void;\n    abstract onConnect() : void;\n    abstract onDisconnect() : void;\n    abstract onTransactionChange() : void;\n}","import { Form } from \"../forms/Form\";\nimport { keymap } from \"../keymap/KeyMap\";\nimport { MenuHandler } from './MenuHandler';\n\n\nexport class DefaultMenuHandler extends MenuHandler\n{\n    public form:Form;\n\n    public onInit() : void\n    {\n        this.init();\n    }\n\n    public onConnect(): void\n    {\n        this.init();\n    }\n\n    public onDisconnect(): void\n    {\n        this.init();\n    }\n\n    public onFormChange(form: Form): void\n    {\n        this.form = form;\n        if (this.ready) this.init();\n    }\n\n    public onTransactionChange(): void\n    {\n        if (this.transaction) this.enable(\"/transaction\");\n        else                  this.disable(\"/transaction\");\n    }\n\n    private init() : void\n    {\n        this.disable();\n        this.enable(\"/form/shortkeys\");\n\n        if (this.form != null)\n        {\n            this.enable(\"/form/close\");\n            this.enable(\"/section/next\");\n            this.enable(\"/section/previous\");\n\n            if (this.connected)\n            {\n                this.enable(\"/form\");\n                this.enable(\"/section\");\n                this.enable(\"/record\");\n                this.enable(\"/connection/disconnect\");\n            }\n            else\n            {\n                this.enable(\"/connection/connect\");\n            }\n        }\n        else\n        {\n            if (this.connected)\n            {\n                this.enable(\"/connection/disconnect\");\n            }\n            else\n            {\n                this.enable(\"/connection/connect\");\n            }\n        }\n\n        this.onTransactionChange();\n    }\n\n    public connect() : void\n    {\n        this.app.connect();\n        this.init();\n    }\n\n    public disconnect() : void\n    {\n        this.app.disconnect();\n        this.init();\n    }\n\n    public commit() : void\n    {\n        this.app.commit();\n    }\n\n    public rollback() : void\n    {\n        this.app.rollback();\n    }\n\n    public clear() : void\n    {\n        this.form?.sendKey(keymap.clearform);\n    }\n\n    public cancel() : void\n    {\n        this.form?.block?.cancel();\n    }\n\n    public enterFormQuery() : void\n    {\n        this.form?.enterquery();\n    }\n\n    public executeFormQuery() : void\n    {\n        this.form?.executequery();\n    }\n\n    public enterQuery() : void\n    {\n        this.form?.block?.sendKey(keymap.enterquery);\n    }\n\n    public executeQuery() : void\n    {\n        this.form?.block?.sendKey(keymap.executequery);\n    }\n\n    public deleteRecord() : void\n    {\n        this.form?.block?.delete();\n    }\n\n    public insertRecordAfter() : void\n    {\n        this.form?.block?.insert(false);\n    }\n\n    public insertRecordBefore() : void\n    {\n        this.form?.block?.insert(true);\n    }\n\n    public nextRecord() : void\n    {\n        this.form?.block?.nextrecord();\n    }\n\n    public prevRecord() : void\n    {\n        this.form?.block?.prevrecord();\n    }\n\n    public nextBlock() : void\n    {\n        this.form?.block?.nextblock();\n    }\n\n    public prevBlock() : void\n    {\n        this.form?.block?.prevblock();\n    }\n\n    public pageUp() : void\n    {\n        this.form?.block?.pageup();\n    }\n\n    public pageDown() : void\n    {\n        this.form?.block?.pagedown();\n    }\n\n    public close() : void\n    {\n        this.form?.close(false);\n        this.init();\n    }\n\n    public showkeymap() : void\n    {\n        this.app.showKeyMap();\n    }\n}","import { Menu } from './Menu';\nimport { MenuEntry } from './MenuEntry';\nimport { MenuHandler } from './MenuHandler';\nimport { DefaultMenuHandler } from './DefaultMenuHandler';\n\n\nexport class DefaultMenu implements Menu\n{\n    private entries: MenuEntry[];\n    private handler: DefaultMenuHandler;\n\n    constructor()\n    {\n        this.entries =\n        [\n            {\n                name: \"Form\", title: \"Form actions\", options:\n                [\n                    {name: \"enter query\",       action: \"enterFormQuery\"},\n                    {name: \"execute query\",     action: \"executeFormQuery\"},\n                    {name: \"clear\",             action: \"clear\"},\n                    {name: \"close\",             action: \"close\"},\n                    {name: \"shortkeys\",         action: \"showkeymap\"},\n                ]\n            }\n            ,\n            {\n                name: \"Section\", title: \"Block actions\", options:\n                [\n                    {name: \"enter query\",     action: \"enterQuery\"},\n                    {name: \"execute query\",   action: \"executeQuery\"},\n                    {name: \"clear filter\",    action: \"executeQuery\"},\n                    {name: \"next\",            action: \"nextBlock\"},\n                    {name: \"previous\",        action: \"prevBlock\"},\n                ]\n            }\n            ,\n            {\n                name: \"Record\", title: \"Record actions\", options:\n                [\n                    {name: \"insert below\",  action: \"insertRecordAfter\"},\n                    {name: \"insert above\",  action: \"insertRecordBefore\"},\n                    {name: \"delete\",        action: \"deleteRecord\"},\n                    {name: \"next\",          action: \"nextRecord\"},\n                    {name: \"previous\",      action: \"prevRecord\"},\n                    {name: \"pagedown\",      action: \"pageDown\"},\n                    {name: \"pageup\",        action: \"pageUp\"},\n                ]\n            }\n            ,\n            {\n                name: \"Transaction\", title: \"Transaction Menu\", options:\n                [\n                    {name: \"commit\", action: \"commit\"},\n                    {name: \"rollback\", action: \"rollback\"},\n                ]\n            }\n            ,\n            {\n                name: \"Connection\", title: \"Connection to database\", options:\n                [\n                    {name: \"connect\",    action: \"connect\"},\n                    {name: \"disconnect\", action: \"disconnect\"},\n                ]\n            }\n        ];\n\n        this.handler = new DefaultMenuHandler();\n    }\n\n    getHandler(): MenuHandler\n    {\n        return(this.handler);\n    }\n\n    getEntries(): MenuEntry[]\n    {\n        return(this.entries);\n    }\n}","import { NameValuePair } from \"../utils/NameValuePair\";\n\nexport class Key\n{\n    private values$:any[] = [];\n    private columns$:string[] = [];\n    private index:Map<string,any> = new Map<string,any>();\n\n    constructor(public name:string) {}\n\n    public get(part:string|number) : any\n    {\n        let col:number = -1;\n\n        if (part.constructor.name == \"Number\") col = +part;\n        else col = this.index.get(\"\"+part);\n\n        return(this.values$[col]);\n    }\n\n    public partof(part:string) : boolean\n    {\n        return(this.columns$.includes(part,0));\n    }\n\n    public set(name:string|number, value:any) : void\n    {\n        let col:number = -1;\n\n        if (name.constructor.name == \"Number\") col = +name;\n        else col = this.index.get(\"\"+name);\n\n        this.values$[col] = value;\n    }\n\n    public addColumn(name:string) : void\n    {\n        this.index.set(name,this.columns$.length);\n\n        this.values$.push(name);\n        this.columns$.push(name);\n    }\n\n    public columns() : string[]\n    {\n        return(this.columns$);\n    }\n\n    public get values() : NameValuePair[]\n    {\n        let map:NameValuePair[] = [];\n\n        for (let i = 0; i < this.columns$.length; i++)\n            map.push({name: this.columns$[i], value: this.values$[i]});\n\n        return(map);\n    }\n\n\n    public toString() : string\n    {\n        let str:string = this.name+\" [\";\n\n        for (let i = 0; i < this.columns$.length; i++)\n            str += this.columns$[i]+\" = \"+this.values$[i]+\", \";\n\n        return(str.substring(0,str.length-2)+\"]\");\n    }\n}","import { Field } from \"../input/Field\";\nimport { FieldInstance } from \"../input/FieldInstance\";\n\n\nexport enum RecordState\n{\n    na,\n    qmode,\n    insert,\n    update\n}\n\n\nexport class Record\n{\n    private row$:number = 0;\n    private fields$:Field[] = [];\n    private current$:boolean = false;\n    private enabled$:boolean = false;\n    private state$:RecordState = RecordState.na;\n    private index:Map<string,Field> = new Map<string,Field>();\n\n\n    constructor(row:number, fields:Field[], index:Map<string,Field>)\n    {\n        this.row$ = row;\n        this.index = index;\n        this.fields$ = fields;\n    }\n\n    public set row(row:number)\n    {\n        this.row$ = row;\n    }\n\n    public get row() : number\n    {\n        return(this.row$);\n    }\n\n    public get fields() : Field[]\n    {\n        return(this.fields$);\n    }\n\n    public focus() : void\n    {\n        for(let i = 0; i < this.fields$.length; i++)\n            if (this.fields$[i].focus()) return;\n    }\n\n    public set current(flag:boolean)\n    {\n        this.current$ = flag;\n        this.fields$.forEach((field) => {field.current = flag});\n    }\n\n    public get current() : boolean\n    {\n        return(this.current$);\n    }\n\n    public clear() : void\n    {\n        this.fields$.forEach((field) => {field.value = null; field.disable()});\n        if (this.current) this.fields$.forEach((field) => {field.current = true; field.disable()});\n    }\n\n    public set state(state:RecordState)\n    {\n        this.state$ = state;\n        this.fields$.forEach((field) => {field.state = state});\n    }\n\n    public get state() : RecordState\n    {\n        return(this.state$);\n    }\n\n    public get enabled() : boolean\n    {\n        return(this.enabled$);\n    }\n\n    public get readonly() :boolean\n    {\n        for(let i = 0; i < this.fields$.length; i++)\n            if (!this.fields$[i].readonly) return(false);\n\n        return(true);\n    }\n\n    public enable(readonly?:boolean) : void\n    {\n        this.enabled$ = true;\n        this.fields$.forEach((field) =>\n        {\n            field.state = this.state$;\n            field.enable(readonly);\n        });\n    }\n\n    public disable() : void\n    {\n        this.enabled$ = false;\n        this.fields$.forEach((field) => {field.disable()});\n    }\n\n    public getField(name:string) : Field\n    {\n        if (name == null) return(null);\n        return(this.index.get(name.toLowerCase()));\n    }\n\n    public getFieldByGuid(name:string, guid:string) : FieldInstance\n    {\n        let field:Field = this.index.get(name.toLowerCase());\n        if (field != null) return(field.getInstance(guid));\n        return(null);\n    }\n}","import { FieldInterface } from \"./FieldType\";\n\n\nexport class TextField implements FieldInterface\n{\n    public element$:HTMLInputElement;\n\n\n    public get html() : string\n    {\n        return(\"<input type='text'></input>\");\n    }\n\n    public set size(size:number)\n    {\n        this.element$.size = size;\n    }\n\n    public get tabindex() : number\n    {\n        return(this.element$.tabIndex);\n    }\n\n    public get element() : HTMLElement\n    {\n        return(this.element$);\n    }\n\n    public set tabindex(seq:number)\n    {\n        this.element$.tabIndex = seq;\n    }\n\n    public set element(element:HTMLElement)\n    {\n        this.element$ = element as HTMLInputElement;\n    }\n\n    public get enable() : boolean\n    {\n        return(!this.element$.disabled);\n    }\n\n    public set enable(flag:boolean)\n    {\n        this.element$.disabled = !flag;\n    }\n\n    public get readonly() : boolean\n    {\n        return(this.element$.readOnly);\n    }\n\n    public set readonly(flag:boolean)\n    {\n        this.element$.readOnly = flag;\n    }\n\n    public get value() : any\n    {\n        return(this.element$.value);\n    }\n\n    public set value(value:any)\n    {\n        this.element$.value = value;\n    }\n\n    public focus() : void\n    {\n        this.element$.focus();\n        this.element$.select();\n    }\n\n    public validate() : boolean\n    {\n        return(true);\n    }\n}","import { TextField } from './TextField';\n\nexport class DropDown extends TextField\n{\n    public get html() : string\n    {\n        return(\"<select></select>\");\n    }\n\n    public focus() : void\n    {\n        this.element$.focus();\n    }\n}","import { TextField } from './TextField';\n\nexport class Password extends TextField\n{\n    public get html() : string\n    {\n        return(\"<input type='password'></input>\");\n    }\n}","import { TextField } from './TextField';\n\nexport class CheckBox extends TextField\n{\n    private actvalue:any = null;\n    private chkvalue:any = null;\n\n    public get html() : string\n    {\n        return(\"<input type='checkbox'></input>\");\n    }\n\n    public get value() : any\n    {\n        return(this.actvalue);\n    }\n\n    public set value(value:any)\n    {\n        if (this.chkvalue == null)\n        {\n            this.chkvalue = value;\n            return;\n        }\n\n        this.actvalue = value;\n\n        // cheat compiler\n        let checkbox:any = this.element;\n\n        if (value == this.chkvalue) checkbox.checked = true;\n        else                        checkbox.checked = false;\n    }\n}","const token = /d{1,4}|M{1,4}|YY(?:YY)?|S{1,3}|Do|ZZ|Z|([HhMsDm])\\1?|[aA]|\"[^\"]*\"|'[^']*'/g;\nconst twoDigitsOptional = \"[1-9]\\\\d?\";\nconst twoDigits = \"\\\\d\\\\d\";\nconst threeDigits = \"\\\\d{3}\";\nconst fourDigits = \"\\\\d{4}\";\nconst word = \"[^\\\\s]+\";\nconst literal = /\\[([^]*?)\\]/gm;\n\ntype DateInfo = {\n  year: number;\n  month: number;\n  day: number;\n  hour: number;\n  minute: number;\n  second: number;\n  millisecond: number;\n  isPm: number | null;\n  timezoneOffset: number | null;\n};\n\nexport type I18nSettings = {\n  amPm: [string, string];\n  dayNames: Days;\n  dayNamesShort: Days;\n  monthNames: Months;\n  monthNamesShort: Months;\n  DoFn(dayOfMonth: number): string;\n};\n\nexport type I18nSettingsOptional = Partial<I18nSettings>;\n\nexport type Days = [string, string, string, string, string, string, string];\nexport type Months = [\n  string,\n  string,\n  string,\n  string,\n  string,\n  string,\n  string,\n  string,\n  string,\n  string,\n  string,\n  string\n];\n\nfunction shorten<T extends string[]>(arr: T, sLen: number): string[] {\n  const newArr: string[] = [];\n  for (let i = 0, len = arr.length; i < len; i++) {\n    newArr.push(arr[i].substr(0, sLen));\n  }\n  return newArr;\n}\n\nconst monthUpdate = (\n  arrName: \"monthNames\" | \"monthNamesShort\" | \"dayNames\" | \"dayNamesShort\"\n) => (v: string, i18n: I18nSettings): number | null => {\n  const lowerCaseArr = i18n[arrName].map(v => v.toLowerCase());\n  const index = lowerCaseArr.indexOf(v.toLowerCase());\n  if (index > -1) {\n    return index;\n  }\n  return null;\n};\n\nexport function assign<A>(a: A): A;\nexport function assign<A, B>(a: A, b: B): A & B;\nexport function assign<A, B, C>(a: A, b: B, c: C): A & B & C;\nexport function assign<A, B, C, D>(a: A, b: B, c: C, d: D): A & B & C & D;\nexport function assign(origObj: any, ...args: any[]): any {\n  for (const obj of args) {\n    for (const key in obj) {\n      // @ts-ignore ex\n      origObj[key] = obj[key];\n    }\n  }\n  return origObj;\n}\n\nconst dayNames: Days = [\n  \"Sunday\",\n  \"Monday\",\n  \"Tuesday\",\n  \"Wednesday\",\n  \"Thursday\",\n  \"Friday\",\n  \"Saturday\"\n];\nconst monthNames: Months = [\n  \"January\",\n  \"February\",\n  \"March\",\n  \"April\",\n  \"May\",\n  \"June\",\n  \"July\",\n  \"August\",\n  \"September\",\n  \"October\",\n  \"November\",\n  \"December\"\n];\n\nconst monthNamesShort: Months = shorten(monthNames, 3) as Months;\nconst dayNamesShort: Days = shorten(dayNames, 3) as Days;\n\nconst defaultI18n: I18nSettings = {\n  dayNamesShort,\n  dayNames,\n  monthNamesShort,\n  monthNames,\n  amPm: [\"am\", \"pm\"],\n  DoFn(dayOfMonth: number) {\n    return (\n      dayOfMonth +\n      [\"th\", \"st\", \"nd\", \"rd\"][\n        dayOfMonth % 10 > 3\n          ? 0\n          : ((dayOfMonth - (dayOfMonth % 10) !== 10 ? 1 : 0) * dayOfMonth) % 10\n      ]\n    );\n  }\n};\nlet globalI18n = assign({}, defaultI18n);\nconst setGlobalDateI18n = (i18n: I18nSettingsOptional): I18nSettings =>\n  (globalI18n = assign(globalI18n, i18n));\n\nconst regexEscape = (str: string): string =>\n  str.replace(/[|\\\\{()[^$+*?.-]/g, \"\\\\$&\");\n\nconst pad = (val: string | number, len = 2): string => {\n  val = String(val);\n  while (val.length < len) {\n    val = \"0\" + val;\n  }\n  return val;\n};\n\nconst formatFlags: Record<\n  string,\n  (dateObj: Date, i18n: I18nSettings) => string\n> = {\n  D: (dateObj: Date): string => String(dateObj.getDate()),\n  DD: (dateObj: Date): string => pad(dateObj.getDate()),\n  Do: (dateObj: Date, i18n: I18nSettings): string =>\n    i18n.DoFn(dateObj.getDate()),\n  d: (dateObj: Date): string => String(dateObj.getDay()),\n  dd: (dateObj: Date): string => pad(dateObj.getDay()),\n  ddd: (dateObj: Date, i18n: I18nSettings): string =>\n    i18n.dayNamesShort[dateObj.getDay()],\n  dddd: (dateObj: Date, i18n: I18nSettings): string =>\n    i18n.dayNames[dateObj.getDay()],\n  M: (dateObj: Date): string => String(dateObj.getMonth() + 1),\n  MM: (dateObj: Date): string => pad(dateObj.getMonth() + 1),\n  MMM: (dateObj: Date, i18n: I18nSettings): string =>\n    i18n.monthNamesShort[dateObj.getMonth()],\n  MMMM: (dateObj: Date, i18n: I18nSettings): string =>\n    i18n.monthNames[dateObj.getMonth()],\n  YY: (dateObj: Date): string =>\n    pad(String(dateObj.getFullYear()), 4).substr(2),\n  YYYY: (dateObj: Date): string => pad(dateObj.getFullYear(), 4),\n  h: (dateObj: Date): string => String(dateObj.getHours() % 12 || 12),\n  hh: (dateObj: Date): string => pad(dateObj.getHours() % 12 || 12),\n  H: (dateObj: Date): string => String(dateObj.getHours()),\n  HH: (dateObj: Date): string => pad(dateObj.getHours()),\n  m: (dateObj: Date): string => String(dateObj.getMinutes()),\n  mm: (dateObj: Date): string => pad(dateObj.getMinutes()),\n  s: (dateObj: Date): string => String(dateObj.getSeconds()),\n  ss: (dateObj: Date): string => pad(dateObj.getSeconds()),\n  S: (dateObj: Date): string =>\n    String(Math.round(dateObj.getMilliseconds() / 100)),\n  SS: (dateObj: Date): string =>\n    pad(Math.round(dateObj.getMilliseconds() / 10), 2),\n  SSS: (dateObj: Date): string => pad(dateObj.getMilliseconds(), 3),\n  a: (dateObj: Date, i18n: I18nSettings): string =>\n    dateObj.getHours() < 12 ? i18n.amPm[0] : i18n.amPm[1],\n  A: (dateObj: Date, i18n: I18nSettings): string =>\n    dateObj.getHours() < 12\n      ? i18n.amPm[0].toUpperCase()\n      : i18n.amPm[1].toUpperCase(),\n  ZZ(dateObj: Date): string {\n    const offset = dateObj.getTimezoneOffset();\n    return (\n      (offset > 0 ? \"-\" : \"+\") +\n      pad(Math.floor(Math.abs(offset) / 60) * 100 + (Math.abs(offset) % 60), 4)\n    );\n  },\n  Z(dateObj: Date): string {\n    const offset = dateObj.getTimezoneOffset();\n    return (\n      (offset > 0 ? \"-\" : \"+\") +\n      pad(Math.floor(Math.abs(offset) / 60), 2) +\n      \":\" +\n      pad(Math.abs(offset) % 60, 2)\n    );\n  }\n};\n\ntype ParseInfo = [\n  keyof DateInfo,\n  string,\n  ((v: string, i18n: I18nSettings) => number | null)?,\n  string?\n];\nconst monthParse = (v: string): number => +v - 1;\nconst emptyDigits: ParseInfo = [null, twoDigitsOptional];\nconst emptyWord: ParseInfo = [null, word];\nconst amPm: ParseInfo = [\n  \"isPm\",\n  word,\n  (v: string, i18n: I18nSettings): number | null => {\n    const val = v.toLowerCase();\n    if (val === i18n.amPm[0]) {\n      return 0;\n    } else if (val === i18n.amPm[1]) {\n      return 1;\n    }\n    return null;\n  }\n];\nconst timezoneOffset: ParseInfo = [\n  \"timezoneOffset\",\n  \"[^\\\\s]*?[\\\\+\\\\-]\\\\d\\\\d:?\\\\d\\\\d|[^\\\\s]*?Z?\",\n  (v: string): number | null => {\n    const parts = (v + \"\").match(/([+-]|\\d\\d)/gi);\n\n    if (parts) {\n      const minutes = +parts[1] * 60 + parseInt(parts[2], 10);\n      return parts[0] === \"+\" ? minutes : -minutes;\n    }\n\n    return 0;\n  }\n];\nconst parseFlags: Record<string, ParseInfo> = {\n  D: [\"day\", twoDigitsOptional],\n  DD: [\"day\", twoDigits],\n  Do: [\"day\", twoDigitsOptional + word, (v: string): number => parseInt(v, 10)],\n  M: [\"month\", twoDigitsOptional, monthParse],\n  MM: [\"month\", twoDigits, monthParse],\n  YY: [\n    \"year\",\n    twoDigits,\n    (v: string): number => {\n      const now = new Date();\n      const cent = +(\"\" + now.getFullYear()).substr(0, 2);\n      return +(\"\" + (+v > 68 ? cent - 1 : cent) + v);\n    }\n  ],\n  h: [\"hour\", twoDigitsOptional, undefined, \"isPm\"],\n  hh: [\"hour\", twoDigits, undefined, \"isPm\"],\n  H: [\"hour\", twoDigitsOptional],\n  HH: [\"hour\", twoDigits],\n  m: [\"minute\", twoDigitsOptional],\n  mm: [\"minute\", twoDigits],\n  s: [\"second\", twoDigitsOptional],\n  ss: [\"second\", twoDigits],\n  YYYY: [\"year\", fourDigits],\n  S: [\"millisecond\", \"\\\\d\", (v: string): number => +v * 100],\n  SS: [\"millisecond\", twoDigits, (v: string): number => +v * 10],\n  SSS: [\"millisecond\", threeDigits],\n  d: emptyDigits,\n  dd: emptyDigits,\n  ddd: emptyWord,\n  dddd: emptyWord,\n  MMM: [\"month\", word, monthUpdate(\"monthNamesShort\")],\n  MMMM: [\"month\", word, monthUpdate(\"monthNames\")],\n  a: amPm,\n  A: amPm,\n  ZZ: timezoneOffset,\n  Z: timezoneOffset\n};\n\n// Some common format strings\nconst globalMasks: { [key: string]: string } = {\n  default: \"ddd MMM DD YYYY HH:mm:ss\",\n  shortDate: \"M/D/YY\",\n  mediumDate: \"MMM D, YYYY\",\n  longDate: \"MMMM D, YYYY\",\n  fullDate: \"dddd, MMMM D, YYYY\",\n  isoDate: \"YYYY-MM-DD\",\n  isoDateTime: \"YYYY-MM-DDTHH:mm:ssZ\",\n  shortTime: \"HH:mm\",\n  mediumTime: \"HH:mm:ss\",\n  longTime: \"HH:mm:ss.SSS\"\n};\nconst setGlobalDateMasks = (masks: {\n  [key: string]: string;\n}): { [key: string]: string } => assign(globalMasks, masks);\n\n/***\n * Format a date\n * @method format\n * @param {Date|number} dateObj\n * @param {string} mask Format of the date, i.e. 'mm-dd-yy' or 'shortDate'\n * @returns {string} Formatted date string\n */\nconst format = (\n  dateObj: Date,\n  mask: string = globalMasks[\"default\"],\n  i18n: I18nSettingsOptional = {}\n): string => {\n  if (typeof dateObj === \"number\") {\n    dateObj = new Date(dateObj);\n  }\n\n  if (\n    Object.prototype.toString.call(dateObj) !== \"[object Date]\" ||\n    isNaN(dateObj.getTime())\n  ) {\n    throw new Error(\"Invalid Date pass to format\");\n  }\n\n  mask = globalMasks[mask] || mask;\n\n  const literals: string[] = [];\n\n  // Make literals inactive by replacing them with @@@\n  mask = mask.replace(literal, function($0, $1) {\n    literals.push($1);\n    return \"@@@\";\n  });\n\n  const combinedI18nSettings: I18nSettings = assign(\n    assign({}, globalI18n),\n    i18n\n  );\n  // Apply formatting rules\n  mask = mask.replace(token, $0 =>\n    formatFlags[$0](dateObj, combinedI18nSettings)\n  );\n  // Inline literal values back into the formatted value\n  return mask.replace(/@@@/g, () => literals.shift());\n};\n\n/**\n * Parse a date string into a Javascript Date object /\n * @method parse\n * @param {string} dateStr Date string\n * @param {string} format Date parse format\n * @param {i18n} I18nSettingsOptional Full or subset of I18N settings\n * @returns {Date|null} Returns Date object. Returns null what date string is invalid or doesn't match format\n */\nfunction parse(\n  dateStr: string,\n  format: string,\n  i18n: I18nSettingsOptional = {}\n): Date | null {\n  if (typeof format !== \"string\") {\n    throw new Error(\"Invalid format in fecha parse\");\n  }\n\n  // Check to see if the format is actually a mask\n  format = globalMasks[format] || format;\n\n  // Avoid regular expression denial of service, fail early for really long strings\n  // https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS\n  if (dateStr.length > 1000) {\n    return null;\n  }\n\n  // Default to the beginning of the year.\n  const today = new Date();\n  const dateInfo: DateInfo = {\n    year: today.getFullYear(),\n    month: 0,\n    day: 1,\n    hour: 0,\n    minute: 0,\n    second: 0,\n    millisecond: 0,\n    isPm: null,\n    timezoneOffset: null\n  };\n  const parseInfo: ParseInfo[] = [];\n  const literals: string[] = [];\n\n  // Replace all the literals with @@@. Hopefully a string that won't exist in the format\n  let newFormat = format.replace(literal, ($0, $1) => {\n    literals.push(regexEscape($1));\n    return \"@@@\";\n  });\n  const specifiedFields: { [field: string]: boolean } = {};\n  const requiredFields: { [field: string]: boolean } = {};\n\n  // Change every token that we find into the correct regex\n  newFormat = regexEscape(newFormat).replace(token, $0 => {\n    const info = parseFlags[$0];\n    const [field, regex, , requiredField] = info;\n\n    // Check if the person has specified the same field twice. This will lead to confusing results.\n    if (specifiedFields[field]) {\n      throw new Error(`Invalid format. ${field} specified twice in format`);\n    }\n\n    specifiedFields[field] = true;\n\n    // Check if there are any required fields. For instance, 12 hour time requires AM/PM specified\n    if (requiredField) {\n      requiredFields[requiredField] = true;\n    }\n\n    parseInfo.push(info);\n    return \"(\" + regex + \")\";\n  });\n\n  // Check all the required fields are present\n  Object.keys(requiredFields).forEach(field => {\n    if (!specifiedFields[field]) {\n      throw new Error(\n        `Invalid format. ${field} is required in specified format`\n      );\n    }\n  });\n\n  // Add back all the literals after\n  newFormat = newFormat.replace(/@@@/g, () => literals.shift());\n\n  // Check if the date string matches the format. If it doesn't return null\n  const matches = dateStr.match(new RegExp(newFormat, \"i\"));\n  if (!matches) {\n    return null;\n  }\n\n  const combinedI18nSettings: I18nSettings = assign(\n    assign({}, globalI18n),\n    i18n\n  );\n\n  // For each match, call the parser function for that date part\n  for (let i = 1; i < matches.length; i++) {\n    const [field, , parser] = parseInfo[i - 1];\n    const value = parser\n      ? parser(matches[i], combinedI18nSettings)\n      : +matches[i];\n\n    // If the parser can't make sense of the value, return null\n    if (value == null) {\n      return null;\n    }\n\n    dateInfo[field] = value;\n  }\n\n  if (dateInfo.isPm === 1 && dateInfo.hour != null && +dateInfo.hour !== 12) {\n    dateInfo.hour = +dateInfo.hour + 12;\n  } else if (dateInfo.isPm === 0 && +dateInfo.hour === 12) {\n    dateInfo.hour = 0;\n  }\n\n  const dateWithoutTZ: Date = new Date(\n    dateInfo.year,\n    dateInfo.month,\n    dateInfo.day,\n    dateInfo.hour,\n    dateInfo.minute,\n    dateInfo.second,\n    dateInfo.millisecond\n  );\n\n  const validateFields: [\n    \"month\" | \"day\" | \"hour\" | \"minute\" | \"second\",\n    \"getMonth\" | \"getDate\" | \"getHours\" | \"getMinutes\" | \"getSeconds\"\n  ][] = [\n    [\"month\", \"getMonth\"],\n    [\"day\", \"getDate\"],\n    [\"hour\", \"getHours\"],\n    [\"minute\", \"getMinutes\"],\n    [\"second\", \"getSeconds\"]\n  ];\n  for (let i = 0, len = validateFields.length; i < len; i++) {\n    // Check to make sure the date field is within the allowed range. Javascript dates allows values\n    // outside the allowed range. If the values don't match the value was invalid\n    if (\n      specifiedFields[validateFields[i][0]] &&\n      dateInfo[validateFields[i][0]] !== dateWithoutTZ[validateFields[i][1]]()\n    ) {\n      return null;\n    }\n  }\n\n  if (dateInfo.timezoneOffset == null) {\n    return dateWithoutTZ;\n  }\n\n  return new Date(\n    Date.UTC(\n      dateInfo.year,\n      dateInfo.month,\n      dateInfo.day,\n      dateInfo.hour,\n      dateInfo.minute - dateInfo.timezoneOffset,\n      dateInfo.second,\n      dateInfo.millisecond\n    )\n  );\n}\nexport default {\n  format,\n  parse,\n  defaultI18n,\n  setGlobalDateI18n,\n  setGlobalDateMasks\n};\nexport { format, parse, defaultI18n, setGlobalDateI18n, setGlobalDateMasks };","import {format as formatimpl, parse as parseimpl} from './fecha';\n\n\nexport interface datepart\n{\n    token:string;\n    delim:string;\n}\n\n\nexport class dates\n{\n    // Current implementation from\n    // https://github.com/taylorhakes/fecha/blob/master/README.md\n\n\n    private static delim:string = null;\n    private static deffmt:string = null;\n    private static tokens$:datepart[] = null;\n    private static formattokens:Set<string> = null;\n\n    private static init(format:string) : void\n    {\n        dates.deffmt = format;\n        this.tokens$ = dates.split(format,\"-/:. \");\n\n        for(let i = 0; i < this.tokens$.length; i++)\n        {\n            if (this.tokens$[i].delim != \" \")\n            {\n                dates.delim = this.tokens$[i].delim;\n                break;\n            }\n        }\n\n        dates.formattokens = new Set<string>();\n        dates.formattokens.add(\"m\");\n        dates.formattokens.add(\"d\");\n        dates.formattokens.add(\"o\");\n        dates.formattokens.add(\"d\");\n        dates.formattokens.add(\"y\");\n        dates.formattokens.add(\"a\");\n        dates.formattokens.add(\"h\");\n        dates.formattokens.add(\"s\");\n        dates.formattokens.add(\"z\");\n    }\n\n    public static setFormat(format:string) : void\n    {\n        dates.init(format);\n    }\n\n    public static parse(datestr:string, format?:string) : Date\n    {\n        if (format == null) format = dates.deffmt;\n\n        if (datestr == null || datestr.trim().length == 0)\n            return(null);\n\n        let date:Date = parseimpl(datestr,format);\n        if (date == null) datestr = dates.reformat(datestr);\n\n        if (datestr == null) return(null);\n        return(parseimpl(datestr,format));\n    }\n\n    public static format(date:Date, format?:string) : string\n    {\n        if (format == null) format = dates.deffmt;\n        return(formatimpl(date,format));\n    }\n\n    private static reformat(datestr:string) : string\n    {\n        let ndate:string = \"\";\n\n        if (!isNaN(+datestr))\n        {\n            let pos:number = 0;\n\n            for(let i = 0; i < 3; i++)\n            {\n                let len:number = dates.tokens$[i].token.length;\n                ndate += datestr.substring(pos,pos+len) + dates.tokens$[i].delim;\n                pos += len;\n            }\n\n            return(ndate);\n        }\n\n        if (dates.delim != \"-\") datestr = dates.replaceAll(datestr,\"-\",dates.delim);\n        if (dates.delim != \"/\") datestr = dates.replaceAll(datestr,\"/\",dates.delim);\n        if (dates.delim != \".\") datestr = dates.replaceAll(datestr,\".\",dates.delim);\n\n        let parts:datepart[] = dates.split(datestr,dates.delim+\": \");\n\n        for (let i = 0; i < parts.length; i++)\n        {\n            let numeric:boolean = !isNaN(+parts[i].token);\n            if (numeric && parts[i].token.length == 1) parts[i].token = \"0\"+parts[i].token;\n        }\n\n        parts.forEach((part) => {ndate += part.token+part.delim})\n\n        return(ndate);\n    }\n\n\n    private static split(str:string, splitter:string) : datepart[]\n    {\n        let parts:datepart[] = [];\n        let delimiters:Set<string> = new Set<string>();\n\n        for (let i = 0; i < splitter.length; i++)\n            delimiters.add(splitter[i]+\"\");\n\n        let pos:number = 0;\n\n        for (let i = 0; i < str.length; i++)\n        {\n            if (delimiters.has(str[i]+\"\"))\n            {\n                parts.push({token: str.substring(pos,i), delim: str[i]});\n                pos = i + 1;\n            }\n        }\n\n        if (pos < str.length)\n            parts.push({token: str.substring(pos,str.length), delim: \"\"});\n\n        return(parts);\n    }\n\n\n    private static replaceAll(str:string, search:string, replace:string) : string\n    {\n        while(str.indexOf(search) >= 0) str = str.replace(search,replace);\n        return(str);\n    }\n}","import { dates } from \"../dates/dates\";\nimport { TextField } from \"./TextField\";\n\n\nexport class DateField extends TextField\n{\n    private dateval:Date = null;\n    private formatted:string = null;\n\n    public get value() : any\n    {\n        if (this.element$.value == this.formatted)\n        {\n            // Invalid date\n            if (this.formatted.length > 0 && this.dateval == null)\n                return(this.formatted);\n\n            return(this.dateval);\n        }\n\n        return(this.element$.value);\n    }\n\n    public set value(value:any)\n    {\n        if (value == null || value.constructor.name != \"Date\")\n        {\n            if (value != this.formatted || value != this.element$.value)\n            {\n                this.dateval = null;\n                this.formatted = value;\n                this.element$.value = value;\n            }\n        }\n        else\n        {\n            this.dateval = value;\n            this.formatted = dates.format(value);\n            this.element$.value = this.formatted;\n        }\n    }\n\n    public validate() : boolean\n    {\n        let strval:string = this.element$.value;\n\n        if (strval == this.formatted)\n        {\n            if (strval != null && dates.parse(strval) == null)\n                return(false);\n\n            return(true);\n        }\n\n        this.formatted = null;\n        this.dateval = dates.parse(strval);\n\n        if (this.dateval == null && strval != null)\n            return(false);\n\n        if (this.dateval != null)\n            this.formatted = dates.format(this.dateval);\n\n        this.element$.value = this.formatted;\n        return(true);\n    }\n}","import { TextField } from './TextField';\n\nexport class RadioButton extends TextField\n{\n    private actvalue:any = null;\n    private chkvalue:any = null;\n\n    public get html() : string\n    {\n        return(\"<input type='radio'></input>\");\n    }\n\n    public get value() : any\n    {\n        return(this.actvalue);\n    }\n\n    public set value(value:any)\n    {\n        if (this.chkvalue == null)\n        {\n            this.chkvalue = value;\n            return;\n        }\n\n        this.actvalue = value;\n\n        // cheat compiler\n        let radio:any = this.element;\n\n        if (value == this.chkvalue) radio.checked = true;\n        else                        radio.checked = false;\n    }\n}","export enum Column\n{\n    int,\n    date,\n    decimal,\n    integer,\n    varchar,\n    datetime\n}","import { DropDown } from \"./DropDown\";\nimport { Password } from \"./Password\";\nimport { CheckBox } from \"./CheckBox\";\nimport { TextField } from \"./TextField\";\nimport { DateField } from \"./DateField\";\nimport { RadioButton } from \"./RadioButton\";\nimport { Column } from \"../database/Column\";\n\n\nexport enum FieldType\n{\n    date,\n    text,\n    radio,\n    integer,\n    decimal,\n    checkbox,\n    datetime,\n    password,\n    dropdown\n}\n\n\nexport class FieldImplementation\n{\n    private static impl:Map<string,any> = null;\n\n    private static init() : void\n    {\n        if (FieldImplementation.impl != null) return;\n        FieldImplementation.impl = new Map<string,any>();\n\n        Object.keys(FieldType).forEach((type) =>\n        {\n            if (isNaN(Number(type)))\n                FieldImplementation.impl.set(type,TextField);\n        });\n\n        FieldImplementation.impl.set(FieldType[FieldType.date],DateField);\n        FieldImplementation.impl.set(FieldType[FieldType.radio],RadioButton);\n        FieldImplementation.impl.set(FieldType[FieldType.checkbox],CheckBox);\n        FieldImplementation.impl.set(FieldType[FieldType.password],Password);\n        FieldImplementation.impl.set(FieldType[FieldType.dropdown],DropDown);\n        FieldImplementation.impl.set(FieldType[FieldType.datetime],DateField);\n    }\n\n    public static getClass(type:string) : any\n    {\n        FieldImplementation.init();\n        return(FieldImplementation.impl.get(type));\n    }\n\n    public static guess(type:Column) : FieldType\n    {\n        let ftype:FieldType = FieldType.text;\n\n        if (type != null)\n        {\n            ftype = FieldType.text;\n            if (type == Column.date) ftype = FieldType.date;\n            if (type == Column.integer) ftype = FieldType.integer;\n            if (type == Column.decimal) ftype = FieldType.decimal;\n            if (type == Column.datetime) ftype = FieldType.datetime;\n        }\n\n        return(ftype);\n    }\n}\n\n\nexport interface FieldInterface\n{\n    value:any;\n    html:string;\n    size:number;\n    enable:boolean;\n    tabindex:number;\n    readonly:boolean;\n    element:HTMLElement;\n\n    focus() : void;\n    validate() : boolean;\n}","export enum FormState\n{\n    normal,\n    entqry,\n    exeqry\n}","export class KeyCodes\n{\n    static backspace    : number =  8;\n    static tab          : number =  9;\n    static enter        : number = 13;\n    static escape       : number = 27;\n    static pageup       : number = 33;\n    static pagedown     : number = 34;\n    static end          : number = 35;\n    static home         : number = 36;\n    static up           : number = 38;\n    static down         : number = 40;\n    static left         : number = 37;\n    static right        : number = 39;\n    static insert       : number = 45;\n    static delete       : number = 46;\n    static f1           : number = 112;\n    static f2           : number = 113;\n    static f3           : number = 114;\n    static f4           : number = 115;\n    static f5           : number = 116;\n    static f6           : number = 117;\n    static f7           : number = 118;\n    static f8           : number = 119;\n    static f9           : number = 120;\n    static f10          : number = 121;\n    static f11          : number = 122;\n    static f12          : number = 123;\n}","export interface onEventListener\n{\n    onEvent(event:any) : void;\n}\n\n\nexport class WindowListener\n{\n    private static events:Map<string,Map<string,onEventListener>> =\n        new Map<string,Map<string,onEventListener>>();\n\n\n    public static add(id:string, clazz:onEventListener, event:string) : void\n    {\n        let events:Map<string,onEventListener> = WindowListener.events.get(event);\n\n        if (events == null)\n        {\n            events = new Map<string,onEventListener>();\n            WindowListener.events.set(event,events);\n\n            let listener:WindowListener = new WindowListener();\n            listener.start(event);\n        }\n\n        events.set(id,clazz);\n    }\n\n\n    public static remove(id:string, event:string) : void\n    {\n        let events:Map<string,onEventListener> = WindowListener.events.get(event);\n        events.delete(id);\n    }\n\n\n    private constructor() {}\n\n\n    private start(eventtype:string) : void\n    {\n        window.addEventListener(eventtype, (event) => {this.onEvent(event)});\n    }\n\n    private onEvent(event:any) : void\n    {\n        let events:Map<string,onEventListener> = WindowListener.events.get(event.type);\n        events.forEach((clazz) => {clazz.onEvent(event)});\n    }\n}","import { Popup } from './Popup';\nimport { PopupInstance } from './PopupInstance';\nimport { Context } from '../application/Context';\nimport { ApplicationImpl } from '../application/ApplicationImpl';\nimport { WindowListener, onEventListener } from \"../events/WindowListener\";\nimport { Component, ViewChild, ElementRef, AfterViewInit, EmbeddedViewRef, ChangeDetectionStrategy, ChangeDetectorRef, ComponentRef } from '@angular/core';\n\n\n@Component({\n  selector: 'popupwindow',\n  template:\n  `\n    <div class=\"popupwindow\">\n      <div #window class=\"popupwindow-modal-block\" style=\"top: {{top}}; left: {{left}}\">\n        <div class=\"popupwindow-container\" style=\"width: {{width}}; height: {{height}};\">\n\t\t  <div #topbar class=\"popupwindow-topbar\" style=\"color: {{tcolor}}; background-color: {{bcolor}}\">\n\t\t    <span class=\"popupwindow-center\" style=\"color: {{tcolor}};\">\n\t\t\t\t<span class=\"popupwindow-corner\"></span>\n\t\t\t\t<div #title></div>\n                <span class=\"popupwindow-close\">\n                    <button class=\"popupwindow-button\" style=\"color: {{btncolor}};\" (click)=\"close(true)\">X</button>\n                </span>\n\t\t\t</span>\n\t\t   </div>\n          <div class=\"popupwindow-block\" style=\"margin-top: {{tmargin}};\"><div #content></div></div>\n        </div>\n      </div>\n    </div>\n  `,\n  styles:\n  [`\n    .popupwindow\n    {\n        top: 0;\n        left: 0;\n        z-index: 1;\n        width: 100%;\n        height: 100%;\n        display: block;\n        overflow: auto;\n        position: fixed;\n    }\n\n    .popupwindow-modal-block\n    {\n      position: absolute;\n      background-color: #fefefe;\n    }\n\n    .popupwindow-container\n    {\n        position: relative;\n        border: 2px solid black;\n    }\n\n    .popupwindow-topbar\n    {\n        height: 1.70em;\n        margin-left: 0;\n        margin-right: 0;\n        cursor:default;\n\t\tjustify-content: center;\n        border-bottom: 2px solid black;\n    }\n\n\t.popupwindow-corner\n\t{\n\t\twidth: 1.5em;\n\t\tdisplay: block;\n\t\tposition: relative;\n\t}\n\n\t.popupwindow-close\n\t{\n\t\ttop: 0;\n\t\tright: 0;\n\t\twidth: 1.75em;\n\t\theight: 1.70em;\n\t\tposition: absolute;\n\t\tborder-left: 1px solid black;\n\t}\n\n\t.popupwindow-button\n\t{\n\t\ttop: 50%;\n\t\twidth: 100%;\n\t\theight: 100%;\n\t\toutline:none;\n\t\tfont-size: 0.75em;\n\t\tfont-weight: bold;\n\t\tposition: relative;\n\t\tbackground: transparent;\n\t\ttransform: translateY(-50%);\n\t\tborder: 0px solid transparent;\n\t\tbox-shadow: 0px 0px 0px transparent;\n\t\ttext-shadow: 0px 0px 0px transparent;\n\t}\n\n\t.popupwindow-center\n\t{\n\t\ttop: 0;\n\t\tbottom: 0;\n\t\twidth: 93%;\n\t\theight: 100%;\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tjustify-content: center;\n\t}\n\n    .popupwindow-block\n    {\n        left: 0;\n        top: 3vh;\n        right: 0;\n        bottom: 0;\n\t\tdisplay: flex;\n        overflow: auto;\n        position: absolute;\n\t\tjustify-content: center;\n    }\n`],\nchangeDetection: ChangeDetectionStrategy.OnPush\n})\n\nexport class PopupWindow implements onEventListener, AfterViewInit\n{\n\tprivate popup:Popup;\n\tprivate title$:string;\n    private pinst:PopupInstance;\n    private app:ApplicationImpl;\n\tprivate element:HTMLElement;\n    private window:HTMLDivElement;\n    private topbar:HTMLDivElement;\n\tprivate content:HTMLDivElement;\n    private titlebar:HTMLDivElement;\n\tprivate winref:ComponentRef<any>;\n\n    public top : string = null;\n    public left : string = null;\n    public width : string =  \"300px\";\n    public height : string = \"200px\";\n    public tmargin : string =  \"8px\";\n\n    @ViewChild(\"title\", {read: ElementRef}) private titlebarElement: ElementRef;\n    @ViewChild(\"window\", {read: ElementRef}) private windowElement: ElementRef;\n    @ViewChild(\"topbar\", {read: ElementRef}) private topbarElement: ElementRef;\n\t@ViewChild('content', {read: ElementRef}) private contentElement:ElementRef;\n\n\tprivate minw:number = 0;\n\tprivate minh:number = 0;\n\n\tprivate offx:number = 0;\n\tprivate offy:number = 0;\n\n\tprivate posy:number;\n\tprivate posx:number;\n\n\tprivate sizex:number;\n\tprivate sizey:number;\n\n\tprivate move:boolean = false;\n\tprivate resz:boolean = false;\n\n\tprivate resizex:boolean = false;\n\tprivate resizey:boolean = false;\n\n\n\tconstructor(ctx:Context, private change:ChangeDetectorRef)\n    {\n\t\tthis.app = ctx.app[\"_impl_\"];\n    }\n\n\n\tpublic get tcolor() : string\n\t{\n\t\treturn(this.app.config.colors.title);\n\t}\n\n\n\tpublic get bcolor() : string\n\t{\n\t\treturn(this.app.config.colors.topbar);\n\t}\n\n\n\tpublic get btncolor() : string\n\t{\n\t\treturn(this.app.config.colors.buttontext);\n\t}\n\n\n\tpublic set title(title:string)\n\t{\n\t\tthis.title$ = title;\n\t}\n\n\n    public setPopup(pinst:PopupInstance) : void\n    {\n        this.pinst = pinst;\n\t\tthis.popup = pinst.popupref.instance;\n\n\t\tthis.popup.setWin(this);\n\t\tthis.title$ = this.popup.title;\n\n\t\tif (this.popup.hasOwnProperty(\"top\")) this.top = this.popup.top;\n\t\tif (this.popup.hasOwnProperty(\"left\")) this.left = this.popup.left;\n\t\tif (this.popup.hasOwnProperty(\"width\")) this.width = this.popup.width;\n\t\tif (this.popup.hasOwnProperty(\"height\")) this.height = this.popup.height;\n    }\n\n\n\tpublic resize(width:string, height:string) : void\n\t{\n\t\tthis.width = width;\n\t\tthis.height = height;\n\t\tthis.change.detectChanges();\n\t}\n\n\n\tpublic setWinRef(winref:ComponentRef<any>) : void\n\t{\n\t\tthis.winref = winref;\n\t}\n\n\n\tpublic close(cancel:boolean) : void\n\t{\n\t\tthis.closeWindow();\n\t\tthis.popup.close(cancel);\n\t}\n\n\n\tpublic closeWindow() : void\n\t{\n\t\tif (this.winref == null) return;\n\n\t\tWindowListener.remove(\"modal\",\"mouseup\");\n\t\tWindowListener.remove(\"modal\",\"mousemove\");\n\t\tWindowListener.remove(\"modal\",\"mousedown\");\n\n\t\tlet formelem:Element = this.content.firstElementChild;\n\t\tif (formelem != null) this.content.removeChild(formelem);\n\t\tthis.app.builder.getAppRef().detachView(this.pinst.popupref.hostView);\n\n\t\tlet element:HTMLElement = (this.winref.hostView as EmbeddedViewRef<any>).rootNodes[0] as HTMLElement;\n\t\tdocument.body.removeChild(element);\n\n\t\tthis.app.builder.getAppRef().detachView(this.winref.hostView);\n\t\tthis.winref.destroy();\n\n\t\tthis.winref = null;\n\t}\n\n\n\tprivate display() : void\n\t{\n\t\tif (this.pinst == null)\n\t\t{\n\t\t\tsetTimeout(() => {this.display();},10);\n\t\t\treturn;\n\t\t}\n\n\t\tthis.element = (this.pinst.popupref.hostView as EmbeddedViewRef<any>).rootNodes[0] as HTMLElement;\n\t\tthis.app.builder.getAppRef().attachView(this.pinst.popupref.hostView);\n\t\tthis.content.appendChild(this.element);\n\n\t\tthis.minh = 150;\n\t\tthis.minw = 250;\n\n\t\tthis.titlebar.innerHTML = this.title$;\n\t\tthis.change.detectChanges();\n\n\t\tthis.posy = this.window.offsetTop;\n\t\tthis.posx = this.window.offsetLeft;\n\t\tthis.sizex = this.window.offsetWidth;\n\t\tthis.sizey = this.window.offsetHeight;\n\n\t\tlet resize:boolean = false;\n\n\t\tif (this.sizex < this.minw)\n\t\t{\n\t\t\tresize = true;\n\t\t\tthis.sizex = this.minw;\n\t\t\tthis.width = this.sizex+\"px\";\n\t\t}\n\n\t\tif (this.sizey < this.minh)\n\t\t{\n\t\t\tresize = true;\n\t\t\tthis.sizey = this.minh;\n\t\t\tthis.height = this.sizey+\"px\";\n\t\t}\n\n\t\tif (this.top == null || this.top.trim.length == 0)\n\t\t{\n\t\t\tresize = true;\n\t\t\tthis.top = ((+window.innerHeight - this.sizey)/3)+\"px\";\n\t\t}\n\n\t\tif (this.left == null || this.left.trim.length == 0)\n\t\t{\n\t\t\tresize = true;\n\t\t\tthis.left = ((+window.innerWidth - this.sizex)/1.5)+\"px\";\n\t\t}\n\n\t\tif (resize)\n\t\t{\n\t\t\tthis.change.detectChanges();\n\t\t\tthis.posy = this.window.offsetTop;\n\t\t\tthis.posx = this.window.offsetLeft;\n\t\t\tthis.sizex = this.window.offsetWidth;\n\t\t\tthis.sizey = this.window.offsetHeight;\n\t\t}\n\t}\n\n\n\tpublic ngAfterViewInit(): void\n\t{\n\t\tthis.window = this.windowElement?.nativeElement as HTMLDivElement;\n\t\tthis.topbar = this.topbarElement?.nativeElement as HTMLDivElement;\n\t\tthis.content = this.contentElement?.nativeElement as HTMLDivElement;\n\t\tthis.titlebar = this.titlebarElement?.nativeElement as HTMLDivElement;\n\n\t\tthis.display();\n\n\t\tWindowListener.add(\"modal\",this,\"mouseup\");\n\t\tWindowListener.add(\"modal\",this,\"mousemove\");\n\t\tWindowListener.add(\"modal\",this,\"mousedown\");\n\n\t\tthis.topbar.addEventListener(\"mousedown\", (event) => {this.startmove(event);});\n\t}\n\n\n    public onEvent(event:any) : void\n\t{\n\t\tswitch(event.type)\n\t\t{\n\t\t\tcase \"mouseup\":\n\t\t\t\tthis.mouseup();\n\t\t\t\tbreak;\n\n\t\t\tcase \"mousemove\":\n\t\t\t\tthis.movePopup(event);\n\t\t\t\tthis.resizePopup(event);\n\t\t\t\tthis.resizemousemove(event);\n\t\t\t\tbreak;\n\n\t\t\tcase \"mousedown\":\n\t\t\t\tthis.startresize(event);\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\tprivate startmove(event:any) : void\n\t{\n\t\tif (this.resizexy)\n\t\t\treturn;\n\n\t\tthis.move = true;\n\n\t\tevent = event || window.event;\n\t\tevent.preventDefault();\n\n\t\tthis.offy = +event.clientY - this.posy;\n\t\tthis.offx = +event.clientX - this.posx;\n\t}\n\n\tprivate mouseup()\n\t{\n\t\tif (!this.move && !this.resz)\n\t\t\treturn;\n\n\t\tthis.move = false;\n\t\tthis.resz = false;\n\t\tthis.resizexy = false;\n\n\t\tthis.window.style.cursor = \"default\";\n\t\tdocument.body.style.cursor = \"default\";\n\t}\n\n\tprivate movePopup(event:any) : void\n\t{\n\t\tif (!this.move) return;\n\t  \tevent = event || window.event;\n\n\t\tlet deltay:number = +event.clientY - this.posy;\n\t\tlet deltax:number = +event.clientX - this.posx;\n\n\t\tthis.posy += (deltay - this.offy);\n\t\tthis.posx += (deltax - this.offx);\n\n\t\tif (this.posy > 0)\n\t\t\tthis.top = this.posy + \"px\";\n\n\t\tif (this.posx > 0)\n\t\t\tthis.left = this.posx + \"px\";\n\n\t\tthis.change.detectChanges();\n\t}\n\n\n\tprivate resizemousemove(event:any) : any\n\t{\n\t\tif (this.resz) return;\n\n\t\tevent = event || window.event;\n\t\tlet posx:number = +event.clientX;\n\t\tlet posy:number = +event.clientY;\n\n\t\tlet offx:number = this.posx + this.sizex - posx;\n\t\tlet offy:number = this.posy + this.sizey - posy;\n\n\t\tlet before:boolean = false;\n\t\tif (this.resizex || this.resizey) before = true;\n\n\t\tthis.resizex = false;\n\t\tthis.resizey = false;\n\n\t\tif (offx > -7 && offx < 10 && posy > this.posy - 7 && posy < this.posy + this.sizey + 7) this.resizex = true;\n\t\tif (offy > -7 && offy < 10 && posx > this.posx - 7 && posx < this.posx + this.sizex + 7) this.resizey = true;\n\n\t\tif (this.resizex && this.resizey)\n\t\t{\n\t\t\tthis.resizex = true;\n\t\t\tthis.resizey = true;\n\t\t}\n\n\t\tif (this.resizex && !this.resizey)\n\t\t{\n\t\t\tthis.window.style.cursor = \"e-resize\";\n\t\t\tdocument.body.style.cursor = \"e-resize\";\n\t\t}\n\n\t\tif (this.resizey && !this.resizex)\n\t\t{\n\t\t\tthis.window.style.cursor = \"s-resize\";\n\t\t\tdocument.body.style.cursor = \"s-resize\";\n\t\t}\n\n\t\tif (this.resizex && this.resizey)\n\t\t{\n\t\t\tthis.window.style.cursor = \"se-resize\";\n\t\t\tdocument.body.style.cursor = \"se-resize\";\n\t\t}\n\n\t\tif (before && !this.resizexy)\n\t\t{\n\t\t\tthis.window.style.cursor = \"default\";\n\t\t\tdocument.body.style.cursor = \"default\";\n\t\t}\n\t}\n\n\tprivate startresize(event:any) : void\n\t{\n\t  \tif (!this.resizexy)\n\t\t  return;\n\n\t\tthis.resz = true;\n\t\tevent = event || window.event;\n\t\tevent.preventDefault();\n\n\t\tthis.offy = +event.clientY;\n\t\tthis.offx = +event.clientX;\n\t}\n\n\tprivate resizePopup(event:any) : void\n\t{\n\t\tif (!this.resz) return;\n\t  \tevent = event || window.event;\n\n\t\tlet deltay:number = +event.clientY - this.offy;\n\t\tlet deltax:number = +event.clientX - this.offx;\n\n\t\tif (this.resizex && (this.sizex > this.minw || deltax > 0))\n\t\t{\n\t\t\tthis.sizex += deltax;\n\t\t\tthis.width = this.sizex+\"px\";\n\t\t}\n\n\t\tif (this.resizey && (this.sizey > this.minh || deltay > 0))\n\t\t{\n\t\t\tthis.sizey += deltay;\n\t\t\tthis.height = this.sizey+\"px\";\n\t\t}\n\n\t\tthis.offy = +event.clientY;\n\t\tthis.offx = +event.clientX;\n\n\t\tthis.change.detectChanges();\n\t}\n\n\tprivate get resizexy() : boolean\n\t{\n\t\tif (this.resizex || this.resizey) return(true);\n\t\treturn(false);\n\t}\n\n\tprivate set resizexy(on:boolean)\n\t{\n\t\tthis.resizex = on;\n\t\tthis.resizey = on;\n\t}\n}","import { Popup } from './Popup';\nimport { PopupWindow } from './PopupWindow';\nimport { ComponentRef, EmbeddedViewRef } from \"@angular/core\";\nimport { ApplicationImpl } from '../application/ApplicationImpl';\n\nexport class PopupInstance\n{\n    public popupref:ComponentRef<Popup>;\n\n    public display(app:ApplicationImpl, popup:any) : void\n    {\n        this.popupref = app.builder.createComponent(popup);\n\n        let winref:ComponentRef<any> = app.builder.createComponent(PopupWindow);\n        let win:PopupWindow = winref.instance;\n\n        win.setPopup(this);\n        win.setWinRef(winref);\n\n        let element:HTMLElement = (winref.hostView as EmbeddedViewRef<any>).rootNodes[0] as HTMLElement;\n        app.builder.getAppRef().attachView(winref.hostView);\n\n        document.body.appendChild(element);\n    }\n\n\n    public popup() : Popup\n    {\n        return(this.popupref.instance);\n    }\n}","import { Popup } from \"../popup/Popup\";\nimport { KeyCodes } from \"../keymap/KeyCodes\";\nimport { BlockImpl } from \"../blocks/BlockImpl\";\nimport { Context } from \"../application/Context\";\nimport { PopupWindow } from \"../popup/PopupWindow\";\nimport { PopupInstance } from \"../popup/PopupInstance\";\nimport { ApplicationImpl } from \"../application/ApplicationImpl\";\nimport { AfterViewInit, Component, ElementRef, ViewChild } from \"@angular/core\";\n\n\n@Component({\n    template:\n    `\n        <div #calendar></div>\n    `\n})\n\n\nexport class DatePicker implements Popup, AfterViewInit\n{\n    public top:string = null;\n    public left:string = null;\n    public title:string = null;\n    public width?:string = \"256px\";\n    public height?:string = \"256px\";\n\n    private field:string\n    private record:number;\n    private impl:BlockImpl;\n\n    private cdate:Date = null;\n    private app:ApplicationImpl;\n    private win:PopupWindow = null;\n    private cal:HTMLDivElement = null;\n    private days:HTMLDivElement = null;\n    private years:HTMLSelectElement = null;\n    private months:HTMLSelectElement = null;\n\n    @ViewChild(\"calendar\", {read: ElementRef}) private calelem: ElementRef;\n\n\n    public static show(app:ApplicationImpl, impl:BlockImpl, record:number, field:string, date:Date)\n    {\n        let pinst:PopupInstance = new PopupInstance();\n        pinst.display(app,DatePicker);\n\n        let datepicker:DatePicker = pinst.popup() as DatePicker;\n\n        datepicker.date = date;\n        datepicker.setDestination(impl,record,field);\n    }\n\n\n    constructor(private ctx:Context)\n    {\n        this.app = ctx.app[\"_impl_\"];\n        this.title = ctx.conf.calendarname;\n    }\n\n\n    public close(_cancel: boolean): void\n    {\n        this.win.closeWindow();\n    }\n\n\n    public set date(date:Date)\n    {\n        if (date == null) date = new Date();\n        this.cdate = date;\n    }\n\n\n    public setDestination(impl:BlockImpl, record:number, field:string) : void\n    {\n        this.impl = impl;\n        this.field = field;\n        this.record = record;\n    }\n\n\n    private pick(event:any) : void\n    {\n        let year:number = +this.years.value;\n        let month:number = +this.months.value;\n        let day:number = +event.target.innerHTML;\n\n        let cday:number = this.cdate.getUTCDate();\n        let cmonth:number = this.cdate.getUTCMonth();\n        let cyear:number = this.cdate.getUTCFullYear();\n\n        if (year != cyear || month != cmonth || day != cday)\n        {\n            this.cdate = new Date(Date.UTC(year, month-1, day));\n\n            // Truncate\n            this.cdate = new Date(this.cdate.toDateString());\n\n            this.impl.setValue(this.record,this.field,this.cdate);\n            this.impl.focus();\n        }\n\n        this.close(false);\n    }\n\n\n    public setWin(win: PopupWindow): void\n    {\n        this.win = win;\n    }\n\n\n    public ngAfterViewInit(): void\n    {\n\t\tthis.cal = this.calelem?.nativeElement as HTMLDivElement;\n        this.build(this.cdate,75,75);\n    }\n\n\n    public navigate(event:any) : void\n    {\n        if (event.keyCode == KeyCodes.tab)\n        {\n            event.preventDefault();\n\n            if (event.target.name == \"months\") this.years.focus();\n            else                               this.months.focus();\n\n            return;\n        }\n\n        if (event.keyCode == KeyCodes.escape)\n            this.close(true);\n    }\n\n\n    public weekdays(locale:string) : string[]\n    {\n        let fmt = new Intl.DateTimeFormat(locale,{weekday: \"short\"}).format;\n        let names:string[] = [...Array(7).keys()].map((d) => fmt(new Date(Date.UTC(2021, 1, d))));\n\n        for (let i = 0; i < 7; i++)\n        {\n            if (names[i].endsWith(\".\"))\n                names[i] = names[i].substring(0,names[i].length-1);\n        }\n\n        let sun:string = names[0];\n\n        names.shift();\n        names.push(sun);\n\n        return(names);\n    }\n\n\n    public monthnames(locale:string) : string[]\n    {\n        let fmt = new Intl.DateTimeFormat(locale,{month: \"short\"}).format;\n        let names:string[] = [...Array(12).keys()].map((m) => fmt(new Date(Date.UTC(2021, m))));\n\n        for (let i = 0; i < 12; i++)\n        {\n            if (names[i].endsWith(\".\"))\n                names[i] = names[i].substring(0,names[i].length-1);\n        }\n\n        return(names);\n    }\n\n\n    public build(date:Date, bef:number, aft:number) : void\n    {\n        this.styles();\n\n        let month:number = date.getUTCMonth();\n        let year:number = date.getUTCFullYear();\n\n        let months = this.monthnames(this.ctx.conf.locale);\n\n        this.years = document.createElement(\"select\");\n        this.months = document.createElement(\"select\");\n\n        this.years.name = \"years\";\n        this.months.name = \"months\";\n\n        this.addFieldTriggers(this.years);\n        this.addFieldTriggers(this.months);\n\n        this.months.classList.add(\"datepicker-month\");\n\n        for (let i = 0; i < 12; i++)\n        {\n            let option = document.createElement(\"option\");\n\n            option.text = months[i];\n            option.value = (i + 1)+\"\";\n\n            this.months.appendChild(option);\n        }\n\n        this.months.selectedIndex = month;\n        this.cal.appendChild(this.months);\n\n        this.years.classList.add(\"datepicker-year\");\n\n        for (let i = year - bef; i < year + aft; i++)\n        {\n            let option = document.createElement(\"option\");\n\n            option.text = i+\"\";\n            option.value = i+\"\";\n\n            this.years.appendChild(option);\n        }\n\n        this.years.selectedIndex = bef;\n        this.cal.appendChild(this.years);\n\n        this.days = document.createElement(\"div\");\n\n        this.days.classList.add(\"datepicker-days\");\n        this.cal.appendChild(this.days);\n\n        this.draw();\n\n        let width:string = (1.25*this.cal.offsetWidth)+\"px\";\n        let height:string = (1.10*this.cal.offsetHeight+32)+\"px\";\n\n        this.win.resize(width,height);\n        this.months.focus();\n   }\n\n\n   private draw() : HTMLTableElement\n   {\n        let cday:number = this.cdate.getDate();\n        let cmonth:number = this.cdate.getMonth();\n        let cyear:number = this.cdate.getFullYear();\n\n        let year:number = +this.years.value;\n        let month:number = +this.months.value;\n\n        if (year != cyear || month != +cmonth + +1)\n            cday = 0;\n\n        let days:number = new Date(Date.UTC(year, month, 0)).getUTCDate();\n        let first:number = new Date(Date.UTC(year, month-1, 1)).getUTCDay();\n        let last:number = new Date(Date.UTC(year, month-1, days)).getUTCDay();\n\n        last = last == 0 ? 7 : last;\n        first = first == 0 ? 7 : first;\n\n        let squares = [];\n\n        for (let i = 1; i < first; i++)\n            squares.push([false,0]);\n\n        for (let i = 0; i < days; i++)\n            squares.push([true,i]);\n\n        while(squares.length%7 != 0)\n            squares.push([false,0]);\n\n        let names:string[] = this.weekdays(this.ctx.conf.locale);\n\n        let table:HTMLTableElement = document.createElement(\"table\");\n        table.classList.add(\"datepicker-table\");\n\n        let row:HTMLTableRowElement = table.insertRow();\n\n        names.forEach((day) =>\n        {\n            let cell:HTMLTableCellElement = row.insertCell();\n            cell.classList.add(\"datepicker-head\")\n            cell.innerHTML = day;\n        });\n\n        for (let i = 0; i < squares.length; i++)\n        {\n            if (i%7 == 0) row = table.insertRow();\n            let cell:HTMLTableCellElement = row.insertCell();\n\n            if (squares[i][0])\n            {\n                let dom:number = +squares[i][1] + +1;\n\n                cell.innerHTML = dom+\"\";\n                cell.classList.add(\"datepicker-day\");\n\n                if (dom == cday) cell.classList.add(\"datepicker-current\");\n                this.addDayTriggers(cell);\n            }\n            else\n            {\n                cell.classList.add(\"datepicker-blank\");\n            }\n        }\n\n        this.days.innerHTML = \"\";\n        this.days.appendChild(table);\n\n        return(table);\n    }\n\n\n    private addDayTriggers(cell:HTMLTableCellElement) : void\n    {\n        cell.addEventListener(\"click\",(event) => {this.pick(event)});\n    }\n\n\n    private addFieldTriggers(change:HTMLSelectElement) : void\n    {\n        change.addEventListener(\"change\",() => {this.draw()});\n        change.addEventListener(\"keydown\",(event) => {this.navigate(event)});\n    }\n\n\n    private styles() : void\n    {\n        this.cal.innerHTML =\n        `\n        <style>\n            .datepicker-month\n            {\n                font-size: 15px;\n                margin-top: 16px;\n                margin-left: 16px;\n                width: fit-content;\n            }\n\n            .datepicker-year\n            {\n                font-size: 15px;\n                margin-top: 16px;\n                margin-left: 32px;\n                width: fit-content;\n            }\n\n            .datepicker-table\n            {\n                width: 100%;\n                margin-top: 14px;\n                border-collapse: separate;\n            }\n\n            .datepicker-head\n            {\n                font-weight: bold;\n                text-align: center;\n                color: `+this.app.config.colors.text+`;\n            }\n\n            .datepicker-day\n            {\n                color: `+this.app.config.colors.buttontext+`;\n                padding: 5px;\n                width: 14.28%;\n                text-align: center;\n                background: `+this.app.config.colors.topbar+`;\n            }\n\n            .datepicker-blank\n            {\n                background: #ddd;\n            }\n\n            .datepicker-current\n            {\n                font-size: 16px;\n                font-weight: bold;\n            }\n\n            .datepicker-day:hover\n            {\n                cursor: pointer;\n                font-weight: bold;\n                font-style: italic;\n            }\n        </style>\n        `;\n    }\n}","import { Popup } from \"./Popup\";\nimport { PopupWindow } from \"./PopupWindow\";\nimport { PopupInstance } from \"./PopupInstance\";\nimport { Context } from \"../application/Context\";\nimport { ApplicationImpl } from \"../application/ApplicationImpl\";\nimport { AfterViewInit, Component, ElementRef, ViewChild } from \"@angular/core\";\n\n\n@Component({\n    selector: '',\n    template:\n    `\n        <div class=\"messagebox\">\n            <div #msg class=\"messagebox-msg\"></div>\n            <div class=\"messagebox-buttom\">\n                <button #accept class=\"messagebox-btn\" style=\"color: {{tcolor}}; background-color: {{bcolor}};\">Ok</button>\n            </div>\n        </div>\n        `,\n    styles: [`\n        .messagebox\n        {\n            top: 0px;\n            left: 1px;\n            right: 1px;\n            bottom: 0px;\n            display: block;\n            position: absolute;\n        }\n\n        .messagebox-msg\n        {\n            height: 80px;\n            display: flex;\n            text-align: center;\n            word-wrap: break-all;\n            justify-content: center;\n        }\n\n        .messagebox-buttom\n        {\n            right: 1px;\n            bottom: 4px;\n            witdh: 35px;\n            height: 35px;\n            display: block;\n            position: absolute;\n        }\n\n        .messagebox-btn\n        {\n            border: none;\n            padding: 10px;\n            outline: none;\n            font-size: 15px;\n            cursor: pointer;\n            text-align: center;\n            border-radius: 100%;\n            display: inline-block;\n            text-decoration: none;\n        }\n    `]\n})\n\nexport class MessageBox implements Popup, AfterViewInit\n{\n    public top:string    = \"20%\";\n    public left:string   = \"25%\";\n    public width$:string  = \"100px\";\n    public height$:string = \"100px\";\n    public title$:string  = \"alert\";\n    public message:string = \"the message\";\n\n    private win:PopupWindow;\n    private app: ApplicationImpl;\n    private msg:HTMLDivElement = null;\n    private btn:HTMLButtonElement = null;\n\n    @ViewChild(\"msg\", {read: ElementRef}) private msgelem: ElementRef;\n    @ViewChild(\"accept\", {read: ElementRef}) private acceptelem: ElementRef;\n\n\n    public static show(app:ApplicationImpl, message:string, title?:string, width?:string, height?:string)\n    {\n        let pinst:PopupInstance = new PopupInstance();\n\n        pinst.display(app,MessageBox);\n        let mbox:MessageBox = pinst.popup() as MessageBox;\n\n        mbox.title = title;\n        mbox.message = message;\n\n        if (width != null) mbox.width = width;\n        if (height != null) mbox.height = height;\n    }\n\n\n    public constructor(ctx:Context)\n    {\n        this.app = ctx.app[\"_impl_\"];\n    }\n\n\n\tpublic get bcolor() : string\n\t{\n\t\treturn(this.app.config.colors.topbar);\n\t}\n\n\n\tpublic get tcolor() : string\n\t{\n\t\treturn(this.app.config.colors.buttontext);\n\t}\n\n\n    public set width(width:string)\n    {\n        this.width$ = width;\n    }\n\n\n    public get width() : string\n    {\n        return(this.width$);\n    }\n\n\n    public set height(height:string)\n    {\n        this.height$ = height;\n    }\n\n\n    public get height() : string\n    {\n        return(this.height$);\n    }\n\n\n    public set title(title:string)\n    {\n        this.title$ = title;\n        this.win.title = this.title;\n    }\n\n\n    public get title() : string\n    {\n        return(this.title$);\n    }\n\n\n    public setWin(win:PopupWindow): void\n    {\n        this.win = win;\n    }\n\n\n    public close(_cancel: boolean): void\n    {\n        this.btn.removeEventListener(\"click\",() => {this.close(false)});\n        this.btn.removeEventListener(\"keydown\",() => {this.close(false)});\n\n        this.win.closeWindow();\n        this.app.getCurrentForm()?.focus();\n    }\n\n\n    public ngAfterViewInit() : void\n    {\n        this.msg = this.msgelem?.nativeElement as HTMLDivElement;\n        this.btn = this.acceptelem?.nativeElement as HTMLButtonElement;\n\n        setTimeout(() => {this.addTriggers()},1);\n\n        this.msg.innerHTML = this.message;\n        this.keepFocus(0);\n    }\n\n\n    private addTriggers() : void\n    {\n        this.btn.addEventListener(\"click\",() => {this.close(false)});\n        this.btn.addEventListener(\"keydown\",() => {this.close(false)});\n    }\n\n\n    private keepFocus(delay:number) : void\n    {\n        this.btn.focus();\n        setTimeout(() => {this.keepFocus(delay+1)},delay);\n    }\n}","import { Column } from \"./Column\";\nimport { dates } from \"../dates/dates\";\nimport { BindValue } from \"./BindValue\";\n\n\nexport class Condition\n{\n    private value$:any;\n    private error$:string;\n    private column$:string;\n    private placeholder$:any;\n    private operator$:string;\n    private datatype$:Column;\n    private condition$:string;\n    private level$:number = 0;\n    private type$:string = \"and\";\n    private prev$:Condition = null;\n    private next$:Condition = null;\n    private bindvalues$:BindValue[] = [];\n\n    private static id:number = 1;\n\n    private static ubid() : string\n    {\n        if (++Condition.id > 9999)\n            Condition.id = 1;\n\n        let ubid:string = \"\"+Condition.id;\n        while(ubid.length < 4) ubid = \"0\"+ubid;\n\n        return(\"_\"+ubid);\n    }\n\n\n    public static where(column:string, value:string, datatype?:Column) : Condition\n    {\n        let condition:Condition = new Condition(column,value,datatype);\n        condition.type$ = \"where\";\n        return(condition);\n    }\n\n\n    constructor(column:string, value:any, datatype?:Column)\n    {\n        this.error$ = null;\n        this.column$ = column;\n        this.datatype$ = datatype;\n        this.placeholder$ = column + Condition.ubid();\n\n        if (this.column$ == null)\n        {\n            this.error$ = \"cannot construct condition on unspecified column. Value = \"+value;\n            return;\n        }\n\n        if (value != null)\n        {\n            let type:string = value.constructor.name.toLowerCase();\n\n            if (type == \"date\")\n            {\n                this.datatype$ = Column.date;\n                this.value$ = (value as Date).getTime();\n\n                this.datebtwn();\n\n                this.bindvalues$.push({name: this.placeholder$[0], value: this.value$[0], type: this.datatype$});\n                this.bindvalues$.push({name: this.placeholder$[1], value: this.value$[1], type: this.datatype$});\n\n                return;\n            }\n\n            if (type == \"number\")\n            {\n                this.value$ = value;\n                this.operator$ = \"=\";\n                this.datatype$ = Column.decimal;\n                this.bindvalues$.push({name: this.placeholder$, value: this.value$, type: this.datatype$});\n                return;\n            }\n        }\n\n        if (value != null && (value+\"\").trim().length > 0 && this.datatype$ == null)\n        {\n            value = (value+\"\").trim();\n            let numeric:boolean = !isNaN(+value);\n            if (numeric) this.datatype$ = Column.decimal;\n        }\n\n        if (value == null)\n        {\n            this.operator$ = \"is null\";\n            return;\n        }\n\n        if (this.datatype$ == null)\n            this.datatype$ = Column.varchar;\n\n        this.operator$ = \"\";\n        let quoted:boolean = false;\n\n        if (value.startsWith(\"<\")) this.operator$ = \"<\";\n        else if (value.startsWith(\">\")) this.operator$ = \">\";\n\n        if (this.operator$.length == 1)\n        {\n            value = value.substring(1).trim();\n            if (value.startsWith(\"=\")) this.operator$ += \"=\";\n        }\n\n        if (this.operator$.length == 2)\n            value = value.substring(1).trim();\n\n        if (value.startsWith('\"') && value.endsWith('\"'))\n        {\n            quoted = true;\n            value = value.substring(1,value.length-1);\n        }\n\n        if (value.startsWith(\"'\") && value.endsWith(\"'\"))\n        {\n            quoted = true;\n            value = value.substring(1,value.length-1);\n        }\n\n        if (!quoted)\n        {\n            let like:boolean = false;\n            if (value.indexOf(\"%\") >= 0) like = true;\n            if (value.indexOf(\"_\") >= 0) like = true;\n            if (like) this.operator$ = \"like\";\n        }\n\n        this.value$ = value.trim();\n        if (this.operator$.length == 0) this.operator$ = \"=\";\n\n        if (this.datatype$ == Column.decimal && isNaN(+this.value$))\n        {\n            this.error$ = \"Unable to parse \"+this.value$+\" as number\";\n            return;\n        }\n\n        if (this.datatype$ == Column.integer && isNaN(+this.value$))\n        {\n            this.error$ = \"Unable to parse \"+this.value$+\" as number\";\n            return;\n        }\n\n        if (this.datatype$ == Column.date)\n        {\n            let date:Date = dates.parse(this.value$);\n\n            if (date == null)\n            {\n                this.error$ = \"Unable to parse '\"+this.value$+\"' as date\";\n                return;\n            }\n\n            this.value$ = date.getTime();\n\n            if (this.operator$ == \"=\")\n                this.datebtwn();\n        }\n\n\n        if (this.operator$ != \"between\")\n        {\n            this.bindvalues$.push({name: this.placeholder$, value: this.value$, type: this.datatype$});\n        }\n        else\n        {\n            this.bindvalues$.push({name: this.placeholder$[0], value: this.value$[0], type: this.datatype$});\n            this.bindvalues$.push({name: this.placeholder$[1], value: this.value$[1], type: this.datatype$});\n        }\n    }\n\n    private datebtwn() : void\n    {\n        this.operator$ = \"between\";\n        let sdate:number = this.value$;\n\n        // add 24 hours - minus 1 sec\n        let edate:number = sdate + 60 * 60 * 24 * 1000 - 1000;\n\n        this.value$ = [sdate,edate];\n        this.placeholder$ = [this.placeholder$+\"_0\",this.placeholder$+\"_1\"];\n    }\n\n    public get column() : string\n    {\n        return(this.column$);\n    }\n\n    public get placeholder() : string|string[]\n    {\n        return(this.placeholder$);\n    }\n\n    public getValue() : any\n    {\n        if (this.bindvalues$.length == 0)\n            return(null);\n\n        if (this.bindvalues$.length == 1)\n            return(this.bindvalues$[0].value);\n\n        if (this.bindvalues$.length > 1)\n        {\n            let vals:any[] = [];\n            this.bindvalues$.forEach((bv) => {vals.push(bv.value)});\n            return(vals);\n        }\n    }\n\n    public setValue(value:any) : void\n    {\n        for(let i = 0; i < this.bindvalues$.length; i++)\n            this.bindvalues$[i].value = value;\n    }\n\n    public setCondition(condition:string) : void\n    {\n        this.error$ = null;\n        this.condition$ = condition;\n    }\n\n    public error() : string\n    {\n        return(this.error$)\n    }\n\n    public or() : Condition\n    {\n        this.type$ = \"or\";\n        return(this);\n    }\n\n\n    public and() : Condition\n    {\n        this.type$ = \"and\";\n        return(this);\n    }\n\n    public where() : Condition\n    {\n        this.type$ = \"where\";\n        return(this);\n    }\n\n\n    public next(next?:Condition) : Condition\n    {\n        if (next == null) return(this.next$);\n\n        if (this.next$ != null)\n            this.next$.prev$ = next;\n\n        this.next$ = next;\n        next.prev$ = this;\n        return(next);\n    }\n\n\n    public prev(prev?:Condition) : Condition\n    {\n        if (prev == null) return(this.prev$);\n\n        if (this.prev$ != null)\n            this.prev$.next$ = prev;\n\n        this.prev$ = prev;\n        prev.next$ = this;\n        return(prev);\n    }\n\n\n    public first() : Condition\n    {\n        let pc:Condition = this;\n        while(pc.prev$ != null) pc = pc.prev$;\n        return(pc);\n    }\n\n\n    public last() : Condition\n    {\n        let nc:Condition = this;\n        while(nc.next$ != null) nc = nc.next$;\n        return(nc);\n    }\n\n\n    public pop() : Condition\n    {\n        this.level$ = -1;\n        return(this);\n    }\n\n\n    public push() : Condition\n    {\n        this.level$ = +1;\n        return(this);\n    }\n\n\n    public errors() : string[]\n    {\n        let errors:string[] = [];\n        let cd:Condition = this.first();\n\n        while(cd != null)\n        {\n            if (cd.error() != null)\n                errors.push(cd.error());\n\n            cd = cd.next$;\n        }\n\n        return(errors)\n    }\n\n\n    public getAllBindvalues() : BindValue[]\n    {\n        let bindvalues:BindValue[] = [];\n        let cd:Condition = this.first();\n\n        while(cd != null)\n        {\n            cd.bindvalues$.forEach((bindvalue) => {bindvalues.push(bindvalue)});\n            cd = cd.next$;\n        }\n\n        return(bindvalues);\n    }\n\n\n    public split() : Condition[]\n    {\n        let conditions:Condition[] = [];\n        let cd:Condition = this.first();\n\n        while(cd != null)\n        {\n            conditions.push(cd);\n            cd = cd.next$;\n        }\n\n        return(conditions);\n    }\n\n\n    public toString() : string\n    {\n        let nc:Condition = this;\n        while(nc.prev$ != null) nc = nc.prev$;\n\n        if (nc.next$ == null)\n            return(nc.type$+\" \"+this.clause(nc));\n\n        let str:string = (nc.level$ == 0) ? \"where \" : \"where (\";\n        str += this.clause(nc);\n        if (nc.next$ != null) str += \" \"+nc.type$+\" \";\n\n        while(nc.next$ != null)\n        {\n            nc = nc.next$;\n            if (+nc.level$ > 0) str += \"(\";\n            str += this.clause(nc);\n            if (+nc.level$ < 0) str += \")\";\n            if (nc.next$ != null) str += \" \"+nc.type$+\" \";\n        }\n\n        return(str);\n    }\n\n\n    private clause(cond:Condition) : string\n    {\n        if (cond.condition$ != null)\n            return(cond.condition$);\n\n        if (cond.operator$.startsWith(\"is\"))\n            return(cond.column$+\" \"+cond.operator$);\n\n        else if (cond.operator$ == \"between\")\n            return(cond.column$+\" between :\"+cond.placeholder$[0]+\" and :\"+cond.placeholder$[1]);\n\n        else\n            return(cond.column$+\" \"+cond.operator$+\" :\"+cond.placeholder$);\n    }\n}","import { Column } from \"./Column\";\nimport { BindValue } from \"./BindValue\";\nimport { Condition } from \"./Condition\";\n\nexport enum SQLType\n{\n    call,\n    lock,\n    select,\n    insert,\n    update,\n    delete\n}\n\n\nexport interface SQL\n{\n    sql:string;\n    rows?:number;\n    cursor?:string;\n    bindvalues:bindvalue[];\n}\n\n\nexport interface bindvalue\n{\n    value:any;\n    name:string;\n    type:string;\n}\n\n\nexport class Statement\n{\n    private sql$:string = null;\n    private rows$:number = null;\n    private subquery$:SQL = null;\n    private table$:string = null;\n    private order$:string = null;\n    private limit$:string = null;\n    private type$:SQLType = null;\n    private cursor$:string = null;\n    private columns$:string[] = [];\n    private errors:string[] = null;\n    private override:boolean = false;\n    private constraint$:string = null;\n    private updates$:BindValue[] = [];\n    private condition$:Condition = null;\n    private bindvalues:BindValue[] = [];\n\n\n    constructor(sql:string|SQLType)\n    {\n        if (sql != null)\n        {\n            if (sql.constructor.name == \"String\") this.sql$ = \"\"+sql;\n            else this.type$ = sql as SQLType;\n        }\n\n        this.findtype();\n    }\n\n    private findtype() : void\n    {\n        if (this.sql$ != null)\n        {\n            this.type$ = SQLType.call;\n            let test:string = this.sql$.trim().substring(0,7).trim().toLowerCase();\n\n            if (test == \"select\") this.type$ = SQLType.select;\n            if (test == \"insert\") this.type$ = SQLType.insert;\n            if (test == \"update\") this.type$ = SQLType.update;\n            if (test == \"delete\") this.type$ = SQLType.delete;\n        }\n    }\n\n    public set type(type:SQLType)\n    {\n        this.type$ = type;\n    }\n\n    public get type() : SQLType\n    {\n        return(this.type$);\n    }\n\n    public get sql() : string\n    {\n        return(this.build().sql);\n    }\n\n    public set sql(sql:string)\n    {\n        this.sql$ = sql;\n        this.findtype();\n        this.override = true;\n    }\n\n    public rows(rows:number) : Statement\n    {\n        this.rows$ = rows;\n        return(this);\n    }\n\n    public isFunction() : boolean\n    {\n        return(this.type == SQLType.call);\n    }\n\n    public isSelect() : boolean\n    {\n        return(this.type == SQLType.select);\n    }\n\n    public isInsert() : boolean\n    {\n        return(this.type == SQLType.insert);\n    }\n\n    public isUpdate() : boolean\n    {\n        return(this.type == SQLType.update);\n    }\n\n    public isDelete() : boolean\n    {\n        return(this.type == SQLType.delete);\n    }\n\n    public set table(table:string)\n    {\n        this.table$ = table;\n    }\n\n    public set limit(limit:string)\n    {\n        this.limit$ = limit;\n    }\n\n    public set constraint(where:string)\n    {\n        this.constraint$ = where;\n    }\n\n    public set order(order:string)\n    {\n        this.order$ = order;\n    }\n\n    public set cursor(cursor:string)\n    {\n        this.cursor$ = cursor;\n    }\n\n    public get cursor() : string\n    {\n        return(this.cursor$);\n    }\n\n    public update(name:string, value:any, datatype?:Column)\n    {\n        if (value != null && datatype == null)\n        {\n            let type:string = value.constructor.name.toLowerCase();\n\n            if (type == \"date\")\n            {\n                datatype = Column.date;\n                value = (value as Date).getTime();\n            }\n\n            if (type == \"number\")\n                datatype = Column.decimal;\n        }\n\n\n        if (value != null && (value+\"\").trim().length > 0 && datatype == null)\n        {\n            value = (value+\"\").trim();\n            let numeric:boolean = !isNaN(+value);\n            if (numeric) datatype = Column.decimal;\n        }\n\n        if (datatype == null)\n            datatype = Column.varchar;\n\n        this.updates$.push({name: name, value: value, type: datatype});\n    }\n\n    public set columns(columns:string|string[])\n    {\n        this.columns$ = [];\n\n        if (columns.constructor.name == \"String\")\n        {\n            this.columns$.push(\"\"+columns);\n        }\n        else\n        {\n            (columns as String[]).forEach((column) =>\n            {\n                this.columns$.push(\"\"+column);\n            });\n        }\n    }\n\n    public setCondition(condition:Condition|Condition[]) : void\n    {\n        if (condition.constructor.name == \"Array\")\n        {\n            let arr:Condition[] = condition as Condition[];\n\n            this.condition$ = arr[0];\n\n            for(let i = 1; i < arr.length; i++)\n                this.condition$ = this.condition$.and().next(arr[i]);\n\n            this.condition$ = this.condition$.first();\n        }\n        else\n        {\n            this.condition$ = condition as Condition;\n        }\n    }\n\n    public pop() : Statement\n    {\n        if (this.condition$ != null)\n            this.condition$.pop();\n        return(this);\n    }\n\n    public push() : Statement\n    {\n        if (this.condition$ != null)\n            this.condition$.push();\n        return(this);\n    }\n\n    public where(column:string, value:any, datatype?:Column) : Statement\n    {\n        if (this.condition$ == null)\n        {\n            this.condition$ = new Condition(column,value,datatype);\n            this.condition$.where();\n        }\n        else\n        {\n            let cd:Condition = new Condition(column,value,datatype);\n            this.condition$ = this.condition$.where().next(cd);\n        }\n\n        return(this);\n    }\n\n    public whand(column:string, value:any, datatype?:Column) : Statement\n    {\n        if (this.condition$ != null) return(this.and(column,value,datatype));\n        else                         return(this.where(column,value,datatype));\n    }\n\n    public and(column:string, value:any, datatype?:Column) : Statement\n    {\n        if (this.condition$ == null)\n        {\n            this.condition$ = new Condition(column,value,datatype);\n        }\n        else\n        {\n            let cd:Condition = new Condition(column,value,datatype);\n            this.condition$ = this.condition$.and().next(cd);\n        }\n\n        return(this);\n    }\n\n    public or(column:string, value:any, datatype?:Column) : Statement\n    {\n        if (this.condition$ == null)\n        {\n            this.condition$ = new Condition(column,value,datatype);\n        }\n        else\n        {\n            let cd:Condition = new Condition(column,value,datatype);\n            this.condition$ = this.condition$.or().next(cd);\n        }\n\n        return(this);\n    }\n\n    public returnvalue(column:string, datatype?:Column) : Statement\n    {\n        this.bindvalues.unshift({name: column, value: null, type: datatype});\n        return(this);\n    }\n\n    public bind(column:string, value:any, datatype?:Column) : Statement\n    {\n        if (value != null && datatype == null)\n        {\n            let type:string = value.constructor.name.toLowerCase();\n\n            if (type == \"date\")\n            {\n                datatype = Column.date;\n                value = (value as Date).getTime();\n            }\n\n            if (type == \"number\")\n                datatype = Column.decimal;\n        }\n\n\n        if (value != null && (value+\"\").trim().length > 0 && datatype == null)\n        {\n            value = (value+\"\").trim();\n            let numeric:boolean = !isNaN(+value);\n            if (numeric) datatype = Column.decimal;\n        }\n\n        if (datatype == null)\n            datatype = Column.varchar;\n\n        this.bindvalues.push({name: column, value: value, type: datatype});\n        return(this);\n    }\n\n    public get subquery() : SQL\n    {\n        return(this.subquery$);\n    }\n\n    public set subquery(subquery:SQL)\n    {\n        this.subquery$ = subquery;\n    }\n\n    public validate() : string[]\n    {\n        if (this.errors != null)\n            return(this.errors);\n\n        this.errors = [];\n\n        if (this.condition$ != null)\n        this.errors = this.condition$.errors();\n\n        return(this.errors);\n    }\n\n    public getCondition() : Condition\n    {\n        return(this.condition$);\n    }\n\n    public build() : SQL\n    {\n        switch(this.type)\n        {\n            case SQLType.call: return(this.buildcall());\n            case SQLType.lock: return(this.buildselect());\n            case SQLType.select: return(this.buildselect());\n            case SQLType.insert: return(this.buildinsert());\n            case SQLType.update: return(this.buildupdate());\n            case SQLType.delete: return(this.builddelete());\n\n            default: console.log(\"don't know how to build \"+SQLType[this.type]);\n        }\n    }\n\n\n    private buildcall() : SQL\n    {\n        let bindvals:bindvalue[] = [];\n\n        this.bindvalues.forEach((bindv) =>\n        {\n            bindvals.push\n            ({\n                name: bindv.name,\n                type: Column[bindv.type].toLowerCase(),\n                value: bindv.value\n            });\n        });\n\n        return({sql: this.sql$, bindvalues: bindvals});\n    }\n\n\n    private buildinsert() : SQL\n    {\n        let bindvals:bindvalue[] = [];\n\n        this.bindvalues.forEach((bindv) =>\n        {\n            bindvals.push\n            ({\n                name: bindv.name,\n                type: Column[bindv.type].toLowerCase(),\n                value: bindv.value\n            });\n        });\n\n        this.sql$ = \"insert into \"+this.table$+\" (\";\n\n        for (let i = 0; i < bindvals.length; i++)\n        {\n            this.sql$ += bindvals[i].name;\n            if (i < bindvals.length - 1) this.sql$ += \",\";\n        }\n\n        this.sql$ += \") values (\";\n\n        for (let i = 0; i < bindvals.length; i++)\n        {\n            this.sql$ += \":\"+bindvals[i].name;\n            if (i < bindvals.length - 1) this.sql$ += \",\";\n        }\n\n        this.sql$ += \")\";\n\n        return({sql: this.sql$, bindvalues: bindvals});\n    }\n\n\n    private buildupdate() : SQL\n    {\n        let updates:bindvalue[] = [];\n        let bindvals:bindvalue[] = [];\n\n        for (let i = 0; i < this.updates$.length; i++)\n        {\n            updates.push(\n            {\n                name: this.updates$[i].name,\n                type: Column[this.updates$[i].type].toLowerCase(),\n                value: this.updates$[i].value\n            });\n        }\n\n        // Bindvalues for the update\n        updates.forEach((bindv) => {bindvals.push(bindv)});\n\n        let bindvalues:BindValue[] = this.bindvalues;\n\n        if (this.condition$ != null)\n            this.condition$.getAllBindvalues().forEach((bind) => {bindvalues.push(bind);});\n\n        // Bindvalues for the whereclause\n        this.bindvalues.forEach((bindv) =>\n        {\n            bindvals.push\n            ({\n                name: bindv.name,\n                type: Column[bindv.type].toLowerCase(),\n                value: bindv.value\n            });\n        });\n\n        this.sql$ = \"update \"+this.table$+\" set \";\n\n        for (let i = 0; i < updates.length; i++)\n        {\n            this.sql$ += updates[i].name + \" = :\"+updates[i].name;\n            if (i < updates.length - 1) this.sql$ += \", \";\n        }\n\n        if (this.constraint$ != null)\n            this.sql$ += \" \"+this.constraint$;\n\n        if (this.condition$ != null)\n            this.sql$ += \" \"+this.condition$.toString();\n\n        return({sql: this.sql$, bindvalues: bindvals});\n    }\n\n    private builddelete() : SQL\n    {\n        let sql:string = this.sql$;\n\n        if (sql == null)\n            sql = \"delete from \"+this.table$;\n\n        if (this.constraint$ != null)\n            sql += \" \"+this.constraint$;\n\n        let bindvalues:BindValue[] = this.bindvalues;\n\n        if (this.condition$ != null)\n        {\n            sql += \" \"+this.condition$.toString();\n            this.condition$.getAllBindvalues().forEach((bind) => {bindvalues.push(bind);});\n        }\n\n        let bindvals:bindvalue[] = [];\n\n        bindvalues.forEach((bindv) =>\n        {\n            bindvals.push\n            ({\n                name: bindv.name,\n                type: Column[bindv.type].toLowerCase(),\n                value: bindv.value\n            });\n        });\n\n        return({sql: sql, bindvalues: bindvals});\n    }\n\n\n    private buildselect() : SQL\n    {\n        let sql:string = this.sql$;\n\n        if (sql == null)\n        {\n            sql = \"select \";\n\n            if (this.columns$ != null)\n            {\n                for(let i = 0; i < this.columns$.length - 1; i++)\n                    sql += this.columns$[i]+\", \";\n\n                sql += this.columns$[this.columns$.length-1];\n            }\n\n            if (this.table$ != null)\n                sql += \" from \"+this.table$;\n        }\n\n        if (!this.override)\n        {\n            let whand:string = \" where \";\n\n            if (this.condition$ != null)\n            {\n                sql += \" \"+this.condition$.toString();\n                whand = \" and \";\n            }\n\n            if (this.constraint$ != null)\n            {\n                sql += whand+this.constraint$;\n                whand = \" and \";\n            }\n\n            if (this.subquery$ != null)\n            {\n                sql += whand+this.subquery$.sql;\n                whand = \" and \";\n            }\n\n            // Don't order by if lock\n            if (this.type$ == SQLType.select && this.order$ != null)\n                sql += \" order by \"+this.order$;\n\n            if (this.limit$ != null)\n                sql += \" \"+this.limit$;\n\n        }\n\n        let bindvalues:BindValue[] = this.bindvalues;\n\n        if (this.condition$ != null)\n            this.condition$.getAllBindvalues().forEach((bind) => {bindvalues.push(bind);});\n\n        let bindvals:bindvalue[] = [];\n\n        bindvalues.forEach((bindv) =>\n        {\n            bindvals.push\n            ({\n                name: bindv.name,\n                type: Column[bindv.type].toLowerCase(),\n                value: bindv.value\n            });\n        });\n\n        if (this.subquery$ != null)\n        {\n            this.subquery$.bindvalues.forEach((bindv) =>\n            {bindvals.push(bindv)});\n        }\n\n        let sqlstmt:SQL = {sql: sql, bindvalues: bindvals};\n        if (this.rows$ != null) sqlstmt[\"rows\"] = this.rows$;\n\n        return(sqlstmt);\n    }\n}","import { Column } from \"./Column\";\nimport { Key } from \"../blocks/Key\";\nimport { Field } from \"../input/Field\";\nimport { Connection } from \"./Connection\";\nimport { TableDefinition } from \"./TableDefinition\";\nimport { FieldData, Row } from \"../blocks/FieldData\";\nimport { ColumnDefinition } from \"./ColumnDefinition\";\nimport { NameValuePair } from \"../utils/NameValuePair\";\nimport { FieldDefinition } from \"../input/FieldDefinition\";\nimport { SQL, SQLType, Statement } from \"../database/Statement\";\n\n\nexport class Table\n{\n    private key:Key;\n    private select:SQL;\n    private eof:boolean;\n    private fetch$:number;\n    private cursor:string;\n    private keys:any[] = [];\n    private cnames:string[];\n    private conn:Connection;\n    private dates:boolean[] = [];\n    private fielddata$:FieldData;\n    private table:TableDefinition;\n    private criterias:NameValuePair[];\n    private columns$:ColumnDefinition[];\n    private fielddef:Map<string,FieldDefinition>;\n    private index:Map<string,ColumnDefinition> = new Map<string,ColumnDefinition>();\n\n\n    constructor(conn:Connection, table:TableDefinition, key:Key, columns:ColumnDefinition[], fielddef:Map<string,FieldDefinition>, rows:number)\n    {\n        this.key = key;\n        this.conn = conn;\n        this.table = table;\n        this.fetch$ = rows;\n        this.criterias = [];\n        this.columns$ = columns;\n        this.fielddef = fielddef;\n        this.cursor = table.name + Date.now();\n\n        if (this.key == null)\n        {\n            this.key = new Key(\"primary\");\n            this.columns$.forEach((col) => {this.key.addColumn(col.name)});\n        }\n\n        if (this.table.where != null)\n        {\n            this.table.where = this.table.where.trim();\n\n            if (this.table.where.startsWith(\"where \"))\n                this.table.where = this.table.where.substring(6);\n\n            if (this.table.where.startsWith(\"and \"))\n                this.table.where = this.table.where.substring(4);\n\n            if (this.table.where.length == 0)\n                this.table.where = null;\n        }\n\n        this.fetch$ *= 4;\n        if (this.fetch$ < 10) this.fetch$ = 10;\n\n        this.cnames = [];\n        this.columns$.forEach((column) =>\n        {\n            this.cnames.push(column.name);\n            this.index.set(column.name,column);\n\n            let date:boolean = false;\n            if (column.type == Column.date)\n                date = true;\n\n            this.dates.push(date);\n        });\n    }\n\n\n    public get name() : string\n    {\n        return(this.table.name);\n    }\n\n\n    public get tabdef()\n    {\n        return(this.table)\n    }\n\n\n    public get columns() : string[]\n    {\n        return(this.cnames);\n    }\n\n\n    public mandatory(column:string) : boolean\n    {\n        let def:ColumnDefinition = this.index.get(column);\n        if (def == null || def.mandatory == null) return(false);\n        return(def.mandatory);\n    }\n\n\n    public databasecolumn(column:string) : boolean\n    {\n        return(this.index.has(column.toLowerCase()));\n    }\n\n\n    public set fielddata(fielddata:FieldData)\n    {\n        this.fielddata$ = fielddata;\n    }\n\n\n    public get fielddata() : FieldData\n    {\n        return(this.fielddata$);\n    }\n\n\n    public get searchfilter() : NameValuePair[]\n    {\n        return(this.criterias);\n    }\n\n\n    public set searchfilter(filter:NameValuePair[])\n    {\n        this.criterias = filter;\n    }\n\n\n    public async lock(record:number, data:any[]) : Promise<any>\n    {\n        let cols:NameValuePair[] = [];\n\n        for (let i = 0; i < this.columns.length; i++)\n            cols.push({name: this.columns[i], value: data[i]});\n\n        let where:boolean = true;\n        let stmt:Statement = new Statement(SQLType.lock);\n\n        stmt.columns = this.columns;\n        stmt.table = this.table.name;\n\n        for (let i = 0; i < this.keys[record].length; i++)\n        {\n            let type:Column = this.index.get(this.columns[i]).type;\n\n            if (!where) stmt.and(this.columns[i],this.keys[record][i],type);\n            else        stmt.where(this.columns[i],this.keys[record][i],type);\n\n            where = false;\n        }\n\n        let lock:SQL = stmt.build();\n        let response:any = await this.conn.invoke(\"lock\",lock);\n\n        if (response[\"status\"] == \"failed\")\n        {\n            console.log(JSON.stringify(response));\n            return({status: \"failed\", message: \"Row is locked by another user. Try later\"});\n        }\n\n        let rows:any[] = response[\"rows\"];\n\n        if (rows.length == 0)\n        {\n            console.log(\"Row[\"+record+\"] has been deleted by another user. Requery to see changes\")\n            return({status: \"failed\", message: \"Row[\"+record+\"] has been deleted by another user. Requery to see changes\"});\n        }\n\n        let row:any = rows[0];\n\n        for (let i = 0; i < this.columns.length; i++)\n        {\n            let cval:any = cols[i].value;\n\n            if (cval != null && this.dates[i])\n                cval = (cval as Date).getTime();\n\n            if (row[this.columns[i]] != cval)\n            {\n                let problem:string = cols[i].name+\"[\"+record+\"], db: \"+row[this.columns[i]]+\" != \"+cval;\n                console.log(\"Row has been changed by another user. Requery to see changes\");\n                return({status: \"failed\", message: \"Row has been changed by another user. Requery to see changes\"});\n            }\n        }\n\n        return({status: \"ok\"});\n    }\n\n\n    public async insert(record:number, data:any[]) : Promise<any>\n    {\n        let cols:NameValuePair[] = [];\n\n        for (let i = 0; i < this.columns.length; i++)\n            cols.push({name: this.columns[i], value: data[i]});\n\n        let stmt:Statement = new Statement(SQLType.insert);\n\n        stmt.columns = this.columns;\n        stmt.table = this.table.name;\n\n        let keyval:any[] = [];\n\n        for (let i = 0; i < this.columns.length; i++)\n        {\n            let cval:any = cols[i].value;\n            let type:Column = this.index.get(this.columns[i]).type;\n\n            if (cval != null && this.dates[i])\n                cval = (cval as Date).getTime();\n\n            if (i < this.key.columns().length)\n                keyval.push(cval);\n\n            stmt.bind(cols[i].name,cval,type);\n        }\n\n        let insert:SQL = stmt.build();\n        this.keys.splice(+record,0,keyval);\n        let response:any = await this.conn.invoke(\"insert\",insert);\n\n        return(response);\n    }\n\n\n    public async update(record:number, data:NameValuePair[]) : Promise<any>\n    {\n        let keyupd:any[] = [];\n        let keyval:any[] = this.keys[+record];\n        let stmt:Statement = new Statement(SQLType.update);\n\n        for (let i = 0; i < data.length; i++)\n        {\n            if (i < this.key.columns().length)\n                keyupd.push(keyval[i]);\n\n            if (data[i].value.updated)\n            {\n                let val:any = data[i].value.newvalue;\n                let type:Column = this.index.get(data[i].name).type;\n\n                if (val != null && this.dates[i])\n                    val = (val as Date).getTime();\n\n                if (i < this.key.columns().length)\n                    keyupd[i] = val;\n\n                stmt.update(data[i].name,val,type);\n            }\n        }\n\n        let where:boolean = true;\n\n        if (this.table.where != null && this.table.where.trim.length > 0)\n        {\n            where = false;\n            stmt.constraint = this.table.where;\n        }\n\n        for (let i = 0; i < keyval.length; i++)\n        {\n            let type:Column = this.index.get(this.columns[i]).type;\n\n            if (!where) stmt.and(this.columns[i],keyval[i],type);\n            else        stmt.where(this.columns[i],keyval[i],type);\n\n            where = false;\n        }\n\n        stmt.table = this.table.name;\n\n        let update:SQL = stmt.build();\n        let response:any = await this.conn.invoke(\"update\",update);\n\n        if (response[\"status\"] != \"failed\")\n            this.keys[+record] = keyupd;\n\n        return(response);\n    }\n\n\n    public async delete(record:number) : Promise<any>\n    {\n        let keyval:any[] = this.keys[+record];\n        let stmt:Statement = new Statement(SQLType.delete);\n\n        let where:boolean = true;\n\n        if (this.table.where != null && this.table.where.trim.length > 0)\n        {\n            where = false;\n            stmt.constraint = this.table.where;\n        }\n\n        for (let i = 0; i < keyval.length; i++)\n        {\n            let type:Column = this.index.get(this.columns[i]).type;\n\n            if (!where) stmt.and(this.columns[i],keyval[i],type);\n            else        stmt.where(this.columns[i],keyval[i],type);\n\n            where = false;\n        }\n\n        stmt.table = this.table.name;\n\n        let delrow:SQL = stmt.build();\n        let response:any = await this.conn.invoke(\"delete\",delrow);\n\n        if (response[\"status\"] == \"failed\")\n            return(response);\n\n        let keys:any[] = this.keys.slice(0,record);\n        keys = keys.concat(this.keys.slice(+record+1,this.keys.length));\n\n        this.keys = keys;\n        return(response);\n    }\n\n\n    public parseQuery(keys:Key[], subquery:SQL, fields:Field[]) : Statement\n    {\n        let stmt:Statement = new Statement(SQLType.select);\n\n        stmt.cursor = this.cursor;\n        stmt.columns = this.cnames;\n        stmt.table = this.table.name;\n        stmt.order = this.table.order;\n\n        let where:boolean = true;\n\n        if (this.table.limit != null)\n            stmt.limit = this.table.limit;\n\n        if (this.table.where != null)\n        {\n            where = false;\n            stmt.constraint = this.table.where;\n        }\n\n        if (fields.length > 0)\n        {\n            this.criterias = [];\n            fields.forEach((field) =>\n            {\n                if (field.value != null && (\"\"+field.value).trim() != \"\")\n                    this.criterias.push({name: field.name, value: field.value});\n            });\n        }\n\n        keys.forEach((key) =>\n        {\n            key.values.forEach((part) =>\n            {\n                let col:string = part.name;\n\n                // Check if key column is mapped to diff. name\n                let def:FieldDefinition = this.fielddef.get(col);\n                if (def != null) col = def.column;\n\n                let type:Column = this.index.get(col).type;\n\n                if (!where) stmt.and(col,part.value,type);\n                else        stmt.where(col,part.value,type);\n\n                where = false;\n            });\n        });\n\n        this.criterias.forEach((field) =>\n        {\n            let def:FieldDefinition = this.fielddef.get(field.name);\n\n            if (def.column != null)\n            {\n                let type:Column = this.index.get(def.column).type;\n\n                if (!where) stmt.and(def.column,field.value,type);\n                else        stmt.where(def.column,field.value,type);\n\n                where = false;\n            }\n        });\n\n        if (subquery != null)\n            stmt.subquery = subquery;\n\n        return(stmt);\n    }\n\n\n    public async executequery(stmt:Statement) : Promise<any>\n    {\n        this.keys = [];\n        this.eof = false;\n        this.fielddata.clear();\n        this.select = stmt.build();\n\n        this.select.rows = this.fetch$;\n        this.select.cursor = stmt.cursor;\n\n        let response:any = await this.conn.invoke(\"select\",this.select);\n\n        if (response[\"status\"] == \"failed\")\n            return(response);\n\n        this.addRows(response[\"rows\"]);\n        return(response);\n    }\n\n\n    public async fetch(stmt:Statement) : Promise<any>\n    {\n        if (this.eof) return({status: \"ok\"});\n\n        let fetch:any = {cursor: stmt.cursor, rows: this.fetch$};\n        let response:any = await this.conn.invoke(\"fetch\",fetch);\n\n        if (response[\"status\"] == \"failed\")\n            return(response);\n\n        this.addRows(response[\"rows\"]);\n        return(response);\n    }\n\n\n    private addRows(rows:any[]) : void\n    {\n        let klen:number = this.key.values.length;\n        if (rows.length < this.fetch$) this.eof = true;\n\n        rows.forEach((row) =>\n        {\n            // Table is not defined\n            if (this.cnames.length == 0)\n            {\n                let keys:string[] = Object.keys(row);\n                let flds:string[] = this.fielddata.fields;\n\n                for(let i = 0; i < keys.length; i++)\n                    this.cnames.push(keys[i]);\n\n                for(let i = 0; i < keys.length - flds.length; i++)\n                    flds.unshift(keys[i]);\n\n                this.fielddata.fields = flds;\n            }\n\n            let col:number = 0;\n            let keyval:any[] = [];\n            let drow:Row = this.fielddata.newrow();\n\n            Object.keys(row).forEach((key) =>\n            {\n                let val = row[key];\n\n                if (this.dates[col] && (\"\"+val).length > 0)\n                    val = new Date(+val);\n\n                drow.setValue(col++,val);\n                if (keyval.length < klen) keyval.push(val);\n            });\n\n            this.keys.push(keyval);\n            this.fielddata.add(drow);\n        });\n    }\n}","import { Key } from \"./Key\";\nimport { RecordState } from \"./Record\";\nimport { Field } from \"../input/Field\";\nimport { BlockImpl } from \"./BlockImpl\";\nimport { Table } from \"../database/Table\";\nimport { Trigger } from \"../events/Triggers\";\nimport { NameValuePair } from \"../utils/NameValuePair\";\nimport { SQL, Statement } from \"../database/Statement\";\nimport { SQLTriggerEvent } from \"../events/TriggerEvent\";\nimport { FieldDefinition } from \"../input/FieldDefinition\";\nimport { TableDefinition } from \"../database/TableDefinition\";\n\n\nexport class FieldData\n{\n    private table$:Table;\n    private query:Statement;\n    private block:BlockImpl;\n    private data:Row[] = [];\n    private fields$:string[];\n    private fielddef:Map<string,FieldDefinition>;\n    private index:Map<string,number> = new Map<string,number>();\n\n\n    public constructor(block:BlockImpl, table:Table, fields:string[], fielddef:Map<string,FieldDefinition>)\n    {\n        this.block = block;\n        this.table$ = table;\n        this.fields$ = fields;\n        this.fielddef = fielddef;\n\n        if (table != null)\n            this.table$.fielddata = this;\n\n        if (fields != null)\n        {\n            for(let i = 0; i < fields.length; i++)\n                this.index.set(fields[i].toLowerCase(),i);\n        }\n    }\n\n\n    public get table() : Table\n    {\n        return(this.table$);\n    }\n\n\n    public get tabdef() : TableDefinition\n    {\n        return(this.table$?.tabdef);\n    }\n\n\n    public get database() : boolean\n    {\n        return(this.table != null);\n    }\n\n\n    public databasecolumn(column:string) : boolean\n    {\n        if (this.table == null) return(false);\n        return(this.table.databasecolumn(column));\n    }\n\n\n    public get fields() : string[]\n    {\n        return(this.fields$);\n    }\n\n\n    public set fields(fields:string[])\n    {\n        this.index.clear();\n        this.fields$ = fields;\n\n        for(let i = 0; i < fields.length; i++)\n            this.index.set(fields[i].toLowerCase(),i);\n    }\n\n\n    public get columns() : string[]\n    {\n        if (this.table == null) return(null);\n        else return(this.table.columns);\n    }\n\n\n    public get fetched() : number\n    {\n        return(this.data.length);\n    }\n\n\n    public removeLocks() : void\n    {\n        this.data.forEach((row) => {row.locked = false});\n    }\n\n\n    public async lock(record:number) : Promise<any>\n    {\n        if (record < 0 || record >= this.data.length)\n            return({status: \"failed\", message: \"row \"+record+\" does not exist\"});\n\n        if (this.data[record].locked)\n            return({status: \"failed\", message: \"row \"+record+\" already locked\"});\n\n        if (this.table == null)\n            return({status: \"ok\"});\n\n        let response:any = {status: \"ok\"};\n\n        if (this.table != null)\n        {\n            response = await this.table.lock(record,this.data[+record].values);\n\n            if (response[\"status\"] == \"failed\")\n                return(response);\n        }\n\n        this.data[record].locked = true;\n        return(response);\n    }\n\n\n    public locked(record:number) : boolean\n    {\n        if (record < 0 || record >= this.data.length) return(false);\n        if (this.data[+record].state == RecordState.insert) return(true);\n        return(this.data[+record].locked);\n    }\n\n\n    public mandatory(column:string) : boolean\n    {\n        let md:boolean = false;\n\n        if (this.table != null)\n            md = this.table.mandatory(column);\n\n        if (!md)\n        {\n            md = this.fielddef.get(column)?.mandatory;\n            if (md == null) md = false;\n        }\n\n        return(md);\n    }\n\n\n    public getNonValidated(record:number) : string[]\n    {\n        if (record < 0 || record >= this.data.length) return([]);\n\n        let row:Row = this.data[record];\n\n        let cols:string[] = [];\n\n        for (let i = 0; i < row.fields.length; i++)\n        {\n            if (this.mandatory(this.fields[i]) && row.fields[i].value$ == null)\n            {\n                cols.push(this.columns[i]);\n            }\n            else if (!row.fields[i].validated)\n            {\n                cols.push(this.columns[i]);\n            }\n        }\n\n        return(cols);\n    }\n\n\n    public validated(record:number, fields:boolean) : boolean\n    {\n        if (record < 0 || record >= this.data.length) return(true);\n\n        let row:Row = this.data[record];\n\n        if (fields)\n        {\n            for (let i = 0; i < row.fields.length; i++)\n            {\n                if (this.mandatory(this.fields[i]) && row.fields[i].value$ == null)\n                    return(false);\n\n                if (!row.fields[i].validated) return(false);\n            }\n            return(true);\n        }\n\n        return(row.validated);\n    }\n\n\n    public newrow() : Row\n    {\n        let row:Row = new Row(0,this);\n        return(row);\n    }\n\n\n    public add(row:Row)\n    {\n        this.data.push(row);\n    }\n\n\n    public column(fname:string) : number\n    {\n        return(this.index.get(fname.toLowerCase()));\n    }\n\n\n    public clear() : void\n    {\n        this.data = [];\n    }\n\n\n    public getValue(record:number, column:string) : any\n    {\n        if (+record < 0 || +record >= +this.data.length)\n        {\n            console.log(\"get \"+column+\"[\"+record+\"] record does not exist\");\n            return(null);\n        }\n\n        let colno:number = this.index.get(column.toLowerCase());\n\n        if (colno == null)\n        {\n            console.log(\"get \"+column+\"[\"+record+\"] column does not exist\");\n            return(null);\n        }\n\n        let rec:Row = this.data[+record];\n        return(rec.fields[+colno].value$);\n    }\n\n\n    public getValidated(record:number, column?:string) : boolean\n    {\n        if (record < 0 || record >= this.data.length)\n        {\n            console.log(\"set \"+column+\"[\"+record+\"] row does not exist\");\n            return(true);\n        }\n\n        let rec:Row = this.data[+record];\n        if (column == null) return(rec.validated);\n\n        let colno:number = this.index.get(column.toLowerCase());\n\n        if (colno == null)\n        {\n            console.log(\"set \"+column+\"[\"+record+\"] column does not exist\");\n            return;\n        }\n\n        return(rec.fields[+colno].validated);\n    }\n\n\n    public async setValidated(record:number, column?:string) : Promise<any>\n    {\n        if (record < 0 || record >= this.data.length)\n            return({status: \"failed\", message: \"set \"+column+\"[\"+record+\"] validated failed, row does not exist\"});\n\n        let rec:Row = this.data[+record];\n\n        if (column == null)\n        {\n            if (rec.validated)\n                return({status: \"failed\", message: \"Record already validated\"});\n\n            if (rec.state == RecordState.insert)\n            {\n                if (this.table != null)\n                {\n                    let scn:number = rec.scn;\n                    let response:any = await this.table.insert(record,this.data[+record].values);\n\n                    if (response[\"status\"] == \"failed\")\n                        return(response);\n\n                    rec.dbn = scn;\n                }\n            }\n            else if (this.table != null)\n            {\n                let scn:number = rec.scn;\n                let columns:NameValuePair[] = [];\n\n                for (let i = 0; i < this.columns.length; i++)\n                {\n                    let status:any = {updated: false};\n\n                    if (+rec.fields[i].scn > +rec.dbn)\n                    {\n                        status.updated = true;\n                        status.newvalue = rec.fields[i].value$;\n                    }\n\n                    columns.push({name: this.columns[i], value: status});\n                }\n\n                let response:any = await this.table.update(record,columns);\n\n                if (response[\"status\"] == \"failed\")\n                    return(response);\n\n                rec.dbn = scn;\n            }\n\n            rec.validated = true;\n\n            if (rec.state == RecordState.insert)\n                rec.state = RecordState.update;\n\n            return({status: \"ok\"});\n        }\n\n        let colno:number = this.index.get(column.toLowerCase());\n\n        if (colno == null)\n            return({status: \"failed\", message: \"set \"+column+\"[\"+record+\"] validated failed, column does not exist\"});\n\n        if (this.table != null && +colno < this.table.columns.length)\n            rec.fields[+colno].validated = true;\n\n        return({status: \"ok\"});\n    }\n\n\n    public setValue(record:number, column:string, value:any) : boolean\n    {\n        if (record < 0 || record >= this.data.length)\n        {\n            console.log(\"set \"+column+\"[\"+record+\"] row does not exist\");\n            return(false);\n        }\n\n        let colno:number = this.index.get(column.toLowerCase());\n\n        if (colno == null)\n        {\n            console.log(\"set \"+column+\"[\"+record+\"] column does not exist\");\n            return(false);\n        }\n\n        let rec:Row = this.data[+record];\n\n        if (rec.fields[+colno].value$ == value)\n            return(false);\n\n        let scn:number = +rec.scn + 1;\n\n        if (this.table != null && +colno < this.table.columns.length)\n        {\n            rec.validated = false;\n            rec.fields[+colno].validated = false;\n        }\n\n        rec.scn = scn;\n        rec.fields[+colno].setValue(scn,value);\n\n        return(true);\n    }\n\n\n    public state(record:number, state?:RecordState) : RecordState\n    {\n        if (record >= this.data.length) return(RecordState.na);\n        if (state != null) this.data[record].state = state;\n        return(this.data[record].state);\n    }\n\n\n    public get searchfilter() : NameValuePair[]\n    {\n        if (this.table == null) return(null);\n        return(this.table.searchfilter);\n    }\n\n\n    public set searchfilter(filter:NameValuePair[])\n    {\n        if (this.table != null)\n            this.table.searchfilter = filter;\n    }\n\n\n    public parseQuery(keys:Key[], subquery:SQL, fields:Field[]) : Statement\n    {\n        if (this.table == null) return(null);\n        return(this.table.parseQuery(keys,subquery,fields));\n    }\n\n\n    public async executequery(stmt:Statement) : Promise<any>\n    {\n        this.query = stmt;\n        if (this.table == null) return({status: \"ok\"});\n\n        let response:any = await this.table.executequery(stmt);\n\n        if (response[\"status\"] != \"failed\")\n        {\n            let rows:any[] = response[\"rows\"];\n\n            for (let i = 0; i < rows.length; i++)\n            {\n                let event:SQLTriggerEvent = new SQLTriggerEvent(this.block.alias,i,null);\n                this.block.invokeTriggers(Trigger.PostQuery,event);\n            }\n        }\n\n        return(response);\n    }\n\n\n    public insert(record:number) : boolean\n    {\n        let data:Row[] = [];\n        if (record > this.data.length) record = this.data.length;\n\n        data = this.data.slice(0,record);\n\n        data[+record] = new Row(0,this);\n\n        data[+record].locked = true;\n        data[+record].state = RecordState.insert;\n        data = data.concat(this.data.slice(record,this.data.length));\n\n        this.data = data;\n        return(true);\n    }\n\n\n    public async delete(record:number) : Promise<any>\n    {\n        let data:Row[] = [];\n        let response:any = {status: \"ok\"};\n\n        if (record < 0 || record >= this.data.length)\n            return(response);\n\n        if (this.data[+record].state == RecordState.insert)\n        {\n            data = this.data.slice(0,record);\n            data = data.concat(this.data.slice(+record+1,this.data.length));\n\n            this.data = data;\n            return(response);\n        }\n\n        if (this.table != null)\n        {\n            response = await this.table.delete(record);\n\n            if (response[\"status\"] == \"failed\")\n                return(response);\n        }\n\n        data = this.data.slice(0,record);\n        data = data.concat(this.data.slice(+record+1,this.data.length));\n\n        this.data = data;\n        return(response);\n    }\n\n\n    public get rows() : number\n    {\n        return(this.data.length);\n    }\n\n\n    public async fetch(offset:number, rows:number) : Promise<number>\n    {\n        if (this.data.length <= +offset + rows && this.query != null)\n        {\n            let response:any = await this.table.fetch(this.query);\n\n            if (response[\"status\"] == \"failed\")\n            {\n                this.block.alert(JSON.stringify(response),\"Database\");\n                return(0);\n            }\n            else\n            {\n                let rows:any[] = response[\"rows\"];\n\n                if (rows != null)\n                {\n                    for (let i = 1; i <= rows.length; i++)\n                    {\n                        let event:SQLTriggerEvent = new SQLTriggerEvent(this.block.alias,+i + +offset,null);\n                        this.block.invokeTriggers(Trigger.PostQuery,event);\n                    }\n                }\n            }\n        }\n\n        let avail:number = this.data.length - offset - 1;\n        if (avail < 0) avail = 0;\n\n        return(avail);\n    }\n\n\n    public get(start:number, rows:number) : any[][]\n    {\n        let values:any[][] = [];\n        if (start < 0) start = 0;\n        let end:number = +start + rows;\n        if (end > this.data.length) end = this.data.length;\n\n        for(let i = start; i < end; i++)\n            values.push(this.data[i].values);\n\n        return(values);\n    }\n}\n\n\nexport class Row\n{\n    public scn:number = 0;\n    public dbn:number = 0;\n    public fields:Column[] = [];\n    public locked:boolean = false;\n    public validated:boolean = true;\n    public state:RecordState = RecordState.na;\n\n\n    constructor(scn:number, table:FieldData, values?:any[])\n    {\n        this.scn = scn;\n\n        for(let i = 0; i < table.fields.length; i++)\n            this.fields.push(new Column(scn));\n\n        let i:number = 0;\n\n        if (values != null) this.fields.forEach((column) =>\n        {column.setValue(scn,values[i++])});\n    }\n\n\n    public setValue(col:number, value:any) : void\n    {\n        // Used by table\n        this.fields[col].value$ = value;\n    }\n\n\n    public get values() : any[]\n    {\n        let values:any[] = [];\n        this.fields.forEach((col) =>\n        {\n            values.push(col.value$)\n        });\n        return(values);\n    }\n\n\n    public print() : void\n    {\n        let i:number = 0;\n        let values:string = \"\";\n        this.fields.forEach((col) =>\n        {\n            let val:any = col.value$;\n            if (val == null) val = \"\";\n            values += i+\" \"+col.value$ + \", \";\n            i++;\n        });\n\n        values = values.substring(0,values.length-2);\n        console.log(values);\n    }\n}\n\n\nclass Column\n{\n    public value$:any;\n    public scn:number = 0;\n    public validated:boolean = true;\n\n    constructor(scn:number, value?:any)\n    {\n        this.scn = scn;\n        this.value$ = value;\n        if (value == undefined) this.value$ = null;\n    }\n\n    public setValue(scn:number, value:any) : void\n    {\n        this.scn = scn;\n        this.value$ = value;\n        if (value == undefined) this.value$ = null;\n    }\n}","import { Popup } from \"../popup/Popup\";\nimport { Field } from \"../input/Field\";\nimport { keymap } from \"../keymap/KeyMap\";\nimport { Record } from \"../blocks/Record\";\nimport { Table } from \"../database/Table\";\nimport { Trigger } from \"../events/Triggers\";\nimport { ListOfValues } from \"./ListOfValues\";\nimport { FieldType } from \"../input/FieldType\";\nimport { BlockImpl } from \"../blocks/BlockImpl\";\nimport { FieldData } from \"../blocks/FieldData\";\nimport { Context } from \"../application/Context\";\nimport { Statement } from \"../database/Statement\";\nimport { PopupWindow } from \"../popup/PopupWindow\";\nimport { Container } from \"../container/Container\";\nimport { Connection } from \"../database/Connection\";\nimport { PopupInstance } from \"../popup/PopupInstance\";\nimport { FieldDefinition } from \"../input/FieldDefinition\";\nimport { ApplicationImpl } from \"../application/ApplicationImpl\";\nimport { OnInit, AfterViewInit, Component } from \"@angular/core\";\nimport { FieldTriggerEvent, KeyTriggerEvent, SQLTriggerEvent } from \"../events/TriggerEvent\";\n\n\n@Component({\n    template:\n    `\n        <div class=\"lov\">\n        <table>\n            <tr>\n                <td class=\"lov-center\"><field class=\"lov-search\" size=\"15\" name=\"filter\" block=\"search\"></field></td>\n            </tr>\n\n            <tr class=\"lov-spacer\"></tr>\n\n            <tr *ngFor=\"let item of [].constructor(rows); let row = index\">\n                <td><field class=\"lov-result\" size=\"{{size}}\" name=\"description\" row=\"{{row}}\" block=\"result\"></field></td>\n            </tr>\n\n            <tr class=\"lov-spacer\"></tr>\n        </table>\n        </div>\n    `,\n    styles:[\n        `\n            .lov-spacer\n            {\n                height: 8px;\n            }\n\n            .lov-center\n            {\n                border: none;\n                display: flex;\n                justify-content: center;\n            }\n        `\n    ]\n})\n\n\nexport class ListOfValuesImpl implements Popup, OnInit, AfterViewInit\n{\n    private fetch:number;\n    private filter:Field;\n    private description:Field;\n    private lov:ListOfValues;\n\n    private last:string = \"\";\n    private minlen:number = 0;\n    private prefix:string = \"\";\n    private postfix:string = \"\";\n    private wait:boolean = false;\n\n    private win:PopupWindow;\n    private iblock:BlockImpl;\n    private sblock:BlockImpl;\n    private rblock:BlockImpl;\n    private app:ApplicationImpl;\n\n    public rows:    number = 10;\n    public size:    number = 20;\n    public top:     string = null;\n    public left:    string = null;\n    public width:   string = null;\n    public height:  string = null;\n    public title:   string = null;\n\n\n    public static show(app:ApplicationImpl, impl:BlockImpl[], lov:ListOfValues)\n    {\n        let pinst:PopupInstance = new PopupInstance();\n        pinst.display(app,ListOfValuesImpl);\n\n        let lovwin:ListOfValuesImpl = pinst.popup() as ListOfValuesImpl;\n\n        lovwin.setDefinition(lov);\n        lovwin.setBlockImpl(impl);\n    }\n\n\n    constructor(ctx:Context)\n    {\n        this.app = ctx.app[\"_impl_\"];\n    }\n\n\n    public setDefinition(lov:ListOfValues) : void\n    {\n        this.lov = lov;\n        this.title = lov.title;\n        this.width = lov.width;\n        this.height = lov.height;\n\n        this.rows = lov.rows ? lov.rows : 12;\n        this.fetch = lov.rows ? lov.rows : 12;\n\n        if (this.size == null) this.size = 25;\n\n        let width:number = this.size*12;\n        let height:number = this.rows*28+16;\n\n        if (this.width == null) this.width = width+\"px\";\n        if (this.height == null) this.height = height+\"px\";\n\n        this.win.title = this.title;\n        this.win.width = this.width;\n        this.win.height = this.height;\n\n        if (this.lov.minlen != null) this.minlen = this.lov.minlen;\n        if (this.lov.prefix != null) this.prefix = this.lov.prefix;\n        if (this.lov.postfix != null) this.postfix = this.lov.postfix;\n    }\n\n\n    public setBlockImpl(impl:BlockImpl[]) : void\n    {\n        this.iblock = impl[0];\n        this.sblock = impl[1];\n        this.rblock = impl[2];\n    }\n\n\n    public close(_cancel: boolean): void\n    {\n        this.app.enable();\n        this.win.closeWindow();\n        this.app.getCurrentForm()?.focus();\n    }\n\n\n    public setWin(win: PopupWindow): void\n    {\n        this.win = win;\n    }\n\n\n    public ngOnInit(): void\n    {\n        this.app.disable();\n        this.app.setContainer();\n    }\n\n\n    public ngAfterViewInit(): void\n    {\n        let container:Container = this.app.getContainer();\n        container.finish();\n\n        this.sblock.setFields(container.getBlock(\"search\").fields);\n        this.rblock.setFields(container.getBlock(\"result\").fields);\n\n        this.rblock.usage = {query: true};\n\n        container.getBlock(\"search\").records.forEach((rec) =>\n        {\n            this.sblock.addRecord(new Record(rec.row,rec.fields,rec.index));\n\n            this.filter = this.sblock.getField(rec.row,\"filter\");\n            let filtdef:FieldDefinition = {name: \"filter\", type: FieldType.text};\n\n            if (this.lov.case != null) filtdef.case = this.lov.case;\n            this.filter.setDefinition(filtdef,true);\n            this.filter.enable(false);\n\n        })\n\n        let fielddef:Map<string,FieldDefinition> = new Map<string,FieldDefinition>();\n        let descdef:FieldDefinition = {name: \"description\", type: FieldType.text, fieldoptions: {update: false}};\n\n        fielddef.set(\"description\",descdef);\n\n        container.getBlock(\"result\").records.forEach((rec) =>\n        {\n            this.rblock.addRecord(new Record(rec.row,rec.fields,rec.index));\n            this.description = this.rblock.getField(rec.row,\"description\");\n\n            this.description.setDefinition(descdef,true);\n            this.description.enable(true);\n        });\n\n        let conn:Connection = this.app.appstate.connection;\n        let table:Table = new Table(conn,{name: \"none\"},null,[],null,this.fetch);\n\n        this.rblock.setApplication(this.app);\n        this.rblock.data = new FieldData(this.rblock,table,[\"description\"],fielddef);\n\n        this.app.dropContainer();\n\n        let keys:keymap[] =\n        [\n            keymap.enter,\n            keymap.escape,\n            keymap.nextrecord,\n            keymap.prevrecord,\n            keymap.nextfield,\n            keymap.prevfield\n        ];\n\n        this.sblock.addKeyTrigger(this,this.onkey,keys);\n        this.rblock.addKeyTrigger(this,this.onkey,keys);\n\n        this.sblock.addTrigger(this,this.search,Trigger.Typing);\n        this.rblock.addTrigger(this,this.prequery,Trigger.PreQuery);\n        this.rblock.addTrigger(this,this.onMouse,Trigger.MouseDoubleClick);\n\n        this.rblock.navigable = false;\n\n        this.filter.focus();\n        this.filter.value = this.lov.value;\n\n        if (this.lov.autoquery)\n        {\n            this.last = \" \";\n            this.search(this.filter.value);\n        }\n    }\n\n\n    private async search(_event:FieldTriggerEvent) : Promise<boolean>\n    {\n        this.execute();\n        return(true);\n    }\n\n\n    private async execute() : Promise<void>\n    {\n        if (this.wait)\n        {\n            setTimeout(() => {this.execute();},200);\n            return;\n        }\n\n        if (this.filter.value == this.last)\n            return;\n\n        this.wait = true;\n        this.last = this.filter.value;\n        if (this.last == null) this.last = \"\";\n\n        if (this.last.length < this.minlen) this.rblock.clear();\n        else                                await this.rblock.keyexeqry();\n\n        this.wait = false;\n    }\n\n\n    private async prequery(event:SQLTriggerEvent) : Promise<boolean>\n    {\n        let stmt:Statement = new Statement(this.lov.sql);\n\n        stmt.cursor = event.stmt.cursor;\n\n        if (this.lov.bindvalues != null)\n            this.lov.bindvalues.forEach((bv) => {stmt.bind(bv.name,bv.value,bv.type)});\n\n        let filter:string = this.filter.value;\n\n        if (this.lov.modfunc != null)\n            filter = this.lov.modfunc(this.filter.value);\n\n        if (filter == null) filter = \"\";\n        stmt.bind(\"filter\",this.prefix+filter+this.postfix);\n\n        event.stmt = stmt;\n        return(true);\n    }\n\n\n    public async onMouse(event:FieldTriggerEvent) : Promise<boolean>\n    {\n        this.picked(event.record);\n        return(true);\n    }\n\n\n    public async onkey(event:KeyTriggerEvent) : Promise<boolean>\n    {\n        if (event.type == Trigger.Key && event.field == \"filter\")\n        {\n            if (event.key == keymap.prevfield)\n                event.event.preventDefault();\n\n            if (event.key == keymap.nextfield || event.key == keymap.nextrecord)\n            {\n                this.rblock.navigable = true;\n                this.rblock.focus(0);\n            }\n        }\n\n        if (event.type == Trigger.Key && event.field == \"description\")\n        {\n            if (event.key == keymap.nextfield || event.key == keymap.prevfield)\n            {\n                this.sblock.focus();\n                event.event.preventDefault();\n                this.rblock.navigable = false;\n            }\n        }\n\n        if (event.type == Trigger.Key && event.key == keymap.escape)\n            this.close(false);\n\n        if (event.type == Trigger.Key && event.key == keymap.enter)\n        {\n            let record:number = -1;\n\n            if (event.field == \"filter\" && this.rblock.fetched == 1)\n                record = 0;\n\n            if (event.field == \"description\")\n                record = event.record;\n\n            if (record >= 0) this.picked(record);\n        }\n\n        return(true);\n    }\n\n\n    private picked(record:number) : void\n    {\n        this.lov.fieldmap.forEach((col,fld) =>\n        {\n            let val:any = this.rblock.getValue(record,fld);\n            this.iblock.setValue(this.iblock.record,col,val);\n        });\n\n        this.close(false);\n    }\n}","import { Key } from \"./Key\";\nimport { Block } from \"./Block\";\nimport { Field } from \"../input/Field\";\nimport { Utils } from \"../utils/Utils\";\nimport { FieldData } from \"./FieldData\";\nimport { keymap } from \"../keymap/KeyMap\";\nimport { FormImpl } from \"../forms/FormImpl\";\nimport { FieldType } from \"../input/FieldType\";\nimport { Record, RecordState } from \"./Record\";\nimport { FormState } from \"../forms/FormState\";\nimport { DatePicker } from \"../dates/DatePicker\";\nimport { MessageBox } from \"../popup/MessageBox\";\nimport { MasterDetail } from \"../forms/MasterDetail\";\nimport { SQL, Statement } from \"../database/Statement\";\nimport { FieldInstance } from \"../input/FieldInstance\";\nimport { Trigger, Triggers } from \"../events/Triggers\";\nimport { ListOfValues } from \"../listval/ListOfValues\";\nimport { NameValuePair } from \"../utils/NameValuePair\";\nimport { DatabaseUsage } from \"../database/DatabaseUsage\";\nimport { FieldDefinition } from \"../input/FieldDefinition\";\nimport { TriggerFunction } from \"../events/TriggerFunction\";\nimport { TableDefinition } from \"../database/TableDefinition\";\nimport { LOVDefinition } from \"../annotations/LOVDefinitions\";\nimport { ListOfValuesImpl } from \"../listval/ListOfValuesImpl\";\nimport { ApplicationImpl } from \"../application/ApplicationImpl\";\nimport { ListOfValuesFunction } from \"../listval/ListOfValuesFunction\";\nimport { FieldTriggerEvent, KeyTriggerEvent, Origin, SQLTriggerEvent, TriggerEvent } from \"../events/TriggerEvent\";\n\n\nexport class BlockImpl\n{\n    private name$:string;\n    private alias$:string;\n    private row$:number = 0;\n    private data$:FieldData;\n    private offset:number = 0;\n    private app:ApplicationImpl;\n    private field$:FieldInstance;\n    private form$:FormImpl = null;\n    private ready$:boolean = false;\n    private dbusage$:DatabaseUsage;\n    private records$:Record[] = [];\n    private querying$:boolean = false;\n    private disabled$:boolean = false;\n    private navigable$:boolean = true;\n    private masterdetail:MasterDetail;\n    private lastqry:NameValuePair[] = [];\n    private fields$:FieldInstance[] = [];\n    private lovs:Map<string,LOVDefinition>;\n    private idlovs:Map<string,LOVDefinition>;\n    private triggers:Triggers = new Triggers();\n    private state:FormState = FormState.normal;\n    private fieldidx$:Map<string,FieldInstance> = new Map<string,FieldInstance>();\n\n\n    constructor(public block?:Block)\n    // Can be used as standalone (null)\n    {\n        this.dbusage$ =\n        {\n            query: false,\n            update: true,\n            insert: false,\n            delete: false\n        };\n\n        if (block != null)\n        {\n            this.name$ = block.constructor.name;\n            if (this.name$ == \"Block\") this.name$ = \"anonymous\";\n        }\n    }\n\n\n    public get name() : string\n    {\n        return(this.name$);\n    }\n\n    public set alias(alias:string)\n    {\n        this.alias$ = alias;\n    }\n\n\n    public get alias() : string\n    {\n        return(this.alias$);\n    }\n\n\n    public get table() : TableDefinition\n    {\n        return(this.data?.tabdef);\n    }\n\n\n    public set row(row:number)\n    {\n        this.row$ = row;\n    }\n\n\n    public get row() : number\n    {\n        return(this.row$);\n    }\n\n\n    public exists(record:number) : boolean\n    {\n        if (+record < +this.data.rows) return(true);\n        return(false);\n    }\n\n\n    public displayed(record:number) : boolean\n    {\n        if (+record < +this.offset) return(false);\n        if (+record > +this.sum(this.offset,this.rows)) return(false);\n\n        let row:number = +record - +this.offset;\n        let state:RecordState = this.records[+row].state;\n\n        if (state == RecordState.na || state == RecordState.qmode)\n            return(false);\n\n        return(true);\n    }\n\n\n    public get rows() : number\n    {\n        return(this.records$.length);\n    }\n\n\n    public database() : boolean\n    {\n        return(this.data?.database);\n    }\n\n\n    public get datarows() : number\n    {\n        if (this.data == null) return(0);\n        return(this.data.rows);\n    }\n\n\n    public get columns() : string[]\n    {\n        if (this.data == null) return(null);\n        else return(this.data.columns);\n    }\n\n\n    public get ready()\n    {\n        return(this.ready$);\n    }\n\n\n    public set ready(ready:boolean)\n    {\n        this.ready$ = ready;\n        let rec:Record = this.getRecord(0);\n\n        if (rec != null)\n        {\n            rec.enable(true);\n            rec.current = true;\n        }\n    }\n\n\n    public get navigable()\n    {\n        return(this.navigable$);\n    }\n\n\n    public set navigable(navigable:boolean)\n    {\n        this.navigable$ = navigable;\n    }\n\n\n    public get record() : number\n    {\n        return(this.sum(this.row,this.offset));\n    }\n\n\n    public get fetched() : number\n    {\n        if (this.data == null) return(0);\n        return(this.data.fetched);\n    }\n\n\n    public get field() : FieldInstance\n    {\n        return(this.field$);\n    }\n\n\n    public get fields() : string[]\n    {\n        if (this.data == null) return(null);\n        else return(this.data.fields);\n    }\n\n\n    public get clazz() : string\n    {\n        if (this.block == null) return(null);\n        return(this.block.constructor.name.toLowerCase());\n    }\n\n\n    public get data() : FieldData\n    {\n        return(this.data$);\n    }\n\n\n    public set data(data:FieldData)\n    {\n        this.data$ = data;\n    }\n\n\n    public set form(form:FormImpl)\n    {\n        this.form$ = form;\n    }\n\n\n    public get form() : FormImpl\n    {\n        return(this.form$);\n    }\n\n\n    public setFieldDefinition(def:FieldDefinition) : boolean\n    {\n        let inst:FieldInstance = this.fieldidx$.get(def.name);\n\n        if (inst != null)\n        {\n            let fields:FieldInstance[] = inst.parent.fields;\n            let cfields:FieldInstance[] = inst.parent.cfields;\n\n            fields.forEach((fld) => {if (fld.id == inst.id) fld.definition = def;})\n            cfields.forEach((fld) => {if (fld.id == inst.id) fld.definition = def;})\n\n            return(true);\n        }\n\n        return(false);\n    }\n\n\n    public setPossibleValues(field:string, values:Set<any>|Map<string,any>, enforce:boolean) : boolean\n    {\n        let inst:FieldInstance = this.fieldidx$.get(field);\n\n        if (inst != null)\n        {\n            let fields:FieldInstance[] = inst.parent.fields;\n            let cfields:FieldInstance[] = inst.parent.cfields;\n\n            fields.forEach((fld) => {if (fld.id == inst.id) fld.setPossibleValues(values, enforce);})\n            cfields.forEach((fld) => {if (fld.id == inst.id) fld.setPossibleValues(values, enforce);})\n\n            return(true);\n        }\n\n        return(false);\n    }\n\n\n    public setFields(fields:FieldInstance[])\n    {\n        this.fields$ = fields;\n\n        fields.forEach((inst) =>\n        {\n            let name:string = inst.name;\n\n            if (inst.id != null && inst.id.length > 0)\n                name += \".\"+inst.id;\n\n            this.fieldidx$.set(name,inst);\n        });\n    }\n\n\n    public setMasterDetail(md:MasterDetail) : void\n    {\n        this.masterdetail = md;\n    }\n\n\n    public setListOfValues(lovs:Map<string,LOVDefinition>) : void\n    {\n        this.lovs = lovs;\n    }\n\n\n    public setIdListOfValues(lovs:Map<string,LOVDefinition>) : void\n    {\n        this.idlovs = lovs;\n    }\n\n\n    public addListOfValues(form:boolean, func:ListOfValuesFunction, field:string, id?:string) : void\n    {\n        let utils:Utils = new Utils();\n\n        let lovdef:LOVDefinition = null;\n        let params:string[] = utils.getParams(func);\n\n        if (!form) lovdef = {inst: this.block, func: func.name, params: params};\n        else       lovdef = {inst: this.form.form, func: func.name, params: params};\n\n        if (id == null) this.lovs.set(field.toLowerCase(),lovdef);\n        else            this.idlovs.set(field.toLowerCase(),lovdef);\n    }\n\n\n    public removeListOfValues(field:string, id?:string) : void\n    {\n        if (id == null) this.lovs.delete(field.toLowerCase());\n        else this.idlovs.delete(field.toLowerCase()+\".\"+id.toLowerCase());\n    }\n\n\n    public get querymode() : boolean\n    {\n        return(this.state == FormState.entqry);\n    }\n\n\n    public focus(row?:number) : void\n    {\n        if (!this.navigable) return;\n\n        if (row != null && row >= 0 && row < this.rows)\n        {\n            if (this.records[+row]?.enabled)\n            {\n                this.row = row;\n                this.records[+row].current = true;\n            }\n        }\n\n        let rec:Record = this.records[+this.row];\n\n        if (this.field != null)\n        {\n            let field:Field = rec.getField(this.field.name);\n            let inst:FieldInstance = rec.getFieldByGuid(this.field.name,this.field.guid);\n\n            if (inst?.focus()) return;\n            if (field?.focus()) return;\n        }\n\n        for(let i = 0; i < this.fields$.length; i++)\n        {\n            if (this.fields$[i].row == this.row)\n                if (this.fields$[i].focus()) return;\n        }\n\n        rec?.focus();\n    }\n\n\n    public getValue(record:number, column:string) : any\n    {\n        if (this.state == FormState.entqry)\n        {\n            let field:Field = this.records[0].getField(column);\n            return(field?.value);\n        }\n\n        if (this.data == null) return(null);\n        return(this.data.getValue(+record,column));\n    }\n\n\n    public async setValue(record:number, column:string, value:any) : Promise<boolean>\n    {\n        if (this.data == null) return(false);\n\n        if (this.state == FormState.entqry)\n        {\n            let field:Field = this.records[0].getField(column);\n            if (field != null) field.value = value;\n            return(true);\n        }\n\n        let previous:any = this.data.getValue(+record,column);\n\n        if (!await this.lockrecord(record,column))\n            return(false);\n\n        if (!this.data.setValue(+record,column,value))\n            return(false);\n\n        this.data.setValidated(record,column);\n\n        let trgevent:FieldTriggerEvent = new FieldTriggerEvent(this.alias,column,null,+record,value,previous);\n        this.invokeFieldTriggers(Trigger.PostChange,column,trgevent);\n\n        if (+record >= +this.offset && +record < this.sum(this.offset,this.rows))\n        {\n            let field:Field = this.records[record-this.offset].getField(column);\n            if (field != null) field.value = value;\n        }\n\n        if (record == this.record && this.masterdetail != null && value != previous)\n            this.masterdetail.sync(this,column);\n    }\n\n\n    public get records() : Record[]\n    {\n        return(this.records$);\n    }\n\n\n    public getRecord(row:number) : Record\n    {\n        if (+row < +this.records$.length)\n            return(this.records$[+row]);\n\n        return(null);\n    }\n\n\n    public getField(row:number, name:string) : Field\n    {\n        return(this.records[+row]?.getField(name));\n    }\n\n\n    public addRecord(record:Record)\n    {\n        this.records.push(record);\n        record.fields.forEach((inst) => {inst.block = this});\n\n        if (this.records.length == 1)\n        {\n            record.current = true;\n            this.field$ = record.fields[0].getFirstInstance();\n        }\n    }\n\n\n    public set usage(usage:DatabaseUsage)\n    {\n        this.dbusage$ = usage;\n    }\n\n\n    public get usage() : DatabaseUsage\n    {\n        return(this.dbusage$);\n    }\n\n\n    public setApplication(app:ApplicationImpl) : void\n    {\n        this.app = app;\n    }\n\n\n    public async sendkey(event:any,key:keymap) : Promise<boolean>\n    {\n        if (event == null) event = new KeyTriggerEvent(Origin.Block,this.alias,null,key,null);\n        return(await this.onEvent(event,this.field,\"key\",key));\n    }\n\n\n    public get searchfilter() : NameValuePair[]\n    {\n        if (this.data == null) return(null);\n        return(this.data.searchfilter);\n    }\n\n\n    public set searchfilter(filter:NameValuePair[])\n    {\n        if (this.data != null)\n            this.data.searchfilter = filter;\n    }\n\n\n    public removeLocks() : void\n    {\n        if (this.data != null)\n            this.data.removeLocks();\n    }\n\n\n    public async execute(stmt:Statement, firstrow?:boolean, firstcolumn?:boolean) : Promise<any>\n    {\n        if (stmt == null) return(null);\n\n        let errors:string[] = stmt.validate();\n\n        if (errors.length > 0)\n        {\n            let msg:string = \"<table>\";\n            errors.forEach((err) => {msg += \"<tr><td>\"+err+\"</td></tr>\"});\n            msg += \"</table>\";\n\n            this.alert(msg,\"Execute\");\n            return(null);\n        }\n\n        let response:any = await this.app.appstate.connection.invokestmt(stmt);\n\n        if (response[\"status\"] == \"failed\")\n            this.alert(JSON.stringify(response),\"Execute SQL Failed\");\n\n        let rows:any[] = response[\"rows\"];\n\n        if (rows == null)\n        {\n            if (firstcolumn) return(null);\n            return([]);\n        }\n\n        if (!firstrow) return(rows);\n\n        let row:any = [];\n        if (rows.length > 0) row = rows[0];\n\n        if (!firstcolumn) return(row);\n\n        let columns:string[] = Object.keys(row);\n        if (columns.length == 0) return(null);\n\n        return(row[columns[0]]);\n    }\n\n\n    public showDatePicker(field:string, row?:number) : void\n    {\n        if (row == null || row == -1)\n            row = this.row;\n\n        let record:number = this.sum(this.offset,row);\n\n        if (record >= this.records.length)\n            return;\n\n        if (this.records[record].state == RecordState.na)\n            return;\n\n        if (this.records[record].state == RecordState.update && !this.usage.update)\n            return;\n\n        let fld:Field = this.records[+record].getField(field);\n\n        let value:Date = new Date();\n        if (fld != null) value = fld.value;\n\n        DatePicker.show(this.app,this,record,field,value);\n    }\n\n\n    public showListOfValues(field:string, id?:string, row?:number) : void\n    {\n        if (field == null)\n            return;\n\n        if (row == null || row == -1)\n            row = this.row;\n\n        if (!this.app.connected) return;\n        if (!this.records[+row].enabled) return;\n        if (this.records[+row].state == RecordState.na) return;\n\n        let ldef:LOVDefinition = null;\n        field = field.trim().toLowerCase();\n\n        if (this.idlovs != null && id != null && id.trim().length > 0)\n        {\n            id = id.trim().toLowerCase();\n            ldef = this.idlovs.get(field+\".\"+id);\n        }\n        else if (this.lovs != null)\n        {\n            ldef = this.lovs.get(field);\n        }\n\n        if (ldef != null)\n        {\n            let lov:ListOfValues = null;\n            let record:number = this.sum(row,this.offset);\n\n            if (ldef.params.length == 0) lov = ldef.inst[ldef.func]();\n            else                         lov = ldef.inst[ldef.func](record);\n\n            let blocks:BlockImpl[] = [this,new BlockImpl(),new BlockImpl()];\n\n            if (!lov.force && this.records[+row].getField(field)?.readonly)\n                return;\n\n            ListOfValuesImpl.show(this.app,blocks,lov);\n        }\n    }\n\n\n    private async keyinsert(after:boolean) : Promise<boolean>\n    {\n        if (this.data == null) return(false);\n        if (!this.usage.insert) return(false);\n\n        if (this.data.database && !this.app.connected)\n            return(false);\n\n        return(await this.insert(after));\n    }\n\n\n    private async keydelete() : Promise<boolean>\n    {\n        if (this.data == null) return(false);\n        if (this.row >= this.data.rows) return(true);\n        if (this.state == FormState.entqry) return(true);\n\n        let rec:Record = this.records[+this.row];\n        if (rec.state == RecordState.na) return(true);\n\n        if (this.data.database && !this.app.connected)\n            return(false);\n\n        if (!this.usage.delete && rec.state != RecordState.insert)\n            return(false);\n\n        return(await this.delete());\n    }\n\n\n    public async keyentqry(force?:boolean) : Promise<boolean>\n    {\n        if (force == null) force = false;\n\n        if (!force)\n        {\n            if (this.data == null) return(false);\n            if (!this.usage.query) return(false);\n\n            if (this.data.database && !this.app.connected)\n                return(false);\n        }\n\n        let event:KeyTriggerEvent = new KeyTriggerEvent(Origin.Block,this.alias,null,keymap.enterquery,null);\n        this.invokeTriggers(Trigger.Key,event,keymap.enterquery);\n\n        if (!await this.enterqry())\n            return(false);\n\n        if (this.masterdetail != null)\n            this.masterdetail.enterquery(this);\n\n        this.focus(0);\n        return(true);\n    }\n\n\n    public async keyexeqry(force?:boolean) : Promise<boolean>\n    {\n        if (this.masterdetail != null)\n        {\n            if (this.masterdetail.master != null && this.masterdetail.master != this)\n                return(this.masterdetail.master.keyexeqry(force));\n\n            if (this.state != FormState.entqry)\n                this.masterdetail.clearfilters(this);\n        }\n\n        if (force == null) force = false;\n\n        if (!force)\n        {\n            if (this.data == null || !this.usage.query)\n            {\n                if (this.masterdetail != null)\n                    this.masterdetail.master = null;\n\n                return(false);\n            }\n\n            if (this.data.database && !this.app.connected)\n            {\n                if (this.masterdetail != null)\n                    this.masterdetail.master = null;\n\n                return(false);\n            }\n        }\n\n        let subquery:SQL = null;\n\n        if (this.masterdetail != null)\n        {\n            subquery = await this.masterdetail.getDetailQuery();\n            this.masterdetail.querydetails(this,true,false);\n        }\n\n        let status = await this.executeqry(subquery);\n        this.focus(0);\n\n        return(status);\n    }\n\n\n    public cancelqry() : void\n    {\n        this.records[0].current = true;\n\n        this.records[0].clear();\n        this.records[0].disable();\n\n        this.state = FormState.normal;\n        this.records[0].state = RecordState.na;\n\n        this.records[0].enable(true);\n    }\n\n\n    public async enterqry() : Promise<boolean>\n    {\n        if (this.data.database && !this.app.connected)\n            return(false);\n\n        if (!await this.validate())\n            return(false);\n\n        await this.clear();\n\n        this.row = 0;\n\n        this.searchfilter = [];\n        this.state = FormState.entqry;\n        this.records[0].state = RecordState.qmode;\n\n        this.records[0].enable(false);\n        return(true);\n    }\n\n\n    public get querying() : boolean\n    {\n        return(this.querying$);\n    }\n\n\n    // Public because of master-detail. Dont call direct\n    public async executeqry(subquery?:SQL) : Promise<boolean>\n    {\n        if (this.data.database && !this.app.connected)\n            return(false);\n\n        if (!await this.validate())\n            return(false);\n\n        let keys:Key[] = [];\n        let fields:Field[] = [];\n\n        if (this.querying$)\n        {\n            if (this.masterdetail != null)\n                this.masterdetail.done(this,false);\n\n            return(false);\n        }\n\n        this.querying$ = true;\n\n        if (this.state == FormState.entqry)\n        {\n            fields = this.records[0].fields;\n            this.records[0].disable();\n        }\n\n        if (this.masterdetail != null)\n            keys = this.masterdetail.getKeys(this);\n\n        let stmt:Statement = this.data.parseQuery(keys,subquery,fields);\n        this.lastqry = this.searchfilter;\n\n        await this.clear();\n        let errors:string[] = stmt.validate();\n\n        if (errors.length > 0)\n        {\n            let msg:string = \"<table>\";\n            errors.forEach((err) => {msg += \"<tr><td>\"+err+\"</td></tr>\"});\n            msg += \"</table>\";\n\n            this.alert(msg,\"Query Condition\");\n\n            this.querying$ = false;\n\n            if (this.masterdetail != null)\n                this.masterdetail.done(this,false);\n\n            return(false);\n        }\n\n        let event:SQLTriggerEvent = new SQLTriggerEvent(this.alias,0,stmt);\n        if (!await this.invokeTriggers(Trigger.PreQuery,event))\n        {\n            this.querying$ = false;\n\n            if (this.masterdetail != null)\n                this.masterdetail.done(this,false);\n\n            return(false);\n        }\n\n        this.state = FormState.exeqry;\n\n        stmt = event.stmt; // could be replaced by trigger\n        let response:any = await this.data.executequery(stmt);\n\n        if (response[\"status\"] == \"failed\")\n        {\n            this.alert(JSON.stringify(response),\"Database Query\");\n\n            this.querying$ = false;\n\n            if (this.masterdetail != null)\n                this.masterdetail.done(this,false);\n\n            this.state = FormState.normal;\n            return(false);\n        }\n\n        if (this.masterdetail != null)\n            this.masterdetail.querydetails(this,false,true);\n\n        this.row = 0;\n        await this.display(0);\n\n        this.querying$ = false;\n        this.state = FormState.normal;\n        this.records[0].current = true;\n\n        if (this.masterdetail != null)\n            this.masterdetail.done(this,true);\n\n        return(true);\n    }\n\n\n    public async createControlRecord() : Promise<number>\n    {\n        if (!this.data.database)\n        {\n            if (!this.data.insert(this.sum(this.row,this.offset,1)))\n                return(-1);\n\n            this.records[+this.row].state = RecordState.update;\n            this.records[+this.row].enable(false);\n            return(this.record);\n        }\n\n        return(-1);\n    }\n\n\n    public async insert(after:boolean) : Promise<boolean>\n    {\n        if (this.data.database && !this.app.connected)\n            return(false);\n\n        if (!await this.validate())\n            return(false);\n\n        let off:number = after ? 1 : 0;\n\n        if (!this.data.insert(this.sum(this.row,this.offset,off)))\n            return(false);\n\n        if (this.masterdetail != null)\n            this.masterdetail.cleardetails(this);\n\n        // Is first row\n        if (this.data.rows == 1)\n        {\n            await this.display(this.offset);\n\n            if (this.form == null) this.disableall();\n            else                   this.form.disableall();\n\n            this.records[0].enable(false);\n\n            this.focus(0);\n            return(true);\n        }\n\n        let scroll:number = 0;\n        let row:number = this.row;\n\n        if (after && this.row == this.rows - 1)\n            scroll = 1;\n\n        if (!after && this.row == 0)\n            scroll = -1;\n\n        let move:number = 0;\n        if (scroll == 0) move = after ? 1 : 0;\n\n        await this.display(this.sum(this.offset,scroll));\n\n        row = this.sum(row,move);\n        let rec:Record = this.records[+row];\n\n        rec.current = true;\n\n        if (this.form == null) this.disableall();\n        else                   this.form.disableall();\n\n        this.records[+row].enable(false);\n\n        this.focus(row);\n        return(true);\n    }\n\n\n    public async delete() : Promise<boolean>\n    {\n        if (this.data == null) return(false);\n\n        if (this.data.database && !this.app.connected)\n            return(false);\n\n        let record:number = this.sum(this.row,this.offset);\n\n        // Lock the record\n        if (!this.data.locked(record))\n        {\n            let response:any = await this.data.lock(record);\n\n            if (response[\"status\"] == \"failed\")\n            {\n                this.alert(response[\"message\"],\"Lock Failure\")\n                return(false);\n            }\n        }\n\n        let response:any = await this.data.delete(this.sum(this.row,this.offset));\n\n        if (response[\"status\"] == \"failed\")\n        {\n            this.alert(JSON.stringify(response),\"Delete Failed\")\n            return(false);\n        }\n\n        if (this.masterdetail != null)\n            this.masterdetail.cleardetails(this);\n\n        // current view is not full\n        if (+this.data.rows - this.offset < this.rows)\n        {\n            this.offset--;\n            if (this.offset < 0) this.offset = 0;\n        }\n\n        let row:number = this.row;\n        await this.display(this.offset);\n\n        // no records at current position\n        if (this.sum(row,this.offset) >= this.data.rows)\n            row = this.data.rows - this.offset - 1;\n\n        if (row < 0) this.row = 0;\n\n        this.focus(row);\n\n        if (this.masterdetail != null)\n            this.masterdetail.querydetails(this,true,true);\n    }\n\n\n    private async lockrecord(record:number, field:string) : Promise<boolean>\n    {\n        if (this.data == null) return(true);\n        if (this.state != FormState.normal) return(true);\n        if (!this.data.databasecolumn(field)) return(true);\n\n        if (this.data.locked(record))\n            return(true);\n\n        let trgevent:TriggerEvent = new TriggerEvent(this.alias,record,null);\n\n        if (!await this.invokeTriggers(Trigger.Lock,trgevent))\n            return(false);\n\n        let response:any = await this.data.lock(record);\n\n        if (response[\"status\"] == \"failed\")\n        {\n            let row:number = +record - +this.offset;\n            this.alert(response[\"message\"],\"Lock Failure\")\n            let value:any = this.getValue(record,field);\n            let ffield:Field = this.records[+row].getField(field);\n            if (ffield != null) ffield.value = value;\n            return(false);\n        }\n\n        return(true);\n    }\n\n\n    public async validate() : Promise<boolean>\n    {\n        if (!await this.validatefield(this.field))\n            return(false);\n\n        return(await this.validaterecord());\n    }\n\n\n    private async validatefield(field:FieldInstance) : Promise<boolean>\n    {\n        if (field == null) return(true);\n        if (this.data == null) return(true);\n        if (this.row >= this.data.rows) return(true);\n        if (this.state != FormState.normal) return(true);\n        if (this.records[+this.row].state == RecordState.na) return(true);\n\n        let previous:any = this.data.getValue(this.sum(field.row,this.offset),field.name);\n\n        // Nothing has changed\n        if (field.value == previous) return(this.data.getValidated(this.sum(field.row,this.offset),field.name));\n\n        if (!await this.lockrecord(this.sum(field.row,this.offset),field.name))\n            return(true);\n\n        if (!field.validate())\n        {\n            field.valid = false;\n            this.data.setValue(this.sum(field.row,this.offset),field.name,field.value);\n            return(false);\n        }\n\n        this.data.setValue(+field.row+this.offset,field.name,field.value);\n\n        let trgevent:FieldTriggerEvent = new FieldTriggerEvent(this.alias,field.name,field.id,this.sum(field.row,this.offset),field.value,previous,null);\n        if (!await this.invokeFieldTriggers(Trigger.WhenValidateField,field.name,trgevent))\n        {\n            field.valid = false;\n            return(false);\n        }\n\n        field.parent.valid = true;\n        this.data.setValidated(this.sum(field.row,this.offset),field.name);\n\n        if  (field.value != previous)\n        {\n            if (this.sum(field.row,this.offset) == this.record && this.masterdetail != null)\n                this.masterdetail.sync(this,field.name);\n\n            if (!await this.invokeFieldTriggers(Trigger.PostChange,field.name,trgevent))\n                return(false);\n\n            if (this.records[+this.row].state == RecordState.insert)\n            {\n                if (this.data.validated(this.record,true))\n                    this.validaterecord();\n            }\n        }\n\n        return(true);\n    }\n\n\n    private async validaterecord() : Promise<boolean>\n    {\n        if (this.data == null) return(true);\n        if (this.row >= this.data.rows) return(true);\n        if (this.state == FormState.entqry) return(true);\n\n        let rec:Record = this.records[+this.row];\n        if (rec.state == RecordState.na) return(true);\n\n        // Check fields is validated\n        if (!this.data.validated(this.record,true))\n        {\n            let cols:string[] = this.data.getNonValidated(this.record);\n            this.alert(\"The following columns are not valid:<br><br>\"+cols,\"Validate Record\");\n\n            cols.forEach((col) =>\n            {this.records[+this.record].getField(col).valid = false;});\n\n            return(false);\n        }\n\n        // Check record is validated\n        if (this.data.validated(this.record,false)) return(true);\n\n        let trgevent:TriggerEvent = new TriggerEvent(this.alias,this.record,null);\n\n        if (!await this.invokeTriggers(Trigger.WhenValidateRecord,trgevent))\n            return(false);\n\n        let insert:boolean = (rec.state == RecordState.insert);\n        let response:any = await this.data.setValidated(this.record);\n\n        if (response[\"status\"] == \"failed\")\n        {\n            let title:string = insert ? \"Insert\" : \"Update\";\n            this.alert(JSON.stringify(response),title+\" Failed\");\n            return(false);\n        }\n\n        if (insert)\n        {\n            if (this.form == null) this.enableall();\n            else                   this.form.enableall();\n        }\n\n        return(true);\n    }\n\n\n    public async clearblock()\n    {\n        await this.clear();\n\n        this.focus(0);\n        this.searchfilter = [];\n        if (this.data) this.data.clear();\n    }\n\n\n    public async clear()\n    {\n        if (this.rows == null) return;\n\n        this.field$ = this.fields$[0];\n\n        for(let r = 0; r < this.rows; r++)\n        {\n            this.records[+r].clear();\n            this.records[+r].disable();\n            this.records[+r].state = RecordState.na;\n        }\n\n        this.records[0].current = true;\n        this.records[0].state = RecordState.na;\n        if (!this.disabled$) this.records[0].enable(true);\n    }\n\n\n    public async disableall()\n    {\n        this.disabled$ = true;\n        for(let r = 0; r < this.rows; r++)\n            this.records[+r].disable();\n    }\n\n\n    public async enableall()\n    {\n        this.disabled$ = false;\n        for(let r = 0; r < this.rows; r++)\n        {\n            if (this.records[+r].state != RecordState.na)\n                this.records[+r].enable(false);\n        }\n    }\n\n\n    public async display(start:number) : Promise<void>\n    {\n        await this.clear();\n\n        this.offset = start;\n        if (this.data == null) return;\n\n        if (this.sum(this.offset,this.rows) > +this.data.rows)\n            this.offset = this.data.rows - this.rows;\n\n        if (this.offset < 0) this.offset = 0;\n\n        let columns:string[] = this.data.fields;\n        let rows:any[][] = this.data.get(this.offset,this.rows);\n\n        for(let r = 0; r < rows.length; r++)\n        {\n            let rec:Record = this.getRecord(r);\n            let state:RecordState = this.data.state(this.sum(this.offset,r));\n\n            for(let c = 0; c < rows[r].length; c++)\n            {\n                let field:Field = rec.getField(columns[c]);\n                if (field != null) field.value = rows[r][c];\n            }\n\n            if (state == RecordState.na)\n            {\n                let execs:Promise<boolean>[] = [];\n\n                for(let c = 0; c < rows[r].length; c++)\n                {\n                    let field:Field = rec.getField(columns[c]);\n\n                    let value:any = rows[r][c];\n                    let fname:string = columns[c];\n                    if (field != null) fname = field.name;\n\n                    let trgevent:FieldTriggerEvent = new FieldTriggerEvent(this.alias,fname,null,this.sum(r,this.offset),value,value);\n                    execs.push(this.invokeFieldTriggers(Trigger.PostChange,fname,trgevent));\n                }\n\n                execs.push(this.invokeTriggers(Trigger.PostChange, new TriggerEvent(this.alias,this.sum(r,this.offset))));\n                state = this.data.state(this.sum(this.offset,r),RecordState.update);\n\n                for (let i = 0; i < execs.length; i++) await execs[i];\n            }\n\n            rec.state = state;\n            if (!this.disabled$) rec.enable(false);\n        }\n    }\n\n\n    public addTrigger(instance:any, func:TriggerFunction, types:Trigger|Trigger[]) : void\n    {\n        this.triggers.addTrigger(instance,func,types)\n    }\n\n\n    public addKeyTrigger(instance:any, func:TriggerFunction, keys:keymap|keymap[]) : void\n    {\n        this.triggers.addTrigger(instance,func,Trigger.Key,null,keys)\n    }\n\n\n    public addFieldTrigger(instance:any, func:TriggerFunction, types:Trigger|Trigger[], fields:string|string[], keys?:keymap|keymap[]) : void\n    {\n        this.triggers.addTrigger(instance,func,types,fields,keys)\n    }\n\n\n    public async onEvent(event:any, field:FieldInstance, type:string, key?:keymap) : Promise<boolean>\n    {\n        let trgevent:TriggerEvent = null;\n        if (event == null) event = {type: type};\n        if (this.records.length == 0) return(true);\n\n        if (type == \"focus\")\n        {\n            this.field$ = field;\n\n            if (this.form != null)\n                this.form.block = this;\n\n            if (this.state == FormState.entqry)\n                return(true);\n\n            if (this.row != field.row)\n            {\n                if (!await this.validate())\n                {\n                    this.records[+this.row].current = true;\n                    this.field.focus();\n                    return(false);\n                }\n\n                let state:RecordState = this.records[field.row].state\n\n                if (this.masterdetail != null && state != RecordState.na)\n                    this.masterdetail.querydetails(this,true,true);\n            }\n\n            this.row = field.row;\n            this.records$[+field.row].current = true;\n\n            trgevent = new FieldTriggerEvent(this.alias,field.name,field.id,this.sum(field.row,this.offset),field.value,field.value,event);\n            return(await this.invokeFieldTriggers(Trigger.PreField,field.name,trgevent));\n        }\n\n        if (type == \"blur\")\n        {\n            if (this.state == FormState.entqry)\n                return(true);\n\n            trgevent = new FieldTriggerEvent(this.alias,field.name,field.id,this.sum(field.row,this.offset),field.value,field.value,event);\n            return(await this.invokeFieldTriggers(Trigger.PostField,field.name,trgevent));\n        }\n\n        if (type == \"fchange\")\n        {\n            if (this.state == FormState.entqry || this.data == null)\n                return(true);\n\n            return(await this.lockrecord(this.sum(field.row,this.offset),field.name));\n        }\n\n        if (type == \"cchange\")\n        {\n            if (this.state == FormState.entqry)\n                return(true);\n\n            let previous:any = this.getValue(this.sum(field.row,this.offset),field.name);\n            trgevent = new FieldTriggerEvent(this.alias,field.name,field.id,this.sum(field.row,this.offset),field.value,previous,event);\n\n            return(this.invokeFieldTriggers(Trigger.Typing,field.name,trgevent));\n        }\n\n        if (type == \"change\")\n        {\n            // Current row field firing after move\n            if (field.row != this.row) return(true);\n\n            // This will fire appropiate triggers\n            if (!await this.validatefield(field))\n            {\n                this.field.focus();\n                return(false);\n            }\n\n            return(true);\n        }\n\n        // Enter\n        if (type == \"key\" && key == keymap.enter)\n        {\n            if (this.state == FormState.entqry)\n                key = keymap.executequery;\n\n            if (this.records[+this.row]?.state == RecordState.insert)\n            {\n                if (!await this.validaterecord())\n                    return(false);\n            }\n\n            if (this.records[+this.row]?.state == RecordState.update)\n            {\n                if (!await this.validaterecord())\n                    return(false);\n            }\n        }\n\n        // Cancel\n        if (type == \"key\" && key == keymap.escape)\n        {\n            if (this.state == FormState.entqry)\n            {\n                this.cancelqry();\n                this.focus();\n            }\n\n            if (this.records[+this.row]?.state == RecordState.insert)\n            {\n                this.enableall();\n                key = keymap.delete;\n            }\n        }\n\n        // ListOfValues / Datepicker\n        if (type == \"key\" && key == keymap.listval)\n        {\n            if (event != null && event[\"preventDefault\"] != null)\n                event.preventDefault();\n\n            let type:FieldType = field.definition.type;\n            if (type == FieldType.date || type == FieldType.datetime)\n            {\n                if (!field.readonly)\n                    DatePicker.show(this.app,this,this.record,field.name,field.value);\n\n                return(true);\n            }\n\n            this.showListOfValues(field.name,field.id,this.row);\n            return(true);\n        }\n\n        // Enter query\n        if (type == \"key\" && key == keymap.enterquery)\n        {\n            if (this.state == FormState.entqry)\n            {\n                for (let i = 0; i < this.lastqry.length; i++)\n                {\n                    let nvp:NameValuePair = this.lastqry[i];\n                    await this.setValue(0,nvp.name,nvp.value);\n                }\n\n                return(true);\n            }\n\n            if (!await this.validate()) return(false);\n\n            if (!await this.keyentqry())\n            {\n                field.focus();\n                return(false);\n            }\n\n            trgevent = new KeyTriggerEvent(Origin.Block,this.alias,field,key,event);\n\n            return(await this.invokeTriggers(Trigger.Key,trgevent,key));\n        }\n\n        // Execute query\n        if (type == \"key\" && key == keymap.executequery)\n        {\n            if (!await this.validate()) return(false);\n            trgevent = new KeyTriggerEvent(Origin.Block,this.alias,field,key,event);\n\n            if (!await this.invokeTriggers(Trigger.Key,trgevent,key))\n                return(true);\n\n            return(await this.keyexeqry());\n        }\n\n        // Delete\n        if (type == \"key\" && key == keymap.delete)\n        {\n            if (event != null && event[\"preventDefault\"] != null)\n                event.preventDefault();\n\n            trgevent = new KeyTriggerEvent(Origin.Block,this.alias,field,key,event);\n\n            if (this.records[+this.row]?.state == RecordState.update)\n            {\n                if (!await this.invokeTriggers(Trigger.Key,trgevent,key))\n                    return(false);\n            }\n\n            return(await this.keydelete());\n        }\n\n        // Insert after\n        if (type == \"key\" && key == keymap.insertafter)\n        {\n            if (!await this.validate()) return(false);\n\n            trgevent = new KeyTriggerEvent(Origin.Block,this.alias,field,key,event);\n\n            if (!await this.invokeTriggers(Trigger.Key,trgevent,key))\n                return(true);\n\n            if (!await this.keyinsert(true))\n            {\n                field.focus();\n                return(false);\n            }\n\n            return(true);\n        }\n\n        // Insert before\n        if (type == \"key\" && key == keymap.insertbefore)\n        {\n            if (!await this.validate()) return(false);\n\n            trgevent = new KeyTriggerEvent(Origin.Block,this.alias,field,key,event);\n\n            if (!await this.invokeTriggers(Trigger.Key,trgevent,key))\n                return(true);\n\n            if (!await this.keyinsert(false))\n            {\n                field.focus();\n                return(false);\n            }\n\n            return(true);\n        }\n\n        // Next/Previous field\n        if (type == \"key\" && (key == keymap.nextfield || key == keymap.prevfield))\n        {\n            if (this.state != FormState.entqry && this.records[+this.row]?.state != RecordState.na)\n            {\n                let previous:any = this.data.getValue(this.sum(field.row,this.offset),field.name)\n\n                if (field.dirty)\n                {\n                    // ctrl-z doesn't refresh\n                    if (field.value == previous) field.parent.copy(field);\n                }\n\n                trgevent = new FieldTriggerEvent(this.alias,field.name,field.id,this.sum(field.row,this.offset),field.value,previous,event);\n\n                if (key == keymap.prevfield)\n                {\n                    if (!await this.invokeFieldTriggers(Trigger.KeyPrevField,field.name,trgevent,key))\n                        return(false);\n                }\n\n                if (key == keymap.nextfield)\n                {\n                    if (!await this.invokeFieldTriggers(Trigger.KeyNextField,field.name,trgevent,key))\n                        return(false);\n                }\n            }\n        }\n\n        // Next record\n        if (type == \"key\" && key == keymap.nextrecord)\n        {\n            if (!await this.validate())\n                return(false);\n\n            trgevent = new KeyTriggerEvent(Origin.Block,this.alias,field,key,event);\n\n            if (!await this.invokeTriggers(Trigger.Key,trgevent,key))\n                return(true);\n\n            let row:number = this.sum(field.row,1);\n            if (this.data == null) return(false);\n\n            if (+row >= +this.rows)\n            {\n                row = +this.rows - 1;\n                if (this.data == null) return(false);\n\n                let offset:number = this.sum(field.row,this.offset);\n                let fetched:number = await this.data.fetch(offset,1);\n\n                if (fetched == 0) return(false);\n                await this.display(this.sum(this.offset,1));\n            }\n\n            if (this.records[+row]?.enabled)\n            {\n                this.focus(row);\n\n                if (this.masterdetail != null)\n                    this.masterdetail.querydetails(this,true,true);\n            }\n\n            return(true);\n        }\n\n        // Previous record\n        if (type == \"key\" && key == keymap.prevrecord)\n        {\n            if (this.record == 0)\n                return(true);\n\n            if (!await this.validate())\n                return(false);\n\n            trgevent = new KeyTriggerEvent(Origin.Block,this.alias,field,key,event);\n\n            if (!await this.invokeTriggers(Trigger.Key,trgevent,key))\n                return(true);\n\n            let row:number = +field.row - 1;\n            if (this.data == null) return(false);\n\n            if (+row < 0)\n            {\n                row = 0;\n                await this.display(this.offset - 1);\n            }\n\n            this.focus(row);\n\n            if (this.masterdetail != null)\n                this.masterdetail.querydetails(this,true,true);\n\n            return(true);\n        }\n\n        // Page down\n        if (type == \"key\" && key == keymap.pagedown)\n        {\n            if (!await this.validate())\n                return(false);\n\n            trgevent = new KeyTriggerEvent(Origin.Block,this.alias,field,key,event);\n\n            if (!await this.invokeTriggers(Trigger.Key,trgevent,key))\n                return(true);\n\n            let offset:number = this.sum(this.offset,field.row);\n            let fetched:number = await this.data.fetch(offset,this.rows);\n\n            if (fetched == 0) return(false);\n\n            await this.display(this.sum(this.offset,this.rows));\n            this.focus();\n\n            if (this.masterdetail != null)\n                this.masterdetail.querydetails(this,true,true);\n\n            return(true);\n        }\n\n        // Page up\n        if (type == \"key\" && key == keymap.pageup)\n        {\n            if (this.record == 0)\n                return(true);\n\n            if (!await this.validate())\n                return(false);\n\n            trgevent = new KeyTriggerEvent(Origin.Block,this.alias,field,key,event);\n\n            if (!await this.invokeTriggers(Trigger.Key,trgevent,key))\n                return(true);\n\n            await this.display(+this.offset-this.rows);\n            this.focus();\n\n            if (this.masterdetail != null)\n                this.masterdetail.querydetails(this,true,true);\n\n            return(true);\n        }\n\n        // Next/Prev block\n        if (type == \"key\" && (key == keymap.prevblock || key == keymap.nextblock))\n        {\n            if (this.state != FormState.entqry && this.records[+this.row]?.state != RecordState.na)\n            {\n                if (!await this.validate())\n                    return(false);\n\n                trgevent = new FieldTriggerEvent(this.alias,field.name,field.id,this.sum(field.row,this.offset),field.value,null,event);\n\n                if (key == keymap.prevblock)\n                {\n                    if (!await this.invokeFieldTriggers(Trigger.KeyPrevBlock,field.name,trgevent,key))\n                        return(false);\n                }\n\n                if (key == keymap.nextblock)\n                {\n                    if (!await this.invokeFieldTriggers(Trigger.KeyNextBlock,field.name,trgevent,key))\n                        return(false);\n                }\n            }\n        }\n\n        if (type == \"key\" && key == keymap.clearblock)\n        {\n            trgevent = new KeyTriggerEvent(Origin.Block,this.alias,null,keymap.clearblock,null);\n            if (!await this.invokeTriggers(Trigger.Key,event,keymap.clearblock)) return(false);\n            this.clearblock();\n        }\n\n        if (type == \"key\" && key == keymap.clearform && this.form != null)\n            await this.form.onEvent(event,field,type,key);\n\n        if (type == \"key\" && key == keymap.prevfield && this.form != null)\n            await this.form.onEvent(event,field,type,key);\n\n        if (type == \"key\" && key == keymap.nextfield && this.form != null)\n            await this.form.onEvent(event,field,type,key);\n\n        if (type == \"key\" && key == keymap.prevblock && this.form != null)\n            await this.form.onEvent(event,field,type,key);\n\n        if (type == \"key\" && key == keymap.nextblock && this.form != null)\n            await this.form.onEvent(event,field,type,key);\n\n        if (type == \"key\")\n        {\n            if (event != null && event[\"preventDefault\"] != null)\n                event.preventDefault();\n\n            trgevent = new KeyTriggerEvent(Origin.Block,this.alias,field,key,event);\n            return(await this.invokeTriggers(Trigger.Key,trgevent,key));\n        }\n\n        if (type == \"click\")\n        {\n            trgevent = new FieldTriggerEvent(this.alias,field.name,field.id,this.sum(field.row,this.offset),field.value,field.value,event);\n            return(await this.invokeFieldTriggers(Trigger.MouseClick,field.name,trgevent,key));\n        }\n\n        if (type == \"dblclick\")\n        {\n            trgevent = new FieldTriggerEvent(this.alias,field.name,field.id,this.sum(field.row,this.offset),field.value,field.value,event);\n            return(await this.invokeFieldTriggers(Trigger.MouseDoubleClick,field.name,trgevent,key));\n        }\n\n        return(true);\n    }\n\n\n    public async invokeTriggers(type:Trigger, event:TriggerEvent, key?:keymap) : Promise<boolean>\n    {\n        if (this.form != null) if (!await this.form.invokeTriggers(type,event,key)) return(false);\n        return(await this.triggers.invokeTriggers(type,event,key));\n    }\n\n\n    public async invokeFieldTriggers(type:Trigger, field:string, event:TriggerEvent, key?:keymap) : Promise<boolean>\n    {\n        if (this.form != null) if (!await this.form.invokeFieldTriggers(type,field,event,key)) return(false);\n        return(await this.triggers.invokeFieldTriggers(type,field,event,key));\n    }\n\n\n    public sleep(ms:number) : Promise<void>\n    {\n        return(new Promise(resolve => setTimeout(resolve,ms)));\n    }\n\n\n    public alert(msg:string, title?:string, width?:string, height?:string) : void\n    {\n        if (title == null) title = this.alias;\n        MessageBox.show(this.app,msg,title,width,height);\n    }\n\n\n    private sum(n1:number,n2:number, n3?:number) : number\n    {\n        let s:number = +n1 + +n2;\n        if (n3 != null) s = +s + +n3;\n        return(s);\n    }\n}","import { Form } from \"../forms/Form\";\nimport { RecordState } from \"./Record\";\nimport { BlockImpl } from \"./BlockImpl\";\nimport { keymap } from \"../keymap/KeyMap\";\nimport { Trigger } from \"../events/Triggers\";\nimport { Statement } from \"../database/Statement\";\nimport { NameValuePair } from \"../utils/NameValuePair\";\nimport { FieldDefinition } from \"../input/FieldDefinition\";\nimport { TriggerFunction } from \"../events/TriggerFunction\";\nimport { TableDefinition } from \"../database/TableDefinition\";\nimport { ListOfValuesFunction } from \"../listval/ListOfValuesFunction\";\n\n\nexport class Block\n{\n    private _impl_:BlockImpl;\n    // dont rename impl as it is read behind the scenes\n\n    constructor()\n    {\n        this._impl_ = new BlockImpl(this);\n    }\n\n    public get form(): Form\n    {\n        return(this._impl_.form.form);\n    }\n\n    public get table() : TableDefinition\n    {\n        return(this._impl_.table);\n    }\n\n    public get connected() : boolean\n    {\n        return(this.form.connected);\n    }\n\n    public getValue(record:number, field:string) : any\n    {\n        return(this._impl_.getValue(record,field));\n    }\n\n    public async setValue(record:number, field:string, value:any) : Promise<boolean>\n    {\n        return(await this._impl_.setValue(record,field,value));\n    }\n\n    public get querymode() : boolean\n    {\n        return(this._impl_.querymode);\n    }\n\n    public empty() : boolean\n    {\n        return(this._impl_.getRecord(0).state == RecordState.na);\n    }\n\n    public cancel() : void\n    {\n        this._impl_.sendkey(null,keymap.escape);\n    }\n\n    public goField(field:string, row?:number) : void\n    {\n        if (row == null) row = this._impl_.row;\n        this._impl_.getField(row,field).focus();\n    }\n\n    public get ready() : boolean\n    {\n        return(this._impl_.ready)\n    }\n\n    public get searchfilter() : NameValuePair[]\n    {\n        return(this._impl_.searchfilter);\n    }\n\n    public set searchfilter(filter:NameValuePair[])\n    {\n        this._impl_.searchfilter = filter;\n    }\n\n    public async sendKey(key:keymap) : Promise<boolean>\n    {\n        return(await this._impl_.sendkey(null,key));\n    }\n\n    public async enterquery(override?:boolean) : Promise<boolean>\n    {\n        return(this._impl_.keyentqry(override));\n    }\n\n    public async executequery(override?:boolean) :  Promise<boolean>\n    {\n        return(this._impl_.keyexeqry(override));\n    }\n\n    public nextrecord() : void\n    {\n        this._impl_.sendkey(null,keymap.nextrecord);\n    }\n\n    public prevrecord() : void\n    {\n        this._impl_.sendkey(null,keymap.prevrecord);\n    }\n\n    public nextblock() : void\n    {\n        this._impl_.sendkey(null,keymap.nextblock);\n    }\n\n    public prevblock() : void\n    {\n        this._impl_.sendkey(null,keymap.prevblock);\n    }\n\n    public pageup() : void\n    {\n        this._impl_.sendkey(null,keymap.pageup);\n    }\n\n    public pagedown() : void\n    {\n        this._impl_.sendkey(null,keymap.pagedown);\n    }\n\n    public get row() : number\n    {\n        return(this._impl_.row);\n    }\n\n    public get record() : number\n    {\n        return(this._impl_.record);\n    }\n\n    public async createControlRecord() : Promise<number>\n    {\n        return(this._impl_.createControlRecord());\n    }\n\n    public async delete(override?:boolean) : Promise<boolean>\n    {\n        if (override) return(this._impl_.delete());\n        else return(this._impl_.sendkey(null,keymap.delete));\n    }\n\n    public setFieldDefinition(def:FieldDefinition) : boolean\n    {\n        return(this._impl_.setFieldDefinition(def));\n    }\n\n    public setPossibleValues(field:string, values:Set<any>|Map<string,any>, enforce?:boolean) : boolean\n    {\n        return(this._impl_.setPossibleValues(field,values,enforce));\n    }\n\n    public showDatePicker(field:string, row?:number) : void\n    {\n        this._impl_.showDatePicker(field,row);\n    }\n\n    public showListOfValues(field:string, id?:string, row?:number) : void\n    {\n        this._impl_.showListOfValues(field,id,row);\n    }\n\n    public async insert(above?:boolean, override?:boolean) : Promise<boolean>\n    {\n        if (above == null) above = false;\n        if (override) return(this._impl_.insert(!above));\n        else\n        {\n            if (!above) return(this._impl_.sendkey(null,keymap.insertafter));\n            else        return(this._impl_.sendkey(null,keymap.insertbefore));\n        }\n    }\n\n    public async execute(stmt:Statement, firstrow?:boolean, firstcolumn?:boolean) : Promise<any>\n    {\n        return(this._impl_.execute(stmt,firstrow,firstcolumn));\n    }\n\n\n    public addListOfValues(func:ListOfValuesFunction, field:string, id?:string) :  void\n    {\n        this._impl_.addListOfValues(false,func,field,id);\n    }\n\n\n    public addTrigger(listener:TriggerFunction, types:Trigger|Trigger[]) : void\n    {\n        this._impl_.addTrigger(this,listener,types);\n    }\n\n    public addKeyTrigger(listener:TriggerFunction, keys:keymap|keymap[]) : void\n    {\n        this._impl_.addKeyTrigger(this,listener,keys);\n    }\n\n    public addFieldTrigger(listener:TriggerFunction, types:Trigger|Trigger[], fields?:string|string[]) : void\n    {\n        this._impl_.addFieldTrigger(this,listener,types,fields);\n    }\n\n    public alert(message:string, title?:string, width?:string, height?:string) : void\n    {\n        this._impl_.alert(message,title,width,height);\n    }\n}","import { BlockImpl } from \"../blocks/BlockImpl\";\nimport { dependencies, MasterDetail } from \"./MasterDetail\";\n\n\nexport class MasterDetailQuery\n{\n    private root$:BlockImpl;\n    private finished:number = 0;\n    private detailblks:Map<string,number> = new Map<string,number>();\n    private masterblks:Map<string,boolean> = new Map<string,boolean>();\n\n\n    constructor(private md:MasterDetail, private links:Map<string,dependencies>, block:BlockImpl, col?:string)\n    {\n        this.root$ = block;\n        this.findblocks(block.alias,col);\n    }\n\n\n    public get root() : BlockImpl\n    {\n        return(this.root$);\n    }\n\n\n    private findblocks(block:string, col:string) : void\n    {\n        let dep:dependencies = this.links.get(block);\n\n        if (this.details(dep))\n        {\n            this.masterblks.set(block,false);\n\n            dep.details.forEach((det) =>\n            {\n                if (col == null || det.mkey.partof(col))\n                {\n                    this.findblocks(det.block.alias,null);\n                    this.detailblks.set(det.block.alias,0);\n                }\n            });\n        }\n    }\n\n\n    public waitfor(block:BlockImpl) : void\n    {\n        this.detailblks.set(block.alias,1);\n    }\n\n\n    public ready(block:BlockImpl) : void\n    {\n        this.masterblks.set(block.alias,true);\n        let dep:dependencies = this.links.get(block.alias);\n\n        if (this.detailblks.size == 0)\n        {\n            this.md.finished();\n            return;\n        }\n\n        if (this.details(dep)) this.execute(dep);\n        else                   this.state(block,2);\n    }\n\n\n    public done(block:BlockImpl) : void\n    {\n        this.finished++;\n        this.state(block,3);\n\n        if (this.finished == this.detailblks.size)\n            this.md.finished();\n    }\n\n\n    public failed(block:BlockImpl) : void\n    {\n        this.remove(block);\n\n        if (this.finished == this.detailblks.size)\n            this.md.finished();\n    }\n\n\n    private remove(block:BlockImpl) : void\n    {\n        if (this.detailblks.get(block.alias) < 2)\n        {\n            this.detailblks.delete(block.alias);\n            let dep:dependencies = this.links.get(block.alias);\n\n            if (dep != null && dep.details != null)\n            {\n                dep.details.forEach((det) =>\n                {this.remove(det.block);});\n            }\n        }\n        else\n        {\n            this.finished++;\n            this.state(block,3);\n        }\n    }\n\n\n    public status(state:string)\n    {\n        console.log(state+\" finished: \"+this.finished+\" \"+this.detailblks.size);\n        this.detailblks.forEach((state,blk) => {console.log(blk+\" \"+state)})\n    }\n\n\n    private async execute(dep:dependencies)\n    {\n        if (dep.details != null)\n        {\n            for (let i = 0; i < dep.details.length; i++)\n            {\n                if (this.isready(dep.details[i].block))\n                {\n                    dep.details[i].block.executeqry();\n                    this.state(dep.details[i].block,1);\n                }\n            }\n        }\n    }\n\n\n    private isready(block:BlockImpl) : boolean\n    {\n        let ready:boolean = true;\n        let dep:dependencies = this.links.get(block.alias);\n\n        if (dep.masters != null)\n        {\n            dep.masters.forEach((master) =>\n            {\n                let alias:string = master.block.alias;\n                let ok:boolean = this.masterblks.get(alias);\n                if (ok == null || !ok) ready = false;\n            });\n        }\n\n        return(ready);\n    }\n\n\n    private state(block:BlockImpl,state:number) : void\n    {\n        this.detailblks.set(block.alias,state);\n    }\n\n\n    private details(dep:dependencies) : boolean\n    {\n       return(dep != null && dep.details != null);\n    }\n}","import { Key } from \"../blocks/Key\";\nimport { FormImpl } from \"./FormImpl\";\nimport { Field } from \"../input/Field\";\nimport { Column } from \"../database/Column\";\nimport { Trigger } from \"../events/Triggers\";\nimport { BlockImpl } from \"../blocks/BlockImpl\";\nimport { BindValue } from \"../database/BindValue\";\nimport { MasterDetailQuery } from \"./MasterDetailQuery\";\nimport { SQLTriggerEvent } from \"../events/TriggerEvent\";\nimport { JOINDefinition } from \"../annotations/JOINDefinitions\";\nimport { bindvalue, SQL, Statement } from \"../database/Statement\";\n\n\ninterface subquery\n{\n    lev:number;\n    sql:string;\n    mtab:string;\n    mcols:string[],\n    dcols:string[],\n    subs:subquery[];\n    bindvalues:BindValue[]\n}\n\n\nexport interface dependencies\n{\n    keycols:Set<string>;\n    masters?:{block:BlockImpl, mkey:Key, dkey:Key}[];\n    details?:{block:BlockImpl, mkey:Key, dkey:Key}[];\n}\n\n\nexport class MasterDetail\n{\n    private form:FormImpl = null;\n    private master$:BlockImpl = null;\n    private waiting:BlockImpl = null;\n    private query:MasterDetailQuery = null;\n    private blocks:Map<string,BlockImpl> = new Map<string,BlockImpl>();\n    private links:Map<string,dependencies> = new Map<string,dependencies>();\n    private defined:Map<string,Map<string,Key>> = new Map<string,Map<string,Key>>();\n\n\n    constructor(form:FormImpl)\n    {\n        this.form = form;\n    }\n\n\n    public get master() : BlockImpl\n    {\n        return(this.master$);\n    }\n\n\n    public set master(block:BlockImpl)\n    {\n        this.master$ = block;\n    }\n\n\n    public getRoot(block?:BlockImpl) : BlockImpl\n    {\n        if (block == null)\n            block = Array.from(this.blocks)[0][\"1\"];\n\n        let dep:dependencies = this.links.get(block.alias);\n\n        while(dep != null && dep.masters != null && dep.masters.length > 0)\n        {\n            block = dep.masters[0].block;\n            dep = this.links.get(block.alias);\n        }\n\n        return(block);\n    }\n\n\n    public cleardetails(block:BlockImpl) : void\n    {\n        let dep:dependencies = this.links.get(block.alias);\n\n        if (dep != null && dep.details != null)\n            dep.details.forEach((det) => this.clear(det.block));\n    }\n\n\n    private clear(block:BlockImpl) : void\n    {\n        block.clear();\n\n        let dep:dependencies = this.links.get(block.alias);\n\n        if (dep != null && dep.details != null)\n            dep.details.forEach((det) => this.clear(det.block))\n    }\n\n\n    public sync(block:BlockImpl, col:string) : void\n    {\n        let dep:dependencies = this.links.get(block.alias);\n\n        if (dep != null)\n        {\n            if (!dep.keycols.has(col)) return;\n\n            this.master = block;\n            this.query = new MasterDetailQuery(this,this.links,block,col);\n            this.query.ready(block);\n        }\n    }\n\n\n    public enterquery(block:BlockImpl) : void\n    {\n        this.master$ = block;\n        this.enterdetailquery(block);\n    }\n\n\n    private enterdetailquery(block:BlockImpl) : void\n    {\n        let dep:dependencies = this.links.get(block.alias);\n\n        if (dep != null && dep.details != null)\n        {\n            dep.details.forEach((det) =>\n            {\n                if (det.block.usage.query)\n                    det.block.enterqry();\n\n                this.enterdetailquery(det.block);\n            });\n        }\n    }\n\n\n    public clearfilters(block:BlockImpl) : void\n    {\n        block.searchfilter = [];\n        let dep:dependencies = this.links.get(block.alias);\n\n        if (dep != null && dep.details != null)\n        {\n            dep.details.forEach((det) =>\n            {\n                det.block.searchfilter = [];\n                this.clearfilters(det.block);\n            });\n        }\n    }\n\n\n    // Build subquery from details\n    public async getDetailQuery() : Promise<SQL>\n    {\n        let block:BlockImpl = this.master$;\n        this.master$ = null;\n\n        if (block == null) return(null);\n        let dep:dependencies = this.links.get(block.alias);\n\n        let sub:subquery =\n        {\n            lev: 0,\n            sql: null,\n            subs: [],\n            mcols: [],\n            dcols: [],\n            bindvalues: [],\n            mtab: null\n        };\n\n        if (dep != null && dep.details != null)\n        {\n            for (let i = 0; i < dep.details.length; i++)\n                await this.subquery(sub,dep.details[i]);\n        }\n\n        let subq:SQL = null;\n        this.buildsubquery(sub);\n\n        if (sub.sql.length > 0)\n        {\n            let bindvals:bindvalue[] = [];\n\n            sub.bindvalues.forEach((bindv) =>\n            {\n                bindvals.push\n                ({\n                    name: bindv.name,\n                    type: Column[bindv.type].toLowerCase(),\n                    value: bindv.value\n                });\n            });\n\n            subq = {sql: sub.sql, bindvalues: bindvals};\n        }\n\n        return(subq)\n    }\n\n\n    private async subquery(parent:subquery,detail:any)\n    {\n        let mkey:Key = detail.mkey;\n        let dkey:Key = detail.dkey;\n        let block:BlockImpl = detail.block;\n\n        if (block.querymode)\n        {\n            let sub:subquery =\n            {\n                sql: null,\n                subs: [],\n                bindvalues: [],\n                lev: +parent.lev + 1,\n                mcols: mkey.columns(),\n                dcols: dkey.columns(),\n                mtab: block.data?.table?.name\n            };\n\n            parent.subs.push(sub);\n\n            let fields:Field[] = block.records[0].fields;\n            let stmt:Statement = block.data.parseQuery([],null,fields);\n\n            let event:SQLTriggerEvent = new SQLTriggerEvent(block.alias,0,stmt);\n\n            if (!await block.invokeTriggers(Trigger.PreQuery,event))\n                return;\n\n            block.cancelqry();\n\n            if (block.searchfilter.length > 0)\n            {\n                stmt.order = null;\n                stmt.columns = dkey.columns();\n\n                sub.sql = stmt.build().sql;\n                sub.bindvalues = stmt.getCondition().getAllBindvalues();\n            }\n\n            let dep:dependencies = this.links.get(block.alias);\n\n            if (dep != null && dep.details != null)\n            {\n                for (let i = 0; i < dep.details.length; i++)\n                    await this.subquery(sub,dep.details[i]);\n            }\n        }\n    }\n\n\n    private buildsubquery(sub:subquery)\n    {\n        let children:boolean = false;\n\n        for (let i = 0; i < sub.subs.length; i++)\n        {\n            this.buildsubquery(sub.subs[i]);\n\n            if (sub.subs[i].sql != null && sub.subs[i].sql.length > 0)\n                children = true;\n        }\n\n        let sql:string = \"\";\n        let and:boolean = false;\n        let where:boolean = false;\n\n        if (sub.sql != null)\n        {\n            and = true;\n        }\n        else if (children && sub.mtab != null)\n        {\n            where = true;\n            sub.sql = \"select \"+sub.dcols+\" from \"+sub.mtab;\n        }\n\n        if (children)\n        {\n            for (let i = 0; i < sub.subs.length; i++)\n            {\n                if (sub.subs[i].sql != null && sub.subs[i].sql.length > 0)\n                {\n                    if (and) sql += \" and \";\n                    if (where) sql += \" where \";\n\n                    sql += \"(\"+sub.subs[i].mcols+\") in (\";\n                    sql += sub.subs[i].sql;\n                    sql += \")\";\n\n                    sub.subs[i].bindvalues.forEach((bind) => {sub.bindvalues.push(bind)});\n\n                    and = true;\n                    where = false;\n                }\n            }\n        }\n\n        if (sub.sql == null) sub.sql = sql;\n        else                 sub.sql += sql;\n    }\n\n\n    public querydetails(block:BlockImpl, init:boolean, ready:boolean) : void\n    {\n        if (init == null)\n            init = false;\n\n        if (init)\n        {\n            if (this.query != null)\n            {\n                this.waiting = block;\n                return;\n            }\n\n            this.master = block;\n            this.query = new MasterDetailQuery(this,this.links,block);\n        }\n\n        if (ready) this.query.ready(block);\n        else       this.query.waitfor(block);\n    }\n\n\n    public done(block:BlockImpl,success:boolean)\n    {\n        if (success) this.query.done(block);\n        else         this.query.failed(block);\n    }\n\n\n    public finished() : void\n    {\n        let block:BlockImpl = null;\n\n        if (this.waiting != null)\n        {\n            block = this.waiting;\n\n            this.waiting = null;\n\n            this.query = new MasterDetailQuery(this,this.links,block);\n            this.query.ready(block);\n        }\n        else\n        {\n            this.query = null;\n            this.master = null;\n        }\n    }\n\n\n    public getKeys(block:BlockImpl) : Key[]\n    {\n        let keys:Key[] = [];\n        let dep:dependencies = this.links.get(block.alias);\n\n        if (dep != null && dep.masters != null)\n        {\n            dep.masters.forEach((master) =>\n            {\n                let c:number = 0;\n                let record:number = master.block.record;\n\n                master.mkey.columns().forEach((col) =>\n                {\n                    let val:any = null;\n\n                    if (record < master.block.datarows)\n                        val = master.block.getValue(record,col);\n\n                    master.dkey.set(c++,val);\n                });\n\n                keys.push(master.dkey);\n            });\n        }\n\n        return(keys);\n    }\n\n\n    public addBlock(block:BlockImpl) : void\n    {\n        this.blocks.set(block.alias,block);\n    }\n\n\n    public addKeys(block:BlockImpl, keys:Map<string,Key>) : void\n    {\n        this.defined.set(block.alias,keys);\n    }\n\n\n    public addJoins(joins:JOINDefinition[]) : void\n    {\n        if (joins == null) return;\n\n        joins.forEach((join) =>\n        {\n            let skip:boolean = false;\n\n            let master:BlockImpl = this.blocks.get(join.master.alias);\n            let detail:BlockImpl = this.blocks.get(join.detail.alias);\n\n            if (master == null)\n            {\n                skip = true;\n                console.log(\"Master block \"+join.master.alias+\" in join on form \"+this.form.name+\" does not exist\");\n            }\n\n            if (detail == null)\n            {\n                skip = true;\n                console.log(\"Detail block \"+join.detail.alias+\" in join on form \"+this.form.name+\" does not exist\");\n            }\n\n            if (!skip)\n            {\n                let keys:Map<string,Key> = null;\n\n                keys = this.defined.get(join.master.alias);\n                let mkey:Key = keys?.get(join.master.key);\n\n                keys = this.defined.get(join.detail.alias);\n                let dkey:Key = keys?.get(join.detail.key);\n\n                if (mkey == null)\n                {\n                    skip = true;\n                    console.log(\"Join on form \"+this.form.name+\". Cannot find key \"+join.master.key+\" on block \"+join.master.alias);\n                }\n\n                if (dkey == null)\n                {\n                    skip = true;\n                    console.log(\"Join on form \"+this.form.name+\". Cannot find key \"+join.detail.key+\" on block \"+join.detail.alias);\n                }\n\n                if (!skip)\n                {\n                    let mdep:dependencies = this.links.get(master.alias);\n\n                    if (mdep == null)\n                    {\n                        mdep = {keycols: new Set<string>()};\n                        this.links.set(master.alias,mdep);\n                    }\n\n                    if (mdep.details == null)\n                        mdep.details = [];\n\n                    dkey.columns().forEach((col) => {mdep.keycols.add(col)});\n                    mdep.details.push({block: detail, mkey: mkey, dkey: dkey});\n\n                    let ddep:dependencies = this.links.get(detail.alias);\n\n                    if (ddep == null)\n                    {\n                        ddep = {keycols: new Set<string>()};\n                        this.links.set(detail.alias,ddep);\n                    }\n\n                    if (ddep.masters == null)\n                        ddep.masters = [];\n\n                    ddep.masters.push({block: master, mkey: mkey, dkey: dkey});\n                }\n            }\n        });\n    }\n}","import { Key } from \"../blocks/Key\";\nimport { Menu } from \"../menu/Menu\";\nimport { Utils } from \"../utils/Utils\";\nimport { Block } from \"../blocks/Block\";\nimport { Form, CallBack } from \"./Form\";\nimport { Table } from \"../database/Table\";\nimport { Record } from \"../blocks/Record\";\nimport { keymap } from \"../keymap/KeyMap\";\nimport { InstanceID } from \"./InstanceID\";\nimport { ModalWindow } from \"./ModalWindow\";\nimport { ComponentRef } from \"@angular/core\";\nimport { FormInstance } from \"./FormInstance\";\nimport { MasterDetail } from \"./MasterDetail\";\nimport { BlockImpl } from \"../blocks/BlockImpl\";\nimport { FieldData } from \"../blocks/FieldData\";\nimport { MessageBox } from \"../popup/MessageBox\";\nimport { Statement } from \"../database/Statement\";\nimport { DefaultMenu } from \"../menu/DefaultMenu\";\nimport { Container } from \"../container/Container\";\nimport { Connection } from \"../database/Connection\";\nimport { DropDownMenu } from \"../menu/DropDownMenu\";\nimport { FieldInstance } from \"../input/FieldInstance\";\nimport { Trigger, Triggers } from \"../events/Triggers\";\nimport { FieldImplementation } from \"../input/FieldType\";\nimport { FieldDefinition } from \"../input/FieldDefinition\";\nimport { BlockDefinition } from '../blocks/BlockDefinition';\nimport { TriggerFunction } from \"../events/TriggerFunction\";\nimport { KeyDefinition } from \"../annotations/KeyDefinition\";\nimport { TableDefinition } from \"../database/TableDefinition\";\nimport { ColumnDefinition } from \"../database/ColumnDefinition\";\nimport { JOINDefinitions } from \"../annotations/JOINDefinitions\";\nimport { ApplicationImpl } from \"../application/ApplicationImpl\";\nimport { BlockDefinitions } from \"../annotations/BlockDefinitions\";\nimport { DatabaseUsage, DBUsage } from \"../database/DatabaseUsage\";\nimport { FieldDefinitions } from \"../annotations/FieldDefinitions\";\nimport { TableDefinitions } from \"../annotations/TableDefinitions\";\nimport { ColumnDefinitions } from \"../annotations/ColumnDefinitions\";\nimport { DatabaseDefinitions } from \"../annotations/DatabaseDefinitions\";\nimport { LOVDefinition, LOVDefinitions } from \"../annotations/LOVDefinitions\";\nimport { KeyTriggerEvent, Origin, TriggerEvent } from \"../events/TriggerEvent\";\nimport { TriggerDefinition, TriggerDefinitions } from \"../annotations/TriggerDefinitions\";\n\n\nexport class FormImpl\n{\n    private static id:number = 0;\n\n    private menu$:Menu;\n    private name$:string;\n    private path$:string;\n    private guid$:number;\n    private title$:string;\n    private root:FormImpl;\n    private next:FormImpl;\n    private conn:Connection;\n    private win:ModalWindow;\n    private inst:InstanceID;\n    private parent:FormImpl;\n    private block$:BlockImpl;\n    private app:ApplicationImpl;\n    private callbackfunc:CallBack;\n    private depencies:MasterDetail;\n    private blocks:BlockImpl[] = [];\n    private cancelled:boolean = false;\n    private initiated$:boolean = false;\n    private fields$:FieldInstance[] = [];\n    private ddmenu:ComponentRef<DropDownMenu>;\n    private triggers:Triggers = new Triggers();\n    private parameters:Map<string,any> = new Map<string,any>();\n    private stack:Map<string,InstanceID> = new Map<string,InstanceID>();\n    private blkindex:Map<string,BlockImpl> = new Map<string,BlockImpl>();\n\n\n    constructor(private form$:Form)\n    {\n        this.guid$ = FormImpl.id++;\n        let utils:Utils = new Utils();\n        this.name$ = utils.getName(form$);\n    }\n\n\n    public get guid() : number\n    {\n        return(this.guid$);\n    }\n\n\n    public get form() : Form\n    {\n        return(this.form$);\n    }\n\n\n    public get name() : string\n    {\n        return(this.name$);\n    }\n\n\n    public set path(path:string)\n    {\n        this.path$ = path;\n    }\n\n\n    public get path() : string\n    {\n        return(this.path$);\n    }\n\n\n    public set title(title:string)\n    {\n        this.title$ = title;\n    }\n\n\n    public get title() : string\n    {\n        return(this.title$);\n    }\n\n\n    public get block() : BlockImpl\n    {\n        return(this.block$);\n    }\n\n\n    public enterquery(force?:boolean) : void\n    {\n        this.depencies.getRoot()?.keyentqry(force);\n    }\n\n\n    public executequery(force?:boolean) : void\n    {\n        this.depencies.getRoot()?.keyexeqry(force);\n    }\n\n\n    public get popup() : boolean\n    {\n        return(this.win != null);\n    }\n\n\n    public getCurrentRow(block:string) : number\n    {\n        let blk:BlockImpl = this.getBlock(block);\n        if (blk == null) return(0);\n        return(blk.row);\n    }\n\n\n    public getCurrentRecord(block:string) : number\n    {\n        let blk:BlockImpl = this.getBlock(block);\n        if (blk == null) return(0);\n        return(blk.record);\n    }\n\n\n    public getBlock(bname:string)\n    {\n        return(this.blkindex.get(bname.toLowerCase()));\n    }\n\n\n    public async clear() : Promise<boolean>\n    {\n        for (let i = 0; i < this.blocks.length; i++)\n        {\n            let event:KeyTriggerEvent = new KeyTriggerEvent(Origin.Form,this.blocks[i].alias,null,keymap.clearblock,null);\n            await this.blocks[i].sendkey(event,keymap.clearblock);\n        }\n\n        if (this.blocks.length > 0) this.block = this.blocks[0];\n        this.block?.focus();\n\n        return(true);\n    }\n\n\n    public enableall() : void\n    {\n        this.blocks.forEach((block) => {block.enableall()});\n    }\n\n\n    public disableall() : void\n    {\n        this.blocks.forEach((block) => {block.disableall()});\n    }\n\n\n    public focus() : void\n    {\n        this.block?.focus();\n    }\n\n\n    public set block(block:BlockImpl)\n    {\n        if (this.block != null && this.block != block)\n            if (!this.block?.validate()) return;\n        this.block$ = block;\n    }\n\n\n    public getChain() : FormImpl\n    {\n        if (this.next == null) return(this);\n        return(this.next.getChain());\n    }\n\n\n    public initiated() : boolean\n    {\n        return(this.initiated$);\n    }\n\n\n    public setMenu(menu:Menu) : void\n    {\n        if (this.app == null)\n        {\n            this.menu$ = menu;\n            return;\n        }\n\n        this.app.deletemenu(this.menu$);\n        this.ddmenu = this.app.createmenu(menu);\n        this.app.showMenu(this.ddmenu);\n        this.menu$ = menu;\n    }\n\n\n    public getMenu() : Menu\n    {\n        return(this.menu$);\n    }\n\n\n    public getApplication() : ApplicationImpl\n    {\n        return(this.app);\n    }\n\n\n    public setRoot(root:FormImpl) : void\n    {\n        this.root = root;\n    }\n\n\n    public setParent(parent:FormImpl) : void\n    {\n        this.parent = parent;\n    }\n\n\n    public setApplication(app:ApplicationImpl) : void\n    {\n        this.app = app;\n\n        if (this.menu$ == null)\n            this.menu$ = new DefaultMenu();\n\n        this.conn = app.appstate.connection;\n        this.ddmenu = app.createmenu(this.menu$);\n    }\n\n\n    public getInstanceID() : InstanceID\n    {\n        return(this.inst);\n    }\n\n\n    public setInstanceID(inst:InstanceID) : void\n    {\n        this.inst = inst;\n    }\n\n\n    public setModalWindow(win:ModalWindow) : void\n    {\n        this.win = win;\n    }\n\n\n    public getModalWindow() : ModalWindow\n    {\n        return(this.win);\n    }\n\n\n    public setCallback(func:CallBack) : void\n    {\n        this.callbackfunc = func;\n    }\n\n\n    public setParameters(params:Map<string,any>) : void\n    {\n        if (params != null) this.parameters = params;\n        else this.parameters = new Map<string,InstanceID>();\n    }\n\n\n    public getParameters() : Map<string,any>\n    {\n        return(this.parameters);\n    }\n\n\n    public getDropDownMenu() : ComponentRef<DropDownMenu>\n    {\n        return(this.ddmenu);\n    }\n\n\n    public async onCommit()\n    {\n        this.blocks.forEach((blk) => {blk.removeLocks()});\n    }\n\n\n    public async execute(stmt:Statement, firstrow?:boolean, firstcolumn?:boolean) : Promise<any>\n    {\n        let response:any = await this.app.appstate.connection.invokestmt(stmt);\n\n        if (response[\"status\"] == \"failed\")\n            this.alert(JSON.stringify(response),\"Execute SQL Failed\");\n\n        let rows:any[] = response[\"rows\"];\n\n        if (rows == null)\n        {\n            if (firstcolumn) return(null);\n            return([]);\n        }\n\n        if (!firstrow) return(rows);\n\n        let row:any = [];\n        if (rows.length > 0) row = rows[0];\n\n        if (!firstcolumn) return(row);\n\n        let columns:string[] = Object.keys(row);\n        if (columns.length == 0) return(null);\n\n        return(row[columns[0]]);\n    }\n\n\n    private creationerror:boolean = false;\n    public newForm(container:Container) : void\n    {\n        let utils:Utils = new Utils();\n        this.depencies = new MasterDetail(this);\n\n        // Add all form key triggers\n        let fktriggers:Map<string,TriggerDefinition> = TriggerDefinitions.getFormKeyTriggers(this.name);\n        fktriggers.forEach((def) => {this.triggers.addTrigger(this.form,def.func, def.trigger, def.field, def.key);});\n\n        // Create blocks\n        let blockdef:BlockDefinition[] = BlockDefinitions.getBlocks(this.name);\n        blockdef.forEach((bdef) => {this.createBlock(bdef)});\n\n        if (this.creationerror) return;\n\n        // DatabaseUsage for this form\n        let fusage:DatabaseUsage = DatabaseDefinitions.getFormUsage(this.name);\n\n        // Merge form, block and block usage. Form usage overides\n        blockdef.forEach((bdef) => {this.setBlockUsage(fusage,bdef);});\n\n        container.finish();\n\n        // Get all fields per block\n        let bfields:Map<string,FieldInstance[]> = new Map<string,FieldInstance[]>();\n\n        container.getBlocks().forEach((cb) =>\n        {\n            let block:BlockImpl = this.blkindex.get(cb.name);\n\n            if (block == null)\n            {\n                let dblk = new Block();\n                block = dblk[\"_impl_\"];\n\n                this.blocks.push(block);\n                this.blkindex.set(cb.name,block);\n\n                block.form = this;\n                block.alias = cb.name;\n                block.setApplication(this.app);\n\n                console.log(\"Block \"+cb.name+\" auto-created\");\n            }\n\n            bfields.set(block.alias,cb.fields);\n\n            cb.records.forEach((rec) =>\n            // Copy records from container\n            {block.addRecord(new Record(rec.row,rec.fields,rec.index))});\n        });\n\n        this.blkindex.forEach((block) =>\n        {\n            this.depencies.addBlock(block);\n            block.setMasterDetail(this.depencies);\n\n            // Finish setup for each block\n            let keydefs:KeyDefinition[] = BlockDefinitions.getKeys(block.clazz);\n            let tabdef:TableDefinition = utils.clone(TableDefinitions.get(block.clazz));\n\n            // Column definitions\n            let colindex:Map<string,ColumnDefinition> = ColumnDefinitions.getIndex(block.clazz);\n\n            // Columns mapped to fields. Form definitions overrides\n            let colfields:Map<string,FieldDefinition> = FieldDefinitions.getColumnIndex(block.clazz);\n            let colffields:Map<string,FieldDefinition> = FieldDefinitions.getFormColumnIndex(this.name,block.alias);\n            colffields.forEach((def,fld) => {colfields.set(fld,def)});\n\n            // Create keys and decide on primary\n            let pkey:Key = null;\n            let keys:Map<string,Key> = new Map<string,Key>();\n\n            keydefs.forEach((kdef) =>\n            {\n                let key:Key = keys.get(kdef.name);\n\n                if (key == null)\n                {\n                    key = new Key(kdef.name);\n                    keys.set(kdef.name,key);\n\n                    kdef.columns.forEach((col) =>\n                    {\n                        let fdef:FieldDefinition = colfields.get(col);\n\n                        if (fdef != null)\n                            col = fdef.name;\n\n                        key.addColumn(col);\n                    });\n\n                    if (kdef.unique && pkey == null) pkey = key;\n                    if (kdef.name.startsWith(\"primary\")) pkey = key;\n                }\n                else\n                {\n                    console.log(\"key \"+kdef.name+\" is defined twice\");\n                }\n            });\n\n            this.depencies.addKeys(block,keys);\n\n            let fields:string[] = [];\n            let sorted:ColumnDefinition[] = [];\n\n            // List of data-fields. First pkey\n            if (pkey != null)\n            {\n                pkey.columns().forEach((part) =>\n                {\n                    let fname:string = part;\n                    let fdef:FieldDefinition = colfields.get(part);\n\n                    if (fdef != null) fname = fdef.name;\n                    sorted.push(colindex.get(part));\n\n                    fields.push(fname);\n                });\n            }\n\n            // Then other columns. First gather all definitions\n            let columns:ColumnDefinition[] = ColumnDefinitions.get(block.clazz);\n            let fieldidx:Map<string,FieldDefinition> = FieldDefinitions.getFieldIndex(block.clazz);\n            let ffieldidx:Map<string,FieldDefinition> = FieldDefinitions.getFormFieldIndex(this.name,block.alias);\n\n            // Override by form\n            ffieldidx.forEach((def,fld) => {fieldidx.set(fld,def);});\n\n            columns.forEach((column) =>\n            {\n                let nonkey:boolean = true;\n                if (pkey != null && pkey.partof(column.name)) nonkey = false;\n\n                if (nonkey)\n                {\n                    sorted.push(column);\n                    let fname:string = null;\n                    let field:FieldDefinition = colfields.get(column.name);\n\n                    if (field != null) fname = field.name;\n                    else\n                    {\n                        field = fieldidx.get(column.name);\n                        if (field == null) fname = column.name;\n                        else\n                        {\n                            fname = field.name;\n                            field.column = column.name;\n                        }\n                    }\n\n                    fields.push(fname);\n                }\n            });\n\n            columns = sorted;\n\n            // Then other defined fields (block or form)\n            fieldidx.forEach((field) => {if (!fields.includes(field.name,0)) fields.push(field.name)});\n\n            // Field overrides.\n            let overideidx:Map<string,FieldDefinition> = FieldDefinitions.getFieldIndex(block.clazz);\n\n            // Set field properties and add undefined fields\n            let bfieldlist:FieldInstance[] = bfields.get(block.alias);\n            if (bfieldlist != null) bfieldlist.forEach((inst) =>\n            {\n                let fdef:FieldDefinition = utils.clone(fieldidx.get(inst.name));\n\n                if (fdef == null)\n                {\n                    // Auto create field definition\n                    fdef = {name: inst.name};\n                    fieldidx.set(inst.name,fdef);\n                    if (!fields.includes(inst.name,0)) fields.push(inst.name);\n                }\n\n                if (fdef.column == null)\n                {\n                    // Map to column, unless column is mapped otherwise\n                    let cdef:ColumnDefinition = colindex.get(fdef.name);\n\n                    if (cdef != null && colfields.get(fdef.name) == null)\n                        fdef.column = fdef.name;\n                }\n\n                // Save default definition\n                fieldidx.set(inst.name,fdef);\n\n                // Override def\n                if (inst.id.length > 0)\n                {\n                    let id:string = inst.name+\".\"+inst.id;\n                    let iddef:FieldDefinition = utils.clone(FieldDefinitions.getFormFieldOverride(this.name,block.alias,id));\n\n                    if (iddef == null)\n                        iddef = utils.clone(FieldDefinitions.getFieldOverride(block.clazz,id));\n\n                    if (iddef != null)\n                    {\n                        overideidx.set(id,iddef);\n                        iddef.column = fdef.column;\n                        fdef = iddef;\n                    }\n                }\n\n                let cdef:ColumnDefinition = colindex.get(fdef.column);\n\n                if (fdef.column != null && !fdef.hasOwnProperty(\"case\"))\n                    fdef.case = cdef.case;\n\n                if (fdef.column != null && !fdef.hasOwnProperty(\"default\"))\n                    fdef.default = cdef.default;\n\n                if (fdef.column != null && !fdef.hasOwnProperty(\"mandatory\"))\n                    fdef.mandatory = cdef.mandatory;\n\n                if (fdef.type == null)\n                    fdef.type = FieldImplementation.guess(cdef?.type);\n\n                if (fdef.fieldoptions == null)\n                        fdef.fieldoptions = {};\n\n                if (!block.usage.update)\n                    fdef.fieldoptions.update = false;\n\n                inst.definition = fdef;\n\n                if (inst.parent.definition == null)\n                    inst.parent.setDefinition(fdef,false);\n            });\n\n            let def:Map<string,LOVDefinition> = new Map<string,LOVDefinition>();\n            let ovf:Map<string,LOVDefinition> = new Map<string,LOVDefinition>();\n            let lovs:Map<string,LOVDefinition> = new Map<string,LOVDefinition>();\n            let idlovs:Map<string,LOVDefinition> = new Map<string,LOVDefinition>();\n\n            def = LOVDefinitions.getblock(block.name);\n            def.forEach((lov,fld) =>\n            {\n                lov.inst = block;\n                lovs.set(fld,lov);\n            });\n\n            def = LOVDefinitions.getblockid(block.name);\n            def.forEach((lov,fld) =>\n            {\n                lov.inst = block;\n                lovs.set(fld,lov);\n            });\n\n            ovf = LOVDefinitions.getform(this.name,block.alias);\n            ovf.forEach((lov,fld) =>\n            {\n                lov.inst = this.form;\n                lovs.set(fld,lov);\n            });\n\n            ovf = LOVDefinitions.getidform(this.name,block.alias);\n            ovf.forEach((lov,fld) =>\n            {\n                lov.inst = this.form;\n                idlovs.set(fld,lov);\n            });\n\n            block.setListOfValues(lovs);\n            block.setIdListOfValues(idlovs);\n\n            // Form triggers\n            let ftriggers:Map<string,TriggerDefinition> = TriggerDefinitions.getFormFieldTriggers(this.name,null);\n\n            // Field triggers for block\n            let bftriggers:Map<string,TriggerDefinition> = TriggerDefinitions.getFieldTriggers(block.name);\n            let fftriggers:Map<string,TriggerDefinition> = TriggerDefinitions.getFormFieldTriggers(this.name,block.alias);\n\n            // Form overrides\n            ftriggers.forEach((def,trg) => {bftriggers.set(trg,def);});\n            fftriggers.forEach((def,trg) => {bftriggers.set(trg,def);});\n\n            bftriggers.forEach((def) =>\n            {\n                if (!def.blktrg && def.block == block.alias)\n                {\n                    // Blocktrigger defined on form\n                    block[\"triggers\"].addTrigger(this.form,def.func,def.trigger,def.field);\n                }\n                else\n                {\n                    if (!def.blktrg) this.triggers.addTrigger(this.form,def.func,def.trigger,def.field);\n                    else             block[\"triggers\"].addTrigger(block.block,def.func,def.trigger,def.field);\n                }\n            });\n\n            // Key triggers for block\n            let bktriggers:Map<string,TriggerDefinition> = TriggerDefinitions.getKeyTriggers(block.name);\n\n            // delete block-triggers if defined on form\n            fktriggers.forEach((_def,trg) => {bktriggers.delete(trg)});\n            bktriggers.forEach((def) => {block[\"triggers\"].addTrigger(block.block, def.func, def.trigger, def.field, def.key);});\n\n            // Create data-backing table\n            let table:Table = null;\n            let rows:number = block.records.length;\n\n            if (tabdef != null)\n                table = new Table(this.conn,tabdef,pkey,columns,fieldidx,rows);\n\n            block.data = new FieldData(block,table,fields,fieldidx);\n\n            // Start form\n            block.ready = true;\n        });\n\n        // Get all fields on form\n        this.fields$ = container.fields;\n\n        if (this.blocks.length > 0)\n            this.block$ = this.blocks[0];\n\n        this.groupfields();\n\n        this.blocks.forEach((block) =>\n        {\n            if (block.records.length > 0)\n                block.records[0].enable(true);\n        });\n\n        this.depencies.addJoins(JOINDefinitions.get(this.name));\n\n        this.app.newForm(this);\n        this.initiated$ = true;\n\n        if (this.fields$.length > 0)\n            this.fields$[0].focus();\n    }\n\n\n    public async showform(form:any, destroy:boolean, parameters?:Map<string,any>)\n    {\n        if (!this.validate())\n            return;\n\n        if (this.win == null)\n        {\n            await this.app.showform(form,destroy,parameters);\n        }\n        else\n        {\n            await this.replaceform(form,destroy,parameters);\n        }\n    }\n\n\n    private async replaceform(form:any, destroy:boolean, parameters?:Map<string,any>)\n    {\n        let utils:Utils = new Utils();\n        let name:string = utils.getName(form);\n        let id:InstanceID = this.parent.stack.get(name);\n\n        this.onHide();\n\n        // newform\n        if (destroy)\n            this.app.closeform(this,destroy);\n\n        // create\n        if (id == null)\n        {\n            id = this.app.getNewInstance(form);\n            this.parent.stack.set(id.name,id);\n        }\n\n        this.parent.next = id.impl;\n        id.impl.setParent(this.parent);\n\n        let inst:FormInstance = this.app.getInstance(id);\n        await this.app.preform(id.impl,parameters,inst,false);\n\n        if (this.win != null)\n        {\n            this.win.newForm(inst);\n            id.impl.setRoot(this.root);\n        }\n        else\n        {\n            id.impl.setRoot(this);\n            this.app.showinstance(inst);\n        }\n    }\n\n\n    public async callform(form:any, destroy:boolean, parameters?:Map<string,any>) : Promise<FormImpl>\n    {\n        let utils:Utils = new Utils();\n        let name:string = utils.getName(form);\n        let id:InstanceID = this.stack.get(name);\n\n        this.onHide();\n\n        // newform\n        if (id != null && destroy)\n        {\n            this.app.closeform(id.impl,destroy);\n            id = null;\n        }\n\n        // create\n        if (id == null)\n        {\n            id = this.app.getNewInstance(form);\n            if (id == null) return(null);\n            this.stack.set(name,id);\n        }\n\n        this.next = id.impl;\n        id.impl.setParent(this);\n\n        let inst:FormInstance = this.app.getInstance(id);\n        await this.app.preform(id.impl,parameters,inst,false);\n\n        if (this.win != null)\n        {\n            this.win.newForm(inst);\n            id.impl.setRoot(this.root);\n        }\n        else\n        {\n            id.impl.setRoot(this);\n            this.app.showinstance(inst);\n        }\n\n        return(id.impl);\n    }\n\n\n    public wasCancelled() : boolean\n    {\n        return(this.cancelled);\n    }\n\n\n    public cancel() : void\n    {\n        this.cancelled = true;\n        this.close(true);\n    }\n\n\n    public onClose(impl:FormImpl,cancelled:boolean) : void\n    {\n        this.next = null;\n\n        try\n        {\n            if (this.callbackfunc != null)\n                this.form[this.callbackfunc.name](impl.form,cancelled);\n        }\n        catch (error)\n        {\n            console.log(error);\n        }\n\n        if (cancelled && this.parent != null)\n            this.parent.onClose(this,cancelled);\n    }\n\n\n    public async close(destroy?:boolean)\n    {\n        let win:boolean = (this.win != null);\n        let menu:boolean = (this.root == null);\n        let root:boolean = (this.parent == null);\n\n        if (!this.cancelled && !destroy && !await this.validate())\n            return;\n\n        this.next = null;\n\n        if (this.parent != null)\n            this.parent.onClose(this,this.cancelled);\n\n        if (this.cancelled)\n        {\n            this.cancelled = false;\n\n            if (menu)\n            {\n                //chain, started from \"menu\", was cancelled\n                this.app.closeform(this,true);\n            }\n            else\n            {\n                //chain, started from form, was cancelled\n                this.parent.stack.delete(this.name);\n                this.app.closeInstance(this.inst,true);\n                this.app.showTitle(this.root.title);\n            }\n\n            if (!menu)\n                this.root.onShow();\n\n            return;\n        }\n\n        if (!win)\n        {\n            //Normal behaivior\n            this.app.closeform(this,destroy);\n            if (!root) this.parent.onShow();\n            return;\n        }\n\n        if (win && root)\n        {\n            //Root window\n            this.app.closeform(this,destroy);\n            if (!root) this.parent.onShow();\n            this.win.closeWindow();\n            return;\n        }\n\n        //child closed\n        this.app.closeInstance(this.inst,destroy);\n        if (destroy) this.parent.stack.delete(this.name);\n\n        let pinst:InstanceID = this.parent.getInstanceID();\n        this.app.showTitle(this.parent.title);\n\n        if (pinst != null)\n        {\n            //Parent is modal\n            let inst:FormInstance = this.app.getInstance(pinst);\n            this.win.newForm(inst);\n        }\n        else this.win.closeWindow();\n\n        this.parent.onShow();\n    }\n\n\n    public getCallStack() : Form[]\n    {\n        let stack:Form[] = [];\n\n        this.stack.forEach((id) =>\n        {\n            stack.push(id.impl.form)\n        });\n\n        return(stack);\n    }\n\n\n    public clearStack() : void\n    {\n        this.stack.forEach((id) =>\n        {\n            id.impl.clearStack();\n\n            if (id.ref != null)\n                this.app.closeInstance(id,true);\n        });\n\n        this.stack.clear();\n    }\n\n\n    private createBlock(blockdef:BlockDefinition) : void\n    {\n        let impl:BlockImpl = this.blkindex.get(blockdef.alias);\n\n        if (impl != null)\n        {\n            console.log(\"Block alias \"+blockdef.alias+\" defined twice\");\n            return;\n        }\n\n        let block:Block = null;\n\n        if (blockdef.prop != null)\n        {\n            block = this.form[blockdef.prop];\n\n            if (block == null && blockdef.component != null)\n            {\n                block = new blockdef.component();\n                this.form[blockdef.prop] = block;\n            }\n        }\n        else\n        {\n            if (blockdef.component != null)\n                block = new blockdef.component();\n        }\n\n        if (block != null)\n            impl = block[\"_impl_\"];\n\n        if (impl == null)\n        {\n            this.creationerror = true;\n            console.log(this.name+\" cannot create instance of \"+blockdef.alias+\" bailing out\");\n            return;\n        }\n\n        let cname:string = block.constructor.name;\n\n        if (!(impl instanceof BlockImpl))\n        {\n            this.creationerror = true;\n            console.log(\"component: \"+cname+\" is not an instance of block bailing out\");\n            return;\n        }\n\n        let alias:string = blockdef.alias;\n\n        if (alias == null)\n        {\n            alias = block.constructor.name;\n            alias = BlockDefinitions.getDefaultAlias(alias);\n        }\n\n        alias = alias.toLowerCase();\n\n        impl.alias = alias;\n        blockdef.alias = alias;\n        this.blocks.push(impl);\n        this.blkindex.set(alias,impl);\n\n        impl.form = this;\n        impl.setApplication(this.app);\n    }\n\n\n    private setBlockUsage(fusage:DatabaseUsage, blockdef:BlockDefinition) : void\n    {\n        let block:BlockImpl = this.blkindex.get(blockdef.alias);\n\n        let usage:DatabaseUsage = {};\n        let pusage:DatabaseUsage = blockdef.databaseopts;\n        let dusage:DatabaseUsage = DatabaseDefinitions.getBlockDefault(block.clazz);\n\n        if (dusage == null) dusage = {};\n        if (pusage == null) pusage = {};\n        if (fusage == null) fusage = {};\n\n        usage = DBUsage.merge(pusage,dusage);\n        usage = DBUsage.override(fusage,usage);\n        usage = DBUsage.complete(usage);\n\n        block.usage = usage;\n    }\n\n\n    // Sort fields by group and set tabindex\n    public groupfields(groups?:string[]) : void\n    {\n        let seq:number = 1;\n        if (groups == null) groups = [];\n\n        let index:Map<string,FieldInstance[]> = new Map<string,FieldInstance[]>();\n\n        this.fields$.forEach((field) =>\n        {\n            let group:FieldInstance[] = index.get(field.group);\n\n            if (group == null)\n            {\n                group = [];\n                index.set(field.group,group);\n\n                let exists:boolean = false;\n                for(let i = 0; i < groups.length; i++)\n                {\n                    if (groups[i] == field.group)\n                    {\n                        exists = true;\n                        break;\n                    }\n                }\n\n                if (!exists) groups.push(field.group);\n            }\n\n            group.push(field);\n        });\n\n        groups.forEach((name) =>\n        {\n            let group:FieldInstance[] = index.get(name);\n            if (group != null) {group.forEach((field) => {field.seq = seq++});}\n        });\n\n        this.fields$ = this.fields$.sort((a,b) => {return(a.seq - b.seq)});\n\n        let blocks:Map<string,FieldInstance[]> = new Map<string,FieldInstance[]>();\n\n        this.fields$.forEach((field) =>\n        {\n            let fields:FieldInstance[] = blocks.get(field.block);\n\n            if (fields == null)\n            {\n                fields = [];\n                blocks.set(field.block,fields);\n            }\n\n            fields.push(field);\n        });\n\n        blocks.forEach((fields,bname) =>\n        {this.blkindex.get(bname).setFields(fields);});\n    }\n\n\n    public async validate() : Promise<boolean>\n    {\n        if (this.block == null) return(true);\n        else return(await this.block.validate());\n    }\n\n\n    public onShow() : void\n    {\n    }\n\n\n    public onHide() : void\n    {\n    }\n\n\n    public async sendkey(event:any,key:keymap) : Promise<boolean>\n    {\n        if (key == keymap.close)\n        {\n            await this.close(false);\n            return(true);\n        }\n\n        if (event == null) event = new KeyTriggerEvent(Origin.Form,null,null,keymap.clearblock,null);\n        return(await this.block?.sendkey(event,key));\n    }\n\n\n    public addTrigger(instance:any, func:TriggerFunction, types?:Trigger|Trigger[]) : void\n    {\n        this.triggers.addTrigger(instance,func,types)\n    }\n\n\n    public addKeyTrigger(instance:any, func:TriggerFunction, keys?:keymap|keymap[]) : void\n    {\n        this.triggers.addTrigger(instance,func,Trigger.Key,null,keys)\n    }\n\n\n    public addFieldTrigger(instance:any, func:TriggerFunction, types:Trigger|Trigger[], fields:string|string[], keys?:keymap|keymap[]) : void\n    {\n        this.triggers.addTrigger(instance,func,types,fields,keys)\n    }\n\n\n    public async onEvent(event:any, field:FieldInstance, type:string, key:keymap)\n    {\n        if (this.app == null)\n            return;\n\n        if (type == \"focus\")\n            this.block = this.blkindex.get(field.block);\n\n        if (type == \"key\" && key == keymap.prevfield)\n        {\n            if (event[\"preventDefault\"] != null)\n                event.preventDefault();\n\n            let row:number = field.row;\n            let seq:number = field.seq - 1;\n            let block:string = field.block;\n\n            for(let i = 0; i < this.fields$.length; i++)\n            {\n                if (--seq < 0) seq = this.fields$.length - 1;\n\n                if (this.fields$[seq].row == row && this.fields$[seq].block == block)\n                {\n                    if (this.fields$[seq].enabled)\n                    {\n                        this.fields$[seq].focus();\n                        break;\n                    }\n                }\n            }\n        }\n\n        if (type == \"key\" && key == keymap.nextfield)\n        {\n            if (event[\"preventDefault\"] != null)\n                event.preventDefault();\n\n            let row:number = field.row;\n            let seq:number = field.seq - 1;\n            let block:string = field.block;\n\n            for(let i = 0; i < this.fields$.length; i++)\n            {\n                if (++seq >= this.fields$.length) seq = 0;\n\n                if (this.fields$[seq].row == row && this.fields$[seq].block == block)\n                {\n                    if (this.fields$[seq].enabled)\n                    {\n                        this.fields$[seq].focus();\n                        break;\n                    }\n                }\n            }\n        }\n\n\n        if (type == \"key\" && key == keymap.prevblock)\n        {\n            if (event[\"preventDefault\"] != null)\n                event.preventDefault();\n\n            let seq:number = field.seq - 1;\n            let block:string = field.block;\n\n            let row:number = 0;\n            let next:string = \"\";\n\n            for(let i = 0; i < this.fields$.length; i++)\n            {\n                if (--seq < 0) seq = this.fields$.length - 1;\n\n                if (this.fields$[seq].block != block)\n                {\n                    let blk:string = this.fields$[seq].block;\n\n                    if (blk != next)\n                    {\n                        let nb:BlockImpl = this.blkindex.get(blk);\n                        let nf:FieldInstance = nb.field;\n\n                        if (nf.enabled)\n                        {\n                            nf.focus();\n                            break;\n                        }\n\n                        next = blk;\n                        row = nb.row;\n                    }\n\n                    if (this.fields$[seq].row == row && this.fields$[seq].enabled)\n                    {\n                        this.fields$[seq].focus();\n                        break;\n                    }\n                }\n            }\n        }\n\n        if (type == \"key\" && key == keymap.nextblock)\n        {\n            if (event[\"preventDefault\"] != null)\n                event.preventDefault();\n\n            let seq:number = field.seq - 1;\n            let block:string = field.block;\n\n            let row:number = 0;\n            let next:string = \"\";\n\n            for(let i = 0; i < this.fields$.length; i++)\n            {\n                if (++seq >= this.fields$.length) seq = 0;\n\n                if (this.fields$[seq].block != block)\n                {\n                    let blk:string = this.fields$[seq].block;\n\n                    if (blk != next)\n                    {\n                        let nb:BlockImpl = this.blkindex.get(blk);\n                        let nf:FieldInstance = nb.field;\n\n                        if (nf.enabled)\n                        {\n                            nf.focus();\n                            break;\n                        }\n\n                        next = blk;\n                        row = nb.row;\n                    }\n\n                    if (this.fields$[seq].row == row && this.fields$[seq].enabled)\n                    {\n                        this.fields$[seq].focus();\n                        break;\n                    }\n                }\n            }\n        }\n\n        if (type == \"key\" && key == keymap.clearform)\n        {\n            let event:KeyTriggerEvent = new KeyTriggerEvent(Origin.Form,null,null,keymap.clearform,null);\n            if (!await this.invokeTriggers(Trigger.Key,event,keymap.clearform)) return(false);\n            this.clear();\n        }\n    }\n\n\n    public async invokeTriggers(type:Trigger, event:TriggerEvent, key?:keymap) : Promise<boolean>\n    {\n        return(await this.triggers.invokeTriggers(type,event,key));\n    }\n\n\n    public async invokeFieldTriggers(type:Trigger, field:string, event:TriggerEvent, key?:keymap) : Promise<boolean>\n    {\n        return(await this.triggers.invokeFieldTriggers(type,field,event,key));\n    }\n\n\n    public alert(msg:string, title:string, width?:string, height?:string) : void\n    {\n        MessageBox.show(this.app,msg,title,width,height);\n    }\n }","import { Menu } from \"../menu/Menu\";\nimport { FormImpl } from \"./FormImpl\";\nimport { Block } from \"../blocks/Block\";\nimport { keymap } from \"../keymap/KeyMap\";\nimport { Trigger } from \"../events/Triggers\";\nimport { Theme } from \"../application/Themes\";\nimport { BlockImpl } from \"../blocks/BlockImpl\";\nimport { Statement } from \"../database/Statement\";\nimport { Container } from \"../container/Container\";\nimport { TriggerFunction } from \"../events/TriggerFunction\";\nimport { TableDefinition } from \"../database/TableDefinition\";\nimport { Component, AfterViewInit, OnInit } from \"@angular/core\";\nimport { ListOfValuesFunction } from \"../listval/ListOfValuesFunction\";\n\n\nexport interface CallBack\n{\n    (form:Form, cancel:boolean) : void;\n}\n\n\n@Component({template: ''})\n\n\nexport class Form implements OnInit, AfterViewInit\n{\n    private _impl_:FormImpl;\n    // dont rename impl as it is read behind the scenes\n\n    constructor()\n    {\n        this._impl_ = new FormImpl(this);\n    }\n\n    public get name() : string\n    {\n        return(this.constructor.name);\n    }\n\n    public set title(title:string)\n    {\n        this._impl_.title = title;\n    }\n\n    public get title() : string\n    {\n        return(this._impl_.title);\n    }\n\n    public set menu(menu:Menu)\n    {\n        this._impl_.setMenu(menu);\n    }\n\n    public get menu()\n    {\n        return(this._impl_.getMenu());\n    }\n\n    public focus() : void\n    {\n        this._impl_.focus();\n    }\n\n    public get block() : Block\n    {\n        return(this._impl_.block?.block);\n    }\n\n    public get connected() : boolean\n    {\n        return(this._impl_.getApplication().connected);\n    }\n\n    public groupfields(groups:string[]) : void\n    {\n        this._impl_.groupfields(groups);\n    }\n\n    public get popup() : boolean\n    {\n        return(this._impl_.popup);\n    }\n\n    public get colors() : Theme\n    {\n        return(this._impl_.getApplication().config.colors);\n    }\n\n    public getBlockFilter(block:string) : string\n    {\n        let blk:Block = this.getBlock(block);\n\n        if (blk != null && blk.searchfilter.length > 0)\n            return(this.colors.rowindicator);\n\n        return(\"\");\n    }\n\n    public showRowIndicator(block:string, row:number) : boolean\n    {\n        if (row == this.getCurrentRow(block)) return(true);\n        return(false);\n    }\n\n    public getRowIndicator(block:string, row:number) : string\n    {\n        if (row == this.getCurrentRow(block)) return(this.colors.rowindicator);\n        return(\"\");\n    }\n\n    public getCurrentRow(block:string) : number\n    {\n        return(this._impl_.getCurrentRow(block));\n    }\n\n    public getCurrentRecord(block:string) : number\n    {\n        return(this._impl_.getCurrentRecord(block));\n    }\n\n    public getBlock(block:string) : Block\n    {\n        let impl:BlockImpl = this._impl_.getBlock(block);\n        if (impl != null) return(impl.block);\n        return(null);\n    }\n\n    public addListOfValues(block:string, func:ListOfValuesFunction, field:string, id?:string) :  void\n    {\n        let impl:BlockImpl = this._impl_.getBlock(block);\n        if (impl != null) impl.addListOfValues(true,func,field,id);\n    }\n\n    public newform(form:any, parameters?:Map<string,any>) : void\n    {\n        this._impl_.showform(form,true,parameters);\n    }\n\n    public showform(form:any, parameters?:Map<string,any>) : void\n    {\n        this._impl_.showform(form,false,parameters);\n    }\n\n    public async callform(form:any, parameters?:Map<string,any>) : Promise<Form>\n    {\n        let impl:FormImpl = await this._impl_.callform(form,false,parameters);\n        if (impl != null) return(impl.form);\n        return(null);\n    }\n\n    public getCallStack() : Form[]\n    {\n        return(this._impl_.getCallStack());\n    }\n\n    public clearCallStack() : void\n    {\n        this._impl_.clearStack();\n    }\n\n    public getTable(block:string) : TableDefinition\n    {\n        return(this.getBlock(block)?.table);\n    }\n\n    public get parameters() : Map<string,any>\n    {\n        return(this._impl_.getParameters());\n    }\n\n    public getValue(block:string, record:number, field:string) : any\n    {\n        let blk:Block = this.getBlock(block);\n        if (blk != null) return(blk.getValue(record,field));\n        return(null);\n    }\n\n    public async setValue(block:string, record:number, field:string, value:any) : Promise<boolean>\n    {\n        let blk:Block = this.getBlock(block);\n        if (blk != null) return(await blk.setValue(record,field,value));\n        return(false);\n    }\n\n    public cancelled() : boolean\n    {\n        return(this._impl_.wasCancelled());\n    }\n\n    public async clear() : Promise<boolean>\n    {\n        return(await this._impl_.clear());\n    }\n\n    public cancel() : void\n    {\n        this._impl_.cancel();\n    }\n\n    public async close(dismiss?:boolean) : Promise<void>\n    {\n        await this._impl_.close(dismiss);\n    }\n\n    public async sendKey(key:keymap) : Promise<boolean>\n    {\n        return(await this._impl_.sendkey(null,key));\n    }\n\n    public setCallback(func:CallBack) : void\n    {\n        this._impl_.setCallback(func);\n    }\n\n    public addTrigger(func:TriggerFunction, types?:Trigger|Trigger[]) : void\n    {\n        this._impl_.addTrigger(this,func,types);\n    }\n\n\n    public addKeyTrigger(func:TriggerFunction, keys?:keymap|keymap[]) : void\n    {\n        this._impl_.addKeyTrigger(this,func,keys);\n    }\n\n\n    public enterquery(force?:boolean) : void\n    {\n        this._impl_.enterquery(force);\n    }\n\n\n    public executequery(force?:boolean) : void\n    {\n        this._impl_.executequery(force);\n    }\n\n\n    public prevBlock() : void\n    {\n        this._impl_.block.sendkey(null,keymap.prevblock);\n    }\n\n\n    public nextBlock() : void\n    {\n        this._impl_.block.sendkey(null,keymap.nextblock);\n    }\n\n\n    public async execute(stmt:Statement, firstrow?:boolean, firstcolumn?:boolean) : Promise<any>\n    {\n        return(this._impl_.execute(stmt,firstrow,firstcolumn));\n    }\n\n\n    public addFieldTrigger(listener:TriggerFunction, types:Trigger|Trigger[], fields?:string|string[]) : void\n    {\n        this._impl_.addFieldTrigger(this,listener,types,fields);\n    }\n\n    public ngOnInit()\n    {\n        this._impl_.getApplication().setContainer();\n    }\n\n    public ngAfterViewInit(): void\n    {\n\n        let container:Container = this._impl_.getApplication().getContainer();\n        this._impl_.getApplication().dropContainer();\n        this._impl_.newForm(container);\n    }\n\n    public alert(message:string, title?:string, width?:string, height?:string) : void\n    {\n        if (title == null) title = this.name;\n        this._impl_.alert(message,title,width,height);\n    }\n}","export enum Case\n{\n    upper,\n    lower,\n    mixed\n}","import { Field } from './Field';\nimport { CheckBox } from './CheckBox';\nimport { Case } from '../database/Case';\nimport { RadioButton } from './RadioButton';\nimport { KeyCodes } from '../keymap/KeyCodes';\nimport { RecordState } from '../blocks/Record';\nimport { Context } from '../application/Context';\nimport { Key, keymap, KeyMapper } from '../keymap/KeyMap';\nimport { ApplicationImpl } from \"../application/ApplicationImpl\";\nimport { FieldDefinition, FieldOptions } from './FieldDefinition';\nimport { FieldImplementation, FieldInterface, FieldType } from './FieldType';\nimport { AfterViewInit, Component, ElementRef, Input, ViewChild } from \"@angular/core\";\n\n\n@Component({\n    selector: 'field',\n    template: '<span #container></span>'\n})\n\n\nexport class FieldInstance implements AfterViewInit\n{\n    private lvalue:any;\n    private guid$:string;\n    private def:FieldDefinition;\n    private app:ApplicationImpl;\n    private clazz:FieldInterface;\n    private fgroup$:Field = null;\n    private valid$:boolean = true;\n    private lvalid:boolean = true;\n    private enforce:boolean = false;\n    private enabled$:boolean = false;\n    private readonly$:boolean = false;\n    private mandatory$:boolean = false;\n    private firstchange:boolean = true;\n    private values:Map<string,any> = null;\n    private container:HTMLSpanElement = null;\n    private state$:RecordState = RecordState.na;\n    private options$:FieldOptions = {query: true, insert: true, update: true, navigable: true};\n\n    @Input(\"id\")    public id$:string = \"\";\n    @Input(\"row\")   public row$:number = -1;\n    @Input(\"name\")  public name$:string = \"\";\n    @Input(\"block\") public block$:string = \"\";\n    @Input(\"group\") public group$:string = \"\";\n    @Input(\"class\") public class$:string = \"\";\n    @Input(\"style\") public style$:string = \"\";\n    @Input(\"size\")  public size$:string = null;\n    @Input(\"value\") public value$:string = null;\n\n    @ViewChild(\"container\", {read: ElementRef}) private containerelem: ElementRef;\n\n\n    constructor(ctx:Context)\n    {\n        this.app = ctx.app[\"_impl_\"];\n    }\n\n    public get id() : string\n    {\n        return(this.id$);\n    }\n\n    public get row() : number\n    {\n        return(this.row$);\n    }\n\n    public set row(row:number)\n    {\n        this.row$ = row;\n    }\n\n    public set seq(seq:number)\n    {\n        if (this.clazz != null)\n        this.clazz.tabindex = seq;\n    }\n\n    public get seq() : number\n    {\n        if (this.clazz == null) return(0);\n        else return(this.clazz.tabindex);\n    }\n\n    public get name() : string\n    {\n        return(this.name$);\n    }\n\n    public get fname() : string\n    {\n        let name:string = this.block$+\".\"+this.name;\n        if (this.id.length > 0) name += \".\"+this.id;\n        name += \"[\"+this.row+\"](\"+this.guid+\")\";\n        return(name);\n    }\n\n    public set guid(guid:string)\n    {\n        this.guid$ = guid;\n    }\n\n    public get guid() : string\n    {\n        return(this.guid$);\n    }\n\n    public get block() : string\n    {\n        return(this.block$);\n    }\n\n    public get group() : string\n    {\n        return(this.group$);\n    }\n\n    public get value() : any\n    {\n        if (this.clazz == null) return(null);\n\n        let value:any = this.clazz.value;\n        if ((\"\"+value).trim().length == 0) value = null;\n\n        return(value);\n    }\n\n    public get parent() : Field\n    {\n        return(this.fgroup$);\n    }\n\n    public set parent(field:Field)\n    {\n        this.fgroup$ = field;\n    }\n\n    public get fieldoptions() : FieldOptions\n    {\n        return(this.options$);\n    }\n\n    public get enabled() : boolean\n    {\n        return(this.enabled$);\n    }\n\n    public get state() : RecordState\n    {\n        return(this.state$);\n    }\n\n    public set state(state:RecordState)\n    {\n        this.state$ = state;\n    }\n\n    public set readonly(flag:boolean)\n    {\n        this.readonly$ = flag;\n    }\n\n    public get readonly() : boolean\n    {\n        return(this.readonly$);\n    }\n\n    public get mandatory() : boolean\n    {\n        return(this.mandatory$);\n    }\n\n    public setPossibleValues(values:Set<any>|Map<string,any>, enforce:boolean) : void\n    {\n        this.enforce = enforce;\n        let type:string = this.clazz.constructor.name;\n\n        if (type == \"DropDown\") this.setDropDownValues(values);\n        if (type == \"TextField\") this.setTextFieldValues(values);\n    }\n\n    private setTextFieldValues(values:Set<any>|Map<string,any>) : void\n    {\n        let name:string = this.block+\".\"+this.name;\n        if (this.id.length > 0) name += \".\"+this.id;\n        let list:HTMLElement = document.getElementById(name);\n\n        if (list == null)\n        {\n            let kvpair:boolean = true;\n\n            if (values instanceof Map) this.values = new Map(values);\n            else\n            {\n                kvpair = false;\n                this.values = new Map<string,any>();\n                values.forEach((val) => this.values.set(val,val));\n            }\n\n            list = document.createElement(\"datalist\");\n            list.setAttribute(\"id\",name);\n\n            this.values.forEach((val,key) =>\n            {\n                let option:HTMLOptionElement = document.createElement(\"option\");\n\n                option.text = val;\n                if (kvpair) option.value = key;\n\n                list.append(option);\n            })\n\n            this.clazz.element.appendChild(list);\n        }\n\n        this.clazz.element.setAttribute(\"list\",name);\n    }\n\n    private setDropDownValues(xvalues:Set<any>|Map<string,any>) : void\n    {\n        if (xvalues instanceof Map) this.values = new Map(xvalues);\n        else\n        {\n            this.values = new Map<string,any>();\n            xvalues.forEach((val) => this.values.set(val,val));\n        }\n\n        this.values.forEach((val,key) =>\n        {\n            let option:HTMLOptionElement = document.createElement(\"option\");\n\n            option.text = val;\n            option.value = key;\n\n            this.clazz.element.appendChild(option);\n        });\n    }\n\n    public set mandatory(flag:boolean)\n    {\n        this.mandatory$ = flag;\n        if (flag) this.addClass(\"mandatory\");\n        else      this.removeClass(\"mandatory\");\n    }\n\n    public focus() : boolean\n    {\n        if (!this.enabled) return(false);\n        setTimeout(() => {this.clazz.focus()},0);\n        return(true);\n    }\n\n    public blur() : void\n    {\n        setTimeout(() => {this.clazz.element.blur()},0);\n    }\n\n    public addClass(clazz:string) : void\n    {\n        if (this.clazz != null)\n            this.clazz.element.classList.add(clazz);\n    }\n\n    public removeClass(clazz:string) : void\n    {\n        if (this.clazz != null)\n            this.clazz.element.classList.remove(clazz);\n    }\n\n    public get current() : boolean\n    {\n        return(this.guid.startsWith(\"c\"));\n    }\n\n    public set value(value:any)\n    {\n        if (value == null) value = \"\";\n        if (this.clazz != null) this.clazz.value = value;\n    }\n\n    public get valid() : boolean\n    {\n        return(this.valid$);\n    }\n\n    public get dirty() : boolean\n    {\n        return(!this.firstchange);\n    }\n\n    public validate() : boolean\n    {\n        if (this.state == RecordState.qmode || this.state == RecordState.na)\n            return(true);\n\n        if (!this.clazz.validate())\n            return(false);\n\n        if (this.mandatory && (this.value == null || (\"\"+this.value).length == 0))\n            return(false);\n\n        if (this.enforce && this.values != null && this.value != null)\n            if (!this.values.has(this.value)) return(false);\n\n        return(true);\n    }\n\n    public set valid(flag:boolean)\n    {\n        if (flag == this.valid$)\n            return;\n\n        if (flag)\n        {\n            this.valid$ = flag;\n            this.removeClass(\"invalid\");\n        }\n        else\n        {\n            if (this.enabled && !this.readonly)\n            {\n                this.valid$ = flag;\n                this.addClass(\"invalid\");\n            }\n        }\n    }\n\n    public enable()\n    {\n        this.setInputState();\n    }\n\n    public disable() : void\n    {\n        this.valid = true;\n        this.enabled$ = false;\n        this.readonly$ = true;\n        this.state = RecordState.na;\n\n        if (this.clazz != null)\n        {\n            this.clazz.enable = false;\n            this.clazz.readonly = true;\n        }\n    }\n\n    private setInputState() : void\n    {\n        this.enabled$ = false;\n\n        if (!this.options$.navigable)\n        {\n            if (this.clazz != null)\n                this.clazz.enable = false;\n\n            return;\n        }\n\n        if (this.state$ == RecordState.na) this.enabled$ = true;\n        else if (this.state$ == RecordState.insert && this.options$.insert) this.enabled$ = true;\n        else if (this.state$ == RecordState.update && this.options$.update) this.enabled$ = true;\n        else if (this.state$ == RecordState.qmode && this.options$.query) this.enabled$ = true;\n\n        if (this.clazz != null)\n        {\n            if (!this.enabled$ && this.state$ == RecordState.update)\n            {\n                this.enabled$ = true;\n                this.readonly$ = true;\n            }\n\n            this.clazz.enable = this.enabled$;\n            this.clazz.readonly = this.readonly$;\n        }\n    }\n\n    public get definition() : FieldDefinition\n    {\n        return(this.def);\n    }\n\n    public set definition(def:FieldDefinition)\n    {\n        let override:boolean = false;\n\n        if (this.def != null)\n        {\n            override = true;\n\n            if (def.hasOwnProperty(\"case\"))\n                this.def.case = def.case;\n\n            if (def.hasOwnProperty(\"mandatory\"))\n                this.def.mandatory = def.mandatory;\n\n            if (def.hasOwnProperty(\"type\"))\n                this.def.type = def.type;\n\n            if (def.hasOwnProperty(\"fieldoptions\"))\n            {\n                if (def.hasOwnProperty(\"query\"))  this.def.fieldoptions.query = def.fieldoptions.query;\n                if (def.hasOwnProperty(\"insert\")) this.def.fieldoptions.insert = def.fieldoptions.insert;\n                if (def.hasOwnProperty(\"update\")) this.def.fieldoptions.update = def.fieldoptions.update;\n                if (def.hasOwnProperty(\"navigable\")) this.def.fieldoptions.navigable = def.fieldoptions.navigable;\n            }\n        }\n\n        this.def = def;\n        this.setType(def.type);\n\n        if (!this.def.hasOwnProperty(\"case\"))\n            this.def.case = Case.mixed;\n\n        if (this.def.hasOwnProperty(\"mandatory\"))\n            this.mandatory = this.def.mandatory;\n\n        if (this.def.fieldoptions != null)\n        {\n            this.options$ = this.def.fieldoptions;\n            if (!this.options$.hasOwnProperty(\"query\"))  this.options$.query = true;\n            if (!this.options$.hasOwnProperty(\"insert\")) this.options$.insert = true;\n            if (!this.options$.hasOwnProperty(\"update\")) this.options$.update = true;\n            if (!this.options$.hasOwnProperty(\"navigable\")) this.options$.navigable = true;\n        }\n\n        if (override)\n            this.setInputState();\n    }\n\n\n    private setType(type:FieldType) : void\n    {\n        let seq:number = this.seq;\n        this.container.innerHTML = null;\n        let cname:any = FieldImplementation.getClass(FieldType[type]);\n\n        if (cname != null)\n        {\n            this.clazz = new cname();\n\n            this.container.innerHTML = this.clazz.html;\n            this.clazz.element = this.container.children[0] as HTMLElement;\n\n            if (this.size$ != null) this.clazz.size = +this.size$;\n            if (this.value$ != null) this.clazz.value = this.value$;\n            if (this.class$ != \"\") this.clazz.element.classList.add(this.class$);\n            if (this.style$ != \"\") this.clazz.element.style.cssText = this.style$;\n\n            this.seq = seq;\n\n            this.disable();\n            this.addTriggers();\n\n            // Ugly, but need to set name\n            (this.clazz.element as any).name = this.name;\n        }\n    }\n\n\n    public async onEvent(event:any)\n    {\n        let keypress:boolean = false;\n\n        if (this.fgroup$ == null)\n            return;\n\n        if (event.type == \"focus\")\n        {\n            this.firstchange = true;\n            this.lvalue = this.value;\n            this.lvalid = this.valid$;\n            this.fgroup$[\"onEvent\"](event,this,\"focus\");\n        }\n\n        if (event.type == \"blur\")\n        {\n            if (this.dirty && this.value == this.lvalue && !this.lvalid)\n                this.valid = false;\n\n            this.fgroup$[\"onEvent\"](event,this,\"blur\");\n        }\n\n        if (event.type == \"click\" || event.type == \"dblclick\")\n            this.fgroup$[\"onEvent\"](event,this,event.type);\n\n        if (event.type == \"change\")\n        {\n            if (this.enabled && !this.readonly)\n                if (!this.valid) this.fgroup$.valid = false;\n\n            this.valid = this.validate();\n\n            if (this.clazz instanceof CheckBox)\n                this.value = this.value$;\n\n            if (this.clazz instanceof RadioButton)\n                this.value = this.value$;\n\n            this.fgroup$[\"onEvent\"](event,this,\"change\");\n        }\n\n        if (event.type == \"keydown\" && event.keyCode == 8)\n            keypress = true;\n\n        if (event.type == \"keydown\" && !keypress)\n        {\n            if (+event.keyCode >= 16 && +event.keyCode <= 20)\n                return;\n\n            let keydef:Key =\n            {\n                code  : event.keyCode,\n                alt   : event.altKey,\n                ctrl  : event.ctrlKey,\n                meta  : event.metaKey,\n                shift : event.shiftKey\n            }\n\n            let map:string = KeyMapper.map(keydef);\n            let key:keymap = KeyMapper.keymap(map);\n\n            if (key == keymap.paste)\n                console.log(\"paste\");\n\n            if (key == keymap.undo || key == keymap.paste)\n            {\n                setTimeout(() => {this.blur()},1);\n                setTimeout(() => {this.focus()},1);\n                return;\n            }\n\n            if (key != null)\n            {\n                // handled by application\n                if\n                (\n                    key == keymap.close           ||\n                    key == keymap.listval         ||\n                    key == keymap.connect         ||\n                    key == keymap.disconnect      ||\n                    key == keymap.commit          ||\n                    key == keymap.rollback        ||\n                    key == keymap.delete          ||\n                    key == keymap.clearform       ||\n                    key == keymap.insertafter     ||\n                    key == keymap.insertbefore    ||\n                    key == keymap.enterquery      ||\n                    key == keymap.executequery\n                )\n                {\n                    this.fgroup$.copy(this);\n                    return;\n                }\n\n                this.fgroup$[\"onEvent\"](event,this,\"key\",key);\n            }\n        }\n\n        if (event.type == \"keypress\" || keypress)\n        {\n            if (this.readonly) return;\n\n            if (this.firstchange && (event.key.length == 1 || event.keyCode == KeyCodes.backspace))\n            {\n                this.firstchange = false;\n                if (!this.valid) this.fgroup$.valid = true;\n                this.fgroup$[\"onEvent\"](event,this,\"fchange\");\n            }\n\n            let value:any = this.value;\n            setTimeout(() => {this.continious(event,value);},0);\n        }\n    }\n\n\n    private continious(event:any, value:any) : void\n    {\n        if (this.value == value)\n            return;\n\n        if (this.def.type == FieldType.integer)\n        {\n            if (!this.valnumber(value))\n                return;\n        }\n\n        if (this.def.type == FieldType.decimal)\n        {\n            if (!this.valdecimal(value))\n                return;\n        }\n\n        if (this.value != null && this.def.case == Case.lower)\n            this.value = (\"\"+this.value).toLowerCase();\n\n        if (this.value != null && this.def.case == Case.upper)\n            this.value = (\"\"+this.value).toUpperCase();\n\n        this.fgroup$.onEvent(event,this,\"cchange\");\n    }\n\n\n    private valnumber(value:string) : boolean\n    {\n        if (this.state == RecordState.qmode)\n            return(true);\n\n        let nvalue:string = this.value;\n\n        if (nvalue == null || nvalue.trim().length == 0)\n            return(true);\n\n        let numeric:boolean = !isNaN(+nvalue);\n\n        if (!numeric || nvalue.indexOf(\".\") >= 0)\n        {\n            this.value = value;\n            return(false);\n        }\n\n        return(true);\n    }\n\n\n    private valdecimal(value:string) : boolean\n    {\n        if (this.state == RecordState.qmode)\n            return(true);\n\n        let nvalue:string = this.value;\n\n        if (nvalue == null || nvalue.trim().length == 0)\n            return(true);\n\n        let numeric:boolean = !isNaN(+nvalue);\n\n        if (!numeric)\n        {\n            this.value = value;\n            return(false);\n        }\n\n        return(true);\n    }\n\n\n    public ngAfterViewInit(): void\n    {\n\t\tthis.container = this.containerelem?.nativeElement as HTMLSpanElement;\n\n        this.id$ = this.id$.toLowerCase();\n        this.name$ = this.name$.toLowerCase();\n        this.block$ = this.block$.toLowerCase();\n\n        this.app.getContainer().register(this);\n    }\n\n\n    private addTriggers() : void\n    {\n        let impl:Node = this.container.firstChild;\n\n        if (impl == null) return;\n        impl.addEventListener(\"blur\", (event) => {this.onEvent(event)});\n        impl.addEventListener(\"focus\", (event) => {this.onEvent(event)});\n        impl.addEventListener(\"change\", (event) => {this.onEvent(event)});\n        impl.addEventListener(\"click\", (event) => {this.onEvent(event)});\n        impl.addEventListener(\"keydown\", (event) => {this.onEvent(event)});\n        impl.addEventListener(\"keypress\", (event) => {this.onEvent(event)});\n        impl.addEventListener(\"dblclick\", (event) => {this.onEvent(event)});\n    }\n}","import { dates } from \"./dates\";\n\nexport class DateUtils\n{\n    public parse(datestr:string, format?:string) : Date\n    {\n        return(dates.parse(datestr,format));\n    }\n\n    public format(date:Date, format?:string) : string\n    {\n        return(dates.format(date,format));\n    }\n}","import { Config } from '../application/Config';\nimport { Context } from '../application/Context';\nimport { FormInstance } from '../forms/FormInstance';\nimport { ApplicationImpl } from '../application/ApplicationImpl';\nimport { Component, AfterViewInit, Input, ViewChild, ElementRef } from '@angular/core';\n\n\ninterface Form\n{\n\tname:string;\n\tdef:FormInstance;\n}\n\n\n@Component({\n    selector: 'formlist',\n    template:\n\t`\n\t\t<div #html style=\"display: inline-block; white-space: nowrap;\"></div>\n\t`,\n    styles: []\n  })\n\nexport class FormList implements AfterViewInit\n{\n\tprivate root:Folder;\n\tprivate conf:Config;\n\tprivate page:string = \"\";\n\tprivate app:ApplicationImpl;\n\tprivate html:HTMLDivElement;\n\tprivate ready:boolean = false;\n\tprivate formsdef:FormInstance[];\n\n    @Input('root') name: string = \"/\";\n    @ViewChild(\"html\", {read: ElementRef}) private elem: ElementRef;\n\n    constructor(ctx:Context)\n    {\n\t\tthis.conf = ctx.conf;\n\t\tthis.app = ctx.app[\"_impl_\"];\n\t\tthis.root = new Folder(this.name);\n\t\tthis.conf.notify(this,\"setColors\");\n\n\t\tthis.app.setFormList(this);\n\n\t\tthis.formsdef = this.app.getFormsList();\n\t\tthis.parse();\n\n\t\tthis.page += \"<style>\\n\";\n\t\tthis.page += this.styles()+ \"\\n\";\n\t\tthis.page += \"</style>\\n\";\n\t\tthis.page += \"<div class='formlist'>\\n\";\n\t\tthis.page += this.print(\"/\",this.root,0,[true]);\n\t\tthis.page += \"</div>\\n\";\n\t}\n\n\n\tpublic open(folder:string) : void\n\t{\n\t\tif (!this.ready)\n\t\t{\n\t\t\tsetTimeout(() => {this.open(folder);},10);\n\t\t\treturn;\n\t\t}\n\n\t\tfolder = folder.trim();\n\t\tlet parts:string[] = folder.split(\"/\");\n\n\t\tlet current:Folder = this.root;\n\t\tfor(let i = 0; i < parts.length; i++)\n\t\t{\n\t\t\tcurrent = current.findFolder([parts[i]]);\n\t\t\tif (current == null) return;\n\n\t\t\tif (!current.content.classList.contains(\"formlist-active\"))\n\t\t\t{\n\t\t\t\tcurrent.img.src = \"/assets/images/open.jpg\";\n\t\t\t\tcurrent.content.classList.toggle(\"formlist-active\");\n\t\t\t}\n\t\t}\n\t}\n\n\n\tprivate print(path:string, root:Folder, level:number, last:boolean[]) : string\n\t{\n\t\tlet html:string = \"\";\n\n\t\thtml += this.folder(path,root,level,last);\n\t\thtml += \"<div class='formlist-folder-content' id='\"+path+\"-content'>\";\n\n\t\tlevel++;\n\t\tlast.push(false);\n\t\tif (path == \"/\") path = \"\";\n\t\tlet subs:number = root.folders.length;\n\t\tlet forms:number = root.forms.length;\n\n\t\tfor(let i = 0; i < subs; i++)\n\t\t{\n\t\t\tlet folder:Folder = root.folders[i];\n\n\t\t\tif (i == subs - 1 && forms == 0)\n\t\t\t\tlast[level] = true;\n\n\t\t\thtml += this.print(path+\"/\"+folder.name,folder,level,last);\n\t\t}\n\n\t\tlast[level] = false;\n\t\thtml += this.forms(root,level,last);\n\t\tlast.pop();\n\n\t\thtml += \"</div>\";\n\t\treturn(html);\n\t}\n\n\n\tprivate parse() : void\n\t{\n\t\tfor(let i = 0; i < this.formsdef.length; i++)\n\t\t{\n\t\t\tlet path:string = this.formsdef[i].path;\n\t\t\tif (!this.formsdef[i].navigable) continue;\n\n\t\t\tlet form:string = path;\n\t\t\tlet folder:string = \"/\";\n\n\t\t\tlet pos:number = path.lastIndexOf(\"/\");\n\n\t\t\tif (pos >= 0)\n\t\t\t{\n\t\t\t\tform = path.substring(pos+1);\n\t\t\t\tfolder = path.substring(0,pos);\n\t\t\t}\n\n\t\t\tlet current:Folder = this.root;\n\t\t\tlet parts:string[] = folder.split(\"/\");\n\n\t\t\tfor(let p = 1; p < parts.length; p++)\n\t\t\t{\n\t\t\t\tif (parts[p] == \"\") parts[p] = \"/\";\n\t\t\t\tcurrent = current.getFolder(parts[p].trim());\n\t\t\t}\n\n\t\t\tcurrent.addForm(form,this.formsdef[i]);\n\t\t}\n\t}\n\n\n\tpublic ngAfterViewInit(): void\n\t{\n\t\tthis.html = this.elem?.nativeElement as HTMLDivElement;\n\n\t\tthis.html.innerHTML = this.page;\n\t\tlet folders:HTMLCollectionOf<Element> = this.html.getElementsByClassName(\"formlist-folder\");\n\n\t\tfor (let i = 0; i < folders.length; i++)\n\t\t{\n\t\t\tlet container:Element = folders.item(i);\n\t\t\tlet content:Element = document.getElementById(container.id+\"-content\");\n\t\t\tlet lnk:Element = container.querySelector(\"[id='\"+container.id+\"-lnk']\");\n\t\t\tlet img:HTMLImageElement = container.querySelector(\"[id='\"+container.id+\"-img']\");\n\n\t\t\tlet folder:Folder = this.root.findFolder(container.id.split(\"/\"));\n\n\t\t\tfolder.img = img;\n\t\t\tfolder.lnk = lnk;\n\t\t\tfolder.content = content;\n\t\t\tfolder.img.addEventListener(\"click\",(event) => this.toggle(event));\n\t\t\tfolder.lnk.addEventListener(\"click\",(event) => this.toggle(event));\n\t\t}\n\n\t\tlet forms:HTMLCollectionOf<Element> = this.html.getElementsByClassName(\"formlist-form\");\n\n\t\tfor(let i = 0; i < forms.length; i++)\n\t\t{\n\t\t\tlet form:Element = forms.item(i);\n\t\t\tlet lnk:Element = form.querySelector(\"[id='\"+form.id+\"-lnk']\");\n\t\t\tlnk.addEventListener(\"click\", (event) => this.show(event));\n\t\t}\n\n\t\tthis.setColors();\n\n\t\tthis.open(\"/\");\n\t\tthis.root.lnk.innerHTML = this.name;\n\t\tthis.ready = true;\n\t}\n\n\n\tpublic setColors() : void\n\t{\n\t\tlet link:string = this.conf.colors.link;\n\t\tlet tree:string = this.conf.colors.foldertree;\n\t\tlet list:HTMLCollectionOf<Element> = null;\n\n\t\tlist = this.html.getElementsByClassName(\"formlist-txt\");\n\t\tfor (let i = 0; i < list.length; i++)(list[i] as HTMLElement).style.color = tree;\n\n\t\tlist = this.html.getElementsByClassName(\"formlist-link\");\n\t\tfor (let i = 0; i < list.length; i++)(list[i] as HTMLElement).style.color = link;\n\n\t\tlist = this.html.getElementsByClassName(\"formlist-off\");\n\t\tfor (let i = 0; i < list.length; i++)(list[i] as HTMLElement).style.borderLeft = \"1px solid \"+tree;\n\n\t\tlist = this.html.getElementsByClassName(\"formlist-vln\");\n\t\tfor (let i = 0; i < list.length; i++)(list[i] as HTMLElement).style.borderLeft = \"1px solid \"+tree;\n\n\t\tlist = this.html.getElementsByClassName(\"formlist-cnr\");\n\t\tfor (let i = 0; i < list.length; i++)\n\t\t{\n\t\t\t(list[i] as HTMLElement).style.borderLeft = \"1px solid \"+tree;\n\t\t\t(list[i] as HTMLElement).style.borderBottom = \"1px solid \"+tree;\n\t\t}\n\t}\n\n\n\tprivate toggle(event:any) : void\n\t{\n\t\tlet fname:string = event.target.id;\n\t\tfname = fname.substring(0,fname.length-4);\n\n\t\tlet folder:Folder = this.root.findFolder(fname.split(\"/\"));\n\t\tfolder.content.classList.toggle(\"formlist-active\");\n\n\t\tif (folder.content.classList.contains(\"formlist-active\"))\n\t\t{\n\t\t\tfolder.img.src = \"/assets/images/open.jpg\";\n\t\t}\n\t\telse\n\t\t{\n\t\t\tfolder.img.src = \"/assets/images/closed.jpg\";\n\t\t}\n\t}\n\n\n\tprivate show(event:any) : void\n\t{\n\t\tlet fname:string = event.target.id;\n\t\tfname = fname.substring(0,fname.length-4);\n\t\tthis.app.showform(fname,false);\n\t}\n\n\n\tprivate folder(path:string, root:Folder, level:number, last:boolean[]) : string\n\t{\n\t\tlet html:string = \"\";\n\t\thtml += \"<div id='\"+path+\"' class='formlist-folder'>\\n\";\n\n\t\tif (level > 0)\n\t\t{\n\t\t\thtml += this.half();\n\t\t\tfor(let i = 1; i < level; i++)\n\t\t\t\thtml += this.indent(last[i]);\n\t\t}\n\n\t\tif (level > 0) html += this.pre(last[level]);\n\t\thtml += \"<img class='formlist-img' id='\"+path+\"-img' src='/assets/images/closed.jpg'>\\n\";\n\t\thtml += \"<span class='formlist-txt' id='\"+path+\"-lnk'>\"+root.name+\"</span>\\n\";\n\t\thtml += \"</div>\\n\";\n\n\t\treturn(html);\n\t}\n\n\n\tprivate forms(root:Folder, level:number, last:boolean[]) : string\n\t{\n\t\tlet html:string = \"\";\n\n\t\tfor(let i = 0; i < root.forms.length; i++)\n\t\t{\n\t\t\tif (i == root.forms.length - 1) last[level] = true;\n\t\t\thtml += this.form(root.forms[i],level,last);\n\t\t}\n\n\t\treturn(html);\n\t}\n\n\n\tprivate form(form:Form, level:number, last:boolean[])\n\t{\n\t\tlet html:string = \"\";\n\t\thtml += \"<div id='\"+form.def.name+\"' class='formlist-form'>\\n\";\n\n\t\thtml += this.half();\n\t\tfor(let i = 1; i < level; i++)\n\t\t\thtml += this.indent(last[i]);\n\n\t\tif (level > 0) html += this.pre(last[last.length-1]);\n\n\t\thtml += \"<span class='formlist-link' id='\"+form.def.name+\"-lnk'> \"+form.name+\"</span>\\n\";\n\t\thtml += \"</div>\\n\";\n\n\t\treturn(html);\n\t}\n\n\n\tprivate pre(last:boolean) : string\n\t{\n\t\tlet html:string = \"\";\n\n\t\thtml += \"<span class='formlist-lct'>\\n\";\n\t\thtml += \" <span class='formlist-off'></span>\\n\";\n\t\thtml += \" <span class='formlist-cnr'></span>\\n\";\n\n\t\tif (last) html += \"<span class='formlist-end'></span>\\n\";\n\t\telse\t  html += \"<span class='formlist-vln'></span>\\n\";\n\n\t\thtml += \"</span>\\n\";\n\n\t\treturn(html);\n\t}\n\n\n\tprivate indent(skip:boolean) : string\n\t{\n\t\tlet html:string = \"\";\n\t\tif (skip)\n\t\t{\n\t\t\thtml += \"<span class='formlist-lct'>\\n\";\n\t\t\thtml += \"</span>\\n\";\n\t\t\thtml += \" <span class='formlist-ind'></span>\\n\";\n\t\t}\n\t\telse\n\t\t{\n\t\t\thtml += \"<span class='formlist-lct'>\\n\";\n\t\t\thtml += \" <span class='formlist-vln'></span>\\n\";\n\t\t\thtml += \" <span class='formlist-vln'></span>\\n\";\n\t\t\thtml += \" <span class='formlist-vln'></span>\\n\";\n\t\t\thtml += \"</span>\\n\";\n\t\t\thtml += \" <span class='formlist-ind'></span>\\n\";\n\t\t}\n\t\treturn(html);\n\t}\n\n\n\tprivate half() : string\n\t{\n\t\tlet html:string = \"\";\n\t\thtml += \" <span class='formlist-ind'></span>\\n\";\n\t\treturn(html);\n\t}\n\n\n\tprivate styles() : string\n\t{\n\t\tlet styles:string =\n\t\t`\n\t\t.formlist\n\t\t{\n\t\t\twidth: 1px;\n\t\t\tposition: relative;\n\t\t}\n\n    \t.formlist-folder\n    \t{\n\t\t\tmargin: 0;\n\t\t\tpadding: 0;\n\t\t\twidth: 100%;\n\t\t\theight: 100%;\n\t\t\tfont-size: 0;\n\t\t\tposition: relative;\n\t\t\tborder-collapse: collapse;\n    \t}\n\n\t\t.formlist-folder-content\n\t\t{\n\t\t\tdisplay: none;\n\t\t}\n\n\t\t.formlist-lct\n\t\t{\n\t\t\twidth: 16px;\n\t\t\theight: 24px;\n\t\t\tpointer-events:none;\n\t\t\twhite-space: nowrap;\n\t\t\tdisplay: inline-block;\n\t\t\tvertical-align: middle;\n\t\t}\n\n\t\t.formlist-txt\n\t\t{\n\t\t\twidth: 16px;\n\t\t\theight: 21px;\n\t\t\tfont-size: 15px;\n\t\t\tcursor: pointer;\n\t\t\twhite-space: nowrap;\n\t\t\tdisplay: inline-block;\n\t\t\tvertical-align: bottom;\n\t\t}\n\n\t\t.formlist-off\n\t\t{\n\t\t\twidth: 16px;\n\t\t\theight: 4px;\n\t\t\tdisplay: block;\n\t\t\tpointer-events:none;\n\t\t}\n\n\t\t.formlist-vln\n\t\t{\n\t\t\twidth: 16px;\n\t\t\theight: 12px;\n\t\t\tdisplay: block;\n\t\t\tpointer-events:none;\n\t\t}\n\n\t\t.formlist-cnr\n\t\t{\n\t\t\twidth: 16px;\n\t\t\theight: 8px;\n\t\t\tdisplay: block;\n\t\t\tpointer-events:none;\n\t\t}\n\n\t\t.formlist-end\n\t\t{\n\t\t\twidth: 16px;\n\t\t\theight: 12px;\n\t\t\tdisplay: block;\n\t\t\tpointer-events:none;\n\t\t}\n\n\t\t.formlist-ind\n\t\t{\n\t\t\twidth: 12px;\n\t\t\theight: 24px;\n\t\t\twhite-space: nowrap;\n\t\t\tpointer-events:none;\n\t\t\tdisplay: inline-block;\n\t\t\tvertical-align: middle;\n\t\t}\n\n\t\t.formlist-img\n\t\t{\n\t\t\twidth: 24px;\n\t\t\theight: 24px;\n\t\t\tcursor: pointer;\n\t\t\tvertical-align: middle;\n\t\t}\n\n\t\t.formlist-link\n\t\t{\n\t\t\twidth: 16px;\n\t\t\theight: 22px;\n\t\t\tcursor: pointer;\n\t\t\tfont-size: 15px;\n\t\t\tmargin-left: 8px;\n\t\t\tfont-style: italic;\n\t\t\twhite-space: nowrap;\n\t\t\tdisplay: inline-block;\n\t\t\tvertical-align: bottom;\n\t\t}\n\n\t\t.formlist-form\n\t\t{\n\t\t\tmargin: 0;\n\t\t\tpadding: 0;\n\t\t\tfont-size: 0;\n\t\t\tdisplay: block;\n\t\t\tborder-collapse: collapse;\n\t\t}\n\n\t\t.formlist-active\n\t\t{\n\t\t\tdisplay: block;\n\t\t}\n\t\t`;\n\n\t\treturn(styles);\n\t}\n}\n\n\nclass Folder\n{\n\tname:string;\n\tforms:Form[] = [];\n\tfolders:Folder[] = [];\n\n\tlnk:Element;\n\tcontent:Element;\n\timg:HTMLImageElement;\n\n\tconstructor(name:string)\n\t{\n\t\tthis.name = name;\n\t}\n\n\tgetFolder(next:string) : Folder\n\t{\n\t\tif (next == this.name) return(this);\n\n\t\tfor(let i = 0; i < this.folders.length; i++)\n\t\t\tif (this.folders[i].name == next) return(this.folders[i]);\n\n\t\tlet folder:Folder = new Folder(next);\n\t\tthis.folders.push(folder);\n\n\t\treturn(folder);\n\t}\n\n\tfindFolder(path:string[]) : Folder\n\t{\n\t\twhile(path[0] == \"\") path.shift();\n\t\tif (path.length == 0) return(this);\n\n\t\tlet next:Folder = null;\n\t\tfor(let i = 0; i < this.folders.length; i++)\n\t\t{\n\t\t\tif (this.folders[i].name == path[0])\n\t\t\t{\n\t\t\t\tnext = this.folders[i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (next == null)\n\t\t\treturn(null);\n\n\t\tpath.shift();\n\t\treturn(next.findFolder(path));\n\t}\n\n\taddForm(name:string, form:FormInstance) : void\n\t{\n\t\tthis.forms.push({name:name, def:form});\n\t}\n\n\tprint() : void\n\t{\n\t\tconsole.log(\"\");\n\t\tconsole.log(\"Folder: \"+this.name);\n\n\t\tfor(let i = 0; i < this.forms.length; i++)\n\t\t\tconsole.log(\"Form: \"+this.forms[i].name);\n\n\t\tfor(let i = 0; i < this.folders.length; i++)\n\t\t\tthis.folders[i].print();\n\t}\n}","import { Context } from '../application/Context';\nimport { Application } from '../application/Application';\nimport { ApplicationImpl } from '../application/ApplicationImpl';\nimport { Component, ViewChild, ElementRef, AfterViewInit } from '@angular/core';\n\n\n@Component({\n  selector: 'formarea',\n  template: '<div #formarea></div>',\n  styleUrls: []\n})\n\n\nexport class FormArea implements AfterViewInit\n{\n\tprivate app:Application = null;\n\t@ViewChild(\"formarea\", {read: ElementRef}) private formarea: ElementRef;\n\n\tconstructor(ctx:Context)\n\t{\n\t\tthis.app = ctx.app;\n\t}\n\n\tpublic getFormsArea() : HTMLElement\n\t{\n        return(this.formarea.nativeElement);\n\t}\n\n\tpublic ngAfterViewInit(): void\n\t{\n\t\tlet impl:ApplicationImpl = this.app[\"_impl_\"];\n\t\timpl.setFormArea(this);\n\t}\n}","import { Context } from \"./Context\";\nimport { Popup } from \"../popup/Popup\";\nimport { PopupWindow } from \"../popup/PopupWindow\";\nimport { ApplicationImpl } from \"./ApplicationImpl\";\nimport { PopupInstance } from \"../popup/PopupInstance\";\nimport { AfterViewInit, Component, ElementRef, ViewChild } from \"@angular/core\";\n\n\n@Component({\n    template:\n    `\n        <div #keymap></div>\n        <button style=\"width: 100%; height: 1px\" #ok></button>\n    `\n})\n\n\nexport class KeyMapHelp implements Popup, AfterViewInit\n{\n    public top?: string;\n    public left?: string;\n    public width?: string = \"300px\";\n    public height?: string = \"475px\";\n    public title: string = \"ShortKeys\";\n\n    private html:string = null;\n    private win:PopupWindow = null;\n    private map:HTMLDivElement = null;\n    private okbtn:HTMLButtonElement = null;\n\n    @ViewChild(\"ok\", {read: ElementRef}) private okelem: ElementRef;\n    @ViewChild(\"keymap\", {read: ElementRef}) private mapelem: ElementRef;\n\n\n    public static show(app:ApplicationImpl)\n    {\n        let pinst:PopupInstance = new PopupInstance();\n        pinst.display(app,KeyMapHelp);\n    }\n\n\n    constructor(ctx:Context)\n    {\n        this.title = ctx.conf.keymaptitle;\n        this.html = ctx.conf.keymapping.map;\n    }\n\n\n    public close(_cancel: boolean): void\n    {\n        this.win.closeWindow();\n    }\n\n\n    public setWin(win: PopupWindow): void\n    {\n        this.win = win;\n    }\n\n\n    public ngAfterViewInit(): void\n    {\n\t\tthis.map = this.mapelem?.nativeElement as HTMLDivElement;\n\t\tthis.okbtn = this.okelem?.nativeElement as HTMLButtonElement;\n\n        this.okbtn.addEventListener(\"keydown\",() => this.close(true));\n        this.okbtn.addEventListener(\"keypress\",() => this.close(true));\n\n        this.map.innerHTML = this.html;\n        this.okbtn.focus();\n    }\n}","import { Popup } from \"../popup/Popup\";\nimport { Field } from \"../input/Field\";\nimport { Block } from \"../blocks/Block\";\nimport { keymap } from \"../keymap/KeyMap\";\nimport { Record } from \"../blocks/Record\";\nimport { FieldType } from \"../input/FieldType\";\nimport { Context } from \"../application/Context\";\nimport { Container} from \"../container/Container\";\nimport { PopupWindow } from \"../popup/PopupWindow\";\nimport { KeyTriggerEvent } from \"../events/TriggerEvent\";\nimport { FieldDefinition } from \"../input/FieldDefinition\";\nimport { ApplicationImpl } from \"../application/ApplicationImpl\";\nimport { AfterViewInit, Component, OnInit } from \"@angular/core\";\n\n\n@Component({\n    selector: '',\n    template:\n    `\n        <table style='margin-top: \"20px\"; margin-right: \"10px\"'>\n          <tr>\n            <td>Username</td><td>: <field name='usr'></field> </td>\n          </tr>\n          <tr>\n            <td>Password</td><td>: <field name='pwd'></field> </td>\n          </tr>\n        </table>\n    `\n})\n\n\nexport class LoginForm extends Block implements Popup, OnInit, AfterViewInit\n{\n    private usr:Field;\n    private pwd:Field;\n    private win:PopupWindow;\n    private app:ApplicationImpl;\n\n    public top:string    = \"20%\";\n    public left:string   = \"25%\";\n    public width:string  = \"300px\";\n    public height:string = \"150px\";\n    public tmargin:string = \"20px\";\n    public title:string  = \"Login\";\n\n    constructor(ctx:Context)\n    {\n        super();\n\n        this.app = ctx.app[\"_impl_\"];\n\n        this.addKeyTrigger(this.onEvent,\n        [\n            keymap.enter,\n            keymap.escape,\n            keymap.nextfield,\n            keymap.prevfield\n        ]);\n    }\n\n    public setWin(win:PopupWindow): void\n    {\n        this.win = win;\n    }\n\n    public close(cancel:boolean) : void\n    {\n        this.app.enable();\n        this.win.closeWindow();\n        if (!cancel) this.app.appstate.connection.connect(this.usr.value,this.pwd.value);\n        this.app.getCurrentForm()?.focus();\n    }\n\n    public async onEvent(kevent:KeyTriggerEvent) : Promise<boolean>\n    {\n        if (kevent.key == keymap.enter) this.close(false);\n        if (kevent.key == keymap.escape) this.close(true);\n\n        if (kevent.key == keymap.nextfield && kevent.field == \"usr\")\n        {\n            kevent.event.preventDefault();\n            this.pwd.focus();\n        }\n\n        if (kevent.key == keymap.nextfield && kevent.field == \"pwd\")\n        {\n            kevent.event.preventDefault();\n            this.usr.focus();\n        }\n\n        if (kevent.key == keymap.prevfield && kevent.field == \"usr\")\n        {\n            kevent.event.preventDefault();\n            this.pwd.focus();\n        }\n\n        if (kevent.key == keymap.prevfield && kevent.field == \"pwd\")\n        {\n            kevent.event.preventDefault();\n            this.usr.focus();\n        }\n\n        return(true);\n    }\n\n    public ngOnInit(): void\n    {\n        this.app.disable();\n        this.app.setContainer();\n    }\n\n    public ngAfterViewInit(): void\n    {\n        let container:Container = this.app.getContainer();\n        container.finish();\n\n        container.getBlock(\"\").records.forEach((rec) =>\n        {this[\"_impl_\"].addRecord(new Record(0,rec.fields,rec.index));});\n\n        this.usr = this[\"_impl_\"].getField(0,\"usr\");\n        this.pwd = this[\"_impl_\"].getField(0,\"pwd\");\n\n        let usr:FieldDefinition = {name: \"usr\", mandatory: true, type: FieldType.text};\n        let pwd:FieldDefinition = {name: \"pwd\", mandatory: true, type: FieldType.password};\n\n        this.usr.setDefinition(usr,true);\n        this.pwd.setDefinition(pwd,true);\n\n        this.usr.enable(false);\n        this.pwd.enable(false);\n\n        let field:HTMLInputElement = document.getElementsByName(\"usr\")[1] as HTMLInputElement;\n\n        let width:string = (1.75*field.offsetWidth+10)+\"px\";\n        let height:string = (6*field.offsetHeight+20)+\"px\";\n\n        this.win.resize(width,height);\n\n        this.usr.focus();\n        this.app.dropContainer();\n    }\n}","import { ApplicationImpl } from '../application/ApplicationImpl';\nimport { AfterViewInit, Component, ComponentRef, ElementRef, EmbeddedViewRef, ViewChild } from '@angular/core';\n\n\n@Component({\n    selector: '',\n    template: `\n                <div class=\"wait-modal\">\n                    <canvas #canvas class=\"wait-canvas\" id=\"canvas\"></canvas>\n                    <input #input class=\"wait-input\">\n                </div>\n              `,\n    styles:\n    [\n        `\n        .wait-input\n        {\n            width: 0;\n            height: 0;\n            opacity: 0;\n            filter:alpha(opacity=0);\n        }\n\n        .wait-canvas\n        {\n            top: 25%;\n            left: 40%;\n            width: 320px;\n            height: 160px;\n            position: fixed;\n        }\n\n        .wait-modal\n        {\n            top: 0;\n            left: 0;\n            z-index: 1;\n            opacity: 1;\n            width: 100%;\n            height: 100%;\n            display: block;\n            overflow: auto;\n            position: fixed;\n            box-shadow: inset 0px 0px 400px 110px rgba(0, 0, 0, .2);\n        }\n        `\n    ]\n})\n\nexport class Wait implements AfterViewInit\n{\n    private static ready:boolean = false;\n    private static displayed:boolean = false;\n    private static win:ComponentRef<Wait> = null;\n\n\n    public static show(app:ApplicationImpl) : void\n    {\n        if (Wait.displayed)\n            return;\n\n        Wait.ready = false;\n        Wait.displayed = true;\n        Wait.win = app.builder.createComponent(Wait);\n\n        let element:HTMLElement = (Wait.win.hostView as EmbeddedViewRef<any>).rootNodes[0] as HTMLElement;\n        app.builder.getAppRef().attachView(Wait.win.hostView);\n\n        document.body.appendChild(element);\n        Wait.ready = true;\n    }\n\n\n    public static waiting() : boolean\n    {\n        return(Wait.displayed);\n    }\n\n\n    public static close(app:ApplicationImpl) : void\n    {\n        if (!Wait.displayed)\n            return;\n\n        if (!Wait.ready)\n        {\n            setTimeout(() => {Wait.close(app)},1);\n            return;\n        }\n\n        Wait.displayed = false;\n        let element:HTMLElement = (Wait.win.hostView as EmbeddedViewRef<any>).rootNodes[0] as HTMLElement;\n\t\tdocument.body.removeChild(element);\n\n\t\tapp.builder.getAppRef().detachView(Wait.win.hostView);\n\t\tWait.win.destroy();\n\n        app.getCurrentForm().focus();\n    }\n\n\n    private input:HTMLInputElement = null;\n    private canvas:HTMLCanvasElement = null;\n\n    @ViewChild(\"input\", {read: ElementRef}) private inputElement: ElementRef;\n    @ViewChild(\"canvas\", {read: ElementRef}) private canvasElement: ElementRef;\n\n\n    public ngAfterViewInit(): void\n    {\n\t\tthis.input = this.inputElement?.nativeElement as HTMLInputElement;\n\t\tthis.canvas = this.canvasElement?.nativeElement as HTMLCanvasElement;\n        let ctx:CanvasRenderingContext2D = this.canvas.getContext(\"2d\");\n        setTimeout(() => {this.focus()},10);\n        setTimeout(() => {this.showrunning(ctx,0)},250);\n    }\n\n\n    private focus() : void\n    {\n        if (!Wait.displayed)\n            return;\n\n        this.input.focus();\n        setTimeout(() => {this.focus()},100);\n    }\n\n\n    private showrunning(ctx:CanvasRenderingContext2D, pick:number) : void\n    {\n        if (!Wait.displayed)\n            return;\n\n        ctx.lineWidth = 5;\n        let pcolor:string = \"black\";\n        let bcolor:string = \"#DCDCDC\";\n\n        pick = pick % 3;\n        let rad:number = 6;\n        let off:number = 64;\n\n        ctx.beginPath();\n\n        ctx.strokeStyle=bcolor;\n        if (pick == 0) ctx.strokeStyle=pcolor;\n\n        ctx.arc(rad+off, 2*rad, rad, 0, 2 * Math.PI);\n        ctx.stroke();\n        ctx.closePath();\n\n        ctx.beginPath();\n\n        ctx.strokeStyle=bcolor;\n        if (pick == 1) ctx.strokeStyle=pcolor;\n\n        ctx.arc(6*rad+off, 2*rad, rad, 0, 2 * Math.PI);\n        ctx.stroke();\n        ctx.closePath();\n\n        ctx.beginPath();\n\n        ctx.strokeStyle=bcolor;\n        if (pick == 2) ctx.strokeStyle=pcolor;\n\n        ctx.arc(11*rad+off, 2*rad, rad, 0, 2 * Math.PI);\n        ctx.stroke();\n        ctx.closePath();\n\n        setTimeout(() => {this.showrunning(ctx,pick+1)}, 250);\n    }\n}","import { DropDownMenu } from \"./DropDownMenu\";\nimport { Application } from \"../application/Application\";\nimport { ApplicationImpl } from \"../application/ApplicationImpl\";\n\nexport class MenuInterface\n{\n    private menu$:DropDownMenu;\n    private app$:ApplicationImpl;\n\n\n    constructor(menu:DropDownMenu)\n    {\n        this.menu$ = menu;\n        this.app$ = this.menu$.getApplication()[\"_impl_\"];\n    }\n\n    public get app() : Application\n    {\n        return(this.app$.getApplication());\n    }\n\n    public isConnected() : boolean\n    {\n        return(this.app$.connected);\n    }\n\n    public enable(menu?:string)\n    {\n        this.menu$.enable(menu);\n    }\n\n    public disable(menu?:string)\n    {\n        this.menu$.disable(menu);\n    }\n}","import { Menu } from './Menu';\nimport { Form } from '../forms/Form';\nimport { MenuEntry } from './MenuEntry';\nimport { Config } from '../application/Config';\nimport { MenuInterface } from './MenuInterface';\nimport { Context } from '../application/Context';\nimport { Application } from '../application/Application';\nimport { ApplicationImpl } from '../application/ApplicationImpl';\nimport { WindowListener, onEventListener } from '../events/WindowListener';\nimport { Component, ComponentRef, ViewChild, ElementRef, AfterViewInit } from '@angular/core';\n\n@Component({\n    selector: '',\n    template: '<div #html></div>'\n})\n\n\nexport class DropDownMenu implements onEventListener, AfterViewInit\n{\n    private menu:Menu;\n    private conf:Config;\n    private instance:string;\n    private app$:ApplicationImpl;\n    private html:HTMLDivElement;\n    private static instances:number = 0;\n    private options:Map<string,Option> = new Map<string,Option>();\n    private menus:Map<string,MenuOption> = new Map<string,MenuOption>();\n\n    @ViewChild(\"html\", {read: ElementRef}) private elem: ElementRef;\n\n    private static calls:number = 0;\n    public static setForm(inst:ComponentRef<DropDownMenu>, form:Form) : void\n    {\n        if (inst.instance.getMenu() == null)\n        {\n            if (DropDownMenu.calls++ > 10) return;\n            setTimeout(() => {DropDownMenu.setForm(inst,form)},10);\n            return;\n        }\n\n        inst.instance.getMenu().getHandler().onFormChange(form);\n    }\n\n\n    constructor(private ctx:Context)\n    {\n        this.conf = ctx.conf;\n        this.app$ = ctx.app[\"_impl_\"]; // might not be initialized\n        this.instance = \"DropDownMenu-\"+(DropDownMenu.instances++);\n    }\n\n\n    public getMenu() : Menu\n    {\n        return(this.menu);\n    }\n\n\n    public getApplication() : Application\n    {\n        return(this.app$.getApplication());\n    }\n\n\n    public enable(menu?:string) : void\n    {\n        if (menu == null)\n        {\n            this.menus.forEach((mopt) =>\n            {\n                mopt.elem.classList.remove(\"ddmenu-disabled\");\n                mopt.options.forEach((opt) => {opt.elem.children[0].classList.remove(\"ddmenu-disabled\")});\n            });\n            return;\n        }\n\n        menu = menu.toLowerCase();\n        let mopt:MenuOption = this.menus.get(menu);\n\n        if (mopt != null)\n        {\n            mopt.elem.classList.remove(\"ddmenu-disabled\");\n            mopt.options.forEach((opt) => {opt.elem.children[0].classList.remove(\"ddmenu-disabled\")});\n            return;\n        }\n\n        let option:string = menu;\n        mopt = this.menus.get(menu.substring(0,menu.lastIndexOf(\"/\")));\n        if (mopt == null) return;\n\n        let enabled:number = 0;\n        mopt.options.forEach((opt) =>\n        {\n            if (opt.elem.id == option)\n                opt.elem.children[0].classList.remove(\"ddmenu-disabled\");\n\n            if (!opt.elem.children[0].classList.contains(\"ddmenu-disabled\"))\n                enabled++;\n        });\n\n        if (enabled > 0) mopt.elem.classList.remove(\"ddmenu-disabled\");\n    }\n\n\n    public disable(menu?:string) : void\n    {\n        if (menu == null)\n        {\n            this.menus.forEach((mopt) =>\n            {\n                mopt.elem.classList.add(\"ddmenu-disabled\");\n                mopt.options.forEach((opt) => {opt.elem.children[0].classList.add(\"ddmenu-disabled\")});\n            });\n            return;\n        }\n\n        menu = menu.toLowerCase();\n        let mopt:MenuOption = this.menus.get(menu);\n\n        if (mopt != null)\n        {\n            mopt.elem.classList.add(\"ddmenu-disabled\");\n            mopt.options.forEach((opt) => {opt.elem.children[0].classList.add(\"ddmenu-disabled\")});\n            return;\n        }\n\n        let option:string = menu;\n        mopt = this.menus.get(menu.substring(0,menu.lastIndexOf(\"/\")));\n        if (mopt == null) return;\n\n        let enabled:number = 0;\n        mopt.options.forEach((opt) =>\n        {\n            if (opt.elem.id == option)\n                opt.elem.children[0].classList.add(\"ddmenu-disabled\");\n\n            if (!opt.elem.children[0].classList.contains(\"ddmenu-disabled\"))\n                enabled++;\n        });\n\n        if (enabled == 0) mopt.elem.classList.add(\"ddmenu-disabled\");\n    }\n\n\n    public display(menu?:Menu) : void\n    {\n        if (menu == null)\n            return;\n\n        if (this.html == null)\n        {\n            setTimeout(() => {this.display(menu);},10);\n            return;\n        }\n\n        this.app$ = this.ctx.app[\"_impl_\"];\n\n        this.menu = menu;\n        let intf:MenuInterface = new MenuInterface(this);\n        menu.getHandler()[\"__menu__\"] = intf;\n\n        this.menu = menu;\n        this.html.innerHTML = this.menuhtml();\n        let menus:HTMLCollectionOf<Element> = this.html.getElementsByClassName(\"ddmenu-menu\");\n        let options:HTMLCollectionOf<Element> = this.html.getElementsByClassName(\"ddmenu-option\");\n\n        for(let i = 0; i < menus.length; i++)\n        {\n            let mopt:MenuOption = new MenuOption(menus[i].children[0]);\n            this.menus.set(mopt.elem.id,mopt);\n            mopt.elem.classList.add(\"ddmenu-default\");\n            mopt.elem.classList.add(\"ddmenu-disabled\");\n\t\t\tmopt.elem.addEventListener(\"click\", (event) => {this.toggle(event)});\n        }\n\n        for(let i = 0; i < options.length; i++)\n        {\n            let id:string = options[i].id;\n            let menu:string = id.substring(0,id.lastIndexOf(\"/\"));\n\n            let opt:Option = this.options.get(id);\n            options[i].children[0].classList.add(\"ddmenu-disabled\");\n\t\t\toptions[i].addEventListener(\"click\", (event) => {this.action(event)});\n            opt.elem = options[i];\n\n            let mopt:MenuOption = this.menus.get(menu);\n            mopt.options.push(opt);\n        }\n\n        menu.getHandler().onInit();\n    }\n\n\n    public onEvent(event:any) : void\n    {\n        if (!event.target.matches('.ddmenu-entry'))\n        {\n            this.closeall();\n            WindowListener.remove(this.instance,\"click\");\n        }\n    }\n\n\n    private action(event:any) : void\n    {\n        let handler:any = this.menu.getHandler();\n\n        let link:Element = null;\n        let text:Element = event.target;\n\n        if (text.classList.contains(\"ddmenu-linktext\"))\n        {\n            link = text.parentElement;\n        }\n        else\n        {\n            link = text;\n            text = text.children[0];\n        }\n\n        if (text.classList.contains(\"ddmenu-disabled\"))\n            return;\n\n        let opt:Option = this.options.get(link.id);\n        if (opt.option.action != null) handler[opt.option.action]();\n    }\n\n\n\tprivate toggle(event:any) : void\n\t{\n\t\tlet menu:HTMLElement = event.target;\n        let container:HTMLDivElement = menu.parentNode.children[1] as HTMLDivElement;\n        if (menu.classList.contains(\"ddmenu-disabled\")) return;\n\n        container.classList.toggle(\"ddmenu-show\");\n\n        if (container.classList.contains(\"ddmenu-show\"))\n        {\n            this.closeall(container);\n            WindowListener.add(this.instance,this,\"click\");\n        }\n        else\n        {\n            container.classList.remove(\"ddmenu-show\");\n        }\n\t}\n\n\n    private closeall(except?:Element) : void\n    {\n        let open:HTMLCollectionOf<Element> = this.html.getElementsByClassName(\"ddmenu-show\");\n\n        for(let i = 0; i < open.length; i++)\n        {\n            if (except == null || open[i].id != except.id)\n                open[i].classList.remove(\"ddmenu-show\");\n        }\n    }\n\n\n    private menuhtml() : string\n    {\n        let html:string = \"\";\n\n\t\thtml += \"<style>\\n\";\n\t\thtml += this.styles()+ \"\\n\";\n\t\thtml += \"</style>\\n\";\n\t\thtml += \"<span class='ddmenu-bar'>\\n\";\n\t\thtml += this.entries(\"\",\"\",this.menu.getEntries());\n\t\thtml += \"</span>\\n\";\n\n        return(html);\n    }\n\n\n    private entries(indent:string, path:string, entries:MenuEntry[]) : string\n    {\n        let html:string = \"\";\n\n        for(let i = 0; i < entries.length; i++)\n        {\n            let id:string = path+\"/\"+entries[i].name.toLowerCase();\n\n            html += indent+\"<div class='ddmenu-menu'>\\n\";\n            html += indent+\"  <button class='ddmenu-entry' id='\"+id+\"'>\\n\";\n            html += indent+entries[i].name;\n            html += indent+\"  </button>\\n\";\n            html += indent+\"  <div class='ddmenu-content' id='\"+id+\"-content'>\\n\";\n\n            if (entries[i].options != null)\n            {\n                for(let f = 0; f < entries[i].options.length; f++)\n                {\n                    let entry:MenuEntry = entries[i].options[f];\n                    let oid:string = id+\"/\"+entry.name.toLowerCase();\n                    this.options.set(oid,new Option(entries[i].options[f]));\n\n                    html += indent+\"    <a class='ddmenu-option' id='\"+oid+\"'>\\n\";\n                    html += indent+\"      <span class='ddmenu-linktext'>\"+entry.name+\"</span>\\n\";\n                    html += indent+\"    </a>\\n\";\n                }\n            }\n\n            html += indent+\"  </div>\\n\";\n            html += indent+\"</div>\\n\";\n        }\n\n        return(html);\n    }\n\n\n\tprivate styles() : string\n\t{\n        let style:string =\n        `\n            .ddmenu-bar\n            {\n                width: 100%;\n                height: 100%;\n                display: flex;\n                position: relative;\n                white-space: nowrap;\n                background: transparent;\n            }\n\n            .ddmenu-entry\n            {\n                padding: 0;\n                border: none;\n                color: `+this.conf.colors.menuoption+`;\n                outline:none;\n                cursor: pointer;\n                font-size: 15px;\n                margin-top: 1px;\n                margin-left: 4px;\n                margin-right: 4px;\n                margin-bottom: 1px;\n                background: transparent;\n            }\n\n            .ddmenu-default\n            {\n                color: `+this.conf.colors.enabled+`;\n            }\n\n            .ddmenu-disabled\n            {\n                color: `+this.conf.colors.disabled+`;\n            }\n\n            .ddmenu-menu\n            {\n                position: relative;\n                display: inline-block;\n            }\n\n            .ddmenu-content\n            {\n                z-index: 1;\n                display: none;\n                overflow: none;\n                min-width: 80px;\n                position: absolute;\n                background-color: #f1f1f1;\n                color: `+this.conf.colors.menuoption+`;\n                box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);\n            }\n\n            .ddmenu-option\n            {\n                border: none;\n                color: black;\n                outline:none;\n                cursor: pointer;\n                font-size: 15px;\n                background: transparent;\n            }\n\n            .ddmenu-content .ddmenu-option\n            {\n                color: black;\n                display: block;\n                padding: 12px 16px;\n                text-decoration: none;\n            }\n\n            .ddmenu-content .ddmenu-option:hover\n            {\n                background-color: #ddd;\n            }\n\n            .ddmenu-show\n            {\n                display: block;\n            }\n        `;\n\n        return(style);\n    }\n\n    public ngAfterViewInit(): void\n    {\n        this.html = this.elem?.nativeElement as HTMLDivElement;\n    }\n}\n\n\nclass MenuOption\n{\n    elem:Element;\n    options:Option[] = [];\n\n    constructor(elem:Element)\n    {\n        this.elem = elem;\n    }\n}\n\n\nclass Option\n{\n    elem:Element;\n    option:MenuEntry;\n\n    constructor(option:MenuEntry)\n    {\n        this.option = option;\n    }\n}","import { Menu } from './Menu';\nimport { Builder } from \"../utils/Builder\";\nimport { ComponentRef } from '@angular/core';\nimport { DropDownMenu } from './DropDownMenu';\nimport { ApplicationImpl } from '../application/ApplicationImpl';\n\n\nexport class MenuFactory\n{\n    constructor(private builder:Builder) {}\n\n    public create(menu?:Menu) : ComponentRef<DropDownMenu>\n    {\n        let ref:ComponentRef<DropDownMenu> = this.builder.createComponent(DropDownMenu);\n        (ref.instance as DropDownMenu).display(menu);\n        return(ref);\n    }\n}","import { Utils } from \"../utils/Utils\";\nimport { FormInstance } from \"./FormInstance\";\nimport { WindowOptions } from \"./WindowOptions\";\nimport { FormDefinition } from \"../../public-api\";\n\n\nexport class FormUtil\n{\n    private utils:Utils = new Utils();\n\n    public complete(options:WindowOptions, create?:boolean) : WindowOptions\n    {\n        if (options == null)\n        {\n            if (create) options = {};\n            else        return(null);\n        }\n\n        if (!options.hasOwnProperty(\"wizard\")) options.wizard = false;\n        if (!options.hasOwnProperty(\"inherit\")) options.inherit = true;\n\n        if (!options.hasOwnProperty(\"width\")) options.width = \"99.65vw\";\n        if (!options.hasOwnProperty(\"height\")) options.height = \"99.5vh\";\n        if (!options.hasOwnProperty(\"offsetTop\")) options.offsetTop = \"0\";\n        if (!options.hasOwnProperty(\"offsetLeft\")) options.offsetLeft = \"0\";\n        return(options);\n    }\n\n\n    public convert(form:FormDefinition) : FormInstance\n    {\n        let fname:string = this.utils.getName(form.component);\n\n        let navigable:boolean = true;\n\n        form.windowopts = this.complete(form.windowopts);\n        if (form.hasOwnProperty(\"navigable\")) navigable = form.navigable;\n\n        let path:string = \"/\"+fname;\n        if (form.hasOwnProperty(\"path\")) path = form.path;\n\n        path = path.trim();\n        if (!path.startsWith(\"/\")) path = \"/\" + path;\n\n        let def:FormInstance =\n        {\n            name: fname,\n            path: form.path,\n            title: form.title,\n            navigable: navigable,\n            component: form.component,\n            windowdef: form.windowopts\n        };\n\n        return(def);\n    }\n\n\n    public clone(base:FormInstance) : FormInstance\n    {\n        let clone:FormInstance =\n        {\n            name: base.name,\n            path: base.path,\n            title: base.title,\n            windowdef: base.windowdef,\n            windowopts: base.windowdef,\n            component: base.component,\n            navigable: base.navigable\n        }\n        return(clone);\n    }\n}","import { Form } from \"./Form\";\nimport { FormImpl } from \"./FormImpl\";\nimport { FormInstance } from './FormInstance';\nimport { Config } from \"../application/Config\";\nimport { Context } from \"../application/Context\";\nimport { DropDownMenu } from \"../menu/DropDownMenu\";\nimport { ApplicationImpl } from '../application/ApplicationImpl';\nimport { WindowListener, onEventListener } from \"../events/WindowListener\";\nimport { Component, ViewChild, ElementRef, AfterViewInit, EmbeddedViewRef, ChangeDetectionStrategy, ChangeDetectorRef, ComponentRef } from '@angular/core';\n\n\n@Component({\n  selector: 'modalwindow',\n  template:\n  `\n    <div class=\"modalwindow\">\n      <div #window class=\"modalwindow-modal-block\" style=\"top: {{top}}; left: {{left}}\">\n        <div class=\"modalwindow-container\" style=\"width: {{width}}; height: {{height}};\">\n\t\t  <div #topbar class=\"modalwindow-topbar\" style=\"color: {{tcolor}}; background-color: {{bcolor}}\">\n\t\t    <span class=\"modalwindow-center\" style=\"color: {{tcolor}};\">\n\t\t\t\t<span class=\"modalwindow-corner\"></span>\n\t\t\t\t<div #menu></div>\n\t\t\t\t<span class=\"modalwindow-close\">\n\t\t\t\t\t<button class=\"modalwindow-button\" style=\"color: {{btncolor}};\" (click)=\"close()\">X</button>\n\t\t\t\t</span>\n\t\t\t</span>\n\t\t  </div>\n          <div class=\"modalwindow-block\" style=\"margin-top: {{tmargin}};\"><div #content></div></div>\n        </div>\n      </div>\n    </div>\n  `,\n  styles:\n  [`\n    .modalwindow\n    {\n        top: 0;\n        left: 0;\n        z-index: 1;\n        width: 100%;\n        height: 100%;\n        display: block;\n        overflow: auto;\n        position: fixed;\n    }\n\n    .modalwindow-modal-block\n    {\n      position: absolute;\n      background-color: #fefefe;\n    }\n\n    .modalwindow-container\n    {\n        position: relative;\n        border: 2px solid black;\n    }\n\n    .modalwindow-topbar\n    {\n        height: 1.70em;\n        margin-left: 0;\n        margin-right: 0;\n        cursor:default;\n\t\tjustify-content: center;\n        border-bottom: 2px solid black;\n    }\n\n\t.modalwindow-corner\n\t{\n\t\twidth: 2.5em;\n\t\tdisplay: block;\n\t\tposition: relative;\n\t}\n\n\t.modalwindow-close\n\t{\n\t\ttop: 0;\n\t\tright: 0;\n\t\twidth: 1.75em;\n\t\theight: 1.70em;\n\t\tposition: absolute;\n\t\tborder-left: 1px solid black;\n\t}\n\n\t.modalwindow-button\n\t{\n\t\ttop: 50%;\n\t\twidth: 100%;\n\t\theight: 100%;\n\t\toutline:none;\n\t\tfont-size: 0.75em;\n\t\tfont-weight: bold;\n\t\tposition: relative;\n\t\tbackground: transparent;\n\t\ttransform: translateY(-50%);\n\t\tborder: 0px solid transparent;\n\t\tbox-shadow: 0px 0px 0px transparent;\n\t\ttext-shadow: 0px 0px 0px transparent;\n\t}\n\n\t.modalwindow-center\n\t{\n\t\ttop: 0;\n\t\tbottom: 0;\n\t\twidth: 93%;\n\t\theight: 100%;\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tjustify-content: center;\n\t}\n\n    .modalwindow-block\n    {\n        left: 0;\n        top: 3vh;\n        right: 0;\n        bottom: 0;\n\t\tdisplay: flex;\n        overflow: auto;\n        position: absolute;\n\t\tjustify-content: center;\n    }\n`],\nchangeDetection: ChangeDetectionStrategy.OnPush\n})\n\nexport class ModalWindow implements onEventListener, AfterViewInit\n{\n\tprivate conf:Config;\n\tprivate form:FormInstance;\n\tprivate app:ApplicationImpl;\n\tprivate element:HTMLElement;\n\tprivate menu:HTMLDivElement;\n\tprivate menuelem:HTMLElement;\n    private window:HTMLDivElement;\n    private topbar:HTMLDivElement;\n\tprivate content:HTMLDivElement;\n\tprivate winref:ComponentRef<any>;\n\tprivate menuref:ComponentRef<any>;\n\n    public top : string = null;\n    public left : string = null;\n    public width : string = \"99vw\";\n    public height : string = \"98vh\";\n    public tmargin : string = \"1vh\";\n\n    @ViewChild(\"menu\", {read: ElementRef}) private menuElement: ElementRef;\n    @ViewChild(\"window\", {read: ElementRef}) private windowElement: ElementRef;\n    @ViewChild(\"topbar\", {read: ElementRef}) private topbarElement: ElementRef;\n\t@ViewChild('content', {read: ElementRef}) private contentElement:ElementRef;\n\n\tprivate minw:number = 0;\n\tprivate minh:number = 0;\n\n\tprivate offx:number = 0;\n\tprivate offy:number = 0;\n\n\tprivate posy:number;\n\tprivate posx:number;\n\n\tprivate sizex:number;\n\tprivate sizey:number;\n\n\tprivate move:boolean = false;\n\tprivate resz:boolean = false;\n\n\tprivate resizex:boolean = false;\n\tprivate resizey:boolean = false;\n\n\n\tconstructor(ctx:Context, private change:ChangeDetectorRef)\n\t{\n\t\tthis.conf = ctx.conf;\n\t}\n\n\tpublic get tcolor() : string\n\t{\n\t\treturn(this.conf.colors.title);\n\t}\n\n\tpublic get bcolor() : string\n\t{\n\t\treturn(this.conf.colors.topbar);\n\t}\n\n\tpublic get btncolor() : string\n\t{\n\t\treturn(this.conf.colors.menuoption);\n\t}\n\n\n\tpublic setForm(form:FormInstance) : void\n\t{\n\t\tthis.resize(form,true);\n\n\t\tlet impl:FormImpl = form.formref.instance[\"_impl_\"];\n\t\timpl.setModalWindow(this);\n\n\t\tthis.form = form;\n\t}\n\n\n\tpublic getForm() : Form\n\t{\n\t\treturn(this.form.formref.instance);\n\t}\n\n\n\tpublic newForm(form:FormInstance) : void\n\t{\n\t\tif (!form.windowopts?.inherit)\n\t\t\tthis.resize(form,false);\n\n\t\tlet formelem:Element = this.content.firstElementChild;\n\t\tif (formelem != null) this.content.removeChild(formelem);\n\t\tthis.app.builder.getAppRef().detachView(this.form.formref.hostView);\n\n\t\tif (this.menuelem != null)\n\t\t{\n\t\t\tlet menuelem = this.menu.firstElementChild;\n\t\t\tif (menuelem != null) this.menu.removeChild(this.menuelem);\n\t\t\tthis.app.builder.getAppRef().detachView(this.menuref.hostView);\n\t\t}\n\n\t\tlet impl:FormImpl = form.formref.instance[\"_impl_\"];\n\t\timpl.setModalWindow(this);\n\n\t\tthis.form = form;\n\t\tthis.display();\n\t}\n\n\n\tpublic setWinRef(winref:ComponentRef<any>) : void\n\t{\n\t\tthis.winref = winref;\n\t}\n\n\n\tpublic setApplication(app:ApplicationImpl) : void\n\t{\n\t\tthis.app = app;\n\t}\n\n\n\tpublic close() : void\n\t{\n\t\tlet impl:FormImpl = this.form.formref.instance[\"_impl_\"];\n\t\tthis.closeWindow();\n\t\timpl.cancel();\n\t}\n\n\n\tpublic closeWindow() : void\n\t{\n\t\tWindowListener.remove(\"modal\",\"mouseup\");\n\t\tWindowListener.remove(\"modal\",\"mousemove\");\n\t\tWindowListener.remove(\"modal\",\"mousedown\");\n\n\t\tlet formelem:Element = this.content.firstElementChild;\n\t\tif (formelem != null) this.content.removeChild(formelem);\n\t\tthis.app.builder.getAppRef().detachView(this.form.formref.hostView);\n\n\t\tlet element:HTMLElement = (this.winref.hostView as EmbeddedViewRef<any>).rootNodes[0] as HTMLElement;\n\t\tdocument.body.removeChild(element);\n\n\t\tthis.app.builder.getAppRef().detachView(this.winref.hostView);\n\t\tthis.winref.destroy();\n\n\t\tthis.winref = null;\n\t}\n\n\n\tprivate resize(form:FormInstance, pos:boolean) : void\n\t{\n\t\tif (form.windowopts.offsetLeft != null && form.windowopts.offsetLeft.trim().endsWith(\"%\"))\n\t\t{\n\t\t\tlet s:string = form.windowopts.offsetLeft.trim();\n\t\t\tlet n:number = +s.substring(0,s.length-1);\n\t\t\tform.windowopts.offsetLeft = (window.innerWidth*n/100)+\"px\";\n\t\t}\n\n\t\tif (form.windowopts.width != null && form.windowopts.width.trim().endsWith(\"%\"))\n\t\t{\n\t\t\tlet s:string = form.windowopts.width.trim();\n\t\t\tlet n:number = +s.substring(0,s.length-1);\n\t\t\tform.windowopts.width = (window.innerWidth*n/100)+\"px\";\n\t\t}\n\n\t\tif (form.windowopts.offsetTop != null && form.windowopts.offsetTop.trim().endsWith(\"%\"))\n\t\t{\n\t\t\tlet s:string = form.windowopts.offsetTop.trim();\n\t\t\tlet n:number = +s.substring(0,s.length-1);\n\t\t\tform.windowopts.offsetTop = (window.innerHeight*n/100)+\"px\";\n\t\t}\n\n\t\tif (form.windowopts.height != null && form.windowopts.height.trim().endsWith(\"%\"))\n\t\t{\n\t\t\tlet s:string = form.windowopts.height.trim();\n\t\t\tlet n:number = +s.substring(0,s.length-1);\n\t\t\tform.windowopts.height = (window.innerHeight*n/100)+\"px\";\n\t\t}\n\n\t\tif (pos)\n\t\t{\n\t\t\tthis.top = form.windowopts.offsetTop;\n\t\t\tthis.left = form.windowopts.offsetLeft;\n\n\t\t\tif (this.top == \"undefined\") this.top = null;\n\t\t\tif (this.left == \"undefined\") this.left = null;\n\t\t}\n\n\t\tthis.width = form.windowopts.width;\n\t\tthis.height = form.windowopts.height;\n\n\t\tif (form.windowopts.width == \"\")\n\t\t{\n\t\t\tthis.left = \"0\";\n\t\t\tthis.width = \"100%\";\n\t\t}\n\n\t\tif (form.windowopts.height == \"\")\n\t\t{\n\t\t\tthis.top = \"0\";\n\t\t\tthis.height = \"100%\";\n\t\t}\n\n\t\tthis.change.detectChanges();\n\t}\n\n\n\tprivate display() : void\n\t{\n\t\tif (this.form == null)\n\t\t{\n\t\t\tsetTimeout(() => {this.display();},10);\n\t\t\treturn;\n\t\t}\n\n\t\tthis.element = (this.form.formref.hostView as EmbeddedViewRef<any>).rootNodes[0] as HTMLElement;\n\t\tthis.app.builder.getAppRef().attachView(this.form.formref.hostView);\n\t\tthis.content.appendChild(this.element);\n\n\t\tthis.minh = 100;\n\t\tthis.minw = 450;\n\n\t\tthis.showmenu()\n\t\tthis.change.detectChanges();\n\n\t\tthis.posy = this.window.offsetTop;\n\t\tthis.posx = this.window.offsetLeft;\n\t\tthis.sizex = this.window.offsetWidth;\n\t\tthis.sizey = this.window.offsetHeight;\n\n\t\tlet resize:boolean = false;\n\n\t\tif (this.sizex < this.minw)\n\t\t{\n\t\t\tresize = true;\n\t\t\tthis.sizex = this.minw;\n\t\t\tthis.width = this.sizex+\"px\";\n\t\t}\n\n\t\tif (this.sizey < this.minh)\n\t\t{\n\t\t\tresize = true;\n\t\t\tthis.sizey = this.minh;\n\t\t\tthis.height = this.sizey+\"px\";\n\t\t}\n\n\t\tif (this.top == null || this.top.trim().length == 0)\n\t\t{\n\t\t\tresize = true;\n\t\t\tthis.top = ((+window.innerHeight - this.sizey)/3)+\"px\";\n\t\t}\n\n\t\tif (this.left == null || this.left.trim().length == 0)\n\t\t{\n\t\t\tresize = true;\n\t\t\tthis.left = ((+window.innerWidth - this.sizex)/3)+\"px\";\n\t\t}\n\n\t\tif (resize)\n\t\t{\n\t\t\tthis.change.detectChanges();\n\n\t\t\tthis.posy = this.window.offsetTop;\n\t\t\tthis.posx = this.window.offsetLeft;\n\t\t\tthis.sizex = this.window.offsetWidth;\n\t\t\tthis.sizey = this.window.offsetHeight;\n\t\t}\n\t}\n\n\n\tprivate showmenu() : void\n\t{\n\t\tlet impl:FormImpl = this.form.formref.instance[\"_impl_\"];\n\n\t\tthis.menuelem = null;\n\t\tthis.menuref = impl.getDropDownMenu();\n\n\t\tif (this.menuref == null) return;\n\t\tthis.menuelem = (this.menuref.hostView as EmbeddedViewRef<any>).rootNodes[0] as HTMLElement;\n\t\tthis.app.builder.getAppRef().attachView(this.menuref.hostView);\n\t\tthis.menu.appendChild(this.menuelem);\n\n\t\tlet ddmenu:DropDownMenu = this.menuref.instance;\n\t\tthis.initmenu(ddmenu);\n\t}\n\n\n\tprivate initmenu(ddmenu:DropDownMenu) : void\n\t{\n\t\tif (ddmenu.getMenu() == null)\n\t\t{\n\t\t\tsetTimeout(() => {this.initmenu(ddmenu)},10);\n\t\t\treturn;\n\t\t}\n\n\t\tlet impl:FormImpl = this.form.formref.instance[\"_impl_\"];\n\t\tddmenu.getMenu().getHandler().onFormChange(impl.form);\n\n\t\tthis.minw = this.menu.clientWidth + 50;\n\n\t\tif (this.sizex < this.minw)\n\t\t{\n\t\t\tthis.sizex = this.minw;\n\t\t\tthis.width = this.sizex+\"px\";\n\t\t\tthis.change.detectChanges();\n\t\t}\n\t}\n\n\n\tpublic ngAfterViewInit(): void\n\t{\n\t\tthis.menu = this.menuElement?.nativeElement as HTMLDivElement;\n\t\tthis.window = this.windowElement?.nativeElement as HTMLDivElement;\n\t\tthis.topbar = this.topbarElement?.nativeElement as HTMLDivElement;\n\t\tthis.content = this.contentElement?.nativeElement as HTMLDivElement;\n\n\t\tthis.display();\n\n\t\tWindowListener.add(\"modal\",this,\"mouseup\");\n\t\tWindowListener.add(\"modal\",this,\"mousemove\");\n\t\tWindowListener.add(\"modal\",this,\"mousedown\");\n\n\t\tthis.topbar.addEventListener(\"mousedown\", (event) => {this.startmove(event);});\n\t}\n\n\n    public onEvent(event:any) : void\n\t{\n\t\tswitch(event.type)\n\t\t{\n\t\t\tcase \"mouseup\":\n\t\t\t\tthis.mouseup();\n\t\t\t\tbreak;\n\n\t\t\tcase \"mousemove\":\n\t\t\t\tthis.movePopup(event);\n\t\t\t\tthis.resizePopup(event);\n\t\t\t\tthis.resizemousemove(event);\n\t\t\t\tbreak;\n\n\t\t\tcase \"mousedown\":\n\t\t\t\tthis.startresize(event);\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\tprivate startmove(event:any) : void\n\t{\n\t\tif (this.resizexy)\n\t\t\treturn;\n\n\t\tthis.move = true;\n\n\t\tevent = event || window.event;\n\t\tevent.preventDefault();\n\n\t\tthis.offy = +event.clientY - this.posy;\n\t\tthis.offx = +event.clientX - this.posx;\n\t}\n\n\tprivate mouseup()\n\t{\n\t\tif (!this.move && !this.resz)\n\t\t\treturn;\n\n\t\tthis.move = false;\n\t\tthis.resz = false;\n\t\tthis.resizexy = false;\n\n\t\tthis.window.style.cursor = \"default\";\n\t\tdocument.body.style.cursor = \"default\";\n\t}\n\n\tprivate movePopup(event:any) : void\n\t{\n\t\tif (!this.move) return;\n\t  \tevent = event || window.event;\n\n\t\tlet deltay:number = +event.clientY - this.posy;\n\t\tlet deltax:number = +event.clientX - this.posx;\n\n\t\tthis.posy += (deltay - this.offy);\n\t\tthis.posx += (deltax - this.offx);\n\n\t\tif (this.posy > 0)\n\t\t\tthis.top = this.posy + \"px\";\n\n\t\tif (this.posx > 0)\n\t\t\tthis.left = this.posx + \"px\";\n\n\t\tthis.change.detectChanges();\n\t}\n\n\n\tprivate resizemousemove(event:any) : any\n\t{\n\t\tif (this.resz) return;\n\n\t\tevent = event || window.event;\n\t\tlet posx:number = +event.clientX;\n\t\tlet posy:number = +event.clientY;\n\n\t\tlet offx:number = this.posx + this.sizex - posx;\n\t\tlet offy:number = this.posy + this.sizey - posy;\n\n\t\tlet before:boolean = false;\n\t\tif (this.resizex || this.resizey) before = true;\n\n\t\tthis.resizex = false;\n\t\tthis.resizey = false;\n\n\t\tif (offx > -7 && offx < 10 && posy > this.posy - 7 && posy < this.posy + this.sizey + 7) this.resizex = true;\n\t\tif (offy > -7 && offy < 10 && posx > this.posx - 7 && posx < this.posx + this.sizex + 7) this.resizey = true;\n\n\t\tif (this.resizex && this.resizey)\n\t\t{\n\t\t\tthis.resizex = true;\n\t\t\tthis.resizey = true;\n\t\t}\n\n\t\tif (this.resizex && !this.resizey)\n\t\t{\n\t\t\tthis.window.style.cursor = \"e-resize\";\n\t\t\tdocument.body.style.cursor = \"e-resize\";\n\t\t}\n\n\t\tif (this.resizey && !this.resizex)\n\t\t{\n\t\t\tthis.window.style.cursor = \"s-resize\";\n\t\t\tdocument.body.style.cursor = \"s-resize\";\n\t\t}\n\n\t\tif (this.resizex && this.resizey)\n\t\t{\n\t\t\tthis.window.style.cursor = \"se-resize\";\n\t\t\tdocument.body.style.cursor = \"se-resize\";\n\t\t}\n\n\t\tif (before && !this.resizexy)\n\t\t{\n\t\t\tthis.window.style.cursor = \"default\";\n\t\t\tdocument.body.style.cursor = \"default\";\n\t\t}\n\t}\n\n\tprivate startresize(event:any) : void\n\t{\n\t  \tif (!this.resizexy)\n\t\t  return;\n\n\t\tthis.resz = true;\n\t\tevent = event || window.event;\n\t\tevent.preventDefault();\n\n\t\tthis.offy = +event.clientY;\n\t\tthis.offx = +event.clientX;\n\t}\n\n\tprivate resizePopup(event:any) : void\n\t{\n\t\tif (!this.resz) return;\n\t  \tevent = event || window.event;\n\n\t\tlet deltay:number = +event.clientY - this.offy;\n\t\tlet deltax:number = +event.clientX - this.offx;\n\n\t\tif (this.resizex && (this.sizex > this.minw || deltax > 0))\n\t\t{\n\t\t\tthis.sizex += deltax;\n\t\t\tthis.width = this.sizex+\"px\";\n\t\t}\n\n\t\tif (this.resizey && (this.sizey > this.minh || deltay > 0))\n\t\t{\n\t\t\tthis.sizey += deltay;\n\t\t\tthis.height = this.sizey+\"px\";\n\t\t}\n\n\t\tthis.offy = +event.clientY;\n\t\tthis.offx = +event.clientX;\n\n\t\tthis.change.detectChanges();\n\t}\n\n\tprivate get resizexy() : boolean\n\t{\n\t\tif (this.resizex || this.resizey) return(true);\n\t\treturn(false);\n\t}\n\n\tprivate set resizexy(on:boolean)\n\t{\n\t\tthis.resizex = on;\n\t\tthis.resizey = on;\n\t}\n}","import { Form } from \"./Form\";\nimport { FormUtil } from \"./FormUtil\";\nimport { FormImpl } from \"./FormImpl\";\nimport { FormArea } from \"./FormArea\";\nimport { Utils } from \"../utils/Utils\";\nimport { InstanceID } from \"./InstanceID\";\nimport { Builder } from \"../utils/Builder\";\nimport { ModalWindow } from \"./ModalWindow\";\nimport { FormInstance } from \"./FormInstance\";\nimport { FormDefinition } from \"./FormsDefinition\";\nimport { EmbeddedViewRef, ComponentRef } from '@angular/core';\nimport { ApplicationImpl } from \"../application/ApplicationImpl\";\n\n\ninterface Current\n{\n    formdef:FormInstance,\n    element:HTMLElement\n}\n\n\nexport class FormsControl\n{\n    private current:Current;\n    private formarea:FormArea;\n    private utils:Utils = new Utils();\n    private formlist:FormInstance[] = [];\n    private forms:Map<string,FormInstance> = new Map<string,FormInstance>();\n\n    constructor(private app:ApplicationImpl, private builder:Builder) {}\n\n\n    public setFormArea(formarea:FormArea) : void\n    {\n        this.formarea = formarea;\n    }\n\n\n    public setFormsDefinitions(forms:FormDefinition[]) : Map<string,FormInstance>\n    {\n        let futil:FormUtil = new FormUtil();\n\n        for(let i=0; i < forms.length; i++)\n        {\n            let form:FormDefinition = forms[i];\n            let def:FormInstance = futil.convert(form);\n\n            this.formlist.push(def);\n            this.forms.set(def.name,def);\n        }\n\n        return(this.forms);\n    }\n\n\n    public findFormByPath(path:string) : string\n    {\n        for(let i = 0; i < this.formlist.length; i++)\n        {\n            if (this.formlist[i].path == path)\n                return(this.formlist[i].name);\n        }\n\n        return(null);\n    }\n\n\n    public getFormsList() : FormInstance[]\n    {\n        return(this.formlist);\n    }\n\n\n    public getFormsDefinitions() : Map<string,FormInstance>\n    {\n        return(this.forms);\n    }\n\n\n    public closeform(form:any, destroy:boolean) : void\n    {\n        let name:string = this.utils.getName(form);\n        let formdef:FormInstance = this.forms.get(name);\n\n        if (formdef == null || formdef.formref == null) return;\n        this.close(formdef,destroy);\n    }\n\n\n    public close(formdef:FormInstance, destroy:boolean) : void\n    {\n        if (formdef.formref == null) return;\n        let formsarea:HTMLElement = this.formarea.getFormsArea();\n        let element:HTMLElement = (formdef.formref.hostView as EmbeddedViewRef<any>).rootNodes[0] as HTMLElement;\n\n        if (this.current != null && this.current.element == element)\n        {\n            this.current = null;\n            formsarea.removeChild(element);\n            this.builder.getAppRef().detachView(formdef.formref.hostView);\n        }\n\n        if (destroy)\n        {\n            formdef.formref.destroy();\n            formdef.windowopts = null;\n            formdef.formref = null;\n        }\n    }\n\n\n    public display(formdef:FormInstance) : void\n    {\n        if (formdef == null || formdef.formref == null) return;\n        let formsarea:HTMLElement = this.formarea.getFormsArea();\n        let element:HTMLElement = (formdef.formref.hostView as EmbeddedViewRef<any>).rootNodes[0] as HTMLElement;\n\n        let impl:FormImpl = formdef.formref.instance[\"_impl_\"];\n\n        if (formdef.windowopts == null)\n        {\n            this.current = {formdef: formdef, element: element};\n            this.builder.getAppRef().attachView(formdef.formref.hostView);\n\n            formsarea.appendChild(element);\n        }\n        else\n        {\n            let id:InstanceID =\n            {\n                impl: impl,\n                ref: formdef.formref,\n                name: formdef.name,\n                modalopts: formdef.windowopts\n            }\n\n            impl.setInstanceID(id);\n            let win:ModalWindow = this.createWindow();\n\n            win.setForm(formdef);\n            win.setApplication(this.app);\n        }\n    }\n\n\n    public createWindow() : ModalWindow\n    {\n        let winref:ComponentRef<any> = this.app.builder.createComponent(ModalWindow);\n        let win:ModalWindow = winref.instance;\n\n        win.setWinRef(winref);\n\n        let element:HTMLElement = (winref.hostView as EmbeddedViewRef<any>).rootNodes[0] as HTMLElement;\n        this.builder.getAppRef().attachView(winref.hostView);\n\n        document.body.appendChild(element);\n        return(win);\n    }\n\n\n    public getFormInstance(form:any) : FormInstance\n    {\n        let name:string = this.utils.getName(form);\n        let formdef:FormInstance = this.forms.get(name);\n        if (formdef == null) return(null);\n\n        if (formdef.formref == null)\n        {\n            formdef.formref = this.createForm(formdef.component);\n\n            if (formdef.windowdef != null && formdef.windowdef.wizard)\n                formdef.windowopts = formdef.windowdef;\n        }\n\n        return(formdef);\n    }\n\n\n    public createForm(component:any) : ComponentRef<any>\n    {\n        let ref:ComponentRef<any> = this.builder.createComponent(component);\n\n        if (!(ref.instance instanceof Form))\n        {\n            let name:string = ref.instance.constructor.name;\n            console.log(\"Component \"+name+\" is not an instance of Form\");\n            return;\n        }\n\n        let impl:FormImpl = ref.instance[\"_impl_\"];\n        impl.setApplication(this.app);\n\n        return(ref);\n    }\n}","import { Wait } from \"../utils/Wait\";\nimport { MessageBox } from \"../popup/MessageBox\";\nimport { SQLType, Statement } from \"./Statement\";\nimport { ApplicationImpl } from \"../application/ApplicationImpl\";\nimport { HttpClient, HttpErrorResponse } from \"@angular/common/http\";\n\n\nexport class Connection\n{\n    private url:string = null;\n    private conn:string = null;\n    private keepalive:number = 0;\n    private client:HttpClient = null;\n\n    private stmtid:number = 0;\n    private waitlim:number = 250;\n    private running:Map<number,number> = new Map<number,number>();\n\n\n    public constructor(private app:ApplicationImpl)\n    {\n        this.client = app.client;\n    }\n\n\n    public async connect(usr:string, pwd:string) : Promise<void>\n    {\n        if (this.url == null)\n        {\n            await this.app.config.ready();\n            let conf:any = await this.app.config.others;\n\n            this.url = conf[\"database.js\"];\n            if (this.url == null || this.url.length == 0)\n                this.url = window.location.origin;\n        }\n\n        if (this.conn != null)\n        {\n            this.alert(\"Already logged on\");\n            return;\n        }\n\n        if (usr == null || pwd == null)\n        {\n            this.alert(\"Username and password must be specified to logon\");\n            return;\n        }\n\n        let credentials = {usr: usr, pwd: pwd};\n        let response:any = await this.invoke(\"connect\",credentials);\n\n        if (response[\"status\"] == \"failed\")\n        {\n            this.alert(response[\"message\"]);\n            return;\n        }\n\n        this.conn = response[\"id\"];;\n        this.keepalive = response[\"keep-alive\"];\n\n        this.app.appstate.onConnect();\n        this.keepAlive();\n\n        return(response);\n    }\n\n\n    public async commit() : Promise<boolean>\n    {\n        if (this.conn != null)\n        {\n            let response:any = await this.invoke(\"commit\",{});\n\n            if (response[\"status\"] != \"ok\")\n                this.alert(JSON.stringify(response));\n\n            this.app.appstate.transactionChange(false);\n            return(false);\n        }\n\n        return(true);\n    }\n\n\n    public async rollback() : Promise<boolean>\n    {\n        if (this.conn != null)\n        {\n            let response:any = await this.invoke(\"rollback\",{});\n\n            if (response[\"status\"] != \"ok\")\n            {\n                this.alert(JSON.stringify(response));\n                return(false);\n            }\n\n            this.app.appstate.transactionChange(false);\n            return(false);\n        }\n\n        return(true);\n    }\n\n\n    public get connected() : boolean\n    {\n        return(this.conn != null);\n    }\n\n\n    public async disconnect() : Promise<void>\n    {\n        if (this.conn == null)\n        {\n            this.alert(\"not logged on\");\n            return;\n        }\n\n        let response:any = await this.invoke(\"disconnect\",{});\n\n        if (response[\"status\"] != \"ok\")\n            this.alert(JSON.stringify(response));\n\n        this.conn = null;\n        this.keepalive = 0;\n\n        this.app.appstate.transactionChange(false);\n        this.app.appstate.onDisconnect();\n    }\n\n\n    private async keepAlive()\n    {\n        if (this.conn != null && +this.keepalive > 0)\n        {\n            let response:any = null;\n            let body:any = {\"keep-alive\": true};\n\n            await this.client.post<any>(this.url+\"/\"+this.conn+\"/ping\",body).toPromise().then\n            (\n                data => {response = data},\n                error => {response = error}\n            )\n\n            if (response[\"status\"] != \"ok\")\n            {\n                this.keepalive = 0;\n                this.alert(JSON.stringify(response),\"KeepAlive stopped\");\n            }\n\n            setTimeout(() => {this.keepAlive()},this.keepalive*1000);\n        }\n    }\n\n\n    public async invokestmt(stmt:Statement) : Promise<any>\n    {\n        return(this.invoke(SQLType[stmt.type],stmt.build()));\n    }\n\n\n    public async invoke(cmd:string, body:any) : Promise<any>\n    {\n        let url:string = this.url + \"/\";\n        if (this.conn != null) url = url + this.conn + \"/\";\n\n        if (this.conn == null && cmd != \"connect\")\n            return({status: \"failed\", message: \"Not logged on\"});\n\n        if (cmd == \"lock\" || cmd == \"insert\" || cmd == \"update\" || cmd == \"delete\")\n            this.app.appstate.transactionChange(true);\n\n        let stid:number = this.stmtid++;\n        let start:number = new Date().getTime();\n\n        this.running.set(stid,start);\n        setTimeout(() => {this.showwait()},+this.waitlim + +10);\n\n        return(\n            this.client.post<any>(url+cmd,body).toPromise().then\n            (\n                data => {return(this.onReply(stid,data));},\n                error => {return(this.onReply(stid,error));}\n            )\n        );\n    }\n\n\n    private onReply(stid:number, data:any) : any\n    {\n        let response:any = null;\n\n        this.running.delete(stid);\n        this.showwait();\n\n        if (!(data instanceof HttpErrorResponse)) response = data;\n        else response = {status: \"failed\", error: \"500\", message: JSON.stringify(data.message)};\n        return(response);\n    }\n\n\n    private alert(msg:string, title?:string) : void\n    {\n        if (title == null) title = \"Database Call Failed\";\n        MessageBox.show(this.app,msg,title);\n    }\n\n\n    private showwait() : void\n    {\n        let now:number = new Date().getTime();\n        let min:number = now;\n\n        this.running.forEach((start) =>\n        {\n            if (+start < +min) min = start;\n        });\n\n        let show:boolean = false;\n        if (now - min > +this.waitlim) show = true;\n\n        if (show) Wait.show(this.app);\n        else      Wait.close(this.app);\n    }\n}","import { Menu } from \"../menu/Menu\";\nimport { FormImpl } from \"../forms/FormImpl\";\nimport { ComponentRef } from \"@angular/core\";\nimport { MessageBox } from \"../popup/MessageBox\";\nimport { MenuHandler } from \"../menu/MenuHandler\";\nimport { DefaultMenu } from \"../menu/DefaultMenu\";\nimport { Connection } from \"../database/Connection\";\nimport { DropDownMenu } from \"../menu/DropDownMenu\";\nimport { ApplicationImpl } from \"./ApplicationImpl\";\nimport { FormDefinitions } from \"../annotations/FormDefinitions\";\n\n\nexport class ApplicationState\n{\n    public menu:Menu = null;\n    public form:FormImpl = null;\n    public connection:Connection;\n    public transaction:boolean = false;\n    public appmenu:ComponentRef<DropDownMenu> = null;\n    public forms:Map<number,FormImpl> = new Map<number,FormImpl>();\n    public menus:Map<number,MenuHandler> = new Map<number,MenuHandler>();\n\n\n    constructor(private app:ApplicationImpl)\n    {\n        this.menu = new DefaultMenu();\n        this.connection = new Connection(app);\n    }\n\n\n    public addForm(form:FormImpl) : void\n    {\n        this.forms.set(form.guid,form);\n    }\n\n\n    public dropForm(form:FormImpl) : void\n    {\n        this.forms.delete(form.guid);\n    }\n\n\n    public addMenu(menu:Menu) : void\n    {\n        let mhdl:MenuHandler = menu.getHandler();\n        this.menus.set(mhdl.guid,mhdl);\n    }\n\n\n    public dropMenu(menu:Menu) : void\n    {\n        if (menu != null)\n        {\n            let mhdl:MenuHandler = menu.getHandler();\n            this.menus.delete(mhdl.guid);\n        }\n    }\n\n\n    public async clearAllForms()\n    {\n        this.forms.forEach((form) => {form.clear()});\n    }\n\n\n    public async onConnect() : Promise<boolean>\n    {\n        this.menus.forEach((mhdl) => {mhdl.onConnect()});\n\n        let forms:FormImpl[] = [];\n        this.forms.forEach(async (form) => {forms.push(form)});\n\n        for (let f = 0; f < forms.length; f++)\n        {\n            let funcs:string[] = FormDefinitions.getOnConnect(forms[f].name);\n            for(let i = 0; i < funcs.length; i++) await this.app.execfunc(forms[f],funcs[i]);\n        }\n\n        return(true);\n    }\n\n\n    public transactionChange(trans:boolean) : void\n    {\n        if (!trans)\n            this.forms.forEach((form) => {form.onCommit()});\n\n        if (trans+\"\" != this.transaction+\"\")\n        {\n            this.transaction = trans;\n            this.menus.forEach((mhdl) => {mhdl.onTransactionChange()});\n        }\n    }\n\n\n    public async onDisconnect() : Promise<boolean>\n    {\n        this.menus.forEach((mhdl) => {mhdl.onDisconnect()});\n\n        let forms:FormImpl[] = [];\n        this.forms.forEach(async (form) => {forms.push(form)});\n\n        for (let f = 0; f < forms.length; f++)\n        {\n            let funcs:string[] = FormDefinitions.getOnDisconnect(forms[f].name);\n            for(let i = 0; i < funcs.length; i++) await this.app.execfunc(forms[f],funcs[i]);\n        }\n\n        return(true);\n    }\n\n\n    public get connected() : boolean\n    {\n        return(this.connection.connected);\n    }\n\n\n    public alert(message:string, title?:string, width?:string, height?:string) : void\n    {\n        MessageBox.show(this.app,message,title,width,height);\n    }\n}","import { FormImpl } from \"./FormImpl\";\nimport { FormUtil } from \"./FormUtil\";\nimport { Utils } from \"../utils/Utils\";\nimport { InstanceID } from \"./InstanceID\";\nimport { ComponentRef } from \"@angular/core\";\nimport { FormInstance } from \"./FormInstance\";\nimport { FormsControl } from \"./FormsControl\";\nimport { WindowOptions } from \"./WindowOptions\";\n\n\nexport class InstanceControl\n{\n    private utils:Utils = new Utils();\n    private forms:Map<string,FormInstance>;\n    private futil:FormUtil = new FormUtil();\n\n    constructor(private ctrl:FormsControl) {}\n\n\n    public setFormsDefinitions(forms:Map<string,FormInstance>)\n    {\n        this.forms = forms;\n    }\n\n\n    public getNewInstance(form:any, modal?:WindowOptions) : InstanceID\n    {\n        let name:string = this.utils.getName(form);\n        if (name == null) return(null);\n\n        let def:FormInstance = this.forms.get(name);\n        if (def == null) return(null);\n\n        let ref:ComponentRef<any> = this.ctrl.createForm(def.component);\n        if (ref == null) return(null);\n\n        let impl:FormImpl = ref.instance[\"_impl_\"];\n\n        if (modal == null) modal = def.windowdef;\n        modal = this.futil.complete(modal,true);\n\n        let id:InstanceID =\n        {\n            ref: ref,\n            impl: impl,\n            name: def.name,\n            modalopts: modal\n        }\n\n        impl.setInstanceID(id);\n\n        return(id);\n    }\n\n\n    public getInstance(id:InstanceID) : FormInstance\n    {\n        let def:FormInstance = this.forms.get(id.name);\n        let instance:FormInstance = this.futil.clone(def);\n        if (id.ref == null) id.ref = this.ctrl.createForm(def.component);\n\n        instance.formref = id.ref;\n        instance.windowopts = id.modalopts;\n\n        return(instance);\n    }\n\n\n    public closeInstance(id:InstanceID, destroy:boolean) : void\n    {\n        let inst:FormInstance = this.getInstance(id);\n\n        if (destroy)\n        {\n            inst.formref.destroy();\n            inst.windowopts = null;\n            inst.formref = null;\n        }\n    }\n}","import { FieldType } from \"./FieldType\";\nimport { keymap } from \"../keymap/KeyMap\";\nimport { RecordState } from \"../blocks/Record\";\nimport { BlockImpl } from \"../blocks/BlockImpl\";\nimport { FieldInstance } from \"./FieldInstance\";\nimport { FieldDefinition } from \"./FieldDefinition\";\n\n\nexport class Field\n{\n    private row$:number;\n    private name$:string;\n    private seq:number = 0;;\n    private value$:any = \"\";\n    private block$:BlockImpl;\n    private def:FieldDefinition;\n    private current$:boolean = false;\n    private enabled$:boolean = false;\n    private field:FieldInstance = null;\n    private fields$:FieldInstance[] = [];\n    private cfields$:FieldInstance[] = [];\n    private state$:RecordState = RecordState.na;\n    private ids:Map<string,FieldInstance> = new Map<string,FieldInstance>();\n    private index:Map<string,FieldInstance> = new Map<string,FieldInstance>();\n\n    constructor(name:string, row:number)\n    {\n        this.row$ = row;\n        this.name$ = name;\n    }\n\n    public get name() : string\n    {\n        return(this.name$);\n    }\n\n    public get row() : number\n    {\n        return(this.row$);\n    }\n\n    public set block(block:BlockImpl)\n    {\n        this.block$ = block;\n    }\n\n    public get block() : BlockImpl\n    {\n        return(this.block$);\n    }\n\n    public get fields() : FieldInstance[]\n    {\n        return(this.fields$);\n    }\n\n\n    public get cfields() : FieldInstance[]\n    {\n        return(this.cfields$);\n    }\n\n    public set valid(valid:boolean)\n    {\n        this.fields.forEach((inst) => {inst.valid = valid;});\n        if (this.current) this.cfields.forEach((inst) => {inst.valid = valid;});\n    }\n\n    public getInstance(guid:string)\n    {\n        return(this.index.get(guid));\n    }\n\n    public getFirstInstance() : FieldInstance\n    {\n        if (this.fields.length > 0)\n            return(this.fields[0]);\n\n        if (this.current && this.cfields.length > 0)\n        {\n            let inst:FieldInstance = this.cfields[0];\n            inst.row = this.row;\n            return(inst);\n        }\n\n        return(null);\n    }\n\n    public get state() : RecordState\n    {\n        return(this.state$);\n    }\n\n    public get readonly() : boolean\n    {\n        for (let i = 0; i < this.fields.length; i++)\n        {\n            if (this.fields[i].enabled)\n            {\n                if (!this.fields[i].readonly)\n                    return(false);\n            }\n        }\n\n        if (this.current$)\n        {\n            for (let i = 0; i < this.cfields.length; i++)\n            {\n                if (this.cfields[i].enabled)\n                {\n                    if (!this.cfields[i].readonly)\n                        return(false);\n                }\n            }\n        }\n\n        return(true);\n    }\n\n    public get current() : boolean\n    {\n        return(this.current$);\n    }\n\n    public set current(flag:boolean)\n    {\n        this.current$ = flag;\n\n        if (!flag) this.cfields.forEach((inst) =>\n        {\n            inst.value = null;\n            inst.disable();\n        });\n        else this.cfields.forEach((inst) =>\n        {\n            inst.parent = this;\n            inst.row = this.row;\n            inst.value = this.value$;\n\n            inst.state = this.state;\n            inst.readonly = this.readonly;\n\n            inst.enable();\n        });\n    }\n\n    public get value() : any\n    {\n        return(this.value$);\n    }\n\n    public set value(value:any)\n    {\n        this.value$ = value;\n        this.fields.forEach((inst) => {inst.value = value;});\n        if (this.current) this.cfields.forEach((inst) => {inst.value = value;});\n    }\n\n    public get enabled() : boolean\n    {\n        return(this.enabled$);\n    }\n\n    public focus() : boolean\n    {\n        if (this.field != null && this.field.enabled)\n        {\n            if (this.field.focus())\n                return(true);\n        }\n\n        for (let i = 0; i < this.fields.length; i++)\n        {\n            if (this.fields[i].enabled)\n            {\n                if (this.fields[i].focus())\n                    return(true);\n            }\n        }\n\n        if (this.current$)\n        {\n            for (let i = 0; i < this.cfields.length; i++)\n            {\n                if (this.cfields[i].enabled)\n                {\n                    if (this.cfields[i].focus())\n                        return(true);\n                }\n            }\n        }\n\n        return(false);\n    }\n\n    public add(field:FieldInstance) : void\n    {\n        field.parent = this;\n\n        if (field.row == -1)\n        {\n            this.cfields.push(field);\n            if (field.guid == null) field.guid = \"c:\"+(this.seq++);\n        }\n        else\n        {\n            this.fields.push(field);\n            field.guid = \"f:\"+(this.seq++);\n        }\n\n        this.index.set(field.guid,field);\n\n        if (field.id.length > 0)\n            this.ids.set(field.id,field);\n    }\n\n    public get definition() : FieldDefinition\n    {\n        return(this.def);\n    }\n\n    public setDefinition(def:FieldDefinition, cascade:boolean)\n    {\n        this.def = def;\n\n        if (cascade)\n        {\n            for (let i = 0; i < this.fields.length; i++)\n                this.fields[i].definition = def;\n\n            for (let i = 0; i < this.cfields.length; i++)\n                this.cfields[i].definition = def;\n        }\n    }\n\n\n    public set state(state:RecordState)\n    {\n        this.state$ = state;\n        this.fields.forEach((field) => {field.state = state;});\n        if (this.current) this.cfields.forEach((field) => {field.state = state;});\n    }\n\n\n    public enable(readonly:boolean) : void\n    {\n        this.enabled$ = true;\n        this.fields.forEach((field) => {field.readonly = readonly; field.enable();});\n        if (this.current) this.cfields.forEach((field) => {field.readonly = readonly; field.enable();});\n    }\n\n\n    public disable() : void\n    {\n        this.enabled$ = false;\n        this.fields.forEach((field) => {field.disable()});\n        if (this.current) this.cfields.forEach((field) =>  {field.disable()});\n    }\n\n\n    public validate() : boolean\n    {\n        let valid:boolean = true;\n        let inst:FieldInstance = null;\n\n        for (let i = 0;  i < this.fields.length; i++)\n        {\n            inst = this.fields[i];\n\n            if (!this.fields[i].validate())\n            {\n                valid = false;\n                break;\n            }\n        }\n\n        if (valid && this.current)\n        {\n            for (let i = 0;  i < this.cfields.length; i++)\n            {\n                inst = this.cfields[i];\n\n                if (!this.cfields[i].validate())\n                {\n                    valid = false;\n                    break;\n                }\n            }\n        }\n\n        this.valid = valid;\n        if (inst != null) this.copy(inst);\n\n        return(valid);\n    }\n\n\n    public async onEvent(event:any, field:FieldInstance, type:string, key?:keymap)\n    {\n        if (type == \"blur\") this.field = null;\n        if (type == \"focus\") this.field = field;\n        if (type == \"cchange\" || type == \"change\") this.copy(field);\n        if (this.block$ != null) this.block$.onEvent(event,field,type,key);\n    }\n\n\n    public copy(field:FieldInstance)\n    {\n        this.value$ = field.value;\n\n        this.fields.forEach((inst) =>\n        {if (inst != field) inst.value = this.value$;});\n\n        this.cfields.forEach((inst) =>\n        {if (inst != field) inst.value = this.value$;});\n    }\n}","import { Field } from \"../input/Field\";\nimport { FieldInstance } from \"../input/FieldInstance\";\n\n\nexport class Container\n{\n    private fields$:FieldInstance[] = [];\n    private blocks:Map<string,ContainerBlock> = new Map<string,ContainerBlock>();\n\n    public register(field:FieldInstance) : void\n    {\n        let bname:string = field.block;\n        let block:ContainerBlock = this.blocks.get(bname);\n\n        if (block == null)\n        {\n            block = new ContainerBlock(bname);\n            this.blocks.set(bname,block);\n        }\n\n        block.add(field);\n        block.fields.push(field);\n        this.fields$.push(field);\n    }\n\n    public get fields() : FieldInstance[]\n    {\n        return(this.fields$);\n    }\n\n    public getBlock(block:string) : ContainerBlock\n    {\n        return(this.blocks.get(block.toLowerCase()));\n    }\n\n    public getBlocks() : ContainerBlock[]\n    {\n        let blocks:ContainerBlock[] = [];\n        this.blocks.forEach((blk) => {blocks.push(blk)});\n        return(blocks);\n    }\n\n    public finish() : void\n    {\n        this.blocks.forEach((block) => {block[\"finish\"]();});\n    }\n}\n\nexport class ContainerBlock\n{\n    private name$:string;\n    private rows$:number = 0;\n    private fields$:FieldInstance[] = [];\n    private current$:FieldInstance[] = [];\n    private records$:Map<number,ContainerRecord> = new Map<number,ContainerRecord>();\n\n    constructor(name:string)\n    {\n        this.name$ = name;\n    }\n\n    public get name() : string\n    {\n        return(this.name$);\n    }\n\n    public get rows() : number\n    {\n        return(this.rows$);\n    }\n\n    public add(field:FieldInstance) : void\n    {\n        let row:number = field.row;\n\n        if (field.row == -1)\n        {\n            this.current$.push(field);\n            return;\n        }\n\n        let rec:ContainerRecord = this.records$.get(+row);\n\n        if (rec == null)\n        {\n            rec = new ContainerRecord(row);\n            this.records$.set(+row,rec);\n\n            if (field.row > this.rows$)\n                this.rows$ = field.row;\n        }\n\n        rec.add(field);\n    }\n\n    public get fields() : FieldInstance[]\n    {\n        return(this.fields$);\n    }\n\n    public get records() : ContainerRecord[]\n    {\n        let recs:ContainerRecord[] = [];\n        this.records$.forEach((rec) => {recs.push(rec)});\n        let sorted:ContainerRecord[] = recs.sort((a,b) => {return(a.row - b.row)});\n        return(sorted);\n    }\n\n    public getRecord(row:number) : ContainerRecord\n    {\n        return(this.records$.get(+row));\n    }\n\n    private finish() : void\n    {\n        if (this.rows$ == 0)\n        {\n            let rec:ContainerRecord = new ContainerRecord(0);\n            this.records$.set(0,rec);\n\n            this.current$.forEach((field) =>\n            {\n                field.row = 0;\n                rec.add(field);\n            });\n\n            this.current$ = [];\n        }\n        else\n        {\n            this.records$.forEach((rec) =>\n            {\n                this.current$.forEach((inst) =>\n                {\n                    let group:Field = rec.index.get(inst.name);\n                    if (group != null) group.add(inst)\n                    else rec.add(inst);\n                });\n            });\n        }\n    }\n}\n\n\nexport class ContainerRecord\n{\n    public row:number;\n    public fields:Field[] = [];\n    public index:Map<string,Field> = new Map<string,Field>();\n\n    constructor(row:number)\n    {\n        this.row = row;\n    }\n\n    public add(field:FieldInstance) : void\n    {\n        let group:Field = this.index.get(field.name);\n\n        if (group == null)\n        {\n            group = new Field(field.name,this.row);\n            this.index.set(field.name,group);\n            this.fields.push(group);\n        }\n\n        group.add(field);\n    }\n}","import { Container } from \"./Container\";\nimport { Builder } from \"../utils/Builder\";\n\n\nexport class ContainerControl\n{\n    private container:Container;\n\n    constructor(private builder:Builder) {}\n\n\n    public setContainer(container?:Container) : void\n    {\n        if (container == null) container = new Container();\n        this.container = container;\n    }\n\n\n    public getContainer() : Container\n    {\n        let cont:Container = this.container;\n        return(cont);\n    }\n\n\n    public dropContainer() : void\n    {\n        this.container = null;\n    }\n}","import { Config } from \"./Config\";\nimport { Menu } from \"../menu/Menu\";\nimport { Context } from \"./Context\";\nimport { Wait } from \"../utils/Wait\";\nimport { Builder } from \"../utils/Builder\";\nimport { Application } from \"./Application\";\nimport { FormList } from \"../menu/FormList\";\nimport { MenuArea } from \"../menu/MenuArea\";\nimport { FormArea } from \"../forms/FormArea\";\nimport { FormImpl } from \"../forms/FormImpl\";\nimport { ComponentRef } from \"@angular/core\";\nimport { InstanceID } from \"../forms/InstanceID\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { MenuFactory } from \"../menu/MenuFactory\";\nimport { Container } from \"../container/Container\";\nimport { DropDownMenu } from \"../menu/DropDownMenu\";\nimport { Connection } from \"../database/Connection\";\nimport { FormInstance } from '../forms/FormInstance';\nimport { FormsControl } from \"../forms/FormsControl\";\nimport { ApplicationState } from \"./ApplicationState\";\nimport { WindowOptions } from \"../forms/WindowOptions\";\nimport { Key, keymap, KeyMapper } from \"../keymap/KeyMap\";\nimport { FormDefinition } from \"../forms/FormsDefinition\";\nimport { WindowListener } from \"../events/WindowListener\";\nimport { InstanceControl } from \"../forms/InstanceControl\";\nimport { FormDefinitions } from \"../annotations/FormDefinitions\";\nimport { ContainerControl } from \"../container/ContainerControl\";\nimport { DatabaseDefinitions } from \"../annotations/DatabaseDefinitions\";\n\n\nexport class ApplicationImpl\n{\n    private app:Application;\n    private ready:number = 2;\n    private config$:Config = null;\n    private marea:MenuArea = null;\n    private apptitle:string = null;\n    private formlist:FormList = null;\n    private mfactory:MenuFactory = null;\n    private formsctl:FormsControl = null;\n    private state:ApplicationState = null;\n    private contctl:ContainerControl = null;\n    private instances:InstanceControl = null;\n\n\n    constructor(ctx:Context, public client:HttpClient, public builder:Builder)\n    {\n        this.app = ctx.app;\n        this.config$ = ctx.conf;\n\n        this.enable();\n        this.loadConfig();\n\n        this.state = new ApplicationState(this);\n        this.contctl = new ContainerControl(builder);\n        this.mfactory = new MenuFactory(this.builder);\n        this.formsctl = new FormsControl(this,builder);\n        this.instances = new InstanceControl(this.formsctl);\n        this.setFormsDefinitions(FormDefinitions.getForms());\n        this.state.appmenu = this.createmenu(this.state.menu);\n    }\n\n\n    private async loadConfig()\n    {\n        await this.config$.ready();\n\n        if (this.config$.others.hasOwnProperty(\"title\"))\n            this.setTitle(this.config$.others[\"title\"]);\n\n        if (this.config$.others.hasOwnProperty(\"theme\"))\n            this.config$.setTheme(this.config$.others[\"theme\"]);\n\n        this.ready--;\n        this.showLinkedForm();\n    }\n\n\n    public get config() : Config\n    {\n        return(this.config$);\n    }\n\n\n    public enable() : void\n    {\n        WindowListener.add(\"app\",this,\"keydown\");\n    }\n\n\n    public disable() : void\n    {\n        WindowListener.remove(\"app\",\"keydown\");\n    }\n\n\n    public get appstate() : ApplicationState\n    {\n        return(this.state);\n    }\n\n\n    public getApplication() :Application\n    {\n        return(this.app);\n    }\n\n\n    public setTitle(title:string)\n    {\n        this.apptitle = title;\n        this.showTitle(title);\n    }\n\n\n    public close() : void\n    {\n        this.closeform(this.state.form,true);\n    }\n\n\n    public setMenu(menu:Menu) : void\n    {\n        this.deletemenu(this.state.menu);\n        this.state.menu = menu;\n        this.state.appmenu = this.createmenu(menu);\n        this.showMenu(this.state.appmenu);\n    }\n\n\n    public getMenu() : Menu\n    {\n        return(this.state.menu);\n    }\n\n\n    public showTitle(title:string) : void\n    {\n        if (title == null) title = this.apptitle;\n        document.title = title;\n    }\n\n\n    public showPath(name:string, path:string) : void\n    {\n        let state = {additionalInformation: 'None'};\n        let url:string = window.location.protocol + '//' + window.location.host;\n        window.history.replaceState(state,name,url+path);\n    }\n\n\n    public getFormsList() : FormInstance[]\n    {\n        return(this.formsctl.getFormsList());\n    }\n\n\n    public getFormsDefinitions() : Map<string,FormInstance>\n    {\n        return(this.formsctl.getFormsDefinitions());\n    }\n\n\n    public setFormList(formlist:FormList) : void\n    {\n        this.formlist = formlist;\n    }\n\n\n    public setMenuArea(area:MenuArea) : void\n    {\n        this.marea = area;\n        this.showMenu(this.state.appmenu);\n    }\n\n\n    public setFormArea(area:FormArea) : void\n    {\n        this.formsctl.setFormArea(area);\n        this.ready--;\n    }\n\n\n    public setContainer(container?:Container) : void\n    {\n        this.contctl.setContainer(container);\n    }\n\n\n    public getContainer() : Container\n    {\n        return(this.contctl.getContainer());\n    }\n\n\n    public dropContainer() : void\n    {\n        this.contctl.dropContainer();\n    }\n\n\n    public get connection() : Connection\n    {\n        return(this.appstate.connection);\n    }\n\n\n    public get connected() : boolean\n    {\n        return(this.appstate.connected);\n    }\n\n\n    public async disconnect() : Promise<void>\n    {\n        await this.appstate.connection.disconnect();\n        this.getCurrentForm()?.focus();\n    }\n\n\n    public async newForm(impl:FormImpl)\n    {\n        let funcs:string[] = FormDefinitions.getOnInit(impl.name);\n        for(let i = 0; i < funcs.length; i++)  await this.execfunc(impl,funcs[i]);\n\n        funcs = FormDefinitions.getOnShow(impl.name);\n        for(let i = 0; i < funcs.length; i++)  await this.execfunc(impl,funcs[i]);\n\n        impl.onShow();\n    }\n\n\n    public async preform(impl:FormImpl, parameters:Map<string,any>, formdef:FormInstance, path:boolean)\n    {\n        impl.setParameters(parameters);\n\n        if (!impl.initiated())\n        {\n            impl.path = formdef.path;\n            impl.title = formdef.title;\n\n            this.state.addForm(impl);\n            this.showTitle(formdef.title);\n\n            if (path) this.showPath(impl.name,formdef.path);\n            return;\n        }\n\n        this.showTitle(impl.title);\n        if (path) this.showPath(impl.name,impl.path);\n\n        let funcs:string[] = FormDefinitions.getOnShow(impl.name);\n        for(let i = 0; i < funcs.length; i++)  await this.execfunc(impl,funcs[i]);\n\n        impl.onShow();\n    }\n\n\n    private async postform(impl:FormImpl, destroy:boolean)\n    {\n        impl.onHide();\n\n        let funcs:string[] = FormDefinitions.getOnHide(impl.name);\n        for(let i = 0; i < funcs.length; i++)  await this.execfunc(impl,funcs[i]);\n\n        if (destroy)\n        {\n            this.state.dropForm(impl);\n            let funcs:string[] = FormDefinitions.getOnDestroy(impl.name);\n            for(let i = 0; i < funcs.length; i++) await this.execfunc(impl,funcs[i]);\n        }\n    }\n\n\n    public async execfunc(impl:FormImpl, func:string)\n    {\n        try\n        {\n            await impl.form[func]();\n        }\n        catch (error)\n        {\n            console.log(error);\n        }\n    }\n\n\n    public async callform(form:any, destroy:boolean, parameters?:Map<string,any>)\n    {\n        if (this.ready != 0)\n        {\n            setTimeout(() => {this.callform(form,destroy,parameters);},10);\n            return;\n        }\n\n        if (this.state.form != null)\n        {\n            // Make sure changes has been validated\n            if (!await this.state.form.validate()) return;\n\n            // get current form in chain\n            let curr:FormImpl = this.state.form.getChain();\n\n            // let form handle the showform\n            await curr.callform(form,destroy,parameters);\n        }\n    }\n\n\n    public getCurrentForm() : FormImpl\n    {\n        if (this.ready != 0)\n            return(null);\n\n        if (this.state.form == null)\n            return(null);\n\n        return(this.state.form.getChain());\n    }\n\n\n    public async showform(form:any, destroy:boolean, parameters?:Map<string,any>)\n    {\n        if (this.ready != 0)\n        {\n            setTimeout(() => {this.showform(form,destroy,parameters);},10);\n            return;\n        }\n\n        if (this.state.form != null)\n        {\n            // Make sure changes has been validated\n            if (!await this.state.form.validate()) return;\n\n            // if form has called anoother form\n            let curr:FormImpl = this.state.form.getChain();\n\n            if (curr != this.state.form)\n            {\n                // let form handle the showform\n                curr.showform(form,destroy,parameters);\n                return;\n            }\n\n            if (this.state.form.getModalWindow() != null)\n                return;\n\n            this.closeform(this.state.form,false);\n        }\n\n        if (destroy) this.formsctl.closeform(form,destroy);\n        let formdef:FormInstance = this.getFormInstance(form);\n\n        if (formdef == null) return;\n        let impl:FormImpl = formdef.formref.instance[\"_impl_\"];\n        await this.preform(impl,parameters,formdef,true);\n\n        this.state.form = impl;\n        let fmenu:ComponentRef<DropDownMenu> = impl.getDropDownMenu();\n\n        if (!formdef.windowopts?.wizard) this.showMenu(fmenu);\n        DropDownMenu.setForm(fmenu,formdef.formref.instance);\n\n        this.formsctl.display(formdef);\n    }\n\n\n    public showinstance(inst:FormInstance) : void\n    {\n        if (this.ready == 0) this.formsctl.display(inst);\n        else setTimeout(() => {this.showinstance(inst);},10);\n    }\n\n\n    public closeform(impl:FormImpl, destroy:boolean) : void\n    {\n        if (impl == null) return;\n        this.postform(impl,destroy);\n        this.formsctl.closeform(impl.name,destroy);\n\n        if (this.state.appmenu != null)\n            DropDownMenu.setForm(this.state.appmenu,null);\n\n        this.showPath(\"\",\"\");\n        this.showTitle(null);\n        this.state.form = null;\n\n        this.showMenu(this.state.appmenu);\n    }\n\n\n    public getFormInstance(form:any) : FormInstance\n    {\n        return(this.formsctl.getFormInstance(form));\n    }\n\n\n    public getNewInstance(form:any, modal?:WindowOptions) : InstanceID\n    {\n        return(this.instances.getNewInstance(form,modal));\n    }\n\n\n    public getInstance(id:InstanceID) : FormInstance\n    {\n        return(this.instances.getInstance(id));\n    }\n\n\n    public closeInstance(id:InstanceID, destroy:boolean) : void\n    {\n        this.postform(id.impl,destroy);\n        this.instances.closeInstance(id,destroy);\n    }\n\n\n    public showMenu(menu:ComponentRef<DropDownMenu>) : void\n    {\n        if (this.marea != null)\n            this.marea.display(menu);\n    }\n\n\n    public deletemenu(menu:Menu) : void\n    {\n        this.state.dropMenu(menu);\n    }\n\n\n    public createmenu(menu:Menu) : ComponentRef<DropDownMenu>\n    {\n        if (menu == null) return(null);\n\n        this.state.addMenu(menu);\n        let ddmenu:ComponentRef<DropDownMenu> = this.mfactory.create(menu);\n\n        return(ddmenu);\n    }\n\n\n    private setFormsDefinitions(forms:FormDefinition[]) : void\n    {\n        for(let i = 0; i < forms.length; i++)\n        {\n            let fname:string = forms[i].component.name.toLowerCase();\n            forms[i].windowopts = FormDefinitions.getWindowOpts(fname);\n            forms[i].databaseusage = DatabaseDefinitions.getFormUsage(fname);\n        }\n\n        let formsmap:Map<string,FormInstance> =\n            this.formsctl.setFormsDefinitions(forms);\n\n        this.instances.setFormsDefinitions(formsmap);\n    }\n\n\n    private showLinkedForm() : void\n    {\n        if (this.ready != 0)\n        {\n            // Make time for application setup\n            setTimeout(() => {this.showLinkedForm()},500);\n            return;\n        }\n\n        let form:string = decodeURI(window.location.pathname);\n\n        if (form.length > 0)\n            form = this.formsctl.findFormByPath(form);\n\n        if (form != null)\n        {\n            let inst:FormInstance = this.formsctl.getFormsDefinitions().get(form);\n\n            if (inst == null || !inst.navigable)\n            {\n                this.showPath(\"\",\"\");\n                return;\n            }\n\n            let params:Map<string,any> = new Map<string,any>();\n            let urlparams = new URLSearchParams(window.location.search);\n            urlparams.forEach((value,key) => {params.set(key,value)});\n            this.showform(form,false,params);\n        }\n    }\n\n\n    public async onEvent(event:any)\n    {\n        if (Wait.waiting())\n            return;\n\n        let keydef:Key =\n        {\n            code  : event.keyCode,\n            alt   : event.altKey,\n            ctrl  : event.ctrlKey,\n            meta  : event.metaKey,\n            shift : event.shiftKey\n        }\n\n        let map:string = KeyMapper.map(keydef);\n        let key:keymap = KeyMapper.keymap(map);\n\n        if (key == keymap.connect)\n        {\n            this.app.connect();\n            return;\n        }\n\n        if (key == keymap.disconnect)\n        {\n            this.app.disconnect();\n            return;\n        }\n\n        if\n        (\n            key == keymap.close           ||\n            key == keymap.delete          ||\n            key == keymap.listval         ||\n            key == keymap.commit          ||\n            key == keymap.rollback        ||\n            key == keymap.clearform       ||\n            key == keymap.insertafter     ||\n            key == keymap.insertbefore    ||\n            key == keymap.enterquery      ||\n            key == keymap.executequery\n        )\n        {\n            event.preventDefault();\n            let form:FormImpl = this.getCurrentForm();\n            if (form != null) form.sendkey(event,key);\n        }\n    }\n}","import { KeyCodes } from \"./KeyCodes\";\nimport { KeyMap, KeyMapper } from \"./KeyMap\";\n\nexport class MacKeyMap implements KeyMap\n{\n    zoom:string = KeyMapper.map({code: 90, ctrl: true});\n    close:string = KeyMapper.map({code: 87, ctrl: true});\n\n    undo:string = KeyMapper.map({code: 90, meta: true});\n    paste:string = KeyMapper.map({code: 86, meta: true});\n\n    enter:string = KeyMapper.map({code: KeyCodes.enter});\n    escape:string = KeyMapper.map({code: KeyCodes.escape});\n\n    listval:string = KeyMapper.map({code: 76, shift: true, ctrl: true});\n\n    clearblock:string = KeyMapper.map({code: KeyCodes.escape, ctrl: true});;\n    clearform:string = KeyMapper.map({code: KeyCodes.escape, shift: true, ctrl: true});\n\n    insertafter:string = KeyMapper.map({code: 73, ctrl: true});\n    insertbefore:string = KeyMapper.map({code: 73, shift:true, ctrl: true});\n\n    delete:string = KeyMapper.map({code: 68, ctrl: true});\n    dublicate:string = KeyMapper.map({code: 86, ctrl: true});\n\n    commit:string = KeyMapper.map({code: KeyCodes.enter, ctrl: true});\n    rollback:string = KeyMapper.map({code: KeyCodes.f1, ctrl: true, shift: true});\n\n    connect:string = KeyMapper.map({code: 67, ctrl: true});\n    disconnect:string = KeyMapper.map({code: 67, shift:true, ctrl: true});\n\n    nextfield:string = KeyMapper.map({code: KeyCodes.tab});\n    prevfield:string = KeyMapper.map({code: KeyCodes.tab, shift: true});\n\n    nextrecord:string = KeyMapper.map({code: KeyCodes.down, shift: false});\n    prevrecord:string = KeyMapper.map({code: KeyCodes.up, shift: false});\n\n    nextblock:string = KeyMapper.map({code: KeyCodes.down, shift: true});\n    prevblock:string = KeyMapper.map({code: KeyCodes.up, shift: true});\n\n    pageup:string = KeyMapper.map({code: 80, ctrl: true, shift: true});\n    pagedown:string = KeyMapper.map({code: 80, ctrl: true, shift: false});\n\n    enterquery:string = KeyMapper.map({code: 81, ctrl: true});\n    executequery:string = KeyMapper.map({code: 81, shift: true, ctrl: true});\n\n    map:string;\n\n\n    public constructor()\n    {\n        this.map =\n        `\n            <table>\n                <tr><td class=\"kmtd\">   connect            </td><td>   ctrl-c             </td></tr>\n                <tr><td class=\"kmtd\">   disconnect         </td><td>   ctrl-shift-c       </td></tr>\n                <tr><td class=\"kmtd\">   close              </td><td>   ctrl-w             </td></tr>\n                <tr><td class=\"kmtd\">   zoom               </td><td>   ctrl-z             </td></tr>\n                <tr><td class=\"kmtd\">   datepicker         </td><td>   ctrl-shift-l       </td></tr>\n                <tr><td class=\"kmtd\">   list of values     </td><td>   ctrl-shift-l       </td></tr>\n                <tr><td class=\"kmtd\">   clear block        </td><td>   ctrl-escape        </td></tr>\n                <tr><td class=\"kmtd\">   clear form         </td><td>   ctrl-shift-escape  </td></tr>\n                <tr><td class=\"kmtd\">   insert after       </td><td>   ctrl-i             </td></tr>\n                <tr><td class=\"kmtd\">   insert before      </td><td>   ctrl-shift-i       </td></tr>\n                <tr><td class=\"kmtd\">   delete             </td><td>   ctrl-d             </td></tr>\n                <tr><td class=\"kmtd\">   commit             </td><td>   ctrl-enter         </td></tr>\n                <tr><td class=\"kmtd\">   rollback           </td><td>   ctrl-shift-escape  </td></tr>\n                <tr><td class=\"kmtd\">   next record        </td><td>   key-down           </td></tr>\n                <tr><td class=\"kmtd\">   previous record    </td><td>   key-up             </td></tr>\n                <tr><td class=\"kmtd\">   page down          </td><td>   ctrl-p             </td></tr>\n                <tr><td class=\"kmtd\">   page up            </td><td>   ctrl-shift-p       </td></tr>\n                <tr><td class=\"kmtd\">   next block         </td><td>   shift-key-down     </td></tr>\n                <tr><td class=\"kmtd\">   previous block     </td><td>   shift-key-up       </td></tr>\n                <tr><td class=\"kmtd\">   enter query        </td><td>   ctrl-q             </td></tr>\n                <tr><td class=\"kmtd\">   execute query      </td><td>   ctrl-shift-q       </td ></tr>\n            </table>\n\n            <style>\n              .kmtd\n              {\n                  width: 150px;\n                  display: block;\n              }\n            </style>\n        `;\n    }\n}","import { KeyCodes } from \"./KeyCodes\";\nimport { KeyMap, KeyMapper } from \"./KeyMap\";\n\nexport class WinKeyMap implements KeyMap\n{\n    zoom:string = KeyMapper.map({code: 90, ctrl: true});\n    close:string = KeyMapper.map({code: 87, ctrl: true});\n\n    undo:string = KeyMapper.map({code: 90, meta: true});\n    paste:string = KeyMapper.map({code: 86, ctrl: true});\n\n    enter:string = KeyMapper.map({code: KeyCodes.enter});\n    escape:string = KeyMapper.map({code: KeyCodes.escape});\n\n    listval:string = KeyMapper.map({code: KeyCodes.f9});\n\n    clearblock:string = KeyMapper.map({code: KeyCodes.f5, shift: true});;\n    clearform:string = KeyMapper.map({code: KeyCodes.f7, shift: true});\n\n    insertafter:string = KeyMapper.map({code: KeyCodes.insert});\n    insertbefore:string = KeyMapper.map({code: KeyCodes.insert, shift:true});\n\n    dublicate:string = KeyMapper.map({code: 86, ctrl: true});\n    delete:string = KeyMapper.map({code: KeyCodes.delete, ctrl: true});\n\n    commit:string = KeyMapper.map({code: KeyCodes.f10, ctrl: false, shift: false});\n    rollback:string = KeyMapper.map({code: KeyCodes.f10, ctrl: false, shift: true});\n\n    connect:string = KeyMapper.map({code: 67, ctrl: true});\n    disconnect:string = KeyMapper.map({code: 67, shift:true, ctrl: true});\n\n    nextfield:string = KeyMapper.map({code: KeyCodes.tab});\n    prevfield:string = KeyMapper.map({code: KeyCodes.tab, shift: true});\n\n    nextrecord:string = KeyMapper.map({code: KeyCodes.down, shift: false});\n    prevrecord:string = KeyMapper.map({code: KeyCodes.up, shift: false});\n\n    prevblock:string = KeyMapper.map({code: KeyCodes.pageup, shift: true});\n    nextblock:string = KeyMapper.map({code: KeyCodes.pagedown, shift: true});\n\n    pageup:string = KeyMapper.map({code: KeyCodes.pageup});\n    pagedown:string = KeyMapper.map({code: KeyCodes.pagedown});\n\n    enterquery:string = KeyMapper.map({code: KeyCodes.f7});\n    executequery:string = KeyMapper.map({code: KeyCodes.f8});\n\n    map:string;\n\n\n    public constructor()\n    {\n        this.map =\n        `\n            <table>\n                <tr><td class=\"kmtd\">   connect            </td><td>   ctrl-c             </td></tr>\n                <tr><td class=\"kmtd\">   disconnect         </td><td>   ctrl-shift-c       </td></tr>\n                <tr><td class=\"kmtd\">   close              </td><td>   ctrl-w             </td></tr>\n                <tr><td class=\"kmtd\">   zoom               </td><td>   ctrl-z             </td></tr>\n                <tr><td class=\"kmtd\">   datepicker         </td><td>   F9                 </td></tr>\n                <tr><td class=\"kmtd\">   list of values     </td><td>   F9                 </td></tr>\n                <tr><td class=\"kmtd\">   clear block        </td><td>   shift-F5           </td></tr>\n                <tr><td class=\"kmtd\">   clear form         </td><td>   shift-F7           </td></tr>\n                <tr><td class=\"kmtd\">   insert after       </td><td>   insert             </td></tr>\n                <tr><td class=\"kmtd\">   insert before      </td><td>   shift-insert       </td></tr>\n                <tr><td class=\"kmtd\">   delete             </td><td>   delete             </td></tr>\n                <tr><td class=\"kmtd\">   commit             </td><td>   F10                </td></tr>\n                <tr><td class=\"kmtd\">   rollback           </td><td>   shift-F10          </td></tr>\n                <tr><td class=\"kmtd\">   next record        </td><td>   key-down           </td></tr>\n                <tr><td class=\"kmtd\">   previous record    </td><td>   key-up             </td></tr>\n                <tr><td class=\"kmtd\">   page down          </td><td>   pagedown           </td></tr>\n                <tr><td class=\"kmtd\">   page up            </td><td>   pageup             </td></tr>\n                <tr><td class=\"kmtd\">   next block         </td><td>   shift-pagedown     </td></tr>\n                <tr><td class=\"kmtd\">   previous block     </td><td>   shift-pageup       </td></tr>\n                <tr><td class=\"kmtd\">   enter query        </td><td>   F7                 </td></tr>\n                <tr><td class=\"kmtd\">   execute query      </td><td>   F8                 </td ></tr>\n            </table>\n\n            <style>\n              .kmtd\n              {\n                  width: 150px;\n                  display: block;\n              }\n            </style>\n        `;\n    }\n}","export interface Theme\n{\n    name:string;\n    link:string;\n    text:string;\n    title:string;\n    topbar:string;\n    enabled:string;\n    disabled:string;\n    foldertree:string;\n    buttontext:string;\n    menuoption:string;\n    rowindicator:string;\n}\n\nexport class defaultTheme implements Theme\n{\n    public name:string = \"default\";\n\n    public link:string = \"blue\";\n    public text:string = \"black\";\n    public title:string = \"white\";\n    public topbar:string = \"#303f9f\";\n    public enabled:string = \"white\";\n    public disabled:string = \"silver\";\n    public menuoption:string = \"white\";\n    public buttontext:string = \"white\";\n    public foldertree:string = \"#303f9f\";\n    public rowindicator:string = \"#303f9f\";\n}\n\n\nexport class Indigo extends defaultTheme\n{\n    public name:string = \"indigo\";\n}\n\n\nexport class Grey extends defaultTheme\n{\n    public name:string = \"grey\";\n    public link:string = \"grey\";\n    public topbar:string = \"grey\";\n    public foldertree:string = \"grey\";\n    public rowindicator:string = \"grey\";\n}\n\n\nexport class Pink extends defaultTheme\n{\n    public name:string = \"pink\";\n    public link:string = \"#ff4081\";\n    public topbar:string = \"#ff4081\";\n    public foldertree:string = \"#ff4081\";\n    public rowindicator:string = \"#ff4081\";\n}\n\n\nexport class Yellow implements Theme\n{\n    public name:string = \"yellow\";\n\n    public link:string = \"grey\";\n    public text:string = \"black\";\n    public title:string = \"black\";\n    public topbar:string = \"yellow\";\n    public foldertree:string = \"grey\";\n    public enabled:string = \"black\";\n    public disabled:string = \"silver\";\n    public menuoption:string = \"black\";\n    public buttontext:string = \"black\";\n    public rowindicator:string = \"yellow\";\n}\n","import { dates } from \"../dates/dates\";\nimport { Injectable } from \"@angular/core\";\nimport { MacKeyMap } from \"../keymap/MacKeyMap\";\nimport { WinKeyMap } from \"../keymap/WinKeyMap\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { KeyMap, KeyMapper } from \"../keymap/KeyMap\";\nimport { Theme, Pink, Grey, Yellow, Indigo, defaultTheme } from \"./Themes\";\n\n\n@Injectable({\n    providedIn: 'root',\n})\n\n\nexport class Config\n{\n    private keymap:KeyMap;\n    private colors$:Theme;\n    private datefmt$:string;\n    private config:any = null;\n    private notifications:any[] = [];\n    private invoker:Promise<any> = null;\n    private caltitle:string = \"Calendar\";\n    private keymaphelp:string = \"Shortkeys\";\n    private themes:Map<string,Theme> = new Map<string,Theme>();\n    private lang:string = Intl.DateTimeFormat().resolvedOptions().locale;\n\n\n    constructor(private client:HttpClient)\n    {\n        this.load();\n        this.themes.set(\"pink\",new Pink());\n        this.themes.set(\"grey\",new Grey());\n        this.themes.set(\"indigo\",new Indigo());\n        this.themes.set(\"yellow\",new Yellow());\n        this.themes.set(\"default\",new defaultTheme());\n\n        let os:string = this.os();\n\n        if (os == \"Windows\") this.keymap = new WinKeyMap();\n        else                 this.keymap = new MacKeyMap();\n\n        KeyMapper.index(this.keymap);\n        this.colors = this.themes.get(\"default\");\n    }\n\n    private os() : string\n    {\n        let os:string = \"unknown\";\n\n        if (navigator.appVersion.indexOf(\"Mac\") != -1)   os=\"MacOS\";\n        if (navigator.appVersion.indexOf(\"X11\") != -1)   os=\"UNIX\";\n        if (navigator.appVersion.indexOf(\"Linux\") != -1) os=\"Linux\";\n        if (navigator.appVersion.indexOf(\"Win\") != -1)   os=\"Windows\";\n\n        return(os);\n    }\n\n    private async load()\n    {\n        this.invoker = this.client.get<any>(\"/assets/config/config.json\").toPromise();\n        this.invoker.then(data => {this.loaded(data);}, error => {this.config = {}; console.log(\"Loading config failed: \"+error)});\n    }\n\n    private loaded(config:any) : void\n    {\n        this.config = config;\n\n        this.datefmt$ = this.config[\"datefmt\"];\n        dates.setFormat(this.datefmt$);\n\n        if (this.config[\"locale\"] != null)\n            this.lang = this.config[\"locale\"];\n\n        if (this.config[\"calendar\"] != null)\n            this.caltitle = this.config[\"calendar\"];\n\n        if (this.config[\"keymap\"] != null)\n            this.keymaphelp = this.config[\"keymap\"];\n    }\n\n    public async ready() : Promise<boolean>\n    {\n        if (this.invoker != null)\n        {\n            await this.invoker;\n            this.invoker = null;\n        }\n\n        return(true);\n    }\n\n    public get locale() : string\n    {\n        return(this.lang);\n    }\n\n    public get datefmt() : string\n    {\n        return(this.datefmt$);\n    }\n\n    public set colors(theme:Theme)\n    {\n        this.colors$ = theme;\n    }\n\n    public get colors() : Theme\n    {\n        return(this.colors$);\n    }\n\n    public get others() : any\n    {\n        return(this.config);\n    }\n\n    public notify(instance:any, func:string) : void\n    {\n        this.notifications.push({instance: instance, func: func});\n    }\n\n    public setTheme(theme:string|Theme) : void\n    {\n        let ttheme:Theme = null;\n\n        if (typeof theme == 'object') ttheme = theme as Theme;\n        else                          ttheme = this.themes.get(theme);\n\n        if (ttheme != null)\n        {\n            this.colors = ttheme;\n            this.notifications.forEach((notify) => {notify.instance[notify.func]()});\n        }\n    }\n\n\n    public get keymapping() : KeyMap\n    {\n        return(this.keymap);\n    }\n\n\n    public get keymaptitle() : string\n    {\n        return(this.keymaphelp);\n    }\n\n\n    public get calendarname() : string\n    {\n        return(this.caltitle);\n    }\n}","import { Injectable, Injector, ComponentFactoryResolver, ComponentRef, ApplicationRef } from '@angular/core';\n\n@Injectable({\n    providedIn: 'root',\n})\n\n\nexport class Builder\n{\n    constructor(private resolver:ComponentFactoryResolver, private injector:Injector, private app:ApplicationRef) {}\n\n    public createComponent(component:any) : ComponentRef<any>\n    {\n        let cref:ComponentRef<any> = this.resolver.resolveComponentFactory(component).create(this.injector);\n        return(cref);\n    }\n\n\n    public getAppRef() : ApplicationRef\n    {\n        return(this.app);\n    }\n}\n","import { Theme } from \"./Themes\";\nimport { Config } from \"./Config\";\nimport { Menu } from \"../menu/Menu\";\nimport { Context } from \"./Context\";\nimport { Form } from \"../forms/Form\";\nimport { KeyMapHelp } from \"./KeyMapHelp\";\nimport { Builder } from \"../utils/Builder\";\nimport { Injectable } from '@angular/core';\nimport { FormImpl } from \"../forms/FormImpl\";\nimport { MessageBox } from \"../popup/MessageBox\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { LoginForm } from \"../database/LoginForm\";\nimport { ApplicationImpl } from \"./ApplicationImpl\";\nimport { PopupInstance } from \"../popup/PopupInstance\";\n\n\n@Injectable({\n    providedIn: 'root',\n})\n\nexport class Application\n{\n    private title$:string;\n    private _impl_:ApplicationImpl;\n    // dont rename impl as it is read behind the scenes\n\n\n    constructor(ctx:Context, private conf:Config, client:HttpClient, builder:Builder)\n    {\n        ctx.app = this;\n        ctx.conf = conf;\n        this._impl_ = new ApplicationImpl(ctx,client,builder);\n    }\n\n    public get title() : string\n    {\n        return(this.title$);\n    }\n\n    public set title(title:string)\n    {\n        this.title$ = title;\n        this._impl_.setTitle(title);\n    }\n\n    public get form() : Form\n    {\n        return(this._impl_.getCurrentForm()?.form);\n    }\n\n    public set menu(menu:Menu)\n    {\n        this._impl_.setMenu(menu);\n    }\n\n    public get menu() : Menu\n    {\n        return(this._impl_.getMenu());\n    }\n\n    public get transaction() : boolean\n    {\n        return(this._impl_.appstate.transaction);\n    }\n\n    public newform(form:any, parameters?:Map<string,any>)\n    {\n        this._impl_.showform(form,true,parameters);\n    }\n\n    public showform(form:any, parameters?:Map<string,any>)\n    {\n        this._impl_.showform(form,false,parameters);\n    }\n\n    public callform(form:any, parameters?:Map<string,any>)\n    {\n        this._impl_.callform(form,false,parameters);\n    }\n\n    public get colors() : Theme\n    {\n        return(this.conf.colors);\n    }\n\n    public set theme(theme:string|Theme)\n    {\n        setTimeout(() => {this.conf.setTheme(theme);},50);\n    }\n\n    public closeform(destroy?:boolean) : void\n    {\n        if (destroy == undefined) destroy = false;\n        let form:FormImpl = this._impl_.getCurrentForm();\n        if (form != null) form.close(destroy);\n    }\n\n    public connect() : void\n    {\n        if (!this._impl_.connected)\n        {\n            let pinst:PopupInstance = new PopupInstance();\n            pinst.display(this._impl_,LoginForm);\n        }\n    }\n\n    public async disconnect()\n    {\n        if (this._impl_.connected)\n        {\n            await this._impl_.appstate.clearAllForms();\n            await this._impl_.connection.rollback();\n            await this._impl_.disconnect();\n        }\n    }\n\n    public async commit()\n    {\n        if (!this._impl_.connected)\n            return;\n\n        let form:FormImpl = this._impl_.getCurrentForm();\n\n        if (form != null)\n        {\n            if (!await form.validate())\n                return;\n        }\n\n        this._impl_.connection.commit();\n    }\n\n    public async rollback()\n    {\n        if (this._impl_.connected)\n        {\n            await this._impl_.appstate.clearAllForms();\n            await this._impl_.connection.rollback();\n        }\n    }\n\n    public showKeyMap() : void\n    {\n        KeyMapHelp.show(this._impl_);\n    }\n\n    public alert(message:string, title?:string, width?:string, height?:string) : void\n    {\n        MessageBox.show(this._impl_,message,title,width,height);\n    }\n}","import { Wait } from './utils/Wait';\nimport { NgModule } from '@angular/core';\nimport { MenuArea } from './menu/MenuArea';\nimport { FormList } from './menu/FormList';\nimport { FormArea } from './forms/FormArea';\nimport { CommonModule } from \"@angular/common\";\nimport { LoginForm } from './database/LoginForm';\nimport { ModalWindow } from './forms/ModalWindow';\nimport { FieldInstance } from './input/FieldInstance';\nimport { HttpClientModule } from '@angular/common/http';\nimport { ListOfValuesImpl } from './listval/ListOfValuesImpl';\n\n\n@NgModule({\n    declarations: [FormList, FormArea, ModalWindow, MenuArea, LoginForm, FieldInstance, ListOfValuesImpl, Wait],\n    exports     : [FormList, FormArea, MenuArea, FieldInstance],\n    imports     : [CommonModule, HttpClientModule]\n})\n\n\nexport class FormsLibrary\n{\n}","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["window","parseimpl","format","formatimpl","Column"],"mappings":"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"}}}